!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/usr/local/google/home/jaeman/android/aosp/device/google/cuttlefish/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
#app-controls	host/frontend/webrtc_operator/assets/style.css	/^#app-controls {$/;"	i
#app-controls > div	host/frontend/webrtc_operator/assets/style.css	/^#app-controls > div {$/;"	s
#bluetooth-console-cmd-label	host/frontend/webrtc_operator/assets/style.css	/^#bluetooth-console-cmd-label {$/;"	i
#bluetooth-console-input	host/frontend/webrtc_operator/assets/style.css	/^#bluetooth-console-input {$/;"	i
#camera-control	host/frontend/webrtc_operator/assets/style.css	/^#camera-control {$/;"	i
#control-panel-custom-buttons	host/frontend/webrtc_operator/assets/style.css	/^#control-panel-custom-buttons {$/;"	i
#controls-and-displays	host/frontend/webrtc_operator/assets/style.css	/^#controls-and-displays {$/;"	i
#controls-and-displays > div	host/frontend/webrtc_operator/assets/style.css	/^#controls-and-displays > div {$/;"	s
#device-audio	host/frontend/webrtc_operator/assets/style.css	/^#device-audio {$/;"	i
#device-connection	host/frontend/webrtc_operator/assets/style.css	/^#device-connection {$/;"	i
#device-details-modal span	host/frontend/webrtc_operator/assets/style.css	/^#device-details-modal span {$/;"	s
#device-displays	host/frontend/webrtc_operator/assets/style.css	/^#device-displays {$/;"	i
#device-list .device-entry button	host/frontend/webrtc_operator/assets/index.css	/^#device-list .device-entry button {$/;"	s
#device-selector	host/frontend/webrtc_operator/assets/index.css	/^#device-selector {$/;"	i
#device-selector li.device-entry	host/frontend/webrtc_operator/assets/index.css	/^#device-selector li.device-entry {$/;"	c
#error-message	host/frontend/webrtc_operator/assets/style.css	/^#error-message {$/;"	i
#error-message-div	host/frontend/webrtc_operator/assets/style.css	/^#error-message-div {$/;"	i
#error-message.error	host/frontend/webrtc_operator/assets/style.css	/^#error-message.error {$/;"	c
#error-message.warning	host/frontend/webrtc_operator/assets/style.css	/^#error-message.warning {$/;"	c
#header	host/frontend/webrtc_operator/assets/style.css	/^#header {$/;"	i
#loader	host/frontend/webrtc_operator/assets/style.css	/^#loader {$/;"	i
#record-video-control	host/frontend/webrtc_operator/assets/style.css	/^#record-video-control {$/;"	i
#refresh-list	host/frontend/webrtc_operator/assets/index.css	/^#refresh-list {$/;"	i
#status-div	host/frontend/webrtc_operator/assets/style.css	/^#status-div {$/;"	i
#status-message	host/frontend/webrtc_operator/assets/style.css	/^#status-message {$/;"	i
#status-message.connected	host/frontend/webrtc_operator/assets/style.css	/^#status-message.connected {$/;"	c
#status-message.connecting	host/frontend/webrtc_operator/assets/style.css	/^#status-message.connecting {$/;"	c
#status-message.error	host/frontend/webrtc_operator/assets/style.css	/^#status-message.error {$/;"	c
.control-panel-column	host/frontend/webrtc_operator/assets/style.css	/^.control-panel-column {$/;"	c
.control-panel-column button	host/frontend/webrtc_operator/assets/style.css	/^.control-panel-column button {$/;"	s
.control-panel-column button.modal-button-opened	host/frontend/webrtc_operator/assets/style.css	/^.control-panel-column button.modal-button-opened {$/;"	c
.control-panel-column button:disabled	host/frontend/webrtc_operator/assets/style.css	/^.control-panel-column button:disabled {$/;"	s
.device-display	host/frontend/webrtc_operator/assets/style.css	/^.device-display {$/;"	c
.device-display-info	host/frontend/webrtc_operator/assets/style.css	/^.device-display-info {$/;"	c
.device-display-video	host/frontend/webrtc_operator/assets/style.css	/^.device-display-video {$/;"	c
.modal	host/frontend/webrtc_operator/assets/style.css	/^.modal {$/;"	c
.modal-close	host/frontend/webrtc_operator/assets/style.css	/^.modal-close {$/;"	c
.modal-header	host/frontend/webrtc_operator/assets/style.css	/^.modal-header {$/;"	c
.toggle-control	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control {$/;"	c
.toggle-control .toggle-control-icon	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control .toggle-control-icon {$/;"	c
.toggle-control .toggle-control-slider	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control .toggle-control-slider {$/;"	c
.toggle-control .toggle-control-slider:before	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control .toggle-control-slider:before {$/;"	c
.toggle-control .toggle-control-switch	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control .toggle-control-switch {$/;"	c
.toggle-control .toggle-control-switch input	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control .toggle-control-switch input {$/;"	s
.toggle-control input:checked + .toggle-control-slider	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control input:checked + .toggle-control-slider {$/;"	c
.toggle-control input:checked + .toggle-control-slider:before	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control input:checked + .toggle-control-slider:before {$/;"	c
.toggle-control input:focus + .toggle-control-slider	host/frontend/webrtc_operator/assets/controls.css	/^.toggle-control input:focus + .toggle-control-slider {$/;"	c
0	host/example_custom_actions/custom_action_config.json	/^			{$/;"	o	array:1.buttons
0	host/example_custom_actions/custom_action_config.json	/^	{$/;"	o
0	shared/config/cgroups.json	/^    {$/;"	o	array:Cgroups
0	shared/config/config_foldable.json	/^                                {$/;"	o	array:custom_actions.0.device_states
0	shared/config/config_foldable.json	/^                                {$/;"	o	array:custom_actions.1.device_states
0	shared/config/config_foldable.json	/^                {$/;"	o	array:custom_actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.0.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.1.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.10.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.11.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.12.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.13.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.14.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.15.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.16.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.17.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.18.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.19.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.2.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.20.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.21.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.22.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.23.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.24.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.25.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.26.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.27.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.28.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.29.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.3.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.30.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.4.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.5.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.6.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.7.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.8.Actions
0	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.9.Actions
0	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "LowIoPriority", "TimerSlackHigh" ]$/;"	s	array:AggregateProfiles.1.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "ProcessCapacityLow", "LowIoPriority", "TimerSlackHigh" /;"	s	array:AggregateProfiles.7.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "HighIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.2.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "ProcessCapacityHigh", "HighIoPriority", "TimerSlackNorma/;"	s	array:AggregateProfiles.8.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.3.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "ProcessCapacityMax", "MaxIoPriority", "TimerSlackNormal" /;"	s	array:AggregateProfiles.9.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "RealtimePerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.5.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "ServiceCapacityLow", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.10.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "ServiceCapacityRestricted", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.11.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "ServicePerformance", "LowIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.4.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.0.Profiles
0	shared/config/task_profiles.json	/^      "Profiles": [ "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.6.Profiles
0	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
0	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
1	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <DISPLAYTEXT id="1" cmd="21" menuId="01" text="D0228103012181820281028D1708662F54266/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <DISPLAYTEXT id="1" cmd="21" menuId="01" text="D03A8103012181820281028D2F08666E901A00550/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <SELECTITEM id="1" cmd="24" menuId="01" text="D0218103012400820281828F0A01806DFB52A083DC/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^    <SELECTITEM id="1" cmd="24" menuId="50" text="D02D8103012400820281828F0A018053E34EE48BBE7F6E/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <DISPLAYTEXT id="1" cmd="21" menuId="01" text="D0228103012181820281028D1708662F54266/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <DISPLAYTEXT id="1" cmd="21" menuId="01" text="D03A8103012181820281028D2F08666E901A00550/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <SELECTITEM id="1" cmd="24" menuId="01" text="D0218103012400820281828F0A01806DFB52A083DC/;"	i
1	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <SELECTITEM id="1" cmd="24" menuId="50" text="D02D8103012400820281828F0A018053E34EE48BBE7F6E/;"	i
1	host/example_custom_actions/custom_action_config.json	/^			{$/;"	o	array:1.buttons
1	host/example_custom_actions/custom_action_config.json	/^	{$/;"	o
1	shared/config/config_foldable.json	/^                {$/;"	o	array:custom_actions
1	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.28.Actions
1	shared/config/task_profiles.json	/^        {$/;"	o	array:Profiles.29.Actions
1	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "LowIoPriority", "TimerSlackHigh" ]$/;"	s	array:AggregateProfiles.1.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "ProcessCapacityLow", "LowIoPriority", "TimerSlackHigh" /;"	s	array:AggregateProfiles.7.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "HighIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.2.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "ProcessCapacityHigh", "HighIoPriority", "TimerSlackNorma/;"	s	array:AggregateProfiles.8.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.3.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "ProcessCapacityMax", "MaxIoPriority", "TimerSlackNormal" /;"	s	array:AggregateProfiles.9.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "RealtimePerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.5.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "ServiceCapacityLow", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.10.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "ServiceCapacityRestricted", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.11.Profiles
1	shared/config/task_profiles.json	/^      "Profiles": [ "ServicePerformance", "LowIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.4.Profiles
1	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
1	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
10	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
10	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
11	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
11	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
12	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
13	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
14	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
15	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
16	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
17	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
18	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
19	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
2	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <DISPLAYTEXT id="2" cmd="21" menuId="02" text="D01A8103012101820281028D0F0883DC53555/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <DISPLAYTEXT id="2" cmd="21" menuId="02" text="D05C8103012181820281028D510875358BDD53F77/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <DISPLAYTEXT id="2" cmd="21" menuId="02" text="D081BB8103012181820281028D81AF08201C00530/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^    <SELECTITEM id="2" cmd="24" menuId="4E" text="D04E810301240082028182850F80005500530049004D53/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <DISPLAYTEXT id="2" cmd="21" menuId="02" text="D01A8103012101820281028D0F0883DC53555/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <DISPLAYTEXT id="2" cmd="21" menuId="02" text="D05C8103012181820281028D510875358BDD53F77/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <DISPLAYTEXT id="2" cmd="21" menuId="02" text="D081BB8103012181820281028D81AF08201C00530/;"	i
2	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <SELECTITEM id="2" cmd="24" menuId="4E" text="D04E810301240082028182850F80005500530049004D53/;"	i
2	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "LowIoPriority", "TimerSlackHigh" ]$/;"	s	array:AggregateProfiles.1.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "ProcessCapacityLow", "LowIoPriority", "TimerSlackHigh" /;"	s	array:AggregateProfiles.7.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "HighIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.2.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "ProcessCapacityHigh", "HighIoPriority", "TimerSlackNorma/;"	s	array:AggregateProfiles.8.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.3.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "ProcessCapacityMax", "MaxIoPriority", "TimerSlackNormal" /;"	s	array:AggregateProfiles.9.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "RealtimePerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.5.Profiles
2	shared/config/task_profiles.json	/^      "Profiles": [ "ServicePerformance", "LowIoPriority", "TimerSlackNormal" ]$/;"	s	array:AggregateProfiles.4.Profiles
2	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
2	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
20	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
21	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
22	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
23	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
24	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
25	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
26	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
27	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
28	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
29	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
2F00	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^    <EF name="EF_DIR" id="2F00" structure="linear fixed">$/;"	i
2F00	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <EF name="EF_DIR" id="2F00" structure="linear fixed">$/;"	i
2F05	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^    <EF name="EF_PL" id="2F05" structure="transparent">$/;"	i
2F05	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <EF name="EF_PL" id="2F05" structure="transparent">$/;"	i
2FE2	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^    <EF name="EF_ICCID" id="2FE2" structure="transparent">$/;"	i
2FE2	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <EF name="EF_ICCID" id="2FE2" structure="transparent">$/;"	i
3	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <DISPLAYTEXT id="3" cmd="21" menuId="03" text="D02E8103012181820281028D23084E2D56FD79FB5/;"	i
3	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <DISPLAYTEXT id="3" cmd="21" menuId="03" text="D05E8103012181820281028D5308004F005400415/;"	i
3	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <DISPLAYTEXT id="3" cmd="21" menuId="03" text="D02E8103012181820281028D23084E2D56FD79FB5/;"	i
3	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <DISPLAYTEXT id="3" cmd="21" menuId="03" text="D05E8103012181820281028D5308004F005400415/;"	i
3	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "ProcessCapacityLow", "LowIoPriority", "TimerSlackHigh" /;"	s	array:AggregateProfiles.7.Profiles
3	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "ProcessCapacityHigh", "HighIoPriority", "TimerSlackNorma/;"	s	array:AggregateProfiles.8.Profiles
3	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "ProcessCapacityMax", "MaxIoPriority", "TimerSlackNormal" /;"	s	array:AggregateProfiles.9.Profiles
3	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
3	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
30	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
4	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
4	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
4300	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <File id="4300">$/;"	i
4318	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^    <File id="4318">$/;"	i
4F09	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <EF name="EF_PBC" id="4F09" structure="linear fixed">$/;"	i
4F09	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <EF name="EF_PBC" id="4F09" structure="linear fixed">$/;"	i
4F11	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <EF name="EF_ANR" id="4F11" structure="linear fixed">$/;"	i
4F11	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <EF name="EF_ANR" id="4F11" structure="linear fixed">$/;"	i
4F30	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <EF name="EF_PBR" id="4F30" structure="linear fixed">$/;"	i
4F30	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <EF name="EF_PBR" id="4F30" structure="linear fixed">$/;"	i
4F33	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <EF name="EF_IAP" id="4F33" structure="linear fixed">$/;"	i
4F33	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <EF name="EF_IAP" id="4F33" structure="linear fixed">$/;"	i
4F3A	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <EF name="EF_ADN" id="4F3A" structure="linear fixed">$/;"	i
4F3A	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <EF name="EF_ADN" id="4F3A" structure="linear fixed">$/;"	i
4F4C	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^            <EF name="EF_GAS" id="4F4C" structure="linear fixed">$/;"	i
4F4C	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^            <EF name="EF_GAS" id="4F4C" structure="linear fixed">$/;"	i
5	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
5	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
6	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
6	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
6F07	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <EF name="EF_IMSI" id="6F07" structure="transparent">$/;"	i
6F07	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <EF name="EF_IMSI" id="6F07" structure="transparent">$/;"	i
6F11	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^       <EF name="EF_VOICE_MAIL_INDICATOR_CPHS" id="6F11" structure="transparent">$/;"	i
6F11	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^       <EF name="EF_VOICE_MAIL_INDICATOR_CPHS" id="6F11" structure="transparent">$/;"	i
6F3B	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^       <EF name="EF_FDN" id="6F3B" structure="linear fixed">$/;"	i
6F3B	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^       <EF name="EF_FDN" id="6F3B" structure="linear fixed">$/;"	i
6F40	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <EF name="EF_MSISDN" id="6F40" structure="linear fixed">$/;"	i
6F40	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <EF name="EF_MSISDN" id="6F40" structure="linear fixed">$/;"	i
6F7B	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^       <EF name="EF_FPLMN" id="6F7B" structure="transparent">$/;"	i
6F7B	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^       <EF name="EF_FPLMN" id="6F7B" structure="transparent">$/;"	i
6FAD	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^       <EF name="EF_AD" id="6FAD" structure="transparent">$/;"	i
6FAD	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^       <EF name="EF_AD" id="6FAD" structure="transparent">$/;"	i
6FC7	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <EF name="EF_MBDN" id="6FC7" structure="linear fixed">$/;"	i
6FC7	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^       <EF name="EF_MBDN" id="6FC7" structure="linear fixed">$/;"	i
6FC9	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^        <EF name="EF_MBI" id="6FC9" structure="linear fixed">$/;"	i
6FC9	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^        <EF name="EF_MBI" id="6FC9" structure="linear fixed">$/;"	i
6FCA	host/commands/modem_simulator/files/iccprofile_for_sim0.xml	/^       <EF name="EF_MWIS" id="6FCA" structure="linear fixed">$/;"	i
6FCA	host/commands/modem_simulator/files/iccprofile_for_sim0_for_CtsCarrierApiTestCases.xml	/^       <EF name="EF_MWIS" id="6FCA" structure="linear fixed">$/;"	i
7	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
7	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
8	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
8	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
9	shared/config/task_profiles.json	/^    {$/;"	o	array:AggregateProfiles
9	shared/config/task_profiles.json	/^    {$/;"	o	array:Profiles
AB	host/commands/modem_simulator/sim_service.h	/^      AB = 6,  \/\/ All barring services$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
AB_OTA_UPDATER	shared/device.mk	/^AB_OTA_UPDATER := true$/;"	m
AC	host/commands/modem_simulator/sim_service.h	/^      AC = 8,  \/\/ All incoming barring services$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
ACESS_TECH_EC_GSM_IoT	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_EC_GSM_IoT   = 8,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_EGPRS	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_EGPRS        = 3,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_EUTRAN	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_EUTRAN       = 7,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_E_UTRA	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_E_UTRA       = 10,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_E_UTRAN	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_E_UTRAN      = 9,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_E_UTRA_NR	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_E_UTRA_NR    = 13$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_GSM	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_GSM          = 0,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_GSM_COMPACT	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_GSM_COMPACT  = 1,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_HSDPA	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_HSDPA        = 4,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_HSPA	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_HSPA         = 6,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_HSUPA	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_HSUPA        = 5,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_NG_RAN	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_NG_RAN       = 12,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_NR	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_NR           = 11,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACESS_TECH_UTRAN	host/commands/modem_simulator/network_service.h	/^      ACESS_TECH_UTRAN        = 2,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::AccessTechnoloy
ACQUIRE	common/libs/concurrency/thread_annotations.h	/^#define ACQUIRE(/;"	d
ACQUIRED_AFTER	common/libs/concurrency/thread_annotations.h	/^#define ACQUIRED_AFTER(/;"	d
ACQUIRED_BEFORE	common/libs/concurrency/thread_annotations.h	/^#define ACQUIRED_BEFORE(/;"	d
ACQUIRE_SHARED	common/libs/concurrency/thread_annotations.h	/^#define ACQUIRE_SHARED(/;"	d
ACTIVE	host/commands/modem_simulator/data_service.h	/^    enum CidState {ACTIVE, NO_ACTIVE};$/;"	e	enum:cuttlefish::DataService::PDPContext::CidState
AF_VSOCK	common/libs/fs/vm_sockets.h	/^#define AF_VSOCK /;"	d
AG	host/commands/modem_simulator/sim_service.h	/^      AG = 7,  \/\/ All outgoing barring services$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
AI	host/commands/modem_simulator/sim_service.h	/^      AI = 4,  \/\/ Barr all incoming calls$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
ALL_CF	host/commands/modem_simulator/sup_service.h	/^      ALL_CF      = 4,  \/\/ all call forwarding$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
ALL_CONDITIONAL_CF	host/commands/modem_simulator/sup_service.h	/^      ALL_CONDITIONAL_CF = 5, \/\/all conditional call forwarding$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
ALL_MATCHING_RULES_FAILED	guest/hals/ril/reference-libril/ril.h	/^    ALL_MATCHING_RULES_FAILED = 0x8CE,$/;"	e	enum:__anon0bfbaecf2f03
ANDROID_HARDWARE_CONFIRMATIONUI_V1_0_TRUSTY_CONFIRMATIONUI_H	guest/hals/confirmationui/TrustyConfirmationUI.h	/^#define ANDROID_HARDWARE_CONFIRMATIONUI_V1_0_TRUSTY_CONFIRMATIONUI_H$/;"	d
ANDROID_RIL_H	guest/hals/ril/reference-libril/ril.h	/^#define ANDROID_RIL_H /;"	d
ANDROID_RIL_INTERNAL_H	guest/hals/ril/reference-libril/ril_internal.h	/^#define ANDROID_RIL_INTERNAL_H$/;"	d
ANDROID_WAKE_LOCK_NAME	guest/hals/ril/reference-libril/ril.cpp	/^#define ANDROID_WAKE_LOCK_NAME /;"	d	file:
ANDROID_WAKE_LOCK_SECS	guest/hals/ril/reference-libril/ril.cpp	/^#define ANDROID_WAKE_LOCK_SECS /;"	d	file:
ANDROID_WAKE_LOCK_USECS	guest/hals/ril/reference-libril/ril.cpp	/^#define ANDROID_WAKE_LOCK_USECS /;"	d	file:
AO	host/commands/modem_simulator/sim_service.h	/^      AO = 1,  \/\/ Barr all outgoing calls$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
ARRAY	host/libs/confui/cbor.h	/^    ARRAY = 4,$/;"	e	enum:cuttlefish::confui::Cbor::Type
ASSERT_CAPABILITY	common/libs/concurrency/thread_annotations.h	/^#define ASSERT_CAPABILITY(/;"	d
ASSERT_SHARED_CAPABILITY	common/libs/concurrency/thread_annotations.h	/^#define ASSERT_SHARED_CAPABILITY(/;"	d
ASSERT_VALID_MSG_TYPE	host/libs/audio_connector/shm_layout.h	/^#define ASSERT_VALID_MSG_TYPE(/;"	d
ATCHANNEL_H	guest/hals/ril/reference-ril/atchannel.h	/^#define ATCHANNEL_H /;"	d
ATCommandType	guest/hals/ril/reference-ril/atchannel.h	/^} ATCommandType;$/;"	t	typeref:enum:__anon512a2c1f0103
ATLine	guest/hals/ril/reference-ril/atchannel.h	/^typedef struct ATLine  {$/;"	s
ATLine	guest/hals/ril/reference-ril/atchannel.h	/^} ATLine;$/;"	t	typeref:struct:ATLine
ATOI_NULL_HANDLED	guest/hals/ril/reference-libril/ril_service.cpp	/^#define ATOI_NULL_HANDLED(/;"	d	file:
ATOI_NULL_HANDLED_DEF	guest/hals/ril/reference-libril/ril_service.cpp	/^#define ATOI_NULL_HANDLED_DEF(/;"	d	file:
ATResponse	guest/hals/ril/reference-ril/atchannel.h	/^} ATResponse;$/;"	t	typeref:struct:__anon512a2c1f0208
ATUnsolHandler	guest/hals/ril/reference-ril/atchannel.h	/^typedef void (*ATUnsolHandler)(const char *s, const char *sms_pdu);$/;"	t	typeref:typename:void (*)(const char * s,const char * sms_pdu)
AT_CME_Error	guest/hals/ril/reference-ril/atchannel.h	/^} AT_CME_Error;$/;"	t	typeref:enum:__anon512a2c1f0303
AT_DEBUG	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_DEBUG /;"	d
AT_DUMP	guest/hals/ril/reference-ril/atchannel.c	/^void  AT_DUMP(const char*  prefix __unused, const char*  buff, int  len)$/;"	f	typeref:typename:void
AT_ERROR_CHANNEL_CLOSED	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_ERROR_CHANNEL_CLOSED /;"	d
AT_ERROR_COMMAND_PENDING	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_ERROR_COMMAND_PENDING /;"	d
AT_ERROR_GENERIC	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_ERROR_GENERIC /;"	d
AT_ERROR_INVALID_RESPONSE	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_ERROR_INVALID_RESPONSE /;"	d
AT_ERROR_INVALID_THREAD	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_ERROR_INVALID_THREAD /;"	d
AT_ERROR_TIMEOUT	guest/hals/ril/reference-ril/atchannel.h	/^#define AT_ERROR_TIMEOUT /;"	d
AT_TOK_H	guest/hals/ril/reference-ril/at_tok.h	/^#define AT_TOK_H /;"	d
AUDIOSERVER_MULTILIB	vsoc_arm64_only/BoardConfig.mk	/^AUDIOSERVER_MULTILIB := first$/;"	m
AUDIOSERVER_MULTILIB	vsoc_x86_64_only/BoardConfig.mk	/^AUDIOSERVER_MULTILIB := first$/;"	m
AUTH_CONTEXT_EAP_AKA	guest/hals/ril/reference-ril/reference-ril.c	/^#define AUTH_CONTEXT_EAP_AKA /;"	d	file:
AUTH_CONTEXT_EAP_SIM	guest/hals/ril/reference-ril/reference-ril.c	/^#define AUTH_CONTEXT_EAP_SIM /;"	d	file:
A_CNXN	host/frontend/webrtc_operator/assets/js/adb.js	/^const A_CNXN = 0x4e584e43;$/;"	C
A_OKAY	host/frontend/webrtc_operator/assets/js/adb.js	/^const A_OKAY = 0x59414b4f;$/;"	C
A_OPEN	host/frontend/webrtc_operator/assets/js/adb.js	/^const A_OPEN = 0x4e45504f;$/;"	C
A_WRTE	host/frontend/webrtc_operator/assets/js/adb.js	/^const A_WRTE = 0x45545257;$/;"	C
Abort	guest/hals/confirmationui/guest_session.cpp	/^Return<void> GuestSession::Abort() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:Return<void>
Abort	host/libs/confui/session.cc	/^void Session::Abort() {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:void
AbortOperation	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::AbortOperation(const AbortOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
AbortOperation	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::AbortOperation(const AbortOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
AbsolutePath	common/libs/utils/files.cpp	/^std::string AbsolutePath(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
Accept	common/libs/fs/shared_fd.cpp	/^FileInstance* FileInstance::Accept(struct sockaddr* addr,$/;"	f	class:cuttlefish::FileInstance	typeref:typename:FileInstance *
Accept	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Accept(const FileInstance& listener) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
Accept	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Accept(const FileInstance& listener, struct sockaddr* addr,$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
Accept	common/libs/utils/tcp_socket.cpp	/^ClientSocket ServerSocket::Accept() {$/;"	f	class:cuttlefish::ServerSocket	typeref:typename:ClientSocket
AcceptClient	host/libs/audio_connector/server.cpp	/^std::unique_ptr<AudioClientConnection> AudioServer::AcceptClient($/;"	f	class:cuttlefish::AudioServer	typeref:typename:std::unique_ptr<AudioClientConnection>
AcceptIncomingConnection	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::AcceptIncomingConnection() {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
AccessTechnoloy	host/commands/modem_simulator/network_service.h	/^    enum AccessTechnoloy {$/;"	g	struct:cuttlefish::NetworkService::NetworkRegistrationStatus
AcquireResource	host/libs/allocd/resource.cpp	/^bool EthernetIface::AcquireResource() {$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:bool
AcquireResource	host/libs/allocd/resource.cpp	/^bool MobileIface::AcquireResource() {$/;"	f	class:cuttlefish::MobileIface	typeref:typename:bool
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.0
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.1
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.10
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.11
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.12
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.13
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.14
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.15
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.16
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.17
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.18
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.19
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.2
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.20
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.21
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.22
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.23
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.24
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.25
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.26
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.27
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.28
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.29
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.3
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.30
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.4
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.5
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.6
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.7
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.8
Actions	shared/config/task_profiles.json	/^      "Actions": [$/;"	a	object:Profiles.9
ActiveAudioLayer	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::ActiveAudioLayer(AudioLayer* audioLayer) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
AdbChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^AdbChannelHandler::AdbChannelHandler($/;"	f	class:cuttlefish::webrtc_streaming::AdbChannelHandler
AdbChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^class AdbChannelHandler : public webrtc::DataChannelObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming	file:
AdbConfig	host/libs/config/adb/adb.h	/^class AdbConfig {$/;"	c	namespace:cuttlefish
AdbConfigComponent	host/libs/config/adb/data.cpp	/^fruit::Component<AdbConfig> AdbConfigComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<AdbConfig>
AdbConfigFlag	host/libs/config/adb/adb.h	/^class AdbConfigFlag : public FlagFeature {};$/;"	c	namespace:cuttlefish
AdbConfigFlagComponent	host/libs/config/adb/flags.cpp	/^AdbConfigFlagComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<AdbConfig,ConfigFlag>,AdbConfigFlag>
AdbConfigFlagImpl	host/libs/config/adb/flags.cpp	/^class AdbConfigFlagImpl : public AdbConfigFlag {$/;"	c	namespace:cuttlefish::__anon459bf0e40111	file:
AdbConfigFragment	host/libs/config/adb/adb.h	/^class AdbConfigFragment : public ConfigFragment {};$/;"	c	namespace:cuttlefish
AdbConfigFragmentComponent	host/libs/config/adb/config.cpp	/^AdbConfigFragmentComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<AdbConfig>,AdbConfigFragment>
AdbConfigFragmentImpl	host/libs/config/adb/config.cpp	/^class AdbConfigFragmentImpl : public AdbConfigFragment {$/;"	c	namespace:cuttlefish::__anone963d72d0111	file:
AdbConfigImpl	host/libs/config/adb/data.cpp	/^class AdbConfigImpl : public AdbConfig {$/;"	c	namespace:cuttlefish	file:
AdbConnect	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^bool AdbConnect(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:bool
AdbConnector	host/libs/config/adb/launch.cpp	/^class AdbConnector : public CommandSource {$/;"	c	namespace:cuttlefish::__anon7ea6a0320111	file:
AdbConnectorBinary	host/libs/config/known_paths.cpp	/^std::string AdbConnectorBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
AdbDisconnect	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^bool AdbDisconnect(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:bool
AdbHandler	host/frontend/webrtc/adb_handler.cpp	/^AdbHandler::AdbHandler($/;"	f	class:cuttlefish::webrtc_streaming::AdbHandler
AdbHandler	host/frontend/webrtc/adb_handler.h	/^struct AdbHandler {$/;"	s	namespace:cuttlefish::webrtc_streaming
AdbHelper	host/libs/config/adb/launch.cpp	/^class AdbHelper {$/;"	c	namespace:cuttlefish::__anon7ea6a0320111	file:
AdbMode	host/libs/config/adb/adb.h	/^enum class AdbMode {$/;"	g	namespace:cuttlefish
AdbModeToString	host/libs/config/adb/strings.cpp	/^std::string AdbModeToString(AdbMode mode) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
AdbSendMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^bool AdbSendMessage(const std::string& message) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:bool
AdbSendMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^bool AdbSendMessage(cuttlefish::SharedFD sock, const std::string& message) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:bool
AdbdStarted	host/commands/kernel_log_monitor/kernel_log_server.h	/^  AdbdStarted = 5,$/;"	e	enum:monitor::Event
Add	host/frontend/webrtc/audio_handler.cpp	/^size_t AudioHandler::HoldingBuffer::Add(const volatile uint8_t* data,$/;"	f	class:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:size_t
Add	host/frontend/webrtc_operator/client_handler.cpp	/^std::string PollConnectionStore::Add(std::shared_ptr<PollConnectionHandler> handler) {$/;"	f	class:cuttlefish::PollConnectionStore	typeref:typename:std::string
AddAddrInfo	common/libs/net/netlink_request.cpp	/^void NetlinkRequest::AddAddrInfo(int32_t if_index, int prefix_len) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
AddAudio	host/frontend/webrtc/lib/client_handler.cpp	/^bool ClientHandler::AddAudio($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:bool
AddAudioStream	host/frontend/webrtc/lib/streamer.cpp	/^std::shared_ptr<AudioSink> Streamer::AddAudioStream(const std::string& label) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:std::shared_ptr<AudioSink>
AddCORSHeaders	host/libs/websocket/websocket_server.cpp	/^bool AddCORSHeaders(struct lws* wsi, unsigned char** buffer_ptr,$/;"	f	namespace:cuttlefish::__anon8185be2f0111	typeref:typename:bool
AddCamera	host/frontend/webrtc/lib/streamer.cpp	/^CameraController* Streamer::AddCamera(unsigned int port, unsigned int cid) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:CameraController *
AddCommand	host/commands/run_cvd/process_monitor.cc	/^void ProcessMonitor::AddCommand(Command cmd) {$/;"	f	class:cuttlefish::ProcessMonitor	typeref:typename:void
AddCommands	host/commands/run_cvd/process_monitor.h	/^  void AddCommands(T&& commands) {$/;"	f	class:cuttlefish::ProcessMonitor	typeref:typename:void
AddControlSocket	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddControlSocket(const std::string& control_socket) {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddCustomActionServer	host/frontend/webrtc/connection_observer.cpp	/^void CfConnectionObserverFactory::AddCustomActionServer($/;"	f	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:void
AddCustomControlPanelButton	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::AddCustomControlPanelButton(const std::string& command,$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
AddCustomControlPanelButtonWithDeviceStates	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::AddCustomControlPanelButtonWithDeviceStates($/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
AddCustomControlPanelButtonWithShellCommand	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::AddCustomControlPanelButtonWithShellCommand($/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
AddDisplay	host/frontend/webrtc/lib/client_handler.cpp	/^bool ClientHandler::AddDisplay($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:bool
AddDisplay	host/frontend/webrtc/lib/local_recorder.cpp	/^void LocalRecorder::AddDisplay($/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder	typeref:typename:void
AddDisplay	host/frontend/webrtc/lib/streamer.cpp	/^std::shared_ptr<VideoSink> Streamer::AddDisplay(const std::string& label,$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:std::shared_ptr<VideoSink>
AddEncodedSink	host/frontend/webrtc/lib/video_track_source_impl.h	/^  void AddEncodedSink($/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:void
AddEvent	host/frontend/webrtc/connection_observer.cpp	/^  void AddEvent(uint16_t type, uint16_t code, int32_t value) override {$/;"	f	struct:cuttlefish::InputEventBufferImpl	typeref:typename:void	file:
AddFilesToConfig	host/commands/fetcher/fetch_cvd.cc	/^void AddFilesToConfig(FileSource purpose, const Build& build,$/;"	f	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:void
AddGateway	host/libs/allocd/alloc_utils.cpp	/^bool AddGateway(const std::string& name, const std::string& gateway,$/;"	f	namespace:cuttlefish	typeref:typename:bool
AddHttpHeaders	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::AddHttpHeaders(unsigned char** p,$/;"	f	class:WsConnectionImpl	typeref:typename:void
AddHvcConsoleReadOnly	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddHvcConsoleReadOnly(const std::string& output) {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddHvcReadOnly	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddHvcReadOnly(const std::string& output) {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddHvcReadWrite	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddHvcReadWrite(const std::string& output,$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddHvcSink	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddHvcSink() {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddIfInfo	common/libs/net/netlink_request.cpp	/^void NetlinkRequest::AddIfInfo(int32_t if_index, bool operational) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
AddInt	common/libs/net/netlink_request.h	/^  void AddInt(uint16_t type, T value) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
AddInterface	host/libs/allocd/resource_manager.cpp	/^bool ResourceManager::AddInterface(const std::string& iface, IfaceType ty,$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:bool
AddJsonCustomActionConfigs	host/libs/config/custom_actions.cpp	/^  bool AddJsonCustomActionConfigs(const Json::Value& custom_action_array) {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:bool	file:
AddMacAddress	common/libs/net/netlink_request.cpp	/^void NetlinkRequest::AddMacAddress(const std::array<unsigned char, 6>& address) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
AddOrUpdateSink	host/frontend/webrtc/lib/client_handler.cpp	/^  void AddOrUpdateSink(rtc::VideoSinkInterface<webrtc::VideoFrame> *sink,$/;"	f	class:cuttlefish::webrtc_streaming::ClientVideoTrackImpl	typeref:typename:void	file:
AddParameter	common/libs/utils/subprocess.h	/^  void AddParameter(Args... args) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
AddPendingIceCandidates	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::AddPendingIceCandidates() {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
AddRngEntropy	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::AddRngEntropy(const AddEntropyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
AddRngEntropy	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::AddRngEntropy(const AddEntropyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
AddRngEntropy	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t AddRngEntropy(const uint8_t* buf,$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
AddRngEntropy	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::AddRngEntropy($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
AddRngEntropy	host/commands/secure_env/tpm_random_source.cpp	/^keymaster_error_t TpmRandomSource::AddRngEntropy($/;"	f	class:cuttlefish::TpmRandomSource	typeref:typename:keymaster_error_t
AddSerial	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddSerial(const std::string& output,$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddSerialConsoleReadOnly	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddSerialConsoleReadOnly(const std::string& output) {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddSerialConsoleReadWrite	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddSerialConsoleReadWrite(const std::string& output,$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddSerialSink	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::AddSerialSink() {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
AddSink	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::AddSink(webrtc::AudioTrackSinkInterface* sink) {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
AddString	common/libs/net/netlink_request.cpp	/^void NetlinkRequest::AddString(uint16_t type, const std::string& value) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
AddSubscriber	host/frontend/webrtc/kernel_log_events_handler.cpp	/^int KernelLogEventsHandler::AddSubscriber($/;"	f	class:cuttlefish::KernelLogEventsHandler	typeref:typename:int
AddTap	host/libs/vm_manager/crosvm_builder.cpp	/^SharedFD CrosvmBuilder::AddTap(const std::string& tap_name) {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:SharedFD
AddTapIface	host/libs/allocd/alloc_utils.cpp	/^bool AddTapIface(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
Address	common/libs/net/network_interface.h	/^  const std::string& Address() const {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:const std::string &
AdjustSignalStrengthValue	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::AdjustSignalStrengthValue(int& value,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
Adjusting APT Sources for Multiarch	multiarch-howto.md	/^# Adjusting APT Sources for Multiarch$/;"	c
AfterSelect	host/commands/kernel_log_monitor/kernel_log_server.cc	/^void KernelLogServer::AfterSelect(const cuttlefish::SharedFDSet& fd_read) {$/;"	f	class:monitor::KernelLogServer	typeref:typename:void
AggregateImage	host/libs/image_aggregator/image_aggregator.cc	/^void AggregateImage(const std::vector<ImagePartition>& partitions,$/;"	f	namespace:cuttlefish	typeref:typename:void
AggregateProfiles	shared/config/task_profiles.json	/^  "AggregateProfiles": [$/;"	a
AidlPackageCheck	tests/hal/hal_implementation_test.cpp	/^struct AidlPackageCheck {$/;"	s	file:
Alias	common/libs/utils/flag_parser.cpp	/^Flag Flag::Alias(const FlagAlias& alias) && {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag
Alias	common/libs/utils/flag_parser.cpp	/^Flag& Flag::Alias(const FlagAlias& alias) & {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag &
AlignStride	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^inline int AlignStride(int width) {$/;"	f	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:int
AlignToPartitionSize	host/libs/image_aggregator/image_aggregator.cc	/^uint64_t AlignToPartitionSize(uint64_t size) {$/;"	f	namespace:cuttlefish	typeref:typename:uint64_t
AlignToPowerOf2	common/libs/utils/size_utils.h	/^constexpr uint64_t AlignToPowerOf2(uint64_t val, uint8_t align_log) {$/;"	f	namespace:cuttlefish	typeref:typename:uint64_t
AlignedSize	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t AlignedSize() const { return AlignToPartitionSize(size); }$/;"	f	struct:cuttlefish::__anon02806fd80111::PartitionInfo	typeref:typename:std::uint64_t	file:
Allocate	host/commands/secure_env/fragile_tpm_storage.cpp	/^bool FragileTpmStorage::Allocate(const Json::Value& key, uint16_t size) {$/;"	f	class:cuttlefish::FragileTpmStorage	typeref:typename:bool
Allocate	host/commands/secure_env/insecure_fallback_storage.cpp	/^bool InsecureFallbackStorage::Allocate(const Json::Value& key, uint16_t size) {$/;"	f	class:cuttlefish::InsecureFallbackStorage	typeref:typename:bool
AllocateNetworkInterfaces	host/commands/assemble_cvd/alloc.cc	/^std::optional<IfaceConfig> AllocateNetworkInterfaces() {$/;"	f	namespace:cuttlefish	typeref:typename:std::optional<IfaceConfig>
AllocateResourceID	host/libs/allocd/resource_manager.cpp	/^uint32_t ResourceManager::AllocateResourceID() {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:uint32_t
AllocateSessionID	host/libs/allocd/resource_manager.cpp	/^uint32_t ResourceManager::AllocateSessionID() {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:uint32_t
AllocateShm	host/libs/audio_connector/server.cpp	/^ScopedMMap AllocateShm(size_t size, const std::string& name, SharedFD* shm_fd) {$/;"	f	namespace:cuttlefish::__anon8078843e0111	typeref:typename:ScopedMMap
Answer	host/libs/config/cuttlefish_config.h	/^  enum Answer {$/;"	g	class:cuttlefish::CuttlefishConfig
Append	common/libs/net/netlink_request.h	/^  template <typename T> T* Append(const T& data) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:T *
AppendAad	host/commands/secure_env/hmac_serializable.cpp	/^std::optional<std::vector<uint8_t>> HmacSerializable::AppendAad($/;"	f	class:cuttlefish::HmacSerializable	typeref:typename:std::optional<std::vector<uint8_t>>
AppendBinaryRepresentation	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^static void AppendBinaryRepresentation(std::string& buf, const T& data) {$/;"	f	typeref:typename:void	file:
AppendCommandArguments	host/commands/run_cvd/launch_streamer.cpp	/^  void AppendCommandArguments(Command& cmd) {$/;"	f	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:void	file:
AppendData	host/libs/websocket/websocket_handler.cpp	/^void AppendData(const char* data, size_t len, std::string& buffer) {$/;"	f	namespace:cuttlefish::__anon79ba8e560111	typeref:typename:void
AppendDataIn	host/libs/websocket/websocket_handler.cpp	/^void DynHandler::AppendDataIn(void* data, size_t len) {$/;"	f	class:cuttlefish::DynHandler	typeref:typename:void
AppendDataOut	host/libs/websocket/websocket_handler.cpp	/^void DynHandler::AppendDataOut(const std::string& data) {$/;"	f	class:cuttlefish::DynHandler	typeref:typename:void
AppendInNetworkByteOrder	common/libs/utils/tcp_socket.cpp	/^void AppendInNetworkByteOrder(Message* msg, const std::int32_t w) {$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendInNetworkByteOrder	common/libs/utils/tcp_socket.cpp	/^void AppendInNetworkByteOrder(Message* msg, const std::string& str) {$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendInNetworkByteOrder	common/libs/utils/tcp_socket.cpp	/^void AppendInNetworkByteOrder(Message* msg, const std::uint16_t s) {$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendInNetworkByteOrder	common/libs/utils/tcp_socket.cpp	/^void AppendInNetworkByteOrder(Message* msg, const std::uint32_t w) {$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendInNetworkByteOrder	common/libs/utils/tcp_socket.cpp	/^void AppendInNetworkByteOrder(Message* msg, const std::uint8_t b) {$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendNewElement	host/commands/modem_simulator/sim_service.cpp	/^XMLElement* SimService::SimFileSystem::AppendNewElement(XMLElement* parent,$/;"	f	class:cuttlefish::SimService::SimFileSystem	typeref:typename:XMLElement *
AppendNewElementWithText	host/commands/modem_simulator/sim_service.cpp	/^XMLElement* SimService::SimFileSystem::AppendNewElementWithText($/;"	f	class:cuttlefish::SimService::SimFileSystem	typeref:typename:XMLElement *
AppendPartition	host/libs/image_aggregator/image_aggregator.cc	/^  void AppendPartition(ImagePartition source) {$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:void	file:
AppendPartition	host/libs/image_aggregator/image_aggregator.cc	/^  void AppendPartition(MultipleImagePartition source) {$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:void	file:
AppendRaw	common/libs/net/netlink_request.cpp	/^void* NetlinkRequest::AppendRaw(const void* data, size_t length) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void *
AppendTag	common/libs/net/netlink_request.cpp	/^nlattr* NetlinkRequest::AppendTag($/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:nlattr *
AppendToBuffer	common/libs/confui/packet.h	/^void AppendToBuffer(Buffer& buffer, Args&&... args) {$/;"	f	namespace:cuttlefish::confui::packet::impl	typeref:typename:void
AppendToLastParameter	common/libs/utils/subprocess.h	/^  void AppendToLastParameter(Args... args) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
AppendToMessage	common/libs/utils/tcp_socket.h	/^inline void AppendToMessage(Message*) {}$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendToMessage	common/libs/utils/tcp_socket.h	/^void AppendToMessage(Message* msg, T v, Ts... vals) {$/;"	f	namespace:cuttlefish	typeref:typename:void
AppendVector	host/libs/config/bootconfig_args.cpp	/^void AppendVector(std::vector<T>* destination, const std::vector<T>& source) {$/;"	f	namespace:cuttlefish::__anond90bdb570111	typeref:typename:void
AppendVector	host/libs/config/kernel_args.cpp	/^void AppendVector(std::vector<T>* destination, const std::vector<T>& source) {$/;"	f	namespace:cuttlefish::__anonfb53392e0111	typeref:typename:void
ApplyChanges	common/libs/net/network_interface_manager.cpp	/^bool NetworkInterfaceManager::ApplyChanges(const NetworkInterface& iface) {$/;"	f	class:cuttlefish::NetworkInterfaceManager	typeref:typename:bool
Arch	common/libs/utils/environment.h	/^enum class Arch {$/;"	g	namespace:cuttlefish
Archive	common/libs/utils/archive.cpp	/^Archive::Archive(const std::string& file) : file(file) {$/;"	f	class:cuttlefish::Archive
Archive	common/libs/utils/archive.h	/^class Archive {$/;"	c	namespace:cuttlefish
ArgsToString	common/libs/confui/utils.h	/^std::string ArgsToString(Args&&... args) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ArgsToStringWithDelim	common/libs/confui/utils.h	/^std::string ArgsToStringWithDelim(Delim&& delim, Args&&... args) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ArgsToVec	common/libs/utils/flag_parser.cpp	/^std::vector<std::string> ArgsToVec(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:std::vector<std::string>
ArgumentToBuild	host/commands/fetcher/build_api.cc	/^Build ArgumentToBuild(BuildApi* build_api, const std::string& arg,$/;"	f	namespace:cuttlefish	typeref:typename:Build
ArgvForSubprocess	host/commands/start/flag_forwarder.cc	/^std::vector<std::string> FlagForwarder::ArgvForSubprocess($/;"	f	class:FlagForwarder	typeref:typename:std::vector<std::string>
Arm	common/libs/utils/environment.h	/^  Arm,$/;"	e	enum:cuttlefish::Arch
Arm64	common/libs/utils/environment.h	/^  Arm64,$/;"	e	enum:cuttlefish::Arch
Artifact	host/commands/fetcher/build_api.cc	/^Artifact::Artifact(const Json::Value& json_artifact) {$/;"	f	class:cuttlefish::Artifact
Artifact	host/commands/fetcher/build_api.h	/^  Artifact(const std::string& name) : name(name) {}$/;"	f	class:cuttlefish::Artifact
Artifact	host/commands/fetcher/build_api.h	/^class Artifact {$/;"	c	namespace:cuttlefish
ArtifactToFile	host/commands/fetcher/build_api.cc	/^bool BuildApi::ArtifactToFile(const DeviceBuild& build,$/;"	f	class:cuttlefish::BuildApi	typeref:typename:bool
ArtifactToFile	host/commands/fetcher/build_api.cc	/^bool BuildApi::ArtifactToFile(const DirectoryBuild& build,$/;"	f	class:cuttlefish::BuildApi	typeref:typename:bool
ArtifactToFile	host/commands/fetcher/build_api.h	/^  bool ArtifactToFile(const Build& build, const std::string& artifact,$/;"	f	class:cuttlefish::BuildApi	typeref:typename:bool
Artifacts	host/commands/fetcher/build_api.cc	/^std::vector<Artifact> BuildApi::Artifacts(const DeviceBuild& build) {$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::vector<Artifact>
Artifacts	host/commands/fetcher/build_api.cc	/^std::vector<Artifact> BuildApi::Artifacts(const DirectoryBuild& build) {$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::vector<Artifact>
Artifacts	host/commands/fetcher/build_api.h	/^ std::vector<Artifact> Artifacts(const Build& build) {$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::vector<Artifact>
AsBashScript	common/libs/utils/subprocess.cpp	/^std::string Command::AsBashScript($/;"	f	class:cuttlefish::Command	typeref:typename:std::string
AsCredentials	common/libs/utils/unix_sockets.cpp	/^Result<ucred> ControlMessage::AsCredentials() const {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:Result<ucred>
AsSharedFDs	common/libs/utils/unix_sockets.cpp	/^Result<std::vector<SharedFD>> ControlMessage::AsSharedFDs() const {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:Result<std::vector<SharedFD>>
AssembleCvdMain	host/commands/assemble_cvd/assemble_cvd.cc	/^int AssembleCvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
AssemblyPath	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::AssemblyPath(const std::string& file_name) const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
Attach	host/libs/wayland/wayland_surface.cpp	/^void Surface::Attach(struct wl_resource* buffer) {$/;"	f	class:wayland::Surface	typeref:typename:void
AttestKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::AttestKey(const AttestKeyRequest& request, AttestKeyResponse* response) {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
AttestKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::AttestKey(const AttestKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
AudioChannelMap	host/libs/audio_connector/shm_layout.h	/^enum AudioChannelMap : uint8_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint8_t
AudioClientConnection	host/libs/audio_connector/server.h	/^  AudioClientConnection(ScopedMMap tx_shm, ScopedMMap rx_shm,$/;"	f	class:cuttlefish::AudioClientConnection
AudioClientConnection	host/libs/audio_connector/server.h	/^class AudioClientConnection {$/;"	c	namespace:cuttlefish
AudioCommand	host/libs/audio_connector/commands.h	/^  AudioCommand(AudioCommandType type) : type_(type) {}$/;"	f	class:cuttlefish::AudioCommand
AudioCommand	host/libs/audio_connector/commands.h	/^class AudioCommand {$/;"	c	namespace:cuttlefish
AudioCommandType	host/libs/audio_connector/shm_layout.h	/^enum class AudioCommandType : uint32_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint32_t
AudioDeviceModuleWrapper	host/frontend/webrtc/lib/streamer.cpp	/^  AudioDeviceModuleWrapper($/;"	f	class:cuttlefish::webrtc_streaming::__anonab9390d10111::AudioDeviceModuleWrapper	file:
AudioDeviceModuleWrapper	host/frontend/webrtc/lib/streamer.cpp	/^class AudioDeviceModuleWrapper : public AudioSource {$/;"	c	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	file:
AudioFrameBuffer	host/frontend/webrtc/lib/audio_frame_buffer.h	/^class AudioFrameBuffer {$/;"	c	namespace:cuttlefish::webrtc_streaming
AudioHandler	host/frontend/webrtc/audio_handler.cpp	/^AudioHandler::AudioHandler($/;"	f	class:cuttlefish::AudioHandler
AudioHandler	host/frontend/webrtc/audio_handler.h	/^class AudioHandler : public AudioServerExecutor {$/;"	c	namespace:cuttlefish
AudioJackFeatures	host/libs/audio_connector/shm_layout.h	/^enum AudioJackFeatures: uint8_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint8_t
AudioServer	host/libs/audio_connector/server.h	/^  AudioServer(SharedFD server_socket) : server_socket_(server_socket) {}$/;"	f	class:cuttlefish::AudioServer
AudioServer	host/libs/audio_connector/server.h	/^class AudioServer {$/;"	c	namespace:cuttlefish
AudioServerExecutor	host/libs/audio_connector/server.h	/^class AudioServerExecutor {$/;"	c	namespace:cuttlefish
AudioSink	host/frontend/webrtc/lib/audio_sink.h	/^class AudioSink {$/;"	c	namespace:cuttlefish::webrtc_streaming
AudioSource	host/frontend/webrtc/lib/audio_source.h	/^class AudioSource {$/;"	c	namespace:cuttlefish::webrtc_streaming
AudioStatus	host/libs/audio_connector/shm_layout.h	/^enum class AudioStatus : uint32_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint32_t
AudioStreamDirection	host/libs/audio_connector/shm_layout.h	/^enum class AudioStreamDirection : uint8_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint8_t
AudioStreamFormat	host/libs/audio_connector/shm_layout.h	/^enum class AudioStreamFormat : uint8_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint8_t
AudioStreamRate	host/libs/audio_connector/shm_layout.h	/^enum AudioStreamRate : uint8_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint8_t
AudioTrackSourceImpl	host/frontend/webrtc/lib/audio_track_source_impl.h	/^class AudioTrackSourceImpl : public webrtc::AudioSourceInterface {$/;"	c	namespace:cuttlefish::webrtc_streaming
AudioTrackSourceImplSinkWrapper	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  AudioTrackSourceImplSinkWrapper(rtc::scoped_refptr<AudioTrackSourceImpl> obj)$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImplSinkWrapper
AudioTrackSourceImplSinkWrapper	host/frontend/webrtc/lib/audio_track_source_impl.h	/^class AudioTrackSourceImplSinkWrapper : public AudioSink {$/;"	c	namespace:cuttlefish::webrtc_streaming
Available devices &#8635;	host/frontend/webrtc_operator/assets/index.html	/^        <h1>Available devices <span id='refresh-list'>&#8635;<\/span><\/h1>$/;"	h
AvailableConfigs	host/libs/config/config_flag.cpp	/^  const std::set<std::string>& AvailableConfigs() const {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:const std::set<std::string> &	file:
AvailableFilesReport	host/commands/start/filesystem_explorer.cc	/^cuttlefish::FetcherConfig AvailableFilesReport() {$/;"	f	typeref:typename:cuttlefish::FetcherConfig
AvailableSpaceAtPath	host/commands/assemble_cvd/disk_flags.cc	/^static uint64_t AvailableSpaceAtPath(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:uint64_t	file:
BAND_MODE_10_800M_2	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_10_800M_2 = 15,       \/\/"Band Class 10" (Secondary 800-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_5_450M	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_5_450M = 10,          \/\/"Band Class 5" (450-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_7_700M_2	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_7_700M_2 = 12,        \/\/"Band Class 7" (Upper 700-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_8_1800M	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_8_1800M = 13,         \/\/"Band Class 8" (1800-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_9_900M	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_9_900M = 14,          \/\/"Band Class 9" (900-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_AUS	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_AUS = 4,              \/\/"AUS band" (GSM-900 \/ DCS-1800 \/ WCDMA-850 \/ WCDMA-IM/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_AUS_2	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_AUS_2 = 5,            \/\/"AUS band 2" (GSM-900 \/ DCS-1800 \/ WCDMA-850)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_AWS	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_AWS = 17,             \/\/"Band Class 15" (AWS Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_CELL_800	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_CELL_800 = 6,         \/\/"Cellular" (800-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_EURO	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_EURO = 1,             \/\/"EURO band" (GSM-900 \/ DCS-1800 \/ WCDMA-IMT-2000)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_EURO_PAMR_400M	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_EURO_PAMR_400M = 16,  \/\/"Band Class 11" (400-MHz European PAMR Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_IMT2000	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_IMT2000 = 11,         \/\/"Band Class 6" (2-GMHz IMT2000 Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_JPN	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_JPN = 3,              \/\/"JPN band" (WCDMA-800 \/ WCDMA-IMT-2000)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_JTACS	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_JTACS = 8,            \/\/"Band Class 3" (JTACS Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_KOREA_PCS	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_KOREA_PCS = 9,        \/\/"Band Class 4" (Korean PCS Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_PCS	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_PCS = 7,              \/\/"PCS" (1900-MHz Band)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_UNSPECIFIED = 0,      \/\/"unspecified" (selected by baseband automatically)$/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_USA	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_USA = 2,              \/\/"US band" (GSM-850 \/ PCS-1900 \/ WCDMA-850 \/ WCDMA-PCS/;"	e	enum:__anon0bfbaecf0703
BAND_MODE_USA_2500M	guest/hals/ril/reference-libril/ril.h	/^    BAND_MODE_USA_2500M = 18        \/\/"Band Class 16" (US 2.5-GHz Band)$/;"	e	enum:__anon0bfbaecf0703
BCDToString	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::BCDToString(std::string& data) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
BLOCK_SIZE	host/commands/secure_env/encrypted_serializable.cpp	/^static constexpr uint32_t BLOCK_SIZE = 16;$/;"	v	namespace:cuttlefish	typeref:typename:uint32_t	file:
BLUETOOTH_PROCESS	guest/hals/ril/reference-libril/ril.cpp	/^#define BLUETOOTH_PROCESS /;"	d	file:
BOARD_AVB_ALGORITHM	shared/BoardConfig.mk	/^BOARD_AVB_ALGORITHM := SHA256_RSA4096$/;"	m
BOARD_AVB_BOOT_ALGORITHM	shared/BoardConfig.mk	/^BOARD_AVB_BOOT_ALGORITHM := SHA256_RSA4096$/;"	m
BOARD_AVB_BOOT_KEY_PATH	shared/BoardConfig.mk	/^BOARD_AVB_BOOT_KEY_PATH := external\/avb\/test\/data\/testkey_rsa4096.pem$/;"	m
BOARD_AVB_BOOT_ROLLBACK_INDEX	shared/BoardConfig.mk	/^BOARD_AVB_BOOT_ROLLBACK_INDEX := $(PLATFORM_SECURITY_PATCH_TIMESTAMP)$/;"	m
BOARD_AVB_BOOT_ROLLBACK_INDEX_LOCATION	shared/BoardConfig.mk	/^BOARD_AVB_BOOT_ROLLBACK_INDEX_LOCATION := 2$/;"	m
BOARD_AVB_ENABLE	shared/BoardConfig.mk	/^BOARD_AVB_ENABLE := true$/;"	m
BOARD_AVB_KEY_PATH	shared/BoardConfig.mk	/^BOARD_AVB_KEY_PATH := external\/avb\/test\/data\/testkey_rsa4096.pem$/;"	m
BOARD_AVB_VBMETA_SYSTEM	shared/BoardConfig.mk	/^BOARD_AVB_VBMETA_SYSTEM := product system system_ext$/;"	m
BOARD_AVB_VBMETA_SYSTEM_ALGORITHM	shared/BoardConfig.mk	/^BOARD_AVB_VBMETA_SYSTEM_ALGORITHM := SHA256_RSA4096$/;"	m
BOARD_AVB_VBMETA_SYSTEM_KEY_PATH	shared/BoardConfig.mk	/^BOARD_AVB_VBMETA_SYSTEM_KEY_PATH := external\/avb\/test\/data\/testkey_rsa4096.pem$/;"	m
BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX	shared/BoardConfig.mk	/^BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX := $(PLATFORM_SECURITY_PATCH_TIMESTAMP)$/;"	m
BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX_LOCATION	shared/BoardConfig.mk	/^BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX_LOCATION := 1$/;"	m
BOARD_BOOTIMAGE_MAX_SIZE	shared/BoardConfig.mk	/^BOARD_BOOTIMAGE_MAX_SIZE := 8388608$/;"	m
BOARD_BOOTIMAGE_PARTITION_SIZE	shared/BoardConfig.mk	/^BOARD_BOOTIMAGE_PARTITION_SIZE := 67108864$/;"	m
BOARD_BOOTLOADER_IN_UPDATE_PACKAGE	shared/BoardConfig.mk	/^BOARD_BOOTLOADER_IN_UPDATE_PACKAGE := true$/;"	m
BOARD_BOOT_HEADER_VERSION	shared/BoardConfig.mk	/^BOARD_BOOT_HEADER_VERSION := 4$/;"	m
BOARD_BUILD_SUPER_IMAGE_BY_DEFAULT	shared/BoardConfig.mk	/^BOARD_BUILD_SUPER_IMAGE_BY_DEFAULT := true$/;"	m
BOARD_BUILD_SYSTEM_ROOT_IMAGE	shared/BoardConfig.mk	/^BOARD_BUILD_SYSTEM_ROOT_IMAGE := false$/;"	m
BOARD_DISK_IMAGE_MINIMUM_SIZE	shared/BoardConfig.mk	/^BOARD_DISK_IMAGE_MINIMUM_SIZE := 10737418240$/;"	m
BOARD_EXCLUDE_KERNEL_FROM_RECOVERY_IMAGE	shared/BoardConfig.mk	/^  BOARD_EXCLUDE_KERNEL_FROM_RECOVERY_IMAGE := true$/;"	m
BOARD_FLASH_BLOCK_SIZE	shared/BoardConfig.mk	/^BOARD_FLASH_BLOCK_SIZE := 512$/;"	m
BOARD_GENERIC_RAMDISK_KERNEL_MODULES_LOAD	shared/BoardConfig.mk	/^BOARD_GENERIC_RAMDISK_KERNEL_MODULES_LOAD := dm-user.ko$/;"	m
BOARD_GOOGLE_SYSTEM_DYNAMIC_PARTITIONS_PARTITION_LIST	shared/BoardConfig.mk	/^BOARD_GOOGLE_SYSTEM_DYNAMIC_PARTITIONS_PARTITION_LIST := product system system_ext$/;"	m
BOARD_GOOGLE_SYSTEM_DYNAMIC_PARTITIONS_SIZE	shared/BoardConfig.mk	/^BOARD_GOOGLE_SYSTEM_DYNAMIC_PARTITIONS_SIZE := 5771362304  # 5.375GiB$/;"	m
BOARD_GOOGLE_VENDOR_DYNAMIC_PARTITIONS_PARTITION_LIST	shared/BoardConfig.mk	/^BOARD_GOOGLE_VENDOR_DYNAMIC_PARTITIONS_PARTITION_LIST := odm vendor vendor_dlkm odm_dlkm$/;"	m
BOARD_GOOGLE_VENDOR_DYNAMIC_PARTITIONS_SIZE	shared/BoardConfig.mk	/^BOARD_GOOGLE_VENDOR_DYNAMIC_PARTITIONS_SIZE := 1472200704$/;"	m
BOARD_GPU_DRIVERS	shared/BoardConfig.mk	/^BOARD_GPU_DRIVERS := virgl$/;"	m
BOARD_HAVE_BLUETOOTH	shared/BoardConfig.mk	/^BOARD_HAVE_BLUETOOTH := true$/;"	m
BOARD_HOSTAPD_DRIVER	shared/BoardConfig.mk	/^BOARD_HOSTAPD_DRIVER        := NL80211$/;"	m
BOARD_HOSTAPD_PRIVATE_LIB	shared/BoardConfig.mk	/^BOARD_HOSTAPD_PRIVATE_LIB   := lib_driver_cmd_simulated_cf$/;"	m
BOARD_INCLUDE_DTB_IN_BOOTIMG	shared/BoardConfig.mk	/^BOARD_INCLUDE_DTB_IN_BOOTIMG := true$/;"	m
BOARD_IS_AUTOMOTIVE	shared/auto/device.mk	/^BOARD_IS_AUTOMOTIVE := true$/;"	m
BOARD_MALLOC_ALIGNMENT	shared/BoardConfig.mk	/^BOARD_MALLOC_ALIGNMENT := 16$/;"	m
BOARD_MOVE_GSI_AVB_KEYS_TO_VENDOR_BOOT	shared/BoardConfig.mk	/^BOARD_MOVE_GSI_AVB_KEYS_TO_VENDOR_BOOT := true$/;"	m
BOARD_MOVE_RECOVERY_RESOURCES_TO_VENDOR_BOOT	shared/BoardConfig.mk	/^  BOARD_MOVE_RECOVERY_RESOURCES_TO_VENDOR_BOOT := true$/;"	m
BOARD_ODMIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_ODMIMAGE_FILE_SYSTEM_TYPE := $(TARGET_RO_FILE_SYSTEM_TYPE)$/;"	m
BOARD_ODM_DLKMIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_ODM_DLKMIMAGE_FILE_SYSTEM_TYPE := ext4$/;"	m
BOARD_PARTIAL_OTA_UPDATE_PARTITIONS_LIST	shared/BoardConfig.mk	/^BOARD_PARTIAL_OTA_UPDATE_PARTITIONS_LIST := product system system_ext vbmeta_system$/;"	m
BOARD_PREBUILT_BOOTLOADER	vsoc_arm64/bootloader.mk	/^BOARD_PREBUILT_BOOTLOADER := \\$/;"	m
BOARD_PREBUILT_BOOTLOADER	vsoc_arm_only/bootloader.mk	/^BOARD_PREBUILT_BOOTLOADER := \\$/;"	m
BOARD_PREBUILT_BOOTLOADER	vsoc_x86_64/bootloader.mk	/^BOARD_PREBUILT_BOOTLOADER := \\$/;"	m
BOARD_PRODUCTIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_PRODUCTIMAGE_FILE_SYSTEM_TYPE := $(TARGET_RO_FILE_SYSTEM_TYPE)$/;"	m
BOARD_RAMDISK_USE_LZ4	shared/BoardConfig.mk	/^BOARD_RAMDISK_USE_LZ4 := true$/;"	m
BOARD_RECOVERYIMAGE_PARTITION_SIZE	shared/BoardConfig.mk	/^BOARD_RECOVERYIMAGE_PARTITION_SIZE := 67108864$/;"	m
BOARD_SUPER_IMAGE_IN_UPDATE_PACKAGE	shared/BoardConfig.mk	/^BOARD_SUPER_IMAGE_IN_UPDATE_PACKAGE := true$/;"	m
BOARD_SUPER_PARTITION_GROUPS	shared/BoardConfig.mk	/^BOARD_SUPER_PARTITION_GROUPS := google_system_dynamic_partitions google_vendor_dynamic_partition/;"	m
BOARD_SUPER_PARTITION_SIZE	shared/BoardConfig.mk	/^BOARD_SUPER_PARTITION_SIZE := 7516192768  # 7GiB$/;"	m
BOARD_SYSLOADER_MAX_SIZE	shared/BoardConfig.mk	/^BOARD_SYSLOADER_MAX_SIZE := 7340032$/;"	m
BOARD_SYSTEMIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_SYSTEMIMAGE_FILE_SYSTEM_TYPE := $(TARGET_RO_FILE_SYSTEM_TYPE)$/;"	m
BOARD_SYSTEM_EXTIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_SYSTEM_EXTIMAGE_FILE_SYSTEM_TYPE := $(TARGET_RO_FILE_SYSTEM_TYPE)$/;"	m
BOARD_USERDATAIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_USERDATAIMAGE_FILE_SYSTEM_TYPE := $(TARGET_USERDATAIMAGE_FILE_SYSTEM_TYPE)$/;"	m
BOARD_USERDATAIMAGE_PARTITION_SIZE	shared/BoardConfig.mk	/^BOARD_USERDATAIMAGE_PARTITION_SIZE := $(TARGET_USERDATAIMAGE_PARTITION_SIZE)$/;"	m
BOARD_USES_GENERIC_AUDIO	shared/BoardConfig.mk	/^BOARD_USES_GENERIC_AUDIO := false$/;"	m
BOARD_USES_GENERIC_KERNEL_IMAGE	shared/BoardConfig.mk	/^BOARD_USES_GENERIC_KERNEL_IMAGE := true$/;"	m
BOARD_USES_METADATA_PARTITION	shared/BoardConfig.mk	/^BOARD_USES_METADATA_PARTITION := true$/;"	m
BOARD_USES_ODMIMAGE	shared/BoardConfig.mk	/^BOARD_USES_ODMIMAGE := true$/;"	m
BOARD_USES_ODM_DLKMIMAGE	shared/BoardConfig.mk	/^BOARD_USES_ODM_DLKMIMAGE := true$/;"	m
BOARD_USES_PRODUCTIMAGE	shared/BoardConfig.mk	/^BOARD_USES_PRODUCTIMAGE := true$/;"	m
BOARD_USES_SYSTEM_EXTIMAGE	shared/BoardConfig.mk	/^BOARD_USES_SYSTEM_EXTIMAGE := true$/;"	m
BOARD_USES_VENDORIMAGE	shared/BoardConfig.mk	/^BOARD_USES_VENDORIMAGE := true$/;"	m
BOARD_USES_VENDOR_DLKMIMAGE	shared/BoardConfig.mk	/^BOARD_USES_VENDOR_DLKMIMAGE := true$/;"	m
BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE := $(TARGET_RO_FILE_SYSTEM_TYPE)$/;"	m
BOARD_VENDOR_BOOTIMAGE_PARTITION_SIZE	shared/BoardConfig.mk	/^BOARD_VENDOR_BOOTIMAGE_PARTITION_SIZE := 67108864$/;"	m
BOARD_VENDOR_DLKMIMAGE_FILE_SYSTEM_TYPE	shared/BoardConfig.mk	/^BOARD_VENDOR_DLKMIMAGE_FILE_SYSTEM_TYPE := ext4$/;"	m
BOARD_WLAN_DEVICE	shared/BoardConfig.mk	/^BOARD_WLAN_DEVICE           := emulator$/;"	m
BOARD_WLAN_DEVICE	shared/BoardConfig.mk	/^BOARD_WLAN_DEVICE           := wlan0$/;"	m
BOARD_WPA_SUPPLICANT_DRIVER	shared/BoardConfig.mk	/^BOARD_WPA_SUPPLICANT_DRIVER := NL80211$/;"	m
BOARD_WPA_SUPPLICANT_PRIVATE_LIB	shared/BoardConfig.mk	/^BOARD_WPA_SUPPLICANT_PRIVATE_LIB := lib_driver_cmd_simulated_cf$/;"	m
BOOL_TO_INT	guest/hals/ril/reference-libril/ril_service.cpp	/^#define BOOL_TO_INT(/;"	d	file:
BOOTLOADER_BUILD	host/libs/config/fetcher_config.h	/^  BOOTLOADER_BUILD,$/;"	e	enum:cuttlefish::FileSource
BOOT_SECURITY_PATCH	shared/device.mk	/^BOOT_SECURITY_PATCH = $(PLATFORM_SECURITY_PATCH)$/;"	m
BUFF_SIZE	common/libs/fs/shared_buf.cc	/^const size_t BUFF_SIZE = 1 << 14;$/;"	v	namespace:cuttlefish::__anoncf090a650111	typeref:typename:const size_t
BUILD_API	host/commands/fetcher/build_api.cc	/^const std::string BUILD_API =$/;"	v	namespace:cuttlefish::__anon948178400111	typeref:typename:const std::string
BUILD_BROKEN_ELF_PREBUILT_PRODUCT_COPY_FILES	vsoc_x86/BoardConfig.mk	/^BUILD_BROKEN_ELF_PREBUILT_PRODUCT_COPY_FILES := true$/;"	m
BUILD_EMULATOR_OPENGL	shared/BoardConfig.mk	/^BUILD_EMULATOR_OPENGL := true$/;"	m
BUILD_EMULATOR_OPENGL_DRIVER	shared/BoardConfig.mk	/^BUILD_EMULATOR_OPENGL_DRIVER := true$/;"	m
BYTE	host/libs/confui/sign.cc	/^  BYTE = 165 \/* 0xA5 *\/,$/;"	e	enum:cuttlefish::confui::TestKeyBits	file:
BYTE_STRING	host/libs/confui/cbor.h	/^    BYTE_STRING = 2,$/;"	e	enum:cuttlefish::confui::Cbor::Type
BackToPool	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^void BackToPool(std::vector<uint8_t> item) {$/;"	f	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:void
BadMessage	host/libs/audio_connector/buffers.h	/^  BadMessage,$/;"	e	enum:cuttlefish::Status
BadRequest	host/libs/websocket/websocket_handler.h	/^  BadRequest = 400,$/;"	e	enum:cuttlefish::HttpStatusCode
BaseDependencyTag	build/cvd-host-package.go	/^	blueprint.BaseDependencyTag$/;"	M	struct:cuttlefish.dependencyTag	typeref:typename:blueprint.BaseDependencyTag
Bases	host/commands/run_cvd/launch.cc	/^  using Bases = Multi::Bases<CommandSource, DiagnosticInformation, Feature>;$/;"	t	function:cuttlefish::launchComponent	typeref:typename:Multi::Bases<CommandSource,DiagnosticInformation,Feature>	file:
Bases	host/libs/config/inject.h	/^  struct Bases {$/;"	s	struct:cuttlefish::Multibindings
BeforeSelect	host/commands/kernel_log_monitor/kernel_log_server.cc	/^void KernelLogServer::BeforeSelect(cuttlefish::SharedFDSet* fd_read) const {$/;"	f	class:monitor::KernelLogServer	typeref:typename:void
BeginOperation	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::BeginOperation(const BeginOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
BeginOperation	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::BeginOperation(const BeginOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
Beginning	host/libs/image_aggregator/image_aggregator.cc	/^  GptBeginning Beginning() const {$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:GptBeginning	file:
Bind	common/libs/fs/shared_fd.cpp	/^int FileInstance::Bind(const struct sockaddr* addr, socklen_t addrlen) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
BindCompositorInterface	host/libs/wayland/wayland_compositor.cpp	/^void BindCompositorInterface(wl_display* display, Surfaces* surfaces) {$/;"	f	namespace:wayland	typeref:typename:void
BindDmabufInterface	host/libs/wayland/wayland_dmabuf.cpp	/^void BindDmabufInterface(wl_display* display) {$/;"	f	namespace:wayland	typeref:typename:void
BindSeatInterface	host/libs/wayland/wayland_seat.cpp	/^void BindSeatInterface(wl_display* display) {$/;"	f	namespace:wayland	typeref:typename:void
BindShellInterface	host/libs/wayland/wayland_shell.cpp	/^void BindShellInterface(wl_display* display) {$/;"	f	namespace:wayland	typeref:typename:void
BindSubcompositorInterface	host/libs/wayland/wayland_subcompositor.cpp	/^void BindSubcompositorInterface(wl_display* display) {$/;"	f	namespace:wayland	typeref:typename:void
BindVirtioGpuMetadataInterface	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^void BindVirtioGpuMetadataInterface(wl_display* display, Surfaces* surfaces) {$/;"	f	namespace:wayland	typeref:typename:void
BitsPerSample	host/frontend/webrtc/audio_handler.cpp	/^int BitsPerSample(uint8_t virtio_format) {$/;"	f	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:int
Bluetooth Console	host/frontend/webrtc_operator/assets/client.html	/^          <h2>Bluetooth Console<\/h2>$/;"	i
BluetoothChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^BluetoothChannelHandler::BluetoothChannelHandler($/;"	f	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler
BluetoothChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^class BluetoothChannelHandler : public webrtc::DataChannelObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming	file:
BluetoothChecker	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^    public BluetoothChecker(Context context) {$/;"	m	class:BluetoothChecker
BluetoothChecker	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^public class BluetoothChecker extends JobBase {$/;"	c
BluetoothConnector	host/commands/run_cvd/launch.cc	/^class BluetoothConnector : public CommandSource {$/;"	c	namespace:cuttlefish	file:
BluetoothDeathRecipient	guest/hals/bt/remote/remote_bluetooth.cpp	/^  BluetoothDeathRecipient(const sp<IBluetoothHci> hci) : mHci(hci) {}$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothDeathRecipient	file:
BluetoothDeathRecipient	guest/hals/bt/remote/remote_bluetooth.cpp	/^class BluetoothDeathRecipient : public hidl_death_recipient {$/;"	c	namespace:android::hardware::bluetooth::V1_1::remote	file:
BluetoothHandler	host/frontend/webrtc/bluetooth_handler.cpp	/^BluetoothHandler::BluetoothHandler($/;"	f	class:cuttlefish::webrtc_streaming::BluetoothHandler
BluetoothHandler	host/frontend/webrtc/bluetooth_handler.h	/^struct BluetoothHandler {$/;"	s	namespace:cuttlefish::webrtc_streaming
BluetoothHci	guest/hals/bt/remote/remote_bluetooth.cpp	/^BluetoothHci::BluetoothHci(const std::string& dev_path)$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci
BluetoothHci	guest/hals/bt/remote/remote_bluetooth.h	/^class BluetoothHci : public IBluetoothHci {$/;"	c	namespace:android::hardware::bluetooth::V1_1::remote
Boost	shared/config/task_profiles.json	/^            "Boost": "0",$/;"	s	object:Profiles.27.Actions.0.Params
Boost	shared/config/task_profiles.json	/^            "Boost": "50%",$/;"	s	object:Profiles.26.Actions.0.Params
BootCompleted	host/commands/kernel_log_monitor/kernel_log_server.h	/^  BootCompleted = 1,$/;"	e	enum:monitor::Event
BootCompleted	host/commands/run_cvd/boot_state_machine.cc	/^  bool BootCompleted() const { return state_ & kGuestBootCompleted; }$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:bool	file:
BootFailed	host/commands/kernel_log_monitor/kernel_log_server.h	/^  BootFailed = 2,$/;"	e	enum:monitor::Event
BootFailed	host/commands/run_cvd/boot_state_machine.cc	/^  bool BootFailed() const { return state_ & kGuestBootFailed; }$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:bool	file:
BootImageRepacker	host/commands/assemble_cvd/disk_flags.cc	/^class BootImageRepacker : public Feature {$/;"	c	namespace:cuttlefish	file:
BootStarted	host/commands/kernel_log_monitor/kernel_log_server.h	/^  BootStarted = 0,$/;"	e	enum:monitor::Event
BootconfigArgsFromConfig	host/libs/config/bootconfig_args.cpp	/^std::vector<std::string> BootconfigArgsFromConfig($/;"	f	namespace:cuttlefish	typeref:typename:std::vector<std::string>
Boundary	host/libs/confui/host_renderer.h	/^  struct Boundary {            \/\/ inclusive but.. LayoutElement's size is float$/;"	s	class:cuttlefish::confui::ConfUiRenderer
BringUpIface	host/libs/allocd/alloc_utils.cpp	/^bool BringUpIface(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
BroadcastAddress	common/libs/net/network_interface.h	/^  const std::string& BroadcastAddress() const {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:const std::string &
BroadcastConfig	host/commands/modem_simulator/sms_service.h	/^  struct BroadcastConfig {$/;"	s	class:cuttlefish::SmsService
BufferType	common/libs/confui/packet_types.h	/^using BufferType = std::vector<std::uint8_t>;$/;"	t	namespace:cuttlefish::confui::packet	typeref:typename:std::vector<std::uint8_t>
Build	host/commands/fetcher/build_api.h	/^using Build = std::variant<DeviceBuild, DirectoryBuild>;$/;"	t	namespace:cuttlefish	typeref:typename:std::variant<DeviceBuild,DirectoryBuild>
Build	host/frontend/webrtc_operator/client_handler.cpp	/^std::shared_ptr<WebSocketHandler> ClientWSHandlerFactory::Build(struct lws* wsi) {$/;"	f	class:cuttlefish::ClientWSHandlerFactory	typeref:typename:std::shared_ptr<WebSocketHandler>
Build	host/frontend/webrtc_operator/device_handler.cpp	/^std::shared_ptr<WebSocketHandler> DeviceHandlerFactory::Build(struct lws* wsi) {$/;"	f	class:cuttlefish::DeviceHandlerFactory	typeref:typename:std::shared_ptr<WebSocketHandler>
BuildAddrRequest	common/libs/net/network_interface_manager.cpp	/^NetlinkRequest BuildAddrRequest($/;"	f	namespace:cuttlefish::__anon72e4bdb10111	typeref:typename:NetlinkRequest
BuildApi	host/commands/fetcher/build_api.cc	/^BuildApi::BuildApi(CurlWrapper& curl, CredentialSource* credential_source)$/;"	f	class:cuttlefish::BuildApi
BuildApi	host/commands/fetcher/build_api.h	/^class BuildApi {$/;"	c	namespace:cuttlefish
BuildConfigImpl	host/commands/modem_simulator/nvram_config.cpp	/^NvramConfig* NvramConfig::BuildConfigImpl(size_t num_instances, int sim_type) {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:NvramConfig *
BuildConfigImpl	host/libs/config/cuttlefish_config.cpp	/^\/*static*\/ CuttlefishConfig* CuttlefishConfig::BuildConfigImpl() {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:CuttlefishConfig *
BuildLinkRequest	common/libs/net/network_interface_manager.cpp	/^NetlinkRequest BuildLinkRequest($/;"	f	namespace:cuttlefish::__anon72e4bdb10111	typeref:typename:NetlinkRequest
BuildParameter	common/libs/utils/subprocess.cpp	/^void Command::BuildParameter(std::stringstream* stream, SharedFD shared_fd) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
BuildParameter	common/libs/utils/subprocess.h	/^  void BuildParameter(std::stringstream* stream, T t) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
BuildParameter	common/libs/utils/subprocess.h	/^  void BuildParameter(std::stringstream* stream, T t, Args... args) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
BuildProtectedDataPayload	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^TpmRemoteProvisioningContext::BuildProtectedDataPayload($/;"	f	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:ErrMsgOr<std::vector<uint8_t>>
BuildStatus	host/commands/fetcher/build_api.cc	/^std::string BuildApi::BuildStatus(const DeviceBuild& build) {$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::string
BuildSuperImage	host/commands/assemble_cvd/super_image_mixer.cc	/^bool BuildSuperImage(const std::string& combined_target_zip,$/;"	f	namespace:cuttlefish::__anonae6530d30111	typeref:typename:bool
BuiltInAECIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::BuiltInAECIsAvailable() const { return false; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
BuiltInAGCIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::BuiltInAGCIsAvailable() const { return false; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
BuiltInNSIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::BuiltInNSIsAvailable() const { return false; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
ByteBufferProxy	host/libs/confui/sign_utils.h	/^  ByteBufferProxy($/;"	f	class:cuttlefish::confui::support::ByteBufferProxy
ByteBufferProxy	host/libs/confui/sign_utils.h	/^  ByteBufferProxy() : data_(nullptr), size_(0) {}$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy
ByteBufferProxy	host/libs/confui/sign_utils.h	/^  ByteBufferProxy(const char (&buffer)[size])$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy
ByteBufferProxy	host/libs/confui/sign_utils.h	/^  ByteBufferProxy(const uint8_t (&buffer)[size]) : data_(buffer), size_(size) {}$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy
ByteBufferProxy	host/libs/confui/sign_utils.h	/^class ByteBufferProxy {$/;"	c	namespace:cuttlefish::confui::support
ByteVecToString	common/libs/confui/protocol_types.cpp	/^static std::string ByteVecToString(const std::vector<T>& v) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string	file:
BytesPerPixel	host/libs/screen_connector/screen_connector_common.h	/^  static constexpr std::uint32_t BytesPerPixel() { return 4; }$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
CALL_FAIL_ACCESS_CLASS_BLOCKED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_ACCESS_CLASS_BLOCKED = 260, \/* Access class barring *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_ACCESS_INFORMATION_DISCARDED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_ACCESS_INFORMATION_DISCARDED = 43,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_ACM_LIMIT_EXCEEDED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_ACM_LIMIT_EXCEEDED = 68,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_BEARER_CAPABILITY_NOT_AUTHORIZED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_BEARER_CAPABILITY_NOT_AUTHORIZED = 57,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_BEARER_CAPABILITY_UNAVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_BEARER_CAPABILITY_UNAVAILABLE = 58,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_BEARER_SERVICE_NOT_IMPLEMENTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_BEARER_SERVICE_NOT_IMPLEMENTED = 65,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_BUSY	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_BUSY = 17,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CALL_BARRED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CALL_BARRED = 240,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CALL_REJECTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CALL_REJECTED = 21,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_ACCESS_BLOCKED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_ACCESS_BLOCKED = 1009, \/* CDMA network access probes blocked *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_ACCESS_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_ACCESS_FAILURE = 1006,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_DROP	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_DROP = 1001,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_INTERCEPT	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_INTERCEPT = 1002,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_LOCKED_UNTIL_POWER_CYCLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_LOCKED_UNTIL_POWER_CYCLE = 1000,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_NOT_EMERGENCY	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_NOT_EMERGENCY = 1008, \/* For non-emergency number dialed$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_PREEMPTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_PREEMPTED = 1007,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_REORDER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_REORDER = 1003,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_RETRY_ORDER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_RETRY_ORDER = 1005,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CDMA_SO_REJECT	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CDMA_SO_REJECT = 1004,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CHANNEL_UNACCEPTABLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CHANNEL_UNACCEPTABLE = 6,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CONDITIONAL_IE_ERROR	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CONDITIONAL_IE_ERROR = 100,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_CONGESTION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_CONGESTION = 34,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_DESTINATION_OUT_OF_ORDER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_DESTINATION_OUT_OF_ORDER = 27,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_DIAL_MODIFIED_TO_DIAL	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_DIAL_MODIFIED_TO_DIAL = 246,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_DIAL_MODIFIED_TO_SS	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_DIAL_MODIFIED_TO_SS = 245,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_DIAL_MODIFIED_TO_USSD	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_DIAL_MODIFIED_TO_USSD = 244, \/* STK Call Control *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_ERROR_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_ERROR_UNSPECIFIED = 0xffff \/* This error will be deprecated soon,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_FACILITY_REJECTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_FACILITY_REJECTED = 29,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_FDN_BLOCKED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_FDN_BLOCKED = 241,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_IMEI_NOT_ACCEPTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_IMEI_NOT_ACCEPTED = 243,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_IMSI_UNKNOWN_IN_VLR	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_IMSI_UNKNOWN_IN_VLR = 242,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INCOMING_CALLS_BARRED_WITHIN_CUG	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INCOMING_CALLS_BARRED_WITHIN_CUG = 55,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INCOMPATIBLE_DESTINATION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INCOMPATIBLE_DESTINATION = 88,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INFORMATION_ELEMENT_NON_EXISTENT	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INFORMATION_ELEMENT_NON_EXISTENT = 99,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INTERWORKING_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INTERWORKING_UNSPECIFIED = 127,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INVALID_MANDATORY_INFORMATION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INVALID_MANDATORY_INFORMATION = 96,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INVALID_NUMBER_FORMAT	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INVALID_NUMBER_FORMAT = 28,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INVALID_TRANSACTION_IDENTIFIER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INVALID_TRANSACTION_IDENTIFIER = 81,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_INVALID_TRANSIT_NW_SELECTION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_INVALID_TRANSIT_NW_SELECTION = 91,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 101,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_MESSAGE_TYPE_NON_IMPLEMENTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_MESSAGE_TYPE_NON_IMPLEMENTED = 97,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE = 98,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NETWORK_DETACH	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NETWORK_DETACH = 261, \/* Explicit network detach *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NETWORK_OUT_OF_ORDER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NETWORK_OUT_OF_ORDER = 38,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NETWORK_REJECT	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NETWORK_REJECT = 252, \/* Explicit network reject *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NETWORK_RESP_TIMEOUT	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NETWORK_RESP_TIMEOUT = 251, \/* No response from network *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NORMAL	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NORMAL = 16,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NORMAL_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NORMAL_UNSPECIFIED = 31,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NO_ANSWER_FROM_USER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NO_ANSWER_FROM_USER = 19,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NO_ROUTE_TO_DESTINATION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NO_ROUTE_TO_DESTINATION = 3,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NO_USER_RESPONDING	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NO_USER_RESPONDING = 18,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NO_VALID_SIM	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NO_VALID_SIM = 249, \/* No valid SIM is present *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_NUMBER_CHANGED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_NUMBER_CHANGED = 22,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_1	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_1 = 0xf001,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_10	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_10 = 0xf00a,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_11	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_11 = 0xf00b,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_12	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_12 = 0xf00c,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_13	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_13 = 0xf00d,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_14	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_14 = 0xf00e,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_15	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_15 = 0xf00f,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_2	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_2 = 0xf002,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_3	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_3 = 0xf003,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_4	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_4 = 0xf004,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_5	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_5 = 0xf005,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_6	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_6 = 0xf006,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_7	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_7 = 0xf007,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_8	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_8 = 0xf008,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OEM_CAUSE_9	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OEM_CAUSE_9 = 0xf009,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE = 70,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OPERATOR_DETERMINED_BARRING	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OPERATOR_DETERMINED_BARRING = 8,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_OUT_OF_SERVICE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_OUT_OF_SERVICE = 248, \/* No cellular coverage *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_PREEMPTION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_PREEMPTION = 25,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_PROTOCOL_ERROR_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_PROTOCOL_ERROR_UNSPECIFIED = 111,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_QOS_UNAVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_QOS_UNAVAILABLE = 49,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_ACCESS_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_ACCESS_FAILURE = 253, \/* RRC connection failure. Eg.RACH *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_INTERNAL_ERROR	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_INTERNAL_ERROR = 250, \/* Internal error at Modem *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_LINK_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_LINK_FAILURE = 254, \/* Radio Link Failure *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_LINK_LOST	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_LINK_LOST = 255, \/* Radio link lost due to poor coverage *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_OFF	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_OFF = 247, \/* Radio is OFF *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_RELEASE_ABNORMAL	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_RELEASE_ABNORMAL = 259, \/* RRC connection release, abnormal *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_RELEASE_NORMAL	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_RELEASE_NORMAL = 258, \/* RRC connection release, normal *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_SETUP_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_SETUP_FAILURE = 257, \/* RRC connection setup failure *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RADIO_UPLINK_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RADIO_UPLINK_FAILURE = 256, \/* Radio uplink failure *\/$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RECOVERY_ON_TIMER_EXPIRED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RECOVERY_ON_TIMER_EXPIRED = 102,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE = 44,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_REQUESTED_FACILITY_NOT_IMPLEMENTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_REQUESTED_FACILITY_NOT_IMPLEMENTED = 69,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_REQUESTED_FACILITY_NOT_SUBSCRIBED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_REQUESTED_FACILITY_NOT_SUBSCRIBED = 50,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RESOURCES_UNAVAILABLE_OR_UNSPECIFIED = 47,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_RESP_TO_STATUS_ENQUIRY	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_RESP_TO_STATUS_ENQUIRY = 30,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_SEMANTICALLY_INCORRECT_MESSAGE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_SEMANTICALLY_INCORRECT_MESSAGE = 95,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_SERVICE_OPTION_NOT_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_SERVICE_OPTION_NOT_AVAILABLE = 63,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_SERVICE_OR_OPTION_NOT_IMPLEMENTED	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_SERVICE_OR_OPTION_NOT_IMPLEMENTED = 79,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_SWITCHING_EQUIPMENT_CONGESTION	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_SWITCHING_EQUIPMENT_CONGESTION = 42,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_TEMPORARY_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_TEMPORARY_FAILURE = 41,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_UNOBTAINABLE_NUMBER	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_UNOBTAINABLE_NUMBER = 1,$/;"	e	enum:__anon0bfbaecf2d03
CALL_FAIL_USER_NOT_MEMBER_OF_CUG	guest/hals/ril/reference-libril/ril.h	/^    CALL_FAIL_USER_NOT_MEMBER_OF_CUG = 87,$/;"	e	enum:__anon0bfbaecf2d03
CALL_ONREQUEST	guest/hals/ril/reference-libril/ril_config.cpp	/^#define CALL_ONREQUEST(/;"	d	file:
CALL_ONREQUEST	guest/hals/ril/reference-libril/ril_service.cpp	/^#define CALL_ONREQUEST(/;"	d	file:
CALL_ONSTATEREQUEST	guest/hals/ril/reference-libril/ril_config.cpp	/^#define CALL_ONSTATEREQUEST(/;"	d	file:
CALL_ONSTATEREQUEST	guest/hals/ril/reference-libril/ril_service.cpp	/^#define CALL_ONSTATEREQUEST(/;"	d	file:
CALL_STATE_ACTIVE	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_ACTIVE = 0,$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CALL_STATE_ALERTING	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_ALERTING,$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CALL_STATE_DIALING	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_DIALING,$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CALL_STATE_HANGUP	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_HANGUP$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CALL_STATE_HELD	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_HELD,$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CALL_STATE_INCOMING	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_INCOMING,$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CALL_STATE_WAITING	host/commands/modem_simulator/call_service.h	/^      CALL_STATE_WAITING,$/;"	e	enum:cuttlefish::CallService::CallStatus::CallState
CAPABILITY	common/libs/concurrency/thread_annotations.h	/^#define CAPABILITY(/;"	d
CATEGORY_AIEC	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_AIEC            = 1 << 6,  \/* Automatically Initiated eCall (AIeC) *\/$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_AMBULANCE	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_AMBULANCE       = 1 << 1,$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_FIRE_BRIGADE	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_FIRE_BRIGADE    = 1 << 2,$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_MARINE_GUARD	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_MARINE_GUARD    = 1 << 3,$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_MIEC	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_MIEC            = 1 << 5,  \/* Manually Initiated eCall (MIeC) *\/$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_MOUNTAIN_RESCUE	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_MOUNTAIN_RESCUE = 1 << 4,$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_POLICE	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_POLICE          = 1 << 0,$/;"	e	enum:__anon0bfbaecfb403
CATEGORY_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    CATEGORY_UNSPECIFIED     = 0,        \/* General emergency call, all categories *\/$/;"	e	enum:__anon0bfbaecfb403
CD	host/commands/modem_simulator/sup_service.h	/^      CD          = 6,  \/\/ communication deflection$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
CDISK_MAGIC	host/libs/image_aggregator/image_aggregator.cc	/^static const std::string CDISK_MAGIC = "composite_disk\\x1d";$/;"	v	namespace:cuttlefish::__anon02806fd80111	typeref:typename:const std::string	file:
CDMA	guest/hals/ril/reference-ril/reference-ril.c	/^#define CDMA /;"	d	file:
CDMA2000	guest/hals/ril/reference-libril/ril.h	/^    CDMA2000 = 0x05,    \/\/ CDMA 2000 Radio AccessNetwork$/;"	e	enum:__anon0bfbaecfa503
CDMA_ALPHA_INFO_BUFFER_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define CDMA_ALPHA_INFO_BUFFER_LENGTH /;"	d
CDMA_NUMBER_INFO_BUFFER_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define CDMA_NUMBER_INFO_BUFFER_LENGTH /;"	d
CDMA_OTA_PROVISION_STATUS_A_KEY_EXCHANGED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_A_KEY_EXCHANGED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_COMMITTED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_COMMITTED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_IMSI_DOWNLOADED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_IMSI_DOWNLOADED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_MDN_DOWNLOADED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_MDN_DOWNLOADED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_NAM_DOWNLOADED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_NAM_DOWNLOADED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_OTAPA_ABORTED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_OTAPA_ABORTED$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_OTAPA_STARTED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_OTAPA_STARTED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_OTAPA_STOPPED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_OTAPA_STOPPED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_PRL_DOWNLOADED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_PRL_DOWNLOADED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_SPC_RETRIES_EXCEEDED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_SPC_RETRIES_EXCEEDED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_SPL_UNLOCKED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_SPL_UNLOCKED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_OTA_PROVISION_STATUS_SSD_UPDATED	guest/hals/ril/reference-libril/ril.h	/^    CDMA_OTA_PROVISION_STATUS_SSD_UPDATED,$/;"	e	enum:__anon0bfbaecf4503
CDMA_SUBSCRIPTION_SOURCE_NV	guest/hals/ril/reference-libril/ril.h	/^   CDMA_SUBSCRIPTION_SOURCE_NV = 1$/;"	e	enum:__anon0bfbaecf0c03
CDMA_SUBSCRIPTION_SOURCE_RUIM_SIM	guest/hals/ril/reference-libril/ril.h	/^   CDMA_SUBSCRIPTION_SOURCE_RUIM_SIM = 0,$/;"	e	enum:__anon0bfbaecf0c03
CDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalStrength     CDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5108	typeref:typename:RIL_CDMA_SignalStrength
CDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalStrength     CDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5208	typeref:typename:RIL_CDMA_SignalStrength
CDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalStrength     CDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_CDMA_SignalStrength
CDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalStrength CDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf4f08	typeref:typename:RIL_CDMA_SignalStrength
CDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalStrength CDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5008	typeref:typename:RIL_CDMA_SignalStrength
CELL_CONNECTION_NONE	guest/hals/ril/reference-libril/ril.h	/^    CELL_CONNECTION_NONE = 0,           \/\/ Cell is not a serving cell.$/;"	e	enum:__anon0bfbaecf6d03
CELL_CONNECTION_PRIMARY_SERVING	guest/hals/ril/reference-libril/ril.h	/^    CELL_CONNECTION_PRIMARY_SERVING,    \/\/ UE has connection to cell for signalling and$/;"	e	enum:__anon0bfbaecf6d03
CELL_CONNECTION_SECONDARY_SERVING	guest/hals/ril/reference-libril/ril.h	/^    CELL_CONNECTION_SECONDARY_SERVING,  \/\/ UE has connection to cell for data (3GPP 36.331, 25/;"	e	enum:__anon0bfbaecf6d03
CFB	host/commands/modem_simulator/sup_service.h	/^      CFB         = 1,  \/\/communication forwarding on busy user$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
CFNL	host/commands/modem_simulator/sup_service.h	/^      CFNL        = 7,  \/\/ communication forwarding on not logged-in$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
CFNR	host/commands/modem_simulator/sup_service.h	/^      CFNR        = 2,  \/\/ communication forwarding on no reply$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
CFNRC	host/commands/modem_simulator/sup_service.h	/^      CFNRC       = 3,  \/\/ communication forwarding on subscriber not reachable$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
CFU	host/commands/modem_simulator/sup_service.h	/^      CFU         = 0,  \/\/ communication forwarding unconditional$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::Reason
CGFPCCFG	guest/hals/ril/reference-ril/reference-ril.c	/^#define  CGFPCCFG /;"	d	file:
CHMAPS	host/frontend/webrtc/audio_handler.cpp	/^const virtio_snd_chmap_info CHMAPS[] = {{$/;"	v	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:const virtio_snd_chmap_info[]
CHUNK_RECV_MAX_LEN	host/commands/tombstone_receiver/main.cpp	/^static constexpr size_t CHUNK_RECV_MAX_LEN = 1024;$/;"	v	namespace:cuttlefish	typeref:typename:size_t	file:
CLIR_INVOCATION	host/commands/modem_simulator/sup_service.h	/^      CLIR_INVOCATION        = 1,   \/\/ restrict CLI presentation$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirType
CLIR_NOT_PROVISIONED	host/commands/modem_simulator/sup_service.h	/^      CLIR_NOT_PROVISIONED         = 0,$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirStatus
CLIR_PRESENTATION_ALLOWED	host/commands/modem_simulator/sup_service.h	/^      CLIR_PRESENTATION_ALLOWED    = 4,$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirStatus
CLIR_PRESENTATION_RESTRICTED	host/commands/modem_simulator/sup_service.h	/^      CLIR_PRESENTATION_RESTRICTED = 3,$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirStatus
CLIR_PROVISIONED	host/commands/modem_simulator/sup_service.h	/^      CLIR_PROVISIONED             = 1,$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirStatus
CLIR_SUPPRESSION	host/commands/modem_simulator/sup_service.h	/^      CLIR_SUPPRESSION       = 2,   \/\/ allow CLI presentation$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirType
CLOSE_CHANNEL	host/commands/modem_simulator/stk_service.h	/^    CLOSE_CHANNEL       = 0x41,$/;"	e	enum:cuttlefish::StkService::CommandType
CMD_GET_LOCATION	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^constexpr char CMD_GET_LOCATION[] = "CMD_GET_LOCATION";$/;"	v	typeref:typename:char[]
CMD_GET_RAWMEASUREMENT	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^constexpr char CMD_GET_RAWMEASUREMENT[] = "CMD_GET_RAWMEASUREMENT";$/;"	v	typeref:typename:char[]
CME_ERROR_NON_CME	guest/hals/ril/reference-ril/atchannel.h	/^    CME_ERROR_NON_CME = -1,$/;"	e	enum:__anon512a2c1f0303
CME_SIM_NOT_INSERTED	guest/hals/ril/reference-ril/atchannel.h	/^    CME_SIM_NOT_INSERTED = 10$/;"	e	enum:__anon512a2c1f0303
CME_SUCCESS	guest/hals/ril/reference-ril/atchannel.h	/^    CME_SUCCESS = 0,$/;"	e	enum:__anon512a2c1f0303
COMMON_LIBS_NET_NETLINK_CLIENT_H_	common/libs/net/netlink_client.h	/^#define COMMON_LIBS_NET_NETLINK_CLIENT_H_$/;"	d
COMMON_LIBS_NET_NETLINK_REQUEST_H_	common/libs/net/netlink_request.h	/^#define COMMON_LIBS_NET_NETLINK_REQUEST_H_$/;"	d
COMMON_LIBS_NET_NETWORK_INTERFACE_MANAGER_H_	common/libs/net/network_interface_manager.h	/^#define COMMON_LIBS_NET_NETWORK_INTERFACE_MANAGER_H_$/;"	d
COMMON_LUNCH_CHOICES	AndroidProducts.mk	/^COMMON_LUNCH_CHOICES := \\$/;"	m
COMPLETE	guest/hals/ril/reference-libril/ril.h	/^    COMPLETE = 0x02,  \/\/ The result contains the last part of the scan results$/;"	e	enum:__anon0bfbaecfb203
CONCATENATED_VENDOR_RAMDISK	host/commands/assemble_cvd/boot_image_utils.cc	/^const char CONCATENATED_VENDOR_RAMDISK[] = "concatenated_vendor_ramdisk";$/;"	v	typeref:typename:const char[]
CONFIG_DRIVER_$(BOARD_WPA_SUPPLICANT_DRIVER)	guest/libs/wpa_supplicant_8_lib/Android.mk	/^  CONFIG_DRIVER_$(BOARD_WPA_SUPPLICANT_DRIVER) := y$/;"	m
CONFIRMATIONUI_CMD_INIT	guest/hals/confirmationui/include/TrustyIpc.h	/^    CONFIRMATIONUI_CMD_INIT = (1 << CONFIRMATIONUI_REQ_SHIFT),$/;"	e	enum:confirmationui_cmd
CONFIRMATIONUI_CMD_MSG	guest/hals/confirmationui/include/TrustyIpc.h	/^    CONFIRMATIONUI_CMD_MSG = (2 << CONFIRMATIONUI_REQ_SHIFT),$/;"	e	enum:confirmationui_cmd
CONFIRMATIONUI_MAX_MSG_SIZE	guest/hals/confirmationui/include/TrustyIpc.h	/^#define CONFIRMATIONUI_MAX_MSG_SIZE /;"	d
CONFIRMATIONUI_PORT	guest/hals/confirmationui/include/TrustyIpc.h	/^#define CONFIRMATIONUI_PORT /;"	d
CONFIRMATIONUI_REQ_SHIFT	guest/hals/confirmationui/include/TrustyIpc.h	/^    CONFIRMATIONUI_REQ_SHIFT = 1,$/;"	e	enum:confirmationui_cmd
CONFIRMATIONUI_RESP_BIT	guest/hals/confirmationui/include/TrustyIpc.h	/^    CONFIRMATIONUI_RESP_BIT = 1,$/;"	e	enum:confirmationui_cmd
CPIO_EXT	host/commands/assemble_cvd/boot_image_utils.cc	/^const char CPIO_EXT[] = ".cpio";$/;"	v	typeref:typename:const char[]
CUTTLEFISH_COMMON_COMMON_LIBS_FS_SHARED_FD_H_	common/libs/fs/shared_fd.h	/^#define CUTTLEFISH_COMMON_COMMON_LIBS_FS_SHARED_FD_H_$/;"	d
CUTTLEFISH_COMMON_COMMON_LIBS_FS_SHARED_FD_STREAM_H_	common/libs/fs/shared_fd_stream.h	/^#define CUTTLEFISH_COMMON_COMMON_LIBS_FS_SHARED_FD_STREAM_H_$/;"	d
CUTTLEFISH_COMMON_COMMON_LIBS_FS_SHARED_SELECT_H_	common/libs/fs/shared_select.h	/^#define CUTTLEFISH_COMMON_COMMON_LIBS_FS_SHARED_SELECT_H_$/;"	d
CUTTLEFISH_DEVICE_TYPE_GUEST	host/commands/metrics/proto/cf_log.proto	/^    CUTTLEFISH_DEVICE_TYPE_GUEST = 2;$/;"	e	enum:cuttlefish.CuttlefishLogEvent.DeviceType
CUTTLEFISH_DEVICE_TYPE_HOST	host/commands/metrics/proto/cf_log.proto	/^    CUTTLEFISH_DEVICE_TYPE_HOST = 1;$/;"	e	enum:cuttlefish.CuttlefishLogEvent.DeviceType
CUTTLEFISH_DEVICE_TYPE_UNSPECIFIED	host/commands/metrics/proto/cf_log.proto	/^    CUTTLEFISH_DEVICE_TYPE_UNSPECIFIED = 0;$/;"	e	enum:cuttlefish.CuttlefishLogEvent.DeviceType
CUTTLEFISH_ERROR_TYPE_UNSPECIFIED	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_ERROR_TYPE_UNSPECIFIED = 0;$/;"	e	enum:cuttlefish.MetricsEvent.ErrorType
CUTTLEFISH_EVENT_TYPE_DEVICE_BOOT	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_EVENT_TYPE_DEVICE_BOOT = 3;$/;"	e	enum:cuttlefish.MetricsEvent.EventType
CUTTLEFISH_EVENT_TYPE_ERROR	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_EVENT_TYPE_ERROR = 1;$/;"	e	enum:cuttlefish.MetricsEvent.EventType
CUTTLEFISH_EVENT_TYPE_LOCK_SCREEN_AVAILABLE	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_EVENT_TYPE_LOCK_SCREEN_AVAILABLE = 4;$/;"	e	enum:cuttlefish.MetricsEvent.EventType
CUTTLEFISH_EVENT_TYPE_UNSPECIFIED	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_EVENT_TYPE_UNSPECIFIED = 0;$/;"	e	enum:cuttlefish.MetricsEvent.EventType
CUTTLEFISH_EVENT_TYPE_VM_INSTANTIATION	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_EVENT_TYPE_VM_INSTANTIATION = 2;$/;"	e	enum:cuttlefish.MetricsEvent.EventType
CUTTLEFISH_EVENT_TYPE_VM_STOP	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_EVENT_TYPE_VM_STOP = 5;$/;"	e	enum:cuttlefish.MetricsEvent.EventType
CUTTLEFISH_OS_TYPE_LINUX_AARCH32	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_OS_TYPE_LINUX_AARCH32 = 3;$/;"	e	enum:cuttlefish.MetricsEvent.OsType
CUTTLEFISH_OS_TYPE_LINUX_AARCH64	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_OS_TYPE_LINUX_AARCH64 = 4;$/;"	e	enum:cuttlefish.MetricsEvent.OsType
CUTTLEFISH_OS_TYPE_LINUX_X86	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_OS_TYPE_LINUX_X86 = 1;$/;"	e	enum:cuttlefish.MetricsEvent.OsType
CUTTLEFISH_OS_TYPE_LINUX_X86_64	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_OS_TYPE_LINUX_X86_64 = 2;$/;"	e	enum:cuttlefish.MetricsEvent.OsType
CUTTLEFISH_OS_TYPE_UNSPECIFIED	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_OS_TYPE_UNSPECIFIED = 0;$/;"	e	enum:cuttlefish.MetricsEvent.OsType
CUTTLEFISH_VMM_TYPE_CROSVM	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_VMM_TYPE_CROSVM = 1;$/;"	e	enum:cuttlefish.MetricsEvent.VmmType
CUTTLEFISH_VMM_TYPE_QEMU	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_VMM_TYPE_QEMU = 2;$/;"	e	enum:cuttlefish.MetricsEvent.VmmType
CUTTLEFISH_VMM_TYPE_UNSPECIFIED	host/commands/metrics/proto/cf_metrics_event.proto	/^    CUTTLEFISH_VMM_TYPE_UNSPECIFIED = 0;$/;"	e	enum:cuttlefish.MetricsEvent.VmmType
CachedStreamBuffer	guest/hals/camera/cached_stream_buffer.cpp	/^CachedStreamBuffer::CachedStreamBuffer()$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer
CachedStreamBuffer	guest/hals/camera/cached_stream_buffer.cpp	/^CachedStreamBuffer::CachedStreamBuffer(CachedStreamBuffer&& from) noexcept {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer
CachedStreamBuffer	guest/hals/camera/cached_stream_buffer.cpp	/^CachedStreamBuffer::CachedStreamBuffer(const StreamBuffer& buffer)$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer
CachedStreamBuffer	guest/hals/camera/cached_stream_buffer.h	/^class CachedStreamBuffer {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
CallForwardInfo	host/commands/modem_simulator/sup_service.h	/^    CallForwardInfo(Reason reason) :$/;"	f	struct:cuttlefish::SupService::CallForwardInfo
CallForwardInfo	host/commands/modem_simulator/sup_service.h	/^  struct CallForwardInfo {$/;"	s	class:cuttlefish::SupService
CallForwardInfoStatus	host/commands/modem_simulator/sup_service.h	/^    enum CallForwardInfoStatus {$/;"	g	struct:cuttlefish::SupService::CallForwardInfo
CallService	host/commands/modem_simulator/call_service.cpp	/^CallService::CallService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::CallService
CallService	host/commands/modem_simulator/call_service.h	/^class CallService : public ModemService, public std::enable_shared_from_this<CallService>  {$/;"	c	namespace:cuttlefish
CallState	host/commands/modem_simulator/call_service.h	/^    enum CallState {$/;"	g	struct:cuttlefish::CallService::CallStatus
CallStateUpdate	host/commands/modem_simulator/call_service.cpp	/^void CallService::CallStateUpdate() {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
CallStatus	host/commands/modem_simulator/call_service.h	/^    CallStatus()$/;"	f	struct:cuttlefish::CallService::CallStatus
CallStatus	host/commands/modem_simulator/call_service.h	/^    CallStatus(const std::string_view number)$/;"	f	struct:cuttlefish::CallService::CallStatus
CallStatus	host/commands/modem_simulator/call_service.h	/^  struct CallStatus {$/;"	s	class:cuttlefish::CallService
CallToken	host/commands/modem_simulator/call_service.h	/^  using CallToken = std::pair<int, std::string>;$/;"	t	class:cuttlefish::CallService	typeref:typename:std::pair<int,std::string>
CallWaitingInfo	host/commands/modem_simulator/sup_service.h	/^    CallWaitingInfo() :$/;"	f	struct:cuttlefish::SupService::CallWaitingInfo
CallWaitingInfo	host/commands/modem_simulator/sup_service.h	/^  struct CallWaitingInfo {$/;"	s	class:cuttlefish::SupService
Callback	host/commands/modem_simulator/thread_looper.h	/^  typedef std::function<void()> Callback;$/;"	t	class:cuttlefish::ThreadLooper
CameraChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^CameraChannelHandler::CameraChannelHandler($/;"	f	class:cuttlefish::webrtc_streaming::CameraChannelHandler
CameraChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^class CameraChannelHandler : public webrtc::DataChannelObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming	file:
CameraController	host/frontend/webrtc/lib/camera_controller.h	/^class CameraController {$/;"	c	namespace:cuttlefish
CameraStreamer	host/frontend/webrtc/lib/camera_streamer.cpp	/^CameraStreamer::CameraStreamer(unsigned int port, unsigned int cid)$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer
CameraStreamer	host/frontend/webrtc/lib/camera_streamer.h	/^class CameraStreamer : public rtc::VideoSinkInterface<webrtc::VideoFrame>,$/;"	c	namespace:cuttlefish::webrtc_streaming
Cancel	host/libs/confui/host_virtual_input.h	/^enum class ConfUiKeys : std::uint32_t { Confirm = 7, Cancel = 8 };$/;"	e	enum:cuttlefish::confui::ConfUiKeys
CancelSerial	host/commands/modem_simulator/thread_looper.cpp	/^bool ThreadLooper::CancelSerial(Serial serial) {$/;"	f	class:cuttlefish::ThreadLooper	typeref:typename:bool
CancelSubscription	host/commands/kernel_log_monitor/kernel_log_server.h	/^  CancelSubscription,$/;"	e	enum:monitor::SubscriptionAction
Cbor	host/libs/confui/cbor.h	/^  Cbor(const std::string& prompt_text,$/;"	f	class:cuttlefish::confui::Cbor
Cbor	host/libs/confui/cbor.h	/^class Cbor {$/;"	c	namespace:cuttlefish::confui
CellInfo	guest/hals/ril/reference-libril/ril.h	/^  } CellInfo;$/;"	m	struct:__anon0bfbaecf6e08	typeref:union:__anon0bfbaecf6e08::__anon0bfbaecf6f0a
CellInfo	guest/hals/ril/reference-libril/ril.h	/^  } CellInfo;$/;"	m	struct:__anon0bfbaecf7008	typeref:union:__anon0bfbaecf7008::__anon0bfbaecf710a
CellInfo	guest/hals/ril/reference-libril/ril.h	/^  } CellInfo;$/;"	m	struct:__anon0bfbaecf7208	typeref:union:__anon0bfbaecf7208::__anon0bfbaecf730a
CfAudioDeviceModule	host/frontend/webrtc/lib/audio_device.cpp	/^CfAudioDeviceModule::CfAudioDeviceModule() {}$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule
CfAudioDeviceModule	host/frontend/webrtc/lib/audio_device.h	/^class CfAudioDeviceModule : public webrtc::AudioDeviceModule,$/;"	c	namespace:cuttlefish::webrtc_streaming
CfConnectionObserverFactory	host/frontend/webrtc/connection_observer.cpp	/^CfConnectionObserverFactory::CfConnectionObserverFactory($/;"	f	class:cuttlefish::CfConnectionObserverFactory
CfConnectionObserverFactory	host/frontend/webrtc/connection_observer.h	/^class CfConnectionObserverFactory$/;"	c	namespace:cuttlefish
CfOperatorObserver	host/frontend/webrtc/main.cpp	/^class CfOperatorObserver$/;"	c	file:
Cgroups	shared/config/cgroups.json	/^  "Cgroups": [$/;"	a
ChangeMode	host/commands/modem_simulator/sim_service.h	/^    enum ChangeMode {WITH_PIN, WITH_PUK};$/;"	g	struct:cuttlefish::SimService::PinStatus
ChangePIN	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::PinStatus::ChangePIN(ChangeMode mode,$/;"	f	class:cuttlefish::SimService::PinStatus	typeref:typename:bool
ChangePUK	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::PinStatus::ChangePUK(const std::string_view puk,$/;"	f	class:cuttlefish::SimService::PinStatus	typeref:typename:bool
ChangePin1AndAdjustSimStatus	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::ChangePin1AndAdjustSimStatus(PinStatus::ChangeMode mode,$/;"	f	class:cuttlefish::SimService	typeref:typename:bool
ChannelMonitor	host/commands/modem_simulator/channel_monitor.cpp	/^ChannelMonitor::ChannelMonitor(ModemSimulator* modem,$/;"	f	class:cuttlefish::ChannelMonitor
ChannelMonitor	host/commands/modem_simulator/channel_monitor.h	/^class ChannelMonitor {$/;"	c	namespace:cuttlefish
ChdirIntoRuntimeDir	host/commands/run_cvd/main.cc	/^bool ChdirIntoRuntimeDir(const CuttlefishConfig::InstanceSpecific& instance) {$/;"	f	namespace:cuttlefish::__anonadab6e0c0111	typeref:typename:bool
CheckCredentials	host/libs/allocd/resource_manager.cpp	/^bool ResourceManager::CheckCredentials(SharedFD client_socket, uid_t uid) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:bool
CheckIdx	common/libs/concurrency/multiplexer.h	/^  void CheckIdx(const int idx) {$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:void
CheckMarked	common/libs/fs/shared_fd.cpp	/^void CheckMarked(fd_set* in_out_mask, SharedFDSet* in_out_set) {$/;"	f	namespace:cuttlefish::__anond70c3a4f0111	typeref:typename:void
CheckPasswordValid	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::PinStatus::CheckPasswordValid(std::string_view password) {$/;"	f	class:cuttlefish::SimService::PinStatus	typeref:typename:bool
CheckResponse	common/libs/net/netlink_client.cpp	/^bool NetlinkClientImpl::CheckResponse(uint32_t seq_no) {$/;"	f	class:cuttlefish::__anon61381e100111::NetlinkClientImpl	typeref:typename:bool
CheckUTF8Copy	host/libs/confui/cbor.cc	/^Cbor::Error Cbor::CheckUTF8Copy(const std::string& text) {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:Cbor::Error
ChkAndGetConfig	host/libs/screen_connector/screen_connector_common.h	/^  static auto ChkAndGetConfig() -> decltype(cuttlefish::CuttlefishConfig::Get()) {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:decltype(cuttlefish::CuttlefishConfig::Get ())
ChmapInfoCommand	host/libs/audio_connector/commands.cpp	/^ChmapInfoCommand::ChmapInfoCommand(uint32_t start_id, size_t count,$/;"	f	class:cuttlefish::ChmapInfoCommand
ChmapInfoCommand	host/libs/audio_connector/commands.h	/^class ChmapInfoCommand : public InfoCommand<virtio_snd_chmap_info> {$/;"	c	namespace:cuttlefish
ChmapsInfo	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::ChmapsInfo(ChmapInfoCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
ChooseAction	host/libs/config/data_image.cpp	/^  Result<DataImageAction> ChooseAction() {$/;"	f	class:cuttlefish::InitializeDataImageImpl	typeref:typename:Result<DataImageAction>	file:
ChooseConfig	host/libs/config/config_flag.cpp	/^  bool ChooseConfig(const std::string& name) {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:bool	file:
CidState	host/commands/modem_simulator/data_service.h	/^    enum CidState {ACTIVE, NO_ACTIVE};$/;"	g	struct:cuttlefish::DataService::PDPContext
Clamp	shared/config/task_profiles.json	/^            "Clamp": "0"$/;"	s	object:Profiles.26.Actions.0.Params
Clamp	shared/config/task_profiles.json	/^            "Clamp": "30%"$/;"	s	object:Profiles.27.Actions.0.Params
Class	host/commands/modem_simulator/sim_service.h	/^    enum Class : int32_t {$/;"	g	struct:cuttlefish::SimService::FacilityLock	typeref:typename:int32_t
CleanPriorFiles	host/commands/assemble_cvd/clean.cc	/^bool CleanPriorFiles(const std::set<std::string>& preserving,$/;"	f	namespace:cuttlefish	typeref:typename:bool
CleanPriorFiles	host/commands/assemble_cvd/clean.cc	/^bool CleanPriorFiles(const std::string& path, const std::set<std::string>& preserving) {$/;"	f	namespace:cuttlefish::__anon587bcda10111	typeref:typename:bool
CleanPriorFiles	host/commands/assemble_cvd/clean.cc	/^bool CleanPriorFiles(const std::vector<std::string>& paths, const std::set<std::string>& preserv/;"	f	namespace:cuttlefish::__anon587bcda10111	typeref:typename:bool
CleanStopInstance	host/commands/stop/main.cc	/^bool CleanStopInstance(const CuttlefishConfig::InstanceSpecific& instance) {$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:bool
CleanUp	host/libs/confui/session.cc	/^void Session::CleanUp() {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:void
CleanupBridgeGateway	host/libs/allocd/alloc_utils.cpp	/^void CleanupBridgeGateway(const std::string& name, const std::string& ipaddr,$/;"	f	namespace:cuttlefish	typeref:typename:void
CleanupEthernetIface	host/libs/allocd/alloc_utils.cpp	/^void CleanupEthernetIface(const std::string& name,$/;"	f	namespace:cuttlefish	typeref:typename:void
ClearFailureRecord	host/commands/secure_env/soft_gatekeeper.h	/^    virtual bool ClearFailureRecord(uint32_t uid, secure_id_t user_id, bool \/* secure *\/) {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
ClearFailureRecord	host/commands/secure_env/tpm_gatekeeper.cpp	/^bool TpmGatekeeper::ClearFailureRecord($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:bool
Client	host/commands/modem_simulator/channel_monitor.cpp	/^Client::Client(cuttlefish::SharedFD fd) : client_fd(fd) {}$/;"	f	class:cuttlefish::Client
Client	host/commands/modem_simulator/channel_monitor.cpp	/^Client::Client(cuttlefish::SharedFD fd, ClientType client_type)$/;"	f	class:cuttlefish::Client
Client	host/commands/modem_simulator/channel_monitor.h	/^class Client {$/;"	c	namespace:cuttlefish
ClientDynHandler	host/frontend/webrtc_operator/client_handler.cpp	/^ClientDynHandler::ClientDynHandler(struct lws* wsi,$/;"	f	class:cuttlefish::ClientDynHandler
ClientDynHandler	host/frontend/webrtc_operator/client_handler.h	/^class ClientDynHandler : public DynHandler,$/;"	c	namespace:cuttlefish
ClientHandler	host/frontend/webrtc/lib/client_handler.cpp	/^ClientHandler::ClientHandler($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler
ClientHandler	host/frontend/webrtc/lib/client_handler.h	/^class ClientHandler : public webrtc::PeerConnectionObserver,$/;"	c	namespace:cuttlefish::webrtc_streaming
ClientHandler	host/frontend/webrtc_operator/client_handler.h	/^class ClientHandler {$/;"	c	namespace:cuttlefish
ClientInfo	host/commands/metrics/proto/clientanalytics.proto	/^message ClientInfo {$/;"	m
ClientSocket	common/libs/utils/tcp_socket.cpp	/^ClientSocket::ClientSocket(int port)$/;"	f	class:cuttlefish::ClientSocket
ClientSocket	common/libs/utils/tcp_socket.h	/^  ClientSocket(ClientSocket&& other) : fd_{other.fd_} {}$/;"	f	class:cuttlefish::ClientSocket
ClientSocket	common/libs/utils/tcp_socket.h	/^  explicit ClientSocket(SharedFD fd) : fd_(fd) {}$/;"	f	class:cuttlefish::ClientSocket
ClientSocket	common/libs/utils/tcp_socket.h	/^class ClientSocket {$/;"	c	namespace:cuttlefish
ClientType	host/commands/modem_simulator/channel_monitor.h	/^  enum ClientType { RIL, REMOTE };$/;"	g	class:cuttlefish::Client
ClientVideoTrackImpl	host/frontend/webrtc/lib/client_handler.cpp	/^class ClientVideoTrackImpl : public ClientVideoTrackInterface {$/;"	c	namespace:cuttlefish::webrtc_streaming	file:
ClientVideoTrackInterface	host/frontend/webrtc/lib/client_handler.h	/^class ClientVideoTrackInterface {$/;"	c	namespace:cuttlefish::webrtc_streaming
ClientWSHandler	host/frontend/webrtc_operator/client_handler.cpp	/^ClientWSHandler::ClientWSHandler(struct lws* wsi, DeviceRegistry* registry,$/;"	f	class:cuttlefish::ClientWSHandler
ClientWSHandler	host/frontend/webrtc_operator/client_handler.h	/^class ClientWSHandler : public ClientHandler,$/;"	c	namespace:cuttlefish
ClientWSHandlerFactory	host/frontend/webrtc_operator/client_handler.cpp	/^ClientWSHandlerFactory::ClientWSHandlerFactory(DeviceRegistry* registry,$/;"	f	class:cuttlefish::ClientWSHandlerFactory
ClientWSHandlerFactory	host/frontend/webrtc_operator/client_handler.h	/^class ClientWSHandlerFactory : public WebSocketHandlerFactory {$/;"	c	namespace:cuttlefish
ClirStatus	host/commands/modem_simulator/sup_service.h	/^    enum ClirStatus {$/;"	g	struct:cuttlefish::SupService::ClirStatusInfo
ClirStatusInfo	host/commands/modem_simulator/sup_service.h	/^  struct ClirStatusInfo {$/;"	s	class:cuttlefish::SupService
ClirType	host/commands/modem_simulator/sup_service.h	/^    enum ClirType {$/;"	g	struct:cuttlefish::SupService::ClirStatusInfo
Clock	host/libs/confui/session.h	/^  using Clock = std::chrono::steady_clock;$/;"	t	class:cuttlefish::confui::Session	typeref:typename:std::chrono::steady_clock
Clone	host/frontend/webrtc/display_handler.h	/^  std::unique_ptr<WebRtcScProcessedFrame> Clone() {$/;"	f	struct:cuttlefish::WebRtcScProcessedFrame	typeref:typename:std::unique_ptr<WebRtcScProcessedFrame>
Close	common/libs/fs/shared_fd.cpp	/^void FileInstance::Close() {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:void
Close	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::Close() {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
Close	host/libs/websocket/websocket_handler.cpp	/^void WebSocketHandler::Close() {$/;"	f	class:cuttlefish::WebSocketHandler	typeref:typename:void
CloseDir	host/commands/fetcher/build_api.cc	/^struct CloseDir {$/;"	s	namespace:cuttlefish	file:
CloseRemoteConnection	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::CloseRemoteConnection(cuttlefish::SharedFD client) {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
CloseRemoteConnection	host/commands/modem_simulator/modem_service.cpp	/^void ModemService::CloseRemoteConnection(cuttlefish::SharedFD remote_client) {$/;"	f	class:cuttlefish::ModemService	typeref:typename:void
ClosedInstance	common/libs/fs/shared_fd.cpp	/^\/* static *\/ std::shared_ptr<FileInstance> FileInstance::ClosedInstance() {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:std::shared_ptr<FileInstance>
Closer	host/libs/graphics_detector/graphics_detector.cpp	/^  Closer(std::function<void()> on_close) : on_close_(on_close) {}$/;"	f	class:cuttlefish::__anon29a199ff0111::Closer	file:
Closer	host/libs/graphics_detector/graphics_detector.cpp	/^class Closer {$/;"	c	namespace:cuttlefish::__anon29a199ff0111	file:
Clr	common/libs/fs/shared_select.h	/^  void Clr(const SharedFD& in) {$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:void
Cmd	host/libs/vm_manager/crosvm_builder.cpp	/^Command& CrosvmBuilder::Cmd() { return command_; }$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:Command &
CmdReply	host/libs/audio_connector/server.cpp	/^bool AudioClientConnection::CmdReply(AudioStatus status, const void* data,$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:bool
CombineTargetZipFiles	host/commands/assemble_cvd/super_image_mixer.cc	/^bool CombineTargetZipFiles(const std::string& default_target_zip,$/;"	f	namespace:cuttlefish::__anonae6530d30111	typeref:typename:bool
Command	common/libs/utils/subprocess.h	/^  Command(const std::string& executable,$/;"	f	class:cuttlefish::Command
Command	common/libs/utils/subprocess.h	/^class Command {$/;"	c	namespace:cuttlefish
CommandHandler	host/commands/modem_simulator/modem_service.cpp	/^CommandHandler::CommandHandler(const std::string& command, f_func handler)$/;"	f	class:cuttlefish::CommandHandler
CommandHandler	host/commands/modem_simulator/modem_service.cpp	/^CommandHandler::CommandHandler(const std::string& command, p_func handler)$/;"	f	class:cuttlefish::CommandHandler
CommandHandler	host/commands/modem_simulator/modem_service.h	/^class CommandHandler {$/;"	c	namespace:cuttlefish
CommandInfo	guest/hals/ril/reference-libril/ril_internal.h	/^typedef struct CommandInfo CommandInfo;$/;"	t	namespace:android	typeref:struct:CommandInfo
CommandInfo	guest/hals/ril/reference-libril/ril_internal.h	/^typedef struct CommandInfo {$/;"	s	namespace:android
CommandInfo	guest/hals/ril/reference-libril/ril_internal.h	/^} CommandInfo;$/;"	t	namespace:android	typeref:struct:android::CommandInfo
CommandParser	host/commands/modem_simulator/command_parser.h	/^  explicit CommandParser(const std::string& command) : copy_command_(command) {$/;"	f	class:cuttlefish::CommandParser
CommandParser	host/commands/modem_simulator/command_parser.h	/^class CommandParser {$/;"	c	namespace:cuttlefish
CommandSource	host/libs/config/command_source.h	/^class CommandSource : public virtual Feature {$/;"	c	namespace:cuttlefish
CommandToBinaryMap	host/commands/cvd/main.cc	/^const std::map<std::string, std::string> CommandToBinaryMap = {$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:const std::map<std::string,std::string>
CommandType	host/commands/modem_simulator/stk_service.h	/^  enum CommandType {$/;"	g	class:cuttlefish::StkService
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::BluetoothConnector	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::ConfigServer	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::LogcatReceiver	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::MetricsService	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::OpenWrt	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::RootCanal	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::SecureEnvironment	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::TombstoneReceiver	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::VehicleHalServer	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::VmmCommands	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch.cc	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::WmediumdServer	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch_modem.cpp	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:std::vector<Command>	file:
Commands	host/commands/run_cvd/launch_streamer.cpp	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:std::vector<Command>	file:
Commands	host/libs/config/adb/launch.cpp	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbConnector	typeref:typename:std::vector<Command>	file:
Commands	host/libs/config/adb/launch.cpp	/^  std::vector<Command> Commands() override {$/;"	f	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:std::vector<Command>	file:
Commit	host/libs/wayland/wayland_surface.cpp	/^void Surface::Commit() {$/;"	f	class:wayland::Surface	typeref:typename:void
Compare	common/libs/net/netlink_request_test.cpp	/^bool Compare(MatchResultListener* result_listener,$/;"	f	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:bool
Compare	host/commands/modem_simulator/modem_service.cpp	/^int CommandHandler::Compare(const std::string& command) const {$/;"	f	class:cuttlefish::CommandHandler	typeref:typename:int
CompareHmacSharingParams	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^class CompareHmacSharingParams {$/;"	c	namespace:cuttlefish	file:
CompleteReleaseFrame	common/libs/utils/network.cpp	/^struct __attribute__((packed)) CompleteReleaseFrame {$/;"	s	namespace:cuttlefish	file:
ComponentDisk	host/libs/image_aggregator/cdisk_spec.proto	/^message ComponentDisk {$/;"	m
CompositeDisk	host/libs/image_aggregator/cdisk_spec.proto	/^message CompositeDisk {$/;"	m
CompositeDiskBuilder	host/libs/image_aggregator/image_aggregator.cc	/^  CompositeDiskBuilder() : next_disk_offset_(sizeof(GptBeginning)) {}$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	file:
CompositeDiskBuilder	host/libs/image_aggregator/image_aggregator.cc	/^class CompositeDiskBuilder {$/;"	c	namespace:cuttlefish::__anon02806fd80111	file:
CompositeSerializable	host/commands/secure_env/composite_serialization.cpp	/^CompositeSerializable::CompositeSerializable($/;"	f	class:cuttlefish::CompositeSerializable
CompositeSerializable	host/commands/secure_env/composite_serialization.h	/^class CompositeSerializable : public keymaster::Serializable {$/;"	c	namespace:cuttlefish
ComputeFastHash	host/commands/secure_env/soft_gatekeeper.h	/^    fast_hash_t ComputeFastHash(const SizedBuffer& password, uint64_t salt) {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:fast_hash_t
ComputePasswordSignature	host/commands/secure_env/soft_gatekeeper.h	/^    virtual void ComputePasswordSignature(uint8_t* signature, uint32_t signature_length,$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:void
ComputePasswordSignature	host/commands/secure_env/tpm_gatekeeper.cpp	/^void TpmGatekeeper::ComputePasswordSignature($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:void
ComputeScreenSizeInBytes	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ComputeScreenSizeInBytes(const std::uint32_t w,$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
ComputeScreenStrideBytes	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ComputeScreenStrideBytes(const std::uint32_t w) {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
ComputeSharedHmac	guest/hals/keymaster/remote/remote_keymaster.cpp	/^ComputeSharedHmacResponse RemoteKeymaster::ComputeSharedHmac($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:ComputeSharedHmacResponse
ComputeSharedHmac	guest/hals/keymint/remote/remote_keymaster.cpp	/^ComputeSharedHmacResponse RemoteKeymaster::ComputeSharedHmac($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:ComputeSharedHmacResponse
ComputeSharedHmac	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^keymaster_error_t TpmKeymasterEnforcement::ComputeSharedHmac($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:keymaster_error_t
ComputeSignature	host/commands/secure_env/soft_gatekeeper.h	/^    virtual void ComputeSignature(uint8_t* signature, uint32_t signature_length, const uint8_t*,$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:void
ComputeSignature	host/commands/secure_env/tpm_gatekeeper.cpp	/^void TpmGatekeeper::ComputeSignature($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:void
Condition	host/libs/confui/cbor.cc	/^  enum class Condition { k24, k0x100, k0x10000, k0x100000000, kBeyond };$/;"	g	function:cuttlefish::confui::Cbor::WriteHeader	file:
ConfUiAbortMessage	common/libs/confui/protocol_types.h	/^using ConfUiAbortMessage = ConfUiGenericMessage<ConfUiCmd::kAbort>;$/;"	t	namespace:cuttlefish::confui	typeref:typename:ConfUiGenericMessage<ConfUiCmd::kAbort>
ConfUiAckMessage	common/libs/confui/protocol_types.h	/^  ConfUiAckMessage(const std::string& session_id, const bool is_success,$/;"	f	class:cuttlefish::confui::ConfUiAckMessage
ConfUiAckMessage	common/libs/confui/protocol_types.h	/^class ConfUiAckMessage : public ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfUiAckMessage	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    using ConfUiAckMessage = cuttlefish::confui::ConfUiAckMessage;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:cuttlefish::confui::ConfUiAckMessage
ConfUiAckMessage	guest/hals/confirmationui/guest_session.h	/^    using ConfUiAckMessage = cuttlefish::confui::ConfUiAckMessage;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:cuttlefish::confui::ConfUiAckMessage
ConfUiCheck	common/libs/confui/utils.h	/^#define ConfUiCheck(/;"	d
ConfUiCliResponseMessage	common/libs/confui/protocol_types.h	/^  ConfUiCliResponseMessage(const std::string& session_id,$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage
ConfUiCliResponseMessage	common/libs/confui/protocol_types.h	/^class ConfUiCliResponseMessage : public ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfUiCmd	common/libs/confui/protocol_types.h	/^enum class ConfUiCmd : std::uint32_t {$/;"	g	namespace:cuttlefish::confui	typeref:typename:std::uint32_t
ConfUiGenericMessage	common/libs/confui/protocol_types.h	/^  ConfUiGenericMessage(const std::string& session_id)$/;"	f	class:cuttlefish::confui::ConfUiGenericMessage
ConfUiGenericMessage	common/libs/confui/protocol_types.h	/^class ConfUiGenericMessage : public ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfUiKeys	host/libs/confui/host_virtual_input.h	/^enum class ConfUiKeys : std::uint32_t { Confirm = 7, Cancel = 8 };$/;"	g	namespace:cuttlefish::confui	typeref:typename:std::uint32_t
ConfUiLog	common/libs/confui/utils.h	/^#define ConfUiLog(/;"	d
ConfUiMessage	common/libs/confui/protocol_types.h	/^  ConfUiMessage(const std::string& session_id) : session_id_{session_id} {}$/;"	f	class:cuttlefish::confui::ConfUiMessage
ConfUiMessage	common/libs/confui/protocol_types.h	/^class ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfUiMessage	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    using ConfUiMessage = cuttlefish::confui::ConfUiMessage;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:cuttlefish::confui::ConfUiMessage
ConfUiMessage	guest/hals/confirmationui/guest_session.h	/^    using ConfUiMessage = cuttlefish::confui::ConfUiMessage;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:cuttlefish::confui::ConfUiMessage
ConfUiPacketInfo	common/libs/confui/packet_types.h	/^using ConfUiPacketInfo = std::vector<std::vector<std::uint8_t>>;$/;"	t	namespace:cuttlefish::confui::packet	typeref:typename:std::vector<std::vector<std::uint8_t>>
ConfUiRenderer	host/libs/confui/host_renderer.cc	/^ConfUiRenderer::ConfUiRenderer(const std::uint32_t display,$/;"	f	class:cuttlefish::confui::ConfUiRenderer
ConfUiRenderer	host/libs/confui/host_renderer.h	/^class ConfUiRenderer {$/;"	c	namespace:cuttlefish::confui
ConfUiStartMessage	common/libs/confui/protocol_types.h	/^  ConfUiStartMessage(const std::string session_id,$/;"	f	class:cuttlefish::confui::ConfUiStartMessage
ConfUiStartMessage	common/libs/confui/protocol_types.h	/^class ConfUiStartMessage : public ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfUiStopMessage	common/libs/confui/protocol_types.h	/^using ConfUiStopMessage = ConfUiGenericMessage<ConfUiCmd::kStop>;$/;"	t	namespace:cuttlefish::confui	typeref:typename:ConfUiGenericMessage<ConfUiCmd::kStop>
ConfUiUserSelectionMessage	common/libs/confui/protocol_types.h	/^  ConfUiUserSelectionMessage(const std::string& session_id,$/;"	f	class:cuttlefish::confui::ConfUiUserSelectionMessage
ConfUiUserSelectionMessage	common/libs/confui/protocol_types.h	/^class ConfUiUserSelectionMessage : public ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfUiUserTouchMessage	common/libs/confui/protocol_types.h	/^  ConfUiUserTouchMessage(const std::string& session_id, const int x,$/;"	f	class:cuttlefish::confui::ConfUiUserTouchMessage
ConfUiUserTouchMessage	common/libs/confui/protocol_types.h	/^class ConfUiUserTouchMessage : public ConfUiMessage {$/;"	c	namespace:cuttlefish::confui
ConfigExists	host/libs/config/cuttlefish_config.cpp	/^\/*static*\/ bool CuttlefishConfig::ConfigExists() {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
ConfigFileLocation	host/commands/modem_simulator/nvram_config.cpp	/^std::string NvramConfig::ConfigFileLocation() const {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:std::string
ConfigFlag	host/libs/config/config_flag.h	/^class ConfigFlag : public FlagFeature {};$/;"	c	namespace:cuttlefish
ConfigFlagComponent	host/libs/config/config_flag.cpp	/^fruit::Component<SystemImageDirFlag, ConfigFlag> ConfigFlagComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<SystemImageDirFlag,ConfigFlag>
ConfigFlagImpl	host/libs/config/config_flag.cpp	/^class ConfigFlagImpl : public ConfigFlag {$/;"	c	namespace:cuttlefish::__anon2e549bd00111	file:
ConfigFlagPlaceholder	host/libs/config/config_flag.cpp	/^fruit::Component<ConfigFlag> ConfigFlagPlaceholder() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<ConfigFlag>
ConfigFlagPlaceholderImpl	host/libs/config/config_flag.cpp	/^class ConfigFlagPlaceholderImpl : public ConfigFlag {$/;"	c	namespace:cuttlefish::__anon2e549bd00111	file:
ConfigFragment	host/libs/config/config_fragment.h	/^class ConfigFragment {$/;"	c	namespace:cuttlefish
ConfigHandler	host/frontend/webrtc_operator/client_handler.cpp	/^ConfigHandler::ConfigHandler(struct lws* wsi, const ServerConfig& server_config)$/;"	f	class:cuttlefish::ConfigHandler
ConfigHandler	host/frontend/webrtc_operator/client_handler.h	/^class ConfigHandler : public DynHandler {$/;"	c	namespace:cuttlefish
ConfigReader	host/libs/config/config_flag.cpp	/^class ConfigReader : public FlagFeature {$/;"	c	namespace:cuttlefish::__anon2e549bd00111	file:
ConfigServer	host/commands/run_cvd/launch.cc	/^class ConfigServer : public CommandSource {$/;"	c	namespace:cuttlefish	file:
ConfigServerBinary	host/libs/config/known_paths.cpp	/^std::string ConfigServerBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
Configure	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::Configure(const ConfigureRequest& request, ConfigureResponse* response) {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
Configure	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::Configure(const ConfigureRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ConfigureBootDevices	host/libs/vm_manager/crosvm_manager.cpp	/^std::string CrosvmManager::ConfigureBootDevices(int num_disks) {$/;"	f	class:cuttlefish::vm_manager::CrosvmManager	typeref:typename:std::string
ConfigureBootDevices	host/libs/vm_manager/qemu_manager.cpp	/^std::string QemuManager::ConfigureBootDevices(int num_disks) {$/;"	f	class:cuttlefish::vm_manager::QemuManager	typeref:typename:std::string
ConfigureBootPatchlevel	guest/hals/keymint/remote/remote_keymaster.cpp	/^ConfigureBootPatchlevelResponse RemoteKeymaster::ConfigureBootPatchlevel($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:ConfigureBootPatchlevelResponse
ConfigureGpuMode	host/libs/vm_manager/crosvm_manager.cpp	/^std::vector<std::string> CrosvmManager::ConfigureGpuMode($/;"	f	class:cuttlefish::vm_manager::CrosvmManager	typeref:typename:std::vector<std::string>
ConfigureGpuMode	host/libs/vm_manager/qemu_manager.cpp	/^std::vector<std::string> QemuManager::ConfigureGpuMode($/;"	f	class:cuttlefish::vm_manager::QemuManager	typeref:typename:std::vector<std::string>
ConfigureLogs	host/commands/run_cvd/main.cc	/^void ConfigureLogs(const CuttlefishConfig& config,$/;"	f	namespace:cuttlefish::__anonadab6e0c0111	typeref:typename:void
ConfigureMultipleBootDevices	host/libs/vm_manager/vm_manager.cpp	/^std::string ConfigureMultipleBootDevices(const std::string& pci_path,$/;"	f	namespace:cuttlefish::vm_manager	typeref:typename:std::string
ConfigureVendorPatchlevel	guest/hals/keymint/remote/remote_keymaster.cpp	/^ConfigureVendorPatchlevelResponse RemoteKeymaster::ConfigureVendorPatchlevel($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:ConfigureVendorPatchlevelResponse
Confirm	host/libs/confui/host_virtual_input.h	/^enum class ConfUiKeys : std::uint32_t { Confirm = 7, Cancel = 8 };$/;"	e	enum:cuttlefish::confui::ConfUiKeys
Conflict	host/libs/websocket/websocket_handler.h	/^  Conflict = 409,$/;"	e	enum:cuttlefish::HttpStatusCode
Connect	common/libs/fs/shared_fd.cpp	/^int FileInstance::Connect(const struct sockaddr* addr, socklen_t addrlen) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
Connect	common/libs/utils/vsock_connection.cpp	/^bool VsockClientConnection::Connect(unsigned int port, unsigned int cid) {$/;"	f	class:cuttlefish::VsockClientConnection	typeref:typename:bool
Connect	common/libs/utils/vsock_connection.cpp	/^bool VsockServerConnection::Connect(unsigned int port, unsigned int cid) {$/;"	f	class:cuttlefish::VsockServerConnection	typeref:typename:bool
Connect	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::Connect() {$/;"	f	class:WsConnectionImpl	typeref:typename:void
Connect	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^export async function Connect(deviceId, serverConnector) {$/;"	f
Connect	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^bool WmediumdController::Connect(const std::string& serverSocketPath) {$/;"	f	class:cuttlefish::WmediumdController	typeref:typename:bool
ConnectAsync	common/libs/utils/vsock_connection.cpp	/^std::future<bool> VsockConnection::ConnectAsync(unsigned int port,$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:std::future<bool>
ConnectDevice	host/frontend/webrtc_operator/assets/js/app.js	/^async function ConnectDevice(deviceId, serverConnector) {$/;"	f
ConnectDevice	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  ConnectDevice(pc) {$/;"	m	class:Controller
ConnectHandler	host/frontend/webrtc_operator/client_handler.cpp	/^ConnectHandler::ConnectHandler(struct lws* wsi, DeviceRegistry* registry,$/;"	f	class:cuttlefish::ConnectHandler
ConnectHandler	host/frontend/webrtc_operator/client_handler.h	/^class ConnectHandler : public ClientDynHandler {$/;"	c	namespace:cuttlefish
ConnectInner	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::ConnectInner() {$/;"	f	class:WsConnectionImpl	typeref:typename:void
ConnectToHost	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^cuttlefish::SharedFD TrustyConfirmationUI::ConnectToHost() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:cuttlefish::SharedFD
ConnectToRemoteCvd	host/commands/modem_simulator/modem_service.cpp	/^cuttlefish::SharedFD ModemService::ConnectToRemoteCvd(std::string port) {$/;"	f	class:cuttlefish::ModemService	typeref:typename:cuttlefish::SharedFD
ConnectWithTimeout	common/libs/fs/shared_fd.cpp	/^int FileInstance::ConnectWithTimeout(const struct sockaddr* addr,$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
Connecting to device	host/frontend/webrtc_operator/assets/client.html	/^            <h3 id='status-message' class='connecting'>Connecting to device<\/h3>$/;"	j
ConnectionObserver	host/frontend/webrtc/lib/connection_observer.h	/^class ConnectionObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming
ConnectionObserverFactory	host/frontend/webrtc/lib/connection_observer.h	/^class ConnectionObserverFactory {$/;"	c	namespace:cuttlefish::webrtc_streaming
ConnectionObserverImpl	host/frontend/webrtc/connection_observer.cpp	/^  ConnectionObserverImpl($/;"	f	class:cuttlefish::ConnectionObserverImpl	file:
ConnectionObserverImpl	host/frontend/webrtc/connection_observer.cpp	/^class ConnectionObserverImpl$/;"	c	namespace:cuttlefish	file:
ConnectivityChecker	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    public ConnectivityChecker(Context context, EventReporter eventReporter) {$/;"	m	class:ConnectivityChecker
ConnectivityChecker	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^public class ConnectivityChecker extends JobBase {$/;"	c
Connector	host/frontend/webrtc_operator/assets/js/server_connector.js	/^class Connector {$/;"	c
ConnectorTcpArg	host/libs/config/adb/launch.cpp	/^  std::string ConnectorTcpArg() const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:std::string	file:
ConnectorVsockArg	host/libs/config/adb/launch.cpp	/^  std::string ConnectorVsockArg() const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:std::string	file:
ConsoleForwarder	host/commands/console_forwarder/main.cpp	/^  ConsoleForwarder(std::string console_path, SharedFD console_in,$/;"	f	class:cuttlefish::ConsoleForwarder	file:
ConsoleForwarder	host/commands/console_forwarder/main.cpp	/^class ConsoleForwarder {$/;"	c	namespace:cuttlefish	file:
ConsoleForwarder	host/commands/run_cvd/launch.cc	/^class ConsoleForwarder : public CommandSource, public DiagnosticInformation {$/;"	c	namespace:cuttlefish	file:
ConsoleForwarderBinary	host/libs/config/known_paths.cpp	/^std::string ConsoleForwarderBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
ConsoleForwarderMain	host/commands/console_forwarder/main.cpp	/^int ConsoleForwarderMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
ConsoleSeverity	common/libs/utils/tee_logging.cpp	/^LogSeverity ConsoleSeverity() {$/;"	f	namespace:cuttlefish	typeref:typename:LogSeverity
Contains	host/libs/confui/session.cc	/^static bool Contains(const C& c, T&& item) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool	file:
ContentType	host/commands/fetcher/build_api.h	/^  const std::string& ContentType() const { return content_type; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:const std::string &
Contents	common/libs/utils/archive.cpp	/^std::vector<std::string> Archive::Contents() {$/;"	f	class:cuttlefish::Archive	typeref:typename:std::vector<std::string>
ContinueSubscription	host/commands/kernel_log_monitor/kernel_log_server.h	/^  ContinueSubscription,$/;"	e	enum:monitor::SubscriptionAction
ControlChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^ControlChannelHandler::ControlChannelHandler($/;"	f	class:cuttlefish::webrtc_streaming::ControlChannelHandler
ControlChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^class ControlChannelHandler : public webrtc::DataChannelObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming	file:
ControlMessage	common/libs/utils/unix_sockets.cpp	/^ControlMessage::ControlMessage(ControlMessage&& existing) {$/;"	f	class:cuttlefish::ControlMessage
ControlMessage	common/libs/utils/unix_sockets.h	/^struct ControlMessage {$/;"	s	namespace:cuttlefish
ControlPanelButton	host/libs/config/custom_actions.h	/^struct ControlPanelButton {$/;"	s	namespace:cuttlefish
ControlPanelButtonDescriptor	host/frontend/webrtc/lib/streamer.cpp	/^struct ControlPanelButtonDescriptor {$/;"	s	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	file:
Controller	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^class Controller {$/;"	c
Controller	shared/config/cgroups.json	/^      "Controller": "cpuset",$/;"	s	object:Cgroups.0
Controller	shared/config/task_profiles.json	/^            "Controller": "blkio",$/;"	s	object:Profiles.20.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "blkio",$/;"	s	object:Profiles.21.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "blkio",$/;"	s	object:Profiles.22.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "blkio",$/;"	s	object:Profiles.23.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpu",$/;"	s	object:Profiles.0.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpu",$/;"	s	object:Profiles.1.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpu",$/;"	s	object:Profiles.2.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpu",$/;"	s	object:Profiles.3.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpu",$/;"	s	object:Profiles.4.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpu",$/;"	s	object:Profiles.5.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.10.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.11.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.12.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.13.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.14.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.15.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.16.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.17.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.18.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.19.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.6.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.7.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.8.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "cpuset",$/;"	s	object:Profiles.9.Actions.0.Params
Controller	shared/config/task_profiles.json	/^            "Controller": "memory",$/;"	s	object:Profiles.30.Actions.0.Params
CopyFrom	common/libs/fs/shared_fd.cpp	/^bool FileInstance::CopyFrom(FileInstance& in, size_t length) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:bool
CountSizeAndNewLines	common/libs/utils/tee_logging.cpp	/^static std::pair<int, int> CountSizeAndNewLines(const char* message) {$/;"	f	namespace:cuttlefish	typeref:typename:std::pair<int,int>	file:
Crc32	host/commands/fetcher/build_api.h	/^  unsigned int Crc32() const { return crc32; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:unsigned int
Creat	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Creat(const std::string& path, mode_t mode) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
Create	host/commands/fetcher/curl_wrapper.cc	/^\/* static *\/ std::unique_ptr<CurlWrapper> CurlWrapper::Create() {$/;"	f	class:cuttlefish::CurlWrapper	typeref:typename:std::unique_ptr<CurlWrapper>
Create	host/frontend/webrtc/lib/client_handler.cpp	/^std::shared_ptr<ClientHandler> ClientHandler::Create($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::shared_ptr<ClientHandler>
Create	host/frontend/webrtc/lib/local_recorder.cpp	/^std::unique_ptr<LocalRecorder> LocalRecorder::Create($/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder	typeref:typename:std::unique_ptr<LocalRecorder>
Create	host/frontend/webrtc/lib/streamer.cpp	/^std::unique_ptr<Streamer> Streamer::Create($/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:std::unique_ptr<Streamer>
Create	host/frontend/webrtc/lib/ws_connection.cpp	/^std::shared_ptr<WsConnectionContext> WsConnectionContext::Create() {$/;"	f	class:WsConnectionContext	typeref:typename:std::shared_ptr<WsConnectionContext>
Create	host/libs/audio_connector/server.cpp	/^std::unique_ptr<AudioClientConnection> AudioClientConnection::Create($/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:std::unique_ptr<AudioClientConnection>
Create	host/libs/msg_queue/msg_queue.cc	/^std::unique_ptr<SysVMessageQueue> SysVMessageQueue::Create($/;"	f	class:cuttlefish::SysVMessageQueue	typeref:typename:std::unique_ptr<SysVMessageQueue>
CreateAndStartThread	host/frontend/webrtc/lib/streamer.cpp	/^std::unique_ptr<rtc::Thread> CreateAndStartThread(const std::string& name) {$/;"	f	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:std::unique_ptr<rtc::Thread>
CreateAudioServer	host/frontend/webrtc/main.cpp	/^std::unique_ptr<cuttlefish::AudioServer> CreateAudioServer() {$/;"	f	typeref:typename:std::unique_ptr<cuttlefish::AudioServer>
CreateBlankImage	host/libs/config/data_image.cpp	/^bool CreateBlankImage($/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateBridge	host/libs/allocd/alloc_utils.cpp	/^bool CreateBridge(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateClientHandler	host/frontend/webrtc/lib/streamer.cpp	/^std::shared_ptr<ClientHandler> Streamer::Impl::CreateClientHandler($/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::shared_ptr<ClientHandler>
CreateCompositeDisk	host/libs/image_aggregator/image_aggregator.cc	/^void CreateCompositeDisk(std::vector<ImagePartition> partitions,$/;"	f	namespace:cuttlefish	typeref:typename:void
CreateCompositeDisk	host/libs/image_aggregator/image_aggregator.cc	/^void CreateCompositeDisk(std::vector<MultipleImagePartition> partitions,$/;"	f	namespace:cuttlefish	typeref:typename:void
CreateConnection	host/frontend/webrtc/lib/ws_connection.cpp	/^std::shared_ptr<WsConnection> WsConnectionContextImpl::CreateConnection($/;"	f	class:WsConnectionContextImpl	typeref:typename:std::shared_ptr<WsConnection>
CreateConnectionCallback	host/frontend/webrtc/lib/ws_connection.cpp	/^void CreateConnectionCallback(lws_sorted_usec_list_t* sul) {$/;"	f	typeref:typename:void
CreateConnectionSul	host/frontend/webrtc/lib/ws_connection.cpp	/^  struct CreateConnectionSul {$/;"	s	class:WsConnectionImpl	file:
CreateDeviceInfo	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^std::unique_ptr<cppbor::Map> TpmRemoteProvisioningContext::CreateDeviceInfo()$/;"	f	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:std::unique_ptr<cppbor::Map>
CreateDynamicDiskFiles	host/commands/assemble_cvd/disk_flags.cc	/^void CreateDynamicDiskFiles(const FetcherConfig& fetcher_config,$/;"	f	namespace:cuttlefish	typeref:typename:void
CreateEbtables	host/libs/allocd/alloc_utils.cpp	/^bool CreateEbtables(const std::string& name, bool use_ipv4,$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateEthernetBridgeIface	host/libs/allocd/alloc_utils.cpp	/^bool CreateEthernetBridgeIface(const std::string& name,$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateEthernetIface	host/libs/allocd/alloc_utils.cpp	/^bool CreateEthernetIface(const std::string& name, const std::string& bridge_name,$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateGatekeeperMessage	common/libs/security/gatekeeper_channel.cpp	/^ManagedGatekeeperMessage CreateGatekeeperMessage($/;"	f	namespace:cuttlefish	typeref:typename:ManagedGatekeeperMessage
CreateInterface	host/libs/allocd/request.h	/^  CreateInterface,   \/\/ Request to create new network interface$/;"	e	enum:cuttlefish::RequestType
CreateKey	host/commands/secure_env/encrypted_serializable.cpp	/^static bool CreateKey($/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
CreateKey	host/commands/secure_env/primary_key_builder.cpp	/^TpmObjectSlot PrimaryKeyBuilder::CreateKey($/;"	f	class:cuttlefish::PrimaryKeyBuilder	typeref:typename:TpmObjectSlot
CreateKeyBlob	host/commands/secure_env/tpm_key_blob_maker.cpp	/^keymaster_error_t TpmKeyBlobMaker::CreateKeyBlob($/;"	f	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:keymaster_error_t
CreateKeyId	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^bool TpmKeymasterEnforcement::CreateKeyId($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:bool
CreateKeymasterMessage	common/libs/security/keymaster_channel.cpp	/^ManagedKeymasterMessage CreateKeymasterMessage($/;"	f	namespace:cuttlefish	typeref:typename:ManagedKeymasterMessage
CreateMemFDWithData	common/libs/utils/unix_sockets_test.cpp	/^SharedFD CreateMemFDWithData(const std::string& data) {$/;"	f	namespace:cuttlefish	typeref:typename:SharedFD
CreateMessage	common/libs/utils/tcp_socket.h	/^Message CreateMessage(Ts... vals) {$/;"	f	namespace:cuttlefish	typeref:typename:Message
CreateMobileIface	host/libs/allocd/alloc_utils.cpp	/^bool CreateMobileIface(const std::string& name, uint16_t id,$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateObserver	host/frontend/webrtc/connection_observer.cpp	/^CfConnectionObserverFactory::CreateObserver() {$/;"	f	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:std::shared_ptr<cuttlefish::webrtc_streaming::ConnectionObserver>
CreateOsCompositeDisk	host/commands/assemble_cvd/disk_flags.cc	/^bool CreateOsCompositeDisk(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreatePDU	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::CreatePDU() {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
CreatePersistentCompositeDisk	host/commands/assemble_cvd/disk_flags.cc	/^bool CreatePersistentCompositeDisk($/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateQcowOverlay	host/commands/run_cvd/server_loop.cpp	/^bool CreateQcowOverlay(const std::string& crosvm_path,$/;"	f	namespace:cuttlefish::__anon527e8bd40111	typeref:typename:bool
CreateQcowOverlay	host/libs/image_aggregator/image_aggregator.cc	/^void CreateQcowOverlay(const std::string& crosvm_path,$/;"	f	namespace:cuttlefish	typeref:typename:void
CreateQueue	common/libs/concurrency/multiplexer.h	/^  static QueuePtr CreateQueue(Args&&... args) {$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:QueuePtr
CreateRemotePDU	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::CreateRemotePDU(std::string& host_port) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
CreateServerTcpSocket	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^rtc::AsyncPacketSocket* PortRangeSocketFactory::CreateServerTcpSocket($/;"	f	class:cuttlefish::webrtc_streaming::PortRangeSocketFactory	typeref:typename:rtc::AsyncPacketSocket *
CreateSession	host/libs/confui/host_server.cc	/^std::shared_ptr<Session> HostServer::CreateSession(const std::string& name) {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:std::shared_ptr<Session>
CreateSocketPair	host/libs/audio_connector/server.cpp	/^bool CreateSocketPair(SharedFD* local, SharedFD* remote) {$/;"	f	namespace:cuttlefish::__anon8078843e0111	typeref:typename:bool
CreateStatuReport	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::CreateStatuReport(int message_reference) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
CreateString	common/libs/confui/protocol_types.h	/^  static std::string CreateString(Args&&... args) {$/;"	f	class:cuttlefish::confui::ConfUiMessage	typeref:typename:std::string
CreateTap	host/libs/allocd/alloc_utils.cpp	/^bool CreateTap(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
CreateUdpSocket	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^rtc::AsyncPacketSocket* PortRangeSocketFactory::CreateUdpSocket($/;"	f	class:cuttlefish::webrtc_streaming::PortRangeSocketFactory	typeref:typename:rtc::AsyncPacketSocket *
CreateUnixInputServer	host/commands/run_cvd/launch_streamer.cpp	/^SharedFD CreateUnixInputServer(const std::string& path) {$/;"	f	namespace:cuttlefish::__anon6b0274e10111	typeref:typename:SharedFD
CreateVideoEncoder	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^std::unique_ptr<webrtc::VideoEncoder> VP8OnlyEncoderFactory::CreateVideoEncoder($/;"	f	class:cuttlefish::webrtc_streaming::VP8OnlyEncoderFactory	typeref:typename:std::unique_ptr<webrtc::VideoEncoder>
CreateWifiWrapper	guest/commands/setup_wifi/main.cpp	/^int CreateWifiWrapper(const std::string& source,$/;"	f	typeref:typename:int
CreationTime	host/commands/fetcher/build_api.h	/^  unsigned long CreationTime() const { return creation_time; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:unsigned long
Credential	host/commands/fetcher/credential_source.cc	/^std::string FixedCredentialSource::Credential() {$/;"	f	class:cuttlefish::FixedCredentialSource	typeref:typename:std::string
Credential	host/commands/fetcher/credential_source.cc	/^std::string GceMetadataCredentialSource::Credential() {$/;"	f	class:cuttlefish::GceMetadataCredentialSource	typeref:typename:std::string
CredentialSource	host/commands/fetcher/credential_source.h	/^class CredentialSource {$/;"	c	namespace:cuttlefish
Credentials	common/libs/utils/unix_sockets.cpp	/^Result<ucred> UnixSocketMessage::Credentials() {$/;"	f	class:cuttlefish::UnixSocketMessage	typeref:typename:Result<ucred>
CrosvmBuilder	host/libs/vm_manager/crosvm_builder.cpp	/^CrosvmBuilder::CrosvmBuilder() : command_("crosvm") {$/;"	f	class:cuttlefish::CrosvmBuilder
CrosvmBuilder	host/libs/vm_manager/crosvm_builder.h	/^class CrosvmBuilder {$/;"	c	namespace:cuttlefish
CrosvmManager	host/libs/vm_manager/crosvm_manager.h	/^class CrosvmManager : public VmManager {$/;"	c	namespace:cuttlefish::vm_manager
CurlResponse	host/commands/fetcher/curl_wrapper.h	/^struct CurlResponse {$/;"	s	namespace:cuttlefish
CurlServerErrorRetryingWrapper	host/commands/fetcher/curl_wrapper.cc	/^  CurlServerErrorRetryingWrapper(CurlWrapper& inner, int retry_attempts,$/;"	f	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	file:
CurlServerErrorRetryingWrapper	host/commands/fetcher/curl_wrapper.cc	/^class CurlServerErrorRetryingWrapper : public CurlWrapper {$/;"	c	namespace:cuttlefish::__anondfffca8d0111	file:
CurlWrapper	host/commands/fetcher/curl_wrapper.h	/^class CurlWrapper {$/;"	c	namespace:cuttlefish
CurlWrapperImpl	host/commands/fetcher/curl_wrapper.cc	/^  CurlWrapperImpl() {$/;"	f	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	file:
CurlWrapperImpl	host/commands/fetcher/curl_wrapper.cc	/^class CurlWrapperImpl : public CurlWrapper {$/;"	c	namespace:cuttlefish::__anondfffca8d0111	file:
CurrentDirectory	common/libs/utils/files.cpp	/^std::string CurrentDirectory() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
CurrentFlagsToTypes	host/commands/start/flag_forwarder.cc	/^std::map<std::string, std::string> CurrentFlagsToTypes() {$/;"	f	namespace:__anon4552bec90111	typeref:typename:std::map<std::string,std::string>
Custom Actions	build/README.md	/^## Custom Actions$/;"	s
CustomActionConfig	host/libs/config/custom_actions.h	/^struct CustomActionConfig {$/;"	s	namespace:cuttlefish
CustomActionConfigFromJson	host/libs/config/custom_actions.cpp	/^std::optional<CustomActionConfig> CustomActionConfigFromJson($/;"	f	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:std::optional<CustomActionConfig>
CustomActionConfigImpl	host/libs/config/custom_actions.cpp	/^class CustomActionConfigImpl : public CustomActionConfigProvider {$/;"	c	namespace:cuttlefish::__anon12e4c76c0111	file:
CustomActionConfigProvider	host/libs/config/custom_actions.h	/^class CustomActionConfigProvider : public FlagFeature, public ConfigFragment {$/;"	c	namespace:cuttlefish
CustomActions	host/libs/config/custom_actions.cpp	/^  const std::vector<CustomActionConfig>& CustomActions() const override {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:const std::vector<CustomActionConfig> &	file:
CustomActionsComponent	host/libs/config/custom_actions.cpp	/^CustomActionsComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<ConfigFlag>,CustomActionConfigProvider>
Cuttlefish Getting Started	README.md	/^# Cuttlefish Getting Started$/;"	c
CuttlefishConfig	host/libs/config/cuttlefish_config.cpp	/^CuttlefishConfig::CuttlefishConfig() : dictionary_(new Json::Value()) {}$/;"	f	class:cuttlefish::CuttlefishConfig
CuttlefishConfig	host/libs/config/cuttlefish_config.h	/^class CuttlefishConfig {$/;"	c	namespace:cuttlefish
CuttlefishConfigDefaultInstance	host/libs/confui/host_server.cc	/^static auto CuttlefishConfigDefaultInstance() {$/;"	f	namespace:cuttlefish::confui	typeref:typename:auto	file:
CuttlefishEnvironment	host/commands/run_cvd/main.cc	/^class CuttlefishEnvironment : public Feature, public DiagnosticInformation {$/;"	c	namespace:cuttlefish::__anonadab6e0c0111	file:
CuttlefishLogEvent	host/commands/metrics/proto/cf_log.proto	/^message CuttlefishLogEvent {$/;"	m	package:cuttlefish
CuttlefishRecoveryUI	recovery/recovery_ui.cpp	/^class CuttlefishRecoveryUI : public EthernetRecoveryUI {$/;"	c	file:
CvdAudioFrameBuffer	host/frontend/webrtc/audio_handler.cpp	/^  CvdAudioFrameBuffer(const uint8_t* buffer, int bits_per_sample,$/;"	f	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	file:
CvdAudioFrameBuffer	host/frontend/webrtc/audio_handler.cpp	/^class CvdAudioFrameBuffer : public webrtc_streaming::AudioFrameBuffer {$/;"	c	namespace:cuttlefish::__anon2a3d92f70111	file:
CvdBootStateMachine	host/commands/run_cvd/boot_state_machine.cc	/^class CvdBootStateMachine : public Feature {$/;"	c	namespace:cuttlefish::__anone7ed366f0111	file:
CvdCreateSessionDescriptionObserver	host/frontend/webrtc/lib/client_handler.cpp	/^  CvdCreateSessionDescriptionObserver($/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdCreateSessionDescriptionObserver	file:
CvdCreateSessionDescriptionObserver	host/frontend/webrtc/lib/client_handler.cpp	/^class CvdCreateSessionDescriptionObserver$/;"	c	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	file:
CvdFile	host/libs/config/fetcher_config.cpp	/^CvdFile::CvdFile() {$/;"	f	class:cuttlefish::CvdFile
CvdFile	host/libs/config/fetcher_config.cpp	/^CvdFile::CvdFile(const FileSource& source, const std::string& build_id,$/;"	f	class:cuttlefish::CvdFile
CvdFile	host/libs/config/fetcher_config.h	/^struct CvdFile {$/;"	s	namespace:cuttlefish
CvdFileToJson	host/libs/config/fetcher_config.cpp	/^Json::Value CvdFileToJson(const CvdFile& cvd_file) {$/;"	f	namespace:cuttlefish::__anonf7286d770211	typeref:typename:Json::Value
CvdHostBugreportMain	host/commands/host_bugreport/main.cc	/^int CvdHostBugreportMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish::__anond3364bd20111	typeref:typename:int
CvdMain	host/commands/cvd/main.cc	/^int CvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish::__anon483fb9980111	typeref:typename:int
CvdOnSetRemoteDescription	host/frontend/webrtc/lib/client_handler.cpp	/^  CvdOnSetRemoteDescription($/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdOnSetRemoteDescription	file:
CvdOnSetRemoteDescription	host/frontend/webrtc/lib/client_handler.cpp	/^class CvdOnSetRemoteDescription$/;"	c	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	file:
CvdSetSessionDescriptionObserver	host/frontend/webrtc/lib/client_handler.cpp	/^  CvdSetSessionDescriptionObserver(std::weak_ptr<ClientHandler> client_handler)$/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdSetSessionDescriptionObserver	file:
CvdSetSessionDescriptionObserver	host/frontend/webrtc/lib/client_handler.cpp	/^class CvdSetSessionDescriptionObserver$/;"	c	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	file:
CvdStatusMain	host/commands/status/main.cc	/^int CvdStatusMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
CvdVideoFrameBuffer	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^CvdVideoFrameBuffer::CvdVideoFrameBuffer(int width, int height)$/;"	f	class:cuttlefish::CvdVideoFrameBuffer
CvdVideoFrameBuffer	host/frontend/webrtc/cvd_video_frame_buffer.h	/^class CvdVideoFrameBuffer : public webrtc_streaming::VideoFrameBuffer {$/;"	c	namespace:cuttlefish
D	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^#define D(/;"	d
DATA	host/commands/modem_simulator/sim_service.h	/^      DATA = 1 << 1,    \/\/ to all bear service$/;"	e	enum:cuttlefish::SimService::FacilityLock::Class
DATA_REQ_REASOPN_HANDOVER	guest/hals/ril/reference-libril/ril.h	/^    DATA_REQ_REASOPN_HANDOVER  = 0x03,  \/\/ The reason of the data request is IWLAN data handov/;"	e	enum:__anon0bfbaecfbe03
DATA_REQ_REASOPN_NORMAL	guest/hals/ril/reference-libril/ril.h	/^    DATA_REQ_REASOPN_NORMAL    = 0x01,  \/\/ The reason of the data request is normal$/;"	e	enum:__anon0bfbaecfbe03
DATA_REQ_REASOPN_SHUTDOWN	guest/hals/ril/reference-libril/ril.h	/^    DATA_REQ_REASOPN_SHUTDOWN  = 0x02,  \/\/ The reason of the data request is device shutdown$/;"	e	enum:__anon0bfbaecfbe03
DEBUG	guest/hals/ril/reference-libril/ril_event.cpp	/^#define DEBUG /;"	d	file:
DECLARE_TYPE	common/libs/utils/cf_endian.h	/^#define DECLARE_TYPE(/;"	d
DEFAULT	host/commands/modem_simulator/sim_service.h	/^      DEFAULT = 7,      \/\/ all classes$/;"	e	enum:cuttlefish::SimService::FacilityLock::Class
DEFAULT	host/commands/modem_simulator/sup_service.h	/^      DEFAULT = 0,                  \/\/ "use subscription default value"$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirType
DEFAULT_BRANCH	host/commands/fetcher/fetch_cvd.cc	/^const std::string DEFAULT_BRANCH = "aosp-master";$/;"	v	namespace:__anonccb356fd0111	typeref:typename:const std::string
DEFAULT_BUILD	host/libs/config/fetcher_config.h	/^  DEFAULT_BUILD,$/;"	e	enum:cuttlefish::FileSource
DEFAULT_BUILD_TARGET	host/commands/fetcher/fetch_cvd.cc	/^const std::string DEFAULT_BUILD_TARGET = "aosp_cf_x86_64_phone-userdebug";$/;"	v	namespace:__anonccb356fd0111	typeref:typename:const std::string
DEFAULT_MTU	guest/hals/ril/reference-ril/reference-ril.c	/^#define DEFAULT_MTU /;"	d	file:
DF_ADF	host/commands/modem_simulator/sim_service.cpp	/^static const std::string DF_ADF       = "7FFF";  \/\/ UICC access$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
DF_CDMA	host/commands/modem_simulator/sim_service.cpp	/^static const std::string DF_CDMA      = "7F25";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
DF_GRAPHICS	host/commands/modem_simulator/sim_service.cpp	/^static const std::string DF_GRAPHICS  = "5F50";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
DF_GSM	host/commands/modem_simulator/sim_service.cpp	/^static const std::string DF_GSM       = "7F20";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
DF_PHONEBOOK	host/commands/modem_simulator/sim_service.cpp	/^static const std::string DF_PHONEBOOK = "5F3A";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
DF_TELECOM	host/commands/modem_simulator/sim_service.cpp	/^static const std::string DF_TELECOM   = "7F10";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
DHCPCD_USE_DBUS	shared/BoardConfig.mk	/^DHCPCD_USE_DBUS := no$/;"	m
DHCPCD_USE_IPV6	shared/BoardConfig.mk	/^DHCPCD_USE_IPV6 := no$/;"	m
DHCPCD_USE_SCRIPT	shared/BoardConfig.mk	/^DHCPCD_USE_SCRIPT := yes$/;"	m
DISABLE	host/commands/modem_simulator/sim_service.h	/^      DISABLE,$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockStatus
DISABLE	host/commands/modem_simulator/sup_service.h	/^      DISABLE       = 0,$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::CallForwardInfoStatus
DISABLE_RILD_OEM_HOOK	shared/device.mk	/^DISABLE_RILD_OEM_HOOK := true$/;"	m
DISK_SIZE_SHIFT	common/libs/utils/size_utils.h	/^constexpr int DISK_SIZE_SHIFT = 16;$/;"	v	namespace:cuttlefish	typeref:typename:int
DISPLAY_TEXT	host/commands/modem_simulator/stk_service.h	/^    DISPLAY_TEXT        = 0x21,$/;"	e	enum:cuttlefish::StkService::CommandType
DONT_WAKE	guest/hals/ril/reference-libril/ril.cpp	/^enum WakeType {DONT_WAKE, WAKE_PARTIAL};$/;"	e	enum:android::WakeType	file:
DONT_WAKE	guest/hals/ril/reference-libril/ril_ex.h	/^enum SocketWakeType {DONT_WAKE, WAKE_PARTIAL};$/;"	e	enum:SocketWakeType
DaemonizeLauncher	host/commands/run_cvd/boot_state_machine.cc	/^SharedFD DaemonizeLauncher(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish::__anone7ed366f0111	typeref:typename:SharedFD
DataAvailable	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::DataAvailable() const {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
DataImageAction	host/libs/config/data_image.cpp	/^  enum class DataImageAction { kNoAction, kCreateImage, kResizeImage };$/;"	g	class:cuttlefish::InitializeDataImageImpl	file:
DataImagePath	host/libs/config/data_image.h	/^class DataImagePath {$/;"	c	namespace:cuttlefish
DataImageTag	host/libs/config/data_image.cpp	/^struct DataImageTag {};$/;"	s	namespace:cuttlefish	file:
DataService	host/commands/modem_simulator/data_service.cpp	/^DataService::DataService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::DataService
DataService	host/commands/modem_simulator/data_service.h	/^class DataService : public ModemService, public std::enable_shared_from_this<DataService> {$/;"	c	namespace:cuttlefish
DataU	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^const uint8_t *CvdVideoFrameBuffer::DataU() const { return u_.data(); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:const uint8_t *
DataU	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  uint8_t *DataU() { return u_.data(); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:uint8_t *
DataU	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  const uint8_t *DataU() const override { return frame_buffer_->DataU(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:const uint8_t *	file:
DataV	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^const uint8_t *CvdVideoFrameBuffer::DataV() const { return v_.data(); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:const uint8_t *
DataV	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  uint8_t *DataV() { return v_.data(); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:uint8_t *
DataV	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  const uint8_t *DataV() const override { return frame_buffer_->DataV(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:const uint8_t *	file:
DataY	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^const uint8_t *CvdVideoFrameBuffer::DataY() const { return y_.data(); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:const uint8_t *
DataY	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  uint8_t *DataY() { return y_.data(); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:uint8_t *
DataY	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  const uint8_t *DataY() const override { return frame_buffer_->DataY(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:const uint8_t *	file:
DeAndroidSparse	host/libs/image_aggregator/image_aggregator.cc	/^void DeAndroidSparse(const std::vector<ImagePartition>& partitions) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:void
Debug Cuttlefish	README.md	/^## Debug Cuttlefish$/;"	s	chapter:Cuttlefish Getting Started
DecodeBase64	common/libs/utils/base64.cpp	/^bool DecodeBase64(const std::string &data, std::vector<uint8_t> *buffer) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
DecodePDU	host/commands/modem_simulator/pdu_parser.cpp	/^bool PDUParser::DecodePDU(std::string& pdu) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:bool
Default	common/libs/net/netlink_client.cpp	/^NetlinkClientFactory* NetlinkClientFactory::Default() {$/;"	f	class:cuttlefish::NetlinkClientFactory	typeref:typename:NetlinkClientFactory *
DefaultCustomActionConfig	host/libs/config/custom_actions.cpp	/^std::string DefaultCustomActionConfig() {$/;"	f	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:std::string
DefaultEnvironmentPath	host/libs/config/cuttlefish_config.cpp	/^std::string DefaultEnvironmentPath(const char* environment_key,$/;"	f	namespace:cuttlefish	typeref:typename:std::string
DefaultGuestImagePath	host/libs/config/cuttlefish_config.cpp	/^std::string DefaultGuestImagePath(const std::string& file_name) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
DefaultHostArtifactsPath	host/commands/modem_simulator/cf_device_config.cpp	/^std::string DeviceConfig::DefaultHostArtifactsPath(const std::string& file) {$/;"	f	class:cuttlefish::modem::DeviceConfig	typeref:typename:std::string
DefaultHostArtifactsPath	host/libs/config/cuttlefish_config.cpp	/^std::string DefaultHostArtifactsPath(const std::string& file_name) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
DefaultNetworkInterfaces	host/commands/assemble_cvd/alloc.cc	/^IfaceConfig DefaultNetworkInterfaces(int num) {$/;"	f	namespace:cuttlefish	typeref:typename:IfaceConfig
DefaultRecord	host/commands/secure_env/tpm_gatekeeper.cpp	/^gatekeeper::failure_record_t DefaultRecord($/;"	f	namespace:cuttlefish	typeref:typename:gatekeeper::failure_record_t
DefaultSubprocessLogging	host/libs/config/logging.cpp	/^void DefaultSubprocessLogging(char* argv[]) {$/;"	f	namespace:cuttlefish	typeref:typename:void
DeleteAllKeys	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::DeleteAllKeys(const DeleteAllKeysRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
DeleteAllKeys	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::DeleteAllKeys(const DeleteAllKeysRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
DeleteFifos	host/commands/run_cvd/server_loop.cpp	/^  void DeleteFifos() {$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:void	file:
DeleteIface	host/libs/allocd/alloc_utils.cpp	/^bool DeleteIface(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
DeleteKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::DeleteKey(const DeleteKeyRequest& request, DeleteKeyResponse* response) {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
DeleteKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::DeleteKey(const DeleteKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
DeleteTmpFileIfNotChanged	host/commands/assemble_cvd/boot_image_utils.cc	/^bool DeleteTmpFileIfNotChanged(const std::string& tmp_file, const std::string& current_file) {$/;"	f	namespace:cuttlefish::__anonbfa95aa40111	typeref:typename:bool
DeliverEvent	host/frontend/webrtc/kernel_log_events_handler.cpp	/^void KernelLogEventsHandler::DeliverEvent(const Json::Value& event) {$/;"	f	class:cuttlefish::KernelLogEventsHandler	typeref:typename:void
DeliverSecureInputEvent	guest/hals/confirmationui/guest_session.cpp	/^Return<ResponseCode> GuestSession::DeliverSecureInputEvent($/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:Return<ResponseCode>
Dependencies	host/commands/assemble_cvd/disk_flags.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::BootImageRepacker	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/assemble_cvd/disk_flags.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::InitializeAccessKregistryImage	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/assemble_cvd/disk_flags.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::InitializeMetadataImage	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/assemble_cvd/flag_feature.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override {$/;"	f	class:cuttlefish::ParseGflagsImpl	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/commands/run_cvd/boot_state_machine.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/boot_state_machine.cc	/^  std::unordered_set<Feature*> Dependencies() const {$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::BluetoothConnector	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::ConfigServer	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::LogcatReceiver	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::MetricsService	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::OpenWrt	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::RootCanal	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::TombstoneReceiver	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::VehicleHalServer	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::VmmCommands	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::WmediumdServer	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch.cc	/^  std::unordered_set<Feature*> Dependencies() const override {$/;"	f	class:cuttlefish::SecureEnvironment	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch_modem.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch_streamer.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/launch_streamer.cpp	/^  std::unordered_set<Feature*> Dependencies() const override {$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/main.cc	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/server_loop.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/validate.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateHostConfigurationFeature	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/commands/run_cvd/validate.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateTapDevices	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/libs/config/adb/flags.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override {$/;"	f	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/libs/config/adb/launch.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbConnector	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/libs/config/adb/launch.cpp	/^  std::unordered_set<Feature*> Dependencies() const override {$/;"	f	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/libs/config/config_flag.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagPlaceholderImpl	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/libs/config/config_flag.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/libs/config/config_flag.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/libs/config/config_flag.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/libs/config/custom_actions.cpp	/^  std::unordered_set<FlagFeature*> Dependencies() const override {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:std::unordered_set<FlagFeature * >	file:
Dependencies	host/libs/config/data_image.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::InitializeDataImageImpl	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/libs/config/data_image.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::InitializeEspImageImpl	typeref:typename:std::unordered_set<Feature * >	file:
Dependencies	host/libs/config/data_image.cpp	/^  std::unordered_set<Feature*> Dependencies() const override { return {}; }$/;"	f	class:cuttlefish::InitializeMiscImageImpl	typeref:typename:std::unordered_set<Feature * >	file:
DepsMutator	build/cvd-host-package.go	/^func (c *cvdHostPackage) DepsMutator(ctx android.BottomUpMutatorContext) {$/;"	f	struct:cuttlefish.cvdHostPackage
DeriveBytesFromHbk	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^std::vector<uint8_t> TpmRemoteProvisioningContext::DeriveBytesFromHbk($/;"	f	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:std::vector<uint8_t>
Deserialize	host/commands/secure_env/composite_serialization.cpp	/^bool CompositeSerializable::Deserialize($/;"	f	class:cuttlefish::CompositeSerializable	typeref:typename:bool
Deserialize	host/commands/secure_env/encrypted_serializable.cpp	/^bool EncryptedSerializable::Deserialize($/;"	f	class:cuttlefish::EncryptedSerializable	typeref:typename:bool
Deserialize	host/commands/secure_env/hmac_serializable.cpp	/^bool HmacSerializable::Deserialize(const uint8_t** buf_ptr, const uint8_t* end) {$/;"	f	class:cuttlefish::HmacSerializable	typeref:typename:bool
Deserialize	host/commands/secure_env/json_serializable.cpp	/^bool JsonSerializable::Deserialize($/;"	f	class:cuttlefish::JsonSerializable	typeref:typename:bool
Deserialize	host/commands/secure_env/tpm_serialize.cpp	/^bool TpmSerializable<T>::Deserialize($/;"	f	class:cuttlefish::TpmSerializable	typeref:typename:bool
Deserialize	host/libs/config/adb/config.cpp	/^  bool Deserialize(const Json::Value& json) override {$/;"	f	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	typeref:typename:bool	file:
Deserialize	host/libs/config/custom_actions.cpp	/^  bool Deserialize(const Json::Value& custom_actions_json) override {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:bool	file:
DestroyBridge	host/libs/allocd/alloc_utils.cpp	/^bool DestroyBridge(const std::string& name) { return DeleteIface(name); }$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyClientHandler	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::DestroyClientHandler(int client_id) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
DestroyEbtables	host/libs/allocd/alloc_utils.cpp	/^bool DestroyEbtables(const std::string& name, bool use_ipv4,$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyEthernetBridgeIface	host/libs/allocd/alloc_utils.cpp	/^bool DestroyEthernetBridgeIface(const std::string& name,$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyEthernetIface	host/libs/allocd/alloc_utils.cpp	/^bool DestroyEthernetIface(const std::string& name, bool has_ipv4_bridge,$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyGateway	host/libs/allocd/alloc_utils.cpp	/^bool DestroyGateway(const std::string& name, const std::string& gateway,$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyIface	host/libs/allocd/alloc_utils.cpp	/^bool DestroyIface(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyInterface	host/libs/allocd/request.h	/^  DestroyInterface,  \/\/ Request to destroy a managed network interface$/;"	e	enum:cuttlefish::RequestType
DestroyMobileIface	host/libs/allocd/alloc_utils.cpp	/^bool DestroyMobileIface(const std::string& name, uint16_t id,$/;"	f	namespace:cuttlefish	typeref:typename:bool
DestroyUserData	host/libs/wayland/wayland_utils.h	/^void DestroyUserData(wl_resource* resource) {$/;"	f	namespace:wayland	typeref:typename:void
Device Details	host/frontend/webrtc_operator/assets/client.html	/^          <h2>Device Details<\/h2>$/;"	i
DeviceBuild	host/commands/fetcher/build_api.h	/^  DeviceBuild(const std::string& id, const std::string& target) {$/;"	f	struct:cuttlefish::DeviceBuild
DeviceBuild	host/commands/fetcher/build_api.h	/^struct DeviceBuild {$/;"	s	namespace:cuttlefish
DeviceConfig	common/libs/device_config/device_config.proto	/^message DeviceConfig {$/;"	m	package:cuttlefish
DeviceConfig	host/commands/modem_simulator/device_config.h	/^class DeviceConfig {$/;"	c	namespace:cuttlefish::modem
DeviceConfigHelper	common/libs/device_config/device_config.cpp	/^DeviceConfigHelper::DeviceConfigHelper(const DeviceConfig& device_config)$/;"	f	class:cuttlefish::DeviceConfigHelper
DeviceConfigHelper	common/libs/device_config/device_config.h	/^class DeviceConfigHelper {$/;"	c	namespace:cuttlefish
DeviceConnection	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^class DeviceConnection {$/;"	c
DeviceControlApp	host/frontend/webrtc_operator/assets/js/app.js	/^class DeviceControlApp {$/;"	c
DeviceDetailsUpdater	host/frontend/webrtc_operator/assets/js/app.js	/^class DeviceDetailsUpdater {$/;"	c
DeviceHandler	host/frontend/webrtc_operator/device_handler.cpp	/^DeviceHandler::DeviceHandler(struct lws* wsi, DeviceRegistry* registry,$/;"	f	class:cuttlefish::DeviceHandler
DeviceHandler	host/frontend/webrtc_operator/device_handler.h	/^class DeviceHandler : public SignalHandler,$/;"	c	namespace:cuttlefish
DeviceHandlerFactory	host/frontend/webrtc_operator/device_handler.cpp	/^DeviceHandlerFactory::DeviceHandlerFactory(DeviceRegistry* registry,$/;"	f	class:cuttlefish::DeviceHandlerFactory
DeviceHandlerFactory	host/frontend/webrtc_operator/device_handler.h	/^class DeviceHandlerFactory : public WebSocketHandlerFactory {$/;"	c	namespace:cuttlefish
DeviceListApp	host/frontend/webrtc_operator/assets/js/index.js	/^class DeviceListApp {$/;"	c
DeviceListHandler	host/frontend/webrtc_operator/device_list_handler.cpp	/^DeviceListHandler::DeviceListHandler(struct lws* wsi,$/;"	f	class:cuttlefish::DeviceListHandler
DeviceListHandler	host/frontend/webrtc_operator/device_list_handler.h	/^class DeviceListHandler : public DynHandler {$/;"	c	namespace:cuttlefish
DeviceLocked	guest/hals/keymaster/remote/remote_keymaster.cpp	/^DeviceLockedResponse RemoteKeymaster::DeviceLocked($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:DeviceLockedResponse
DeviceLocked	guest/hals/keymint/remote/remote_keymaster.cpp	/^DeviceLockedResponse RemoteKeymaster::DeviceLocked($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:DeviceLockedResponse
DeviceRegistry	host/frontend/webrtc_operator/device_registry.h	/^class DeviceRegistry {$/;"	c	namespace:cuttlefish
DeviceState	host/libs/config/custom_actions.h	/^struct DeviceState {$/;"	s	namespace:cuttlefish
DeviceTpm	host/commands/secure_env/device_tpm.cpp	/^DeviceTpm::DeviceTpm(const std::string& path) : tpm_(nullptr, &FinalizeTcti) {$/;"	f	class:cuttlefish::DeviceTpm
DeviceTpm	host/commands/secure_env/device_tpm.h	/^class DeviceTpm : public Tpm {$/;"	c	namespace:cuttlefish
DeviceType	host/commands/metrics/proto/cf_log.proto	/^  enum DeviceType {$/;"	g	message:cuttlefish.CuttlefishLogEvent
Dhcp4MessageTypeOption	common/libs/utils/network.cpp	/^struct __attribute__((packed)) Dhcp4MessageTypeOption {$/;"	s	namespace:cuttlefish	file:
Dhcp4ReleaseMessage	common/libs/utils/network.cpp	/^struct __attribute__((packed)) Dhcp4ReleaseMessage {$/;"	s	namespace:cuttlefish	file:
Dhcp4ServerIdentifier	common/libs/utils/network.cpp	/^struct __attribute__((packed)) Dhcp4ServerIdentifier {$/;"	s	namespace:cuttlefish	file:
DiagnosticInformation	host/commands/run_cvd/reporting.h	/^class DiagnosticInformation {$/;"	c	namespace:cuttlefish
Diagnostics	host/commands/run_cvd/launch.cc	/^  std::vector<std::string> Diagnostics() const override {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:std::vector<std::string>	file:
Diagnostics	host/commands/run_cvd/launch.cc	/^  std::vector<std::string> Diagnostics() const override {$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:std::vector<std::string>	file:
Diagnostics	host/commands/run_cvd/launch.cc	/^  std::vector<std::string> Diagnostics() const override {$/;"	f	class:cuttlefish::LogcatReceiver	typeref:typename:std::vector<std::string>	file:
Diagnostics	host/commands/run_cvd/launch_streamer.cpp	/^  std::vector<std::string> Diagnostics() const override {$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:std::vector<std::string>	file:
Diagnostics	host/commands/run_cvd/main.cc	/^  std::vector<std::string> Diagnostics() const override {$/;"	f	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:std::vector<std::string>	file:
Dictionary	host/commands/modem_simulator/nvram_config.cpp	/^Json::Value* NvramConfig::InstanceSpecific::Dictionary() {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:Json::Value *
Dictionary	host/commands/modem_simulator/nvram_config.cpp	/^const Json::Value* NvramConfig::InstanceSpecific::Dictionary() const {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:const Json::Value *
Dictionary	host/libs/config/cuttlefish_config_instance.cpp	/^Json::Value* CuttlefishConfig::MutableInstanceSpecific::Dictionary() {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:Json::Value *
Dictionary	host/libs/config/cuttlefish_config_instance.cpp	/^const Json::Value* CuttlefishConfig::InstanceSpecific::Dictionary() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:const Json::Value *
DirectoryBuild	host/commands/fetcher/build_api.cc	/^DirectoryBuild::DirectoryBuild(const std::vector<std::string>& paths,$/;"	f	class:cuttlefish::DirectoryBuild
DirectoryBuild	host/commands/fetcher/build_api.h	/^struct DirectoryBuild {$/;"	s	namespace:cuttlefish
DirectoryContents	common/libs/utils/files.cpp	/^std::vector<std::string> DirectoryContents(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:std::vector<std::string>
DirectoryCrc	host/libs/config/host_tools_version.cpp	/^static std::map<std::string, uint32_t> DirectoryCrc(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:std::map<std::string,uint32_t>	file:
DirectoryExists	common/libs/utils/files.cpp	/^bool DirectoryExists(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
Disconnect	common/libs/utils/vsock_connection.cpp	/^void VsockConnection::Disconnect() {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:void
Disconnect	host/frontend/webrtc/lib/camera_streamer.cpp	/^void CameraStreamer::Disconnect() {$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:void
DiskChangesComponent	host/commands/assemble_cvd/disk_flags.cc	/^static fruit::Component<> DiskChangesComponent(const FetcherConfig* fetcher,$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<>	file:
DiskChangesPerInstanceComponent	host/commands/assemble_cvd/disk_flags.cc	/^static fruit::Component<> DiskChangesPerInstanceComponent($/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<>	file:
DiskSize	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t DiskSize() const {$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:std::uint64_t	file:
DispatchCommand	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::DispatchCommand(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
Display	host/frontend/webrtc/lib/local_recorder.cpp	/^LocalRecorder::Display::Display(LocalRecorder::Impl& impl) : impl_(impl) {$/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder::Display
Display	host/frontend/webrtc/lib/local_recorder.cpp	/^class LocalRecorder::Display$/;"	c	class:cuttlefish::webrtc_streaming::LocalRecorder	file:
DisplayConfig	common/libs/device_config/device_config.proto	/^  message DisplayConfig {$/;"	m	message:cuttlefish.DeviceConfig
DisplayConfig	host/libs/config/cuttlefish_config.h	/^  struct DisplayConfig {$/;"	s	class:cuttlefish::CuttlefishConfig
DisplayDescriptor	host/frontend/webrtc/lib/streamer.cpp	/^struct DisplayDescriptor {$/;"	s	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	file:
DisplayHandler	host/frontend/webrtc/display_handler.cpp	/^DisplayHandler::DisplayHandler($/;"	f	class:cuttlefish::DisplayHandler
DisplayHandler	host/frontend/webrtc/display_handler.h	/^class DisplayHandler {$/;"	c	namespace:cuttlefish
DisplayPowerModeChanged	host/commands/kernel_log_monitor/kernel_log_server.h	/^  DisplayPowerModeChanged = 9,$/;"	e	enum:monitor::Event
DnsmasqDhcp4Lease	common/libs/utils/network.h	/^struct DnsmasqDhcp4Lease {$/;"	s	namespace:cuttlefish
DoGet	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ClientDynHandler::DoGet() {$/;"	f	class:cuttlefish::ClientDynHandler	typeref:typename:HttpStatusCode
DoGet	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ConfigHandler::DoGet() {$/;"	f	class:cuttlefish::ConfigHandler	typeref:typename:HttpStatusCode
DoGet	host/frontend/webrtc_operator/device_list_handler.cpp	/^HttpStatusCode DeviceListHandler::DoGet() {$/;"	f	class:cuttlefish::DeviceListHandler	typeref:typename:HttpStatusCode
DoIoctl	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^bool DoIoctl(int fd, int request, const uint32_t value) {$/;"	f	namespace:__anon40cdc2c70111	typeref:typename:bool
DoPost	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ClientDynHandler::DoPost() {$/;"	f	class:cuttlefish::ClientDynHandler	typeref:typename:HttpStatusCode
DoPost	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ConfigHandler::DoPost() {$/;"	f	class:cuttlefish::ConfigHandler	typeref:typename:HttpStatusCode
DoPost	host/frontend/webrtc_operator/device_list_handler.cpp	/^HttpStatusCode DeviceListHandler::DoPost() {$/;"	f	class:cuttlefish::DeviceListHandler	typeref:typename:HttpStatusCode
DoPostInner	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ConnectHandler::DoPostInner($/;"	f	class:cuttlefish::ConnectHandler	typeref:typename:HttpStatusCode
DoPostInner	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ForwardHandler::DoPostInner($/;"	f	class:cuttlefish::ForwardHandler	typeref:typename:HttpStatusCode
DoPostInner	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode PollHandler::DoPostInner($/;"	f	class:cuttlefish::PollHandler	typeref:typename:HttpStatusCode
DoVerify	host/commands/secure_env/soft_gatekeeper.h	/^    bool DoVerify(const password_handle_t* expected_handle, const SizedBuffer& password) {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
DoesCompositeMatchCurrentDiskConfig	host/commands/assemble_cvd/disk_flags.cc	/^bool DoesCompositeMatchCurrentDiskConfig($/;"	f	namespace:cuttlefish	typeref:typename:bool
DomKeyCodeToLinux	host/frontend/webrtc/lib/keyboard.cpp	/^uint16_t DomKeyCodeToLinux(const std::string& dom_KEY_code) {$/;"	f	typeref:typename:uint16_t
DownloadToFile	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<std::string> DownloadToFile($/;"	f	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:CurlResponse<std::string>	file:
DownloadToFile	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<std::string> DownloadToFile($/;"	f	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	typeref:typename:CurlResponse<std::string>	file:
DownloadToJson	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<Json::Value> DownloadToJson($/;"	f	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:CurlResponse<Json::Value>	file:
DownloadToJson	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<Json::Value> DownloadToJson($/;"	f	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	typeref:typename:CurlResponse<Json::Value>	file:
DownloadToString	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<std::string> DownloadToString($/;"	f	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:CurlResponse<std::string>	file:
DownloadToString	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<std::string> DownloadToString($/;"	f	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	typeref:typename:CurlResponse<std::string>	file:
DropItemsIfAtCapacity	common/libs/concurrency/thread_safe_queue.h	/^  bool DropItemsIfAtCapacity() {$/;"	f	class:cuttlefish::ThreadSafeQueue	typeref:typename:bool
Dump	common/libs/net/netlink_request_test.cpp	/^void Dump(MatchResultListener* result_listener, const char* title,$/;"	f	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:void
Dup	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Dup(int unmanaged_fd) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
DupFdFlag	host/commands/secure_env/secure_env.cpp	/^SharedFD DupFdFlag(gflags::int32 fd) {$/;"	f	namespace:cuttlefish::__anon0a6d9b510111	typeref:typename:SharedFD
Duration	host/commands/metrics/proto/common.proto	/^message Duration {$/;"	m
DynHandler	host/libs/websocket/websocket_handler.cpp	/^DynHandler::DynHandler(struct lws* wsi) : wsi_(wsi), out_buffer_(LWS_PRE, 0) {}$/;"	f	class:cuttlefish::DynHandler
DynHandler	host/libs/websocket/websocket_handler.h	/^class DynHandler {$/;"	c	namespace:cuttlefish
DynHandlerFactory	host/libs/websocket/websocket_handler.h	/^using DynHandlerFactory =$/;"	t	namespace:cuttlefish
DynHttpCallback	host/libs/websocket/websocket_server.cpp	/^int WebSocketServer::DynHttpCallback(struct lws* wsi,$/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:int
DynServerCallback	host/libs/websocket/websocket_server.cpp	/^int WebSocketServer::DynServerCallback(struct lws* wsi,$/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:int
DynamicFlag	host/commands/start/flag_forwarder.cc	/^  DynamicFlag(const std::string& subprocess, const std::string& name,$/;"	f	class:DynamicFlag	file:
DynamicFlag	host/commands/start/flag_forwarder.cc	/^class DynamicFlag : public SubprocessFlag {$/;"	c	file:
EFId	host/commands/modem_simulator/sim_service.h	/^    enum EFId: int32_t {$/;"	g	struct:cuttlefish::SimService::SimFileSystem	typeref:typename:int32_t
EF_AD	host/commands/modem_simulator/sim_service.h	/^      EF_AD = 0x6FAD,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_ADN	host/commands/modem_simulator/sim_service.h	/^      EF_ADN = 0x6F3A,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CFF_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_CFF_CPHS = 0x6F13,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CFIS	host/commands/modem_simulator/sim_service.h	/^      EF_CFIS = 0x6FCB,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_CDMAHOME	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_CDMAHOME = 0x6F28,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_EPRL	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_EPRL = 0x6F5A,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_IMSIM	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_IMSIM = 0x6F22,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_LI	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_LI = 0x6F3A,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_MDN	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_MDN = 0x6F44,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_MIPUPP	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_MIPUPP = 0x6F4D,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSIM_SPN	host/commands/modem_simulator/sim_service.h	/^      EF_CSIM_SPN =0x6F41,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CSP_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_CSP_CPHS = 0x6F15,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_CST	host/commands/modem_simulator/sim_service.h	/^      EF_CST = 0x6F32,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_DOMAIN	host/commands/modem_simulator/sim_service.h	/^      EF_DOMAIN = 0x6F03,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_EHPLMN	host/commands/modem_simulator/sim_service.h	/^      EF_EHPLMN = 0x6FD9,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_EXT1	host/commands/modem_simulator/sim_service.h	/^      EF_EXT1 = 0x6F4A,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_EXT2	host/commands/modem_simulator/sim_service.h	/^      EF_EXT2 = 0x6F4B,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_EXT3	host/commands/modem_simulator/sim_service.h	/^      EF_EXT3 = 0x6F4C,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_EXT5	host/commands/modem_simulator/sim_service.h	/^      EF_EXT5 = 0x6F4E,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_EXT6	host/commands/modem_simulator/sim_service.h	/^      EF_EXT6 = 0x6FC8,   \/\/ Ext record for EF[MBDN]$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_FDN	host/commands/modem_simulator/sim_service.h	/^      EF_FDN = 0x6F3B,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_FPLMN	host/commands/modem_simulator/sim_service.h	/^      EF_FPLMN = 0x6F7B,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_GID1	host/commands/modem_simulator/sim_service.h	/^      EF_GID1 = 0x6F3E,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_GID2	host/commands/modem_simulator/sim_service.h	/^      EF_GID2 = 0x6F3F,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_HPLMN_W_ACT	host/commands/modem_simulator/sim_service.h	/^      EF_HPLMN_W_ACT = 0x6F62,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_HPPLMN	host/commands/modem_simulator/sim_service.h	/^      EF_HPPLMN = 0x6F31,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_ICCID	host/commands/modem_simulator/sim_service.h	/^      EF_ICCID = 0x2FE2,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_IMG	host/commands/modem_simulator/sim_service.h	/^      EF_IMG = 0x4F20,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_IMPI	host/commands/modem_simulator/sim_service.h	/^      EF_IMPI = 0x6F02,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_IMPU	host/commands/modem_simulator/sim_service.h	/^      EF_IMPU = 0x6F04,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_INFO_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_INFO_CPHS = 0x6F16,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_IST	host/commands/modem_simulator/sim_service.h	/^      EF_IST = 0x6F07,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_LI	host/commands/modem_simulator/sim_service.h	/^      EF_LI = 0x6F05,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_LRPLMNSI	host/commands/modem_simulator/sim_service.h	/^      EF_LRPLMNSI = 0x6FDC,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_MAILBOX_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_MAILBOX_CPHS = 0x6F17,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_MBDN	host/commands/modem_simulator/sim_service.h	/^      EF_MBDN = 0x6FC7,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_MBI	host/commands/modem_simulator/sim_service.h	/^      EF_MBI = 0x6FC9,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_MSISDN	host/commands/modem_simulator/sim_service.h	/^      EF_MSISDN = 0x6F40,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_MWIS	host/commands/modem_simulator/sim_service.h	/^      EF_MWIS = 0x6FCA,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_OPL	host/commands/modem_simulator/sim_service.h	/^      EF_OPL = 0x6FC6,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_OPLMN_W_ACT	host/commands/modem_simulator/sim_service.h	/^      EF_OPLMN_W_ACT = 0x6F61,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_PBR	host/commands/modem_simulator/sim_service.h	/^      EF_PBR = 0x4F30,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_PCSCF	host/commands/modem_simulator/sim_service.h	/^      EF_PCSCF = 0x6F09,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_PL	host/commands/modem_simulator/sim_service.h	/^      EF_PL = 0x2F05,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_PLMN_W_ACT	host/commands/modem_simulator/sim_service.h	/^      EF_PLMN_W_ACT = 0x6F60,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_PNN	host/commands/modem_simulator/sim_service.h	/^      EF_PNN = 0x6FC5,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_PSI	host/commands/modem_simulator/sim_service.h	/^      EF_PSI = 0x6FE5,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_RUIM_SPN	host/commands/modem_simulator/sim_service.h	/^      EF_RUIM_SPN =0x6F41,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SDN	host/commands/modem_simulator/sim_service.h	/^      EF_SDN = 0x6F49,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SMS	host/commands/modem_simulator/sim_service.h	/^      EF_SMS = 0x6F3C,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SPDI	host/commands/modem_simulator/sim_service.h	/^      EF_SPDI = 0x6FCD,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SPN	host/commands/modem_simulator/sim_service.h	/^      EF_SPN = 0x6F46,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SPN_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_SPN_CPHS = 0x6F14,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SPN_SHORT_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_SPN_SHORT_CPHS = 0x6F18,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_SST	host/commands/modem_simulator/sim_service.h	/^      EF_SST = 0x6F38,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EF_TYPE_CYCLIC	guest/hals/ril/reference-ril/reference-ril.c	/^#define EF_TYPE_CYCLIC /;"	d	file:
EF_TYPE_LINEAR_FIXED	guest/hals/ril/reference-ril/reference-ril.c	/^#define EF_TYPE_LINEAR_FIXED /;"	d	file:
EF_TYPE_TRANSPARENT	guest/hals/ril/reference-ril/reference-ril.c	/^#define EF_TYPE_TRANSPARENT /;"	d	file:
EF_VOICE_MAIL_INDICATOR_CPHS	host/commands/modem_simulator/sim_service.h	/^      EF_VOICE_MAIL_INDICATOR_CPHS = 0x6F11,$/;"	e	enum:cuttlefish::SimService::SimFileSystem::EFId
EGLAPI	host/libs/graphics_detector/include/EGL/eglplatform.h	/^#define EGLAPI /;"	d
EGLAPIENTRY	host/libs/graphics_detector/include/EGL/eglplatform.h	/^#define EGLAPIENTRY /;"	d
EGLAPIENTRYP	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef struct wl_buffer *(EGLAPIENTRYP PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC) (EGLDisplay dp/;"	t	typeref:struct:wl_buffer * ()(EGLDisplay dpy,EGLImageKHR image)EGLAPI struct wl_buffer * EGLAPIENTRY eglCreateWaylandBufferFromImageWL (EGLDisplay dpy,EGLImageKHR image)
EGLAPIENTRYP	host/libs/graphics_detector/include/EGL/eglplatform.h	/^#define EGLAPIENTRYP /;"	d
EGLAttrib	host/libs/graphics_detector/include/EGL/egl.h	/^typedef intptr_t EGLAttrib;$/;"	t	typeref:typename:intptr_t
EGLAttribKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef intptr_t EGLAttribKHR;$/;"	t	typeref:typename:intptr_t
EGLBoolean	host/libs/graphics_detector/include/EGL/egl.h	/^typedef unsigned int EGLBoolean;$/;"	t	typeref:typename:unsigned int
EGLClientBuffer	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLClientBuffer;$/;"	t	typeref:typename:void *
EGLClientPixmapHI	host/libs/graphics_detector/include/EGL/eglext.h	/^struct EGLClientPixmapHI {$/;"	s
EGLConfig	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLConfig;$/;"	t	typeref:typename:void *
EGLContext	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLContext;$/;"	t	typeref:typename:void *
EGLDEBUGPROCKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void (EGLAPIENTRY  *EGLDEBUGPROCKHR)(EGLenum error,const char *command,EGLint messageTyp/;"	t	typeref:typename:void (EGLAPIENTRY *)(EGLenum error,const char * command,EGLint messageType,EGLLabelKHR threadLabel,EGLLabelKHR objectLabel,const char * message)
EGLDeviceEXT	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLDeviceEXT;$/;"	t	typeref:typename:void *
EGLDisplay	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLDisplay;$/;"	t	typeref:typename:void *
EGLGetBlobFuncANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLsizeiANDROID (*EGLGetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, void/;"	t	typeref:typename:EGLsizeiANDROID (*)(const void * key,EGLsizeiANDROID keySize,void * value,EGLsizeiANDROID valueSize)
EGLImage	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLImage;$/;"	t	typeref:typename:void *
EGLImageKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLImageKHR;$/;"	t	typeref:typename:void *
EGLLabelKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLLabelKHR;$/;"	t	typeref:typename:void *
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef Display *EGLNativeDisplayType;$/;"	t	typeref:typename:Display *
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef HDC     EGLNativeDisplayType;$/;"	t	typeref:typename:HDC
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef int   EGLNativeDisplayType;$/;"	t	typeref:typename:int
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef int EGLNativeDisplayType;$/;"	t	typeref:typename:int
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef intptr_t EGLNativeDisplayType;$/;"	t	typeref:typename:intptr_t
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct gbm_device  *EGLNativeDisplayType;$/;"	t	typeref:struct:gbm_device *
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct wl_display     *EGLNativeDisplayType;$/;"	t	typeref:struct:wl_display *
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef void              *EGLNativeDisplayType;$/;"	t	typeref:typename:void *
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef void             *EGLNativeDisplayType;$/;"	t	typeref:typename:void *
EGLNativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef void*                           EGLNativeDisplayType;$/;"	t	typeref:typename:void *
EGLNativeFileDescriptorKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef int EGLNativeFileDescriptorKHR;$/;"	t	typeref:typename:int
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef HBITMAP EGLNativePixmapType;$/;"	t	typeref:typename:HBITMAP
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef Pixmap   EGLNativePixmapType;$/;"	t	typeref:typename:Pixmap
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef int EGLNativePixmapType;$/;"	t	typeref:typename:int
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef intptr_t EGLNativePixmapType;$/;"	t	typeref:typename:intptr_t
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef khronos_uintptr_t  EGLNativePixmapType;$/;"	t	typeref:typename:khronos_uintptr_t
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef khronos_uintptr_t EGLNativePixmapType;$/;"	t	typeref:typename:khronos_uintptr_t
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct egl_native_pixmap_t*     EGLNativePixmapType;$/;"	t	typeref:struct:egl_native_pixmap_t *
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct gbm_bo      *EGLNativePixmapType;$/;"	t	typeref:struct:gbm_bo *
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct wl_egl_pixmap  *EGLNativePixmapType;$/;"	t	typeref:struct:wl_egl_pixmap *
EGLNativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef void *EGLNativePixmapType;$/;"	t	typeref:typename:void *
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef HWND    EGLNativeWindowType;$/;"	t	typeref:typename:HWND
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef Window   EGLNativeWindowType;$/;"	t	typeref:typename:Window
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef int EGLNativeWindowType;$/;"	t	typeref:typename:int
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef intptr_t EGLNativeWindowType;$/;"	t	typeref:typename:intptr_t
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef khronos_uintptr_t  EGLNativeWindowType;$/;"	t	typeref:typename:khronos_uintptr_t
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef khronos_uintptr_t EGLNativeWindowType;$/;"	t	typeref:typename:khronos_uintptr_t
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct ANativeWindow*           EGLNativeWindowType;$/;"	t	typeref:struct:ANativeWindow *
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef struct wl_egl_window  *EGLNativeWindowType;$/;"	t	typeref:struct:wl_egl_window *
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef void               *EGLNativeWindowType;$/;"	t	typeref:typename:void *
EGLNativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef void *EGLNativeWindowType;$/;"	t	typeref:typename:void *
EGLObjectKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLObjectKHR;$/;"	t	typeref:typename:void *
EGLOutputLayerEXT	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLOutputLayerEXT;$/;"	t	typeref:typename:void *
EGLOutputPortEXT	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLOutputPortEXT;$/;"	t	typeref:typename:void *
EGLSetBlobFuncANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void (*EGLSetBlobFuncANDROID) (const void *key, EGLsizeiANDROID keySize, const void *val/;"	t	typeref:typename:void (*)(const void * key,EGLsizeiANDROID keySize,const void * value,EGLsizeiANDROID valueSize)
EGLStreamKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLStreamKHR;$/;"	t	typeref:typename:void *
EGLSurface	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLSurface;$/;"	t	typeref:typename:void *
EGLSync	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void *EGLSync;$/;"	t	typeref:typename:void *
EGLSyncKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLSyncKHR;$/;"	t	typeref:typename:void *
EGLSyncNV	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void *EGLSyncNV;$/;"	t	typeref:typename:void *
EGLTime	host/libs/graphics_detector/include/EGL/egl.h	/^typedef khronos_utime_nanoseconds_t EGLTime;$/;"	t	typeref:typename:khronos_utime_nanoseconds_t
EGLTimeKHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef khronos_utime_nanoseconds_t EGLTimeKHR;$/;"	t	typeref:typename:khronos_utime_nanoseconds_t
EGLTimeNV	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef khronos_utime_nanoseconds_t EGLTimeNV;$/;"	t	typeref:typename:khronos_utime_nanoseconds_t
EGL_ALPHA_FORMAT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_ALPHA_FORMAT /;"	d
EGL_ALPHA_FORMAT_NONPRE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_ALPHA_FORMAT_NONPRE /;"	d
EGL_ALPHA_FORMAT_PRE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_ALPHA_FORMAT_PRE /;"	d
EGL_ALPHA_MASK_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_ALPHA_MASK_SIZE /;"	d
EGL_ALPHA_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_ALPHA_SIZE /;"	d
EGL_ALREADY_SIGNALED_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ALREADY_SIGNALED_NV /;"	d
EGL_ANDROID_GLES_layers	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_GLES_layers /;"	d
EGL_ANDROID_blob_cache	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_blob_cache /;"	d
EGL_ANDROID_create_native_client_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_create_native_client_buffer /;"	d
EGL_ANDROID_framebuffer_target	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_framebuffer_target /;"	d
EGL_ANDROID_front_buffer_auto_refresh	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_front_buffer_auto_refresh /;"	d
EGL_ANDROID_get_frame_timestamps	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_get_frame_timestamps /;"	d
EGL_ANDROID_get_native_client_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_get_native_client_buffer /;"	d
EGL_ANDROID_image_native_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_image_native_buffer /;"	d
EGL_ANDROID_native_fence_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_native_fence_sync /;"	d
EGL_ANDROID_presentation_time	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_presentation_time /;"	d
EGL_ANDROID_recordable	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANDROID_recordable /;"	d
EGL_ANGLE_d3d_share_handle_client_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANGLE_d3d_share_handle_client_buffer /;"	d
EGL_ANGLE_device_d3d	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANGLE_device_d3d /;"	d
EGL_ANGLE_query_surface_pointer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANGLE_query_surface_pointer /;"	d
EGL_ANGLE_surface_d3d_texture_2d_share_handle	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANGLE_surface_d3d_texture_2d_share_handle /;"	d
EGL_ANGLE_window_fixed_size	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ANGLE_window_fixed_size /;"	d
EGL_ARM_image_format	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ARM_image_format /;"	d
EGL_ARM_implicit_external_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ARM_implicit_external_sync /;"	d
EGL_ARM_pixmap_multisample_discard	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ARM_pixmap_multisample_discard /;"	d
EGL_AUTO_STEREO_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_AUTO_STEREO_NV /;"	d
EGL_BACK_BUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BACK_BUFFER /;"	d
EGL_BAD_ACCESS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_ACCESS /;"	d
EGL_BAD_ALLOC	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_ALLOC /;"	d
EGL_BAD_ATTRIBUTE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_ATTRIBUTE /;"	d
EGL_BAD_CONFIG	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_CONFIG /;"	d
EGL_BAD_CONTEXT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_CONTEXT /;"	d
EGL_BAD_CURRENT_SURFACE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_CURRENT_SURFACE /;"	d
EGL_BAD_DEVICE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BAD_DEVICE_EXT /;"	d
EGL_BAD_DISPLAY	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_DISPLAY /;"	d
EGL_BAD_MATCH	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_MATCH /;"	d
EGL_BAD_NATIVE_PIXMAP	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_NATIVE_PIXMAP /;"	d
EGL_BAD_NATIVE_WINDOW	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_NATIVE_WINDOW /;"	d
EGL_BAD_OUTPUT_LAYER_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BAD_OUTPUT_LAYER_EXT /;"	d
EGL_BAD_OUTPUT_PORT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BAD_OUTPUT_PORT_EXT /;"	d
EGL_BAD_PARAMETER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_PARAMETER /;"	d
EGL_BAD_STATE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BAD_STATE_KHR /;"	d
EGL_BAD_STREAM_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BAD_STREAM_KHR /;"	d
EGL_BAD_SURFACE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BAD_SURFACE /;"	d
EGL_BIND_TO_TEXTURE_RGB	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BIND_TO_TEXTURE_RGB /;"	d
EGL_BIND_TO_TEXTURE_RGBA	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BIND_TO_TEXTURE_RGBA /;"	d
EGL_BITMAP_ORIGIN_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_ORIGIN_KHR /;"	d
EGL_BITMAP_PITCH_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PITCH_KHR /;"	d
EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PIXEL_ALPHA_OFFSET_KHR /;"	d
EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PIXEL_BLUE_OFFSET_KHR /;"	d
EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PIXEL_GREEN_OFFSET_KHR /;"	d
EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PIXEL_LUMINANCE_OFFSET_KHR /;"	d
EGL_BITMAP_PIXEL_RED_OFFSET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PIXEL_RED_OFFSET_KHR /;"	d
EGL_BITMAP_PIXEL_SIZE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_PIXEL_SIZE_KHR /;"	d
EGL_BITMAP_POINTER_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BITMAP_POINTER_KHR /;"	d
EGL_BLUE_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BLUE_SIZE /;"	d
EGL_BOTTOM_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BOTTOM_NV /;"	d
EGL_BUFFER_AGE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BUFFER_AGE_EXT /;"	d
EGL_BUFFER_AGE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_BUFFER_AGE_KHR /;"	d
EGL_BUFFER_DESTROYED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BUFFER_DESTROYED /;"	d
EGL_BUFFER_PRESERVED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BUFFER_PRESERVED /;"	d
EGL_BUFFER_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_BUFFER_SIZE /;"	d
EGL_CAST	host/libs/graphics_detector/include/EGL/eglplatform.h	/^#define EGL_CAST(/;"	d
EGL_CLIENT_APIS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CLIENT_APIS /;"	d
EGL_CLIENT_PIXMAP_POINTER_HI	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CLIENT_PIXMAP_POINTER_HI /;"	d
EGL_CL_EVENT_HANDLE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CL_EVENT_HANDLE /;"	d
EGL_CL_EVENT_HANDLE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CL_EVENT_HANDLE_KHR /;"	d
EGL_COLORSPACE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_COLORSPACE /;"	d
EGL_COLORSPACE_LINEAR	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_COLORSPACE_LINEAR /;"	d
EGL_COLORSPACE_sRGB	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_COLORSPACE_sRGB /;"	d
EGL_COLOR_ARGB_HI	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_ARGB_HI /;"	d
EGL_COLOR_BUFFER_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_COLOR_BUFFER_TYPE /;"	d
EGL_COLOR_COMPONENT_TYPE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_COMPONENT_TYPE_EXT /;"	d
EGL_COLOR_COMPONENT_TYPE_FIXED_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_COMPONENT_TYPE_FIXED_EXT /;"	d
EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_COMPONENT_TYPE_FLOAT_EXT /;"	d
EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_COMPONENT_TYPE_INTEGER_ARM /;"	d
EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_COMPONENT_TYPE_UNSIGNED_INTEGER_ARM /;"	d
EGL_COLOR_FORMAT_HI	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_FORMAT_HI /;"	d
EGL_COLOR_RGBA_HI	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_RGBA_HI /;"	d
EGL_COLOR_RGB_HI	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COLOR_RGB_HI /;"	d
EGL_COMPOSITE_DEADLINE_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COMPOSITE_DEADLINE_ANDROID /;"	d
EGL_COMPOSITE_INTERVAL_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COMPOSITE_INTERVAL_ANDROID /;"	d
EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COMPOSITE_TO_PRESENT_LATENCY_ANDROID /;"	d
EGL_COMPOSITION_LATCH_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COMPOSITION_LATCH_TIME_ANDROID /;"	d
EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COMPOSITOR_DROP_NEWEST_FRAME_EXT /;"	d
EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COMPOSITOR_KEEP_NEWEST_FRAME_EXT /;"	d
EGL_CONDITION_SATISFIED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONDITION_SATISFIED /;"	d
EGL_CONDITION_SATISFIED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONDITION_SATISFIED_KHR /;"	d
EGL_CONDITION_SATISFIED_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONDITION_SATISFIED_NV /;"	d
EGL_CONFIG_CAVEAT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONFIG_CAVEAT /;"	d
EGL_CONFIG_ID	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONFIG_ID /;"	d
EGL_CONFORMANT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONFORMANT /;"	d
EGL_CONFORMANT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONFORMANT_KHR /;"	d
EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONSUMER_ACQUIRE_TIMEOUT_USEC_KHR /;"	d
EGL_CONSUMER_AUTO_ORIENTATION_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONSUMER_AUTO_ORIENTATION_NV /;"	d
EGL_CONSUMER_FRAME_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONSUMER_FRAME_KHR /;"	d
EGL_CONSUMER_LATENCY_USEC_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONSUMER_LATENCY_USEC_KHR /;"	d
EGL_CONSUMER_MAX_FRAME_HINT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONSUMER_MAX_FRAME_HINT_NV /;"	d
EGL_CONSUMER_METADATA_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONSUMER_METADATA_NV /;"	d
EGL_CONTEXT_CLIENT_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_CLIENT_TYPE /;"	d
EGL_CONTEXT_CLIENT_VERSION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_CLIENT_VERSION /;"	d
EGL_CONTEXT_FLAGS_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_FLAGS_KHR /;"	d
EGL_CONTEXT_LOST	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_LOST /;"	d
EGL_CONTEXT_MAJOR_VERSION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_MAJOR_VERSION /;"	d
EGL_CONTEXT_MAJOR_VERSION_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_MAJOR_VERSION_KHR /;"	d
EGL_CONTEXT_MINOR_VERSION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_MINOR_VERSION /;"	d
EGL_CONTEXT_MINOR_VERSION_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_MINOR_VERSION_KHR /;"	d
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT /;"	d
EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_COMPATIBILITY_PROFILE_BIT_KHR /;"	d
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT /;"	d
EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_CORE_PROFILE_BIT_KHR /;"	d
EGL_CONTEXT_OPENGL_DEBUG	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_DEBUG /;"	d
EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_DEBUG_BIT_KHR /;"	d
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE /;"	d
EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_FORWARD_COMPATIBLE_BIT_KHR /;"	d
EGL_CONTEXT_OPENGL_NO_ERROR_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_NO_ERROR_KHR /;"	d
EGL_CONTEXT_OPENGL_PROFILE_MASK	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_PROFILE_MASK /;"	d
EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_PROFILE_MASK_KHR /;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY /;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_EXT /;"	d
EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_RESET_NOTIFICATION_STRATEGY_KHR /;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS /;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_BIT_KHR /;"	d
EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_OPENGL_ROBUST_ACCESS_EXT /;"	d
EGL_CONTEXT_PRIORITY_HIGH_IMG	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_PRIORITY_HIGH_IMG /;"	d
EGL_CONTEXT_PRIORITY_LEVEL_IMG	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_PRIORITY_LEVEL_IMG /;"	d
EGL_CONTEXT_PRIORITY_LOW_IMG	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_PRIORITY_LOW_IMG /;"	d
EGL_CONTEXT_PRIORITY_MEDIUM_IMG	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_PRIORITY_MEDIUM_IMG /;"	d
EGL_CONTEXT_PRIORITY_REALTIME_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_PRIORITY_REALTIME_NV /;"	d
EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR /;"	d
EGL_CONTEXT_RELEASE_BEHAVIOR_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_RELEASE_BEHAVIOR_KHR /;"	d
EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CONTEXT_RELEASE_BEHAVIOR_NONE_KHR /;"	d
EGL_CORE_NATIVE_ENGINE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_CORE_NATIVE_ENGINE /;"	d
EGL_COVERAGE_BUFFERS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COVERAGE_BUFFERS_NV /;"	d
EGL_COVERAGE_SAMPLES_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COVERAGE_SAMPLES_NV /;"	d
EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COVERAGE_SAMPLE_RESOLVE_DEFAULT_NV /;"	d
EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COVERAGE_SAMPLE_RESOLVE_NONE_NV /;"	d
EGL_COVERAGE_SAMPLE_RESOLVE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_COVERAGE_SAMPLE_RESOLVE_NV /;"	d
EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CTA861_3_MAX_CONTENT_LIGHT_LEVEL_EXT /;"	d
EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CTA861_3_MAX_FRAME_AVERAGE_LEVEL_EXT /;"	d
EGL_CUDA_DEVICE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CUDA_DEVICE_NV /;"	d
EGL_CUDA_EVENT_HANDLE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_CUDA_EVENT_HANDLE_NV /;"	d
EGL_D3D11_DEVICE_ANGLE	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_D3D11_DEVICE_ANGLE /;"	d
EGL_D3D9_DEVICE_ANGLE	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_D3D9_DEVICE_ANGLE /;"	d
EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_D3D_TEXTURE_2D_SHARE_HANDLE_ANGLE /;"	d
EGL_DEBUG_CALLBACK_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEBUG_CALLBACK_KHR /;"	d
EGL_DEBUG_MSG_CRITICAL_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEBUG_MSG_CRITICAL_KHR /;"	d
EGL_DEBUG_MSG_ERROR_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEBUG_MSG_ERROR_KHR /;"	d
EGL_DEBUG_MSG_INFO_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEBUG_MSG_INFO_KHR /;"	d
EGL_DEBUG_MSG_WARN_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEBUG_MSG_WARN_KHR /;"	d
EGL_DEFAULT_DISPLAY	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_DEFAULT_DISPLAY /;"	d
EGL_DEPTH_ENCODING_NONE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEPTH_ENCODING_NONE_NV /;"	d
EGL_DEPTH_ENCODING_NONLINEAR_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEPTH_ENCODING_NONLINEAR_NV /;"	d
EGL_DEPTH_ENCODING_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEPTH_ENCODING_NV /;"	d
EGL_DEPTH_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_DEPTH_SIZE /;"	d
EGL_DEQUEUE_READY_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEQUEUE_READY_TIME_ANDROID /;"	d
EGL_DEVICE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DEVICE_EXT /;"	d
EGL_DISCARD_SAMPLES_ARM	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DISCARD_SAMPLES_ARM /;"	d
EGL_DISPLAY_PRESENT_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DISPLAY_PRESENT_TIME_ANDROID /;"	d
EGL_DISPLAY_SCALING	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_DISPLAY_SCALING /;"	d
EGL_DMA_BUF_PLANE0_FD_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE0_FD_EXT /;"	d
EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE0_MODIFIER_HI_EXT /;"	d
EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE0_MODIFIER_LO_EXT /;"	d
EGL_DMA_BUF_PLANE0_OFFSET_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE0_OFFSET_EXT /;"	d
EGL_DMA_BUF_PLANE0_PITCH_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE0_PITCH_EXT /;"	d
EGL_DMA_BUF_PLANE1_FD_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE1_FD_EXT /;"	d
EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE1_MODIFIER_HI_EXT /;"	d
EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE1_MODIFIER_LO_EXT /;"	d
EGL_DMA_BUF_PLANE1_OFFSET_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE1_OFFSET_EXT /;"	d
EGL_DMA_BUF_PLANE1_PITCH_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE1_PITCH_EXT /;"	d
EGL_DMA_BUF_PLANE2_FD_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE2_FD_EXT /;"	d
EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE2_MODIFIER_HI_EXT /;"	d
EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE2_MODIFIER_LO_EXT /;"	d
EGL_DMA_BUF_PLANE2_OFFSET_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE2_OFFSET_EXT /;"	d
EGL_DMA_BUF_PLANE2_PITCH_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE2_PITCH_EXT /;"	d
EGL_DMA_BUF_PLANE3_FD_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE3_FD_EXT /;"	d
EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE3_MODIFIER_HI_EXT /;"	d
EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE3_MODIFIER_LO_EXT /;"	d
EGL_DMA_BUF_PLANE3_OFFSET_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE3_OFFSET_EXT /;"	d
EGL_DMA_BUF_PLANE3_PITCH_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DMA_BUF_PLANE3_PITCH_EXT /;"	d
EGL_DONT_CARE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_DONT_CARE /;"	d
EGL_DRAW	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_DRAW /;"	d
EGL_DRM_BUFFER_FORMAT_ARGB32_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_FORMAT_ARGB32_MESA /;"	d
EGL_DRM_BUFFER_FORMAT_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_FORMAT_MESA /;"	d
EGL_DRM_BUFFER_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_MESA /;"	d
EGL_DRM_BUFFER_STRIDE_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_STRIDE_MESA /;"	d
EGL_DRM_BUFFER_USE_CURSOR_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_USE_CURSOR_MESA /;"	d
EGL_DRM_BUFFER_USE_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_USE_MESA /;"	d
EGL_DRM_BUFFER_USE_SCANOUT_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_USE_SCANOUT_MESA /;"	d
EGL_DRM_BUFFER_USE_SHARE_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_BUFFER_USE_SHARE_MESA /;"	d
EGL_DRM_CONNECTOR_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_CONNECTOR_EXT /;"	d
EGL_DRM_CRTC_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_CRTC_EXT /;"	d
EGL_DRM_DEVICE_FILE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_DEVICE_FILE_EXT /;"	d
EGL_DRM_MASTER_FD_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_MASTER_FD_EXT /;"	d
EGL_DRM_PLANE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_DRM_PLANE_EXT /;"	d
EGL_EGLEXT_VERSION	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EGLEXT_VERSION /;"	d
EGL_EGL_PROTOTYPES	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_EGL_PROTOTYPES /;"	d
EGL_EXTENSIONS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_EXTENSIONS /;"	d
EGL_EXTERNAL_REF_ID_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXTERNAL_REF_ID_EXT /;"	d
EGL_EXT_bind_to_front	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_bind_to_front /;"	d
EGL_EXT_buffer_age	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_buffer_age /;"	d
EGL_EXT_client_extensions	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_client_extensions /;"	d
EGL_EXT_client_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_client_sync /;"	d
EGL_EXT_compositor	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_compositor /;"	d
EGL_EXT_create_context_robustness	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_create_context_robustness /;"	d
EGL_EXT_device_base	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_device_base /;"	d
EGL_EXT_device_drm	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_device_drm /;"	d
EGL_EXT_device_enumeration	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_device_enumeration /;"	d
EGL_EXT_device_openwf	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_device_openwf /;"	d
EGL_EXT_device_query	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_device_query /;"	d
EGL_EXT_gl_colorspace_bt2020_linear	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_bt2020_linear /;"	d
EGL_EXT_gl_colorspace_bt2020_pq	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_bt2020_pq /;"	d
EGL_EXT_gl_colorspace_display_p3	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_display_p3 /;"	d
EGL_EXT_gl_colorspace_display_p3_linear	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_display_p3_linear /;"	d
EGL_EXT_gl_colorspace_display_p3_passthrough	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_display_p3_passthrough /;"	d
EGL_EXT_gl_colorspace_scrgb	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_scrgb /;"	d
EGL_EXT_gl_colorspace_scrgb_linear	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_gl_colorspace_scrgb_linear /;"	d
EGL_EXT_image_dma_buf_import	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_image_dma_buf_import /;"	d
EGL_EXT_image_dma_buf_import_modifiers	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_image_dma_buf_import_modifiers /;"	d
EGL_EXT_image_gl_colorspace	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_image_gl_colorspace /;"	d
EGL_EXT_image_implicit_sync_control	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_image_implicit_sync_control /;"	d
EGL_EXT_multiview_window	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_multiview_window /;"	d
EGL_EXT_output_base	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_output_base /;"	d
EGL_EXT_output_drm	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_output_drm /;"	d
EGL_EXT_output_openwf	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_output_openwf /;"	d
EGL_EXT_pixel_format_float	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_pixel_format_float /;"	d
EGL_EXT_platform_base	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_platform_base /;"	d
EGL_EXT_platform_device	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_platform_device /;"	d
EGL_EXT_platform_wayland	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_platform_wayland /;"	d
EGL_EXT_platform_x11	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_platform_x11 /;"	d
EGL_EXT_protected_content	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_protected_content /;"	d
EGL_EXT_protected_surface	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_protected_surface /;"	d
EGL_EXT_stream_consumer_egloutput	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_stream_consumer_egloutput /;"	d
EGL_EXT_surface_CTA861_3_metadata	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_surface_CTA861_3_metadata /;"	d
EGL_EXT_surface_SMPTE2086_metadata	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_surface_SMPTE2086_metadata /;"	d
EGL_EXT_swap_buffers_with_damage	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_swap_buffers_with_damage /;"	d
EGL_EXT_sync_reuse	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_sync_reuse /;"	d
EGL_EXT_yuv_surface	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_EXT_yuv_surface /;"	d
EGL_FALSE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_FALSE /;"	d
EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FIRST_COMPOSITION_GPU_FINISHED_TIME_ANDROID /;"	d
EGL_FIRST_COMPOSITION_START_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FIRST_COMPOSITION_START_TIME_ANDROID /;"	d
EGL_FIXED_SIZE_ANGLE	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FIXED_SIZE_ANGLE /;"	d
EGL_FOREVER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_FOREVER /;"	d
EGL_FOREVER_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FOREVER_KHR /;"	d
EGL_FOREVER_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FOREVER_NV /;"	d
EGL_FORMAT_RGBA_8888_EXACT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FORMAT_RGBA_8888_EXACT_KHR /;"	d
EGL_FORMAT_RGBA_8888_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FORMAT_RGBA_8888_KHR /;"	d
EGL_FORMAT_RGB_565_EXACT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FORMAT_RGB_565_EXACT_KHR /;"	d
EGL_FORMAT_RGB_565_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FORMAT_RGB_565_KHR /;"	d
EGL_FRAMEBUFFER_TARGET_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FRAMEBUFFER_TARGET_ANDROID /;"	d
EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FRONT_BUFFER_AUTO_REFRESH_ANDROID /;"	d
EGL_FRONT_BUFFER_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_FRONT_BUFFER_EXT /;"	d
EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GENERATE_RESET_ON_VIDEO_MEMORY_PURGE_NV /;"	d
EGL_GL_COLORSPACE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_COLORSPACE /;"	d
EGL_GL_COLORSPACE_BT2020_LINEAR_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_BT2020_LINEAR_EXT /;"	d
EGL_GL_COLORSPACE_BT2020_PQ_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_BT2020_PQ_EXT /;"	d
EGL_GL_COLORSPACE_DEFAULT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_DEFAULT_EXT /;"	d
EGL_GL_COLORSPACE_DISPLAY_P3_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_DISPLAY_P3_EXT /;"	d
EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_DISPLAY_P3_LINEAR_EXT /;"	d
EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_DISPLAY_P3_PASSTHROUGH_EXT /;"	d
EGL_GL_COLORSPACE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_KHR /;"	d
EGL_GL_COLORSPACE_LINEAR	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_COLORSPACE_LINEAR /;"	d
EGL_GL_COLORSPACE_LINEAR_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_LINEAR_KHR /;"	d
EGL_GL_COLORSPACE_SCRGB_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_SCRGB_EXT /;"	d
EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_SCRGB_LINEAR_EXT /;"	d
EGL_GL_COLORSPACE_SRGB	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_COLORSPACE_SRGB /;"	d
EGL_GL_COLORSPACE_SRGB_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_COLORSPACE_SRGB_KHR /;"	d
EGL_GL_RENDERBUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_RENDERBUFFER /;"	d
EGL_GL_RENDERBUFFER_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_RENDERBUFFER_KHR /;"	d
EGL_GL_TEXTURE_2D	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_2D /;"	d
EGL_GL_TEXTURE_2D_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_2D_KHR /;"	d
EGL_GL_TEXTURE_3D	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_3D /;"	d
EGL_GL_TEXTURE_3D_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_3D_KHR /;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X /;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_X_KHR /;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y /;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_KHR /;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z /;"	d
EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_KHR /;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X /;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_X_KHR /;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y /;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Y_KHR /;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z /;"	d
EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_CUBE_MAP_POSITIVE_Z_KHR /;"	d
EGL_GL_TEXTURE_LEVEL	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_LEVEL /;"	d
EGL_GL_TEXTURE_LEVEL_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_LEVEL_KHR /;"	d
EGL_GL_TEXTURE_ZOFFSET	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GL_TEXTURE_ZOFFSET /;"	d
EGL_GL_TEXTURE_ZOFFSET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_GL_TEXTURE_ZOFFSET_KHR /;"	d
EGL_GREEN_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_GREEN_SIZE /;"	d
EGL_HEIGHT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_HEIGHT /;"	d
EGL_HI_clientpixmap	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_HI_clientpixmap /;"	d
EGL_HI_colorformats	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_HI_colorformats /;"	d
EGL_HORIZONTAL_RESOLUTION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_HORIZONTAL_RESOLUTION /;"	d
EGL_IMAGE_PRESERVED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_IMAGE_PRESERVED /;"	d
EGL_IMAGE_PRESERVED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_IMAGE_PRESERVED_KHR /;"	d
EGL_IMG_context_priority	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_IMG_context_priority /;"	d
EGL_IMG_image_plane_attribs	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_IMG_image_plane_attribs /;"	d
EGL_IMPORT_EXPLICIT_SYNC_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_IMPORT_EXPLICIT_SYNC_EXT /;"	d
EGL_IMPORT_IMPLICIT_SYNC_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_IMPORT_IMPLICIT_SYNC_EXT /;"	d
EGL_IMPORT_SYNC_TYPE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_IMPORT_SYNC_TYPE_EXT /;"	d
EGL_ITU_REC2020_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ITU_REC2020_EXT /;"	d
EGL_ITU_REC601_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ITU_REC601_EXT /;"	d
EGL_ITU_REC709_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_ITU_REC709_EXT /;"	d
EGL_KHR_cl_event	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_cl_event /;"	d
EGL_KHR_cl_event2	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_cl_event2 /;"	d
EGL_KHR_client_get_all_proc_addresses	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_client_get_all_proc_addresses /;"	d
EGL_KHR_config_attribs	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_config_attribs /;"	d
EGL_KHR_context_flush_control	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_context_flush_control /;"	d
EGL_KHR_create_context	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_create_context /;"	d
EGL_KHR_create_context_no_error	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_create_context_no_error /;"	d
EGL_KHR_debug	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_debug /;"	d
EGL_KHR_display_reference	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_display_reference /;"	d
EGL_KHR_fence_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_fence_sync /;"	d
EGL_KHR_get_all_proc_addresses	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_get_all_proc_addresses /;"	d
EGL_KHR_gl_colorspace	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_gl_colorspace /;"	d
EGL_KHR_gl_renderbuffer_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_gl_renderbuffer_image /;"	d
EGL_KHR_gl_texture_2D_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_gl_texture_2D_image /;"	d
EGL_KHR_gl_texture_3D_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_gl_texture_3D_image /;"	d
EGL_KHR_gl_texture_cubemap_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_gl_texture_cubemap_image /;"	d
EGL_KHR_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_image /;"	d
EGL_KHR_image_base	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_image_base /;"	d
EGL_KHR_image_pixmap	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_image_pixmap /;"	d
EGL_KHR_lock_surface	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_lock_surface /;"	d
EGL_KHR_lock_surface2	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_lock_surface2 /;"	d
EGL_KHR_lock_surface3	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_lock_surface3 /;"	d
EGL_KHR_mutable_render_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_mutable_render_buffer /;"	d
EGL_KHR_no_config_context	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_no_config_context /;"	d
EGL_KHR_partial_update	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_partial_update /;"	d
EGL_KHR_platform_android	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_platform_android /;"	d
EGL_KHR_platform_gbm	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_platform_gbm /;"	d
EGL_KHR_platform_wayland	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_platform_wayland /;"	d
EGL_KHR_platform_x11	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_platform_x11 /;"	d
EGL_KHR_reusable_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_reusable_sync /;"	d
EGL_KHR_stream	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream /;"	d
EGL_KHR_stream_attrib	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream_attrib /;"	d
EGL_KHR_stream_consumer_gltexture	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream_consumer_gltexture /;"	d
EGL_KHR_stream_cross_process_fd	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream_cross_process_fd /;"	d
EGL_KHR_stream_fifo	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream_fifo /;"	d
EGL_KHR_stream_producer_aldatalocator	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream_producer_aldatalocator /;"	d
EGL_KHR_stream_producer_eglsurface	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_stream_producer_eglsurface /;"	d
EGL_KHR_surfaceless_context	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_surfaceless_context /;"	d
EGL_KHR_swap_buffers_with_damage	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_swap_buffers_with_damage /;"	d
EGL_KHR_vg_parent_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_vg_parent_image /;"	d
EGL_KHR_wait_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_KHR_wait_sync /;"	d
EGL_LARGEST_PBUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_LARGEST_PBUFFER /;"	d
EGL_LAST_COMPOSITION_START_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LAST_COMPOSITION_START_TIME_ANDROID /;"	d
EGL_LEFT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LEFT_NV /;"	d
EGL_LEVEL	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_LEVEL /;"	d
EGL_LINUX_DMA_BUF_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LINUX_DMA_BUF_EXT /;"	d
EGL_LINUX_DRM_FOURCC_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LINUX_DRM_FOURCC_EXT /;"	d
EGL_LOCK_SURFACE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LOCK_SURFACE_BIT_KHR /;"	d
EGL_LOCK_USAGE_HINT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LOCK_USAGE_HINT_KHR /;"	d
EGL_LOSE_CONTEXT_ON_RESET	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_LOSE_CONTEXT_ON_RESET /;"	d
EGL_LOSE_CONTEXT_ON_RESET_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LOSE_CONTEXT_ON_RESET_EXT /;"	d
EGL_LOSE_CONTEXT_ON_RESET_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LOSE_CONTEXT_ON_RESET_KHR /;"	d
EGL_LOWER_LEFT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_LOWER_LEFT_KHR /;"	d
EGL_LUMINANCE_BUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_LUMINANCE_BUFFER /;"	d
EGL_LUMINANCE_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_LUMINANCE_SIZE /;"	d
EGL_MAP_PRESERVE_PIXELS_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MAP_PRESERVE_PIXELS_KHR /;"	d
EGL_MATCH_FORMAT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MATCH_FORMAT_KHR /;"	d
EGL_MATCH_NATIVE_PIXMAP	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MATCH_NATIVE_PIXMAP /;"	d
EGL_MAX_PBUFFER_HEIGHT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MAX_PBUFFER_HEIGHT /;"	d
EGL_MAX_PBUFFER_PIXELS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MAX_PBUFFER_PIXELS /;"	d
EGL_MAX_PBUFFER_WIDTH	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MAX_PBUFFER_WIDTH /;"	d
EGL_MAX_STREAM_METADATA_BLOCKS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MAX_STREAM_METADATA_BLOCKS_NV /;"	d
EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MAX_STREAM_METADATA_BLOCK_SIZE_NV /;"	d
EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MAX_STREAM_METADATA_TOTAL_SIZE_NV /;"	d
EGL_MAX_SWAP_INTERVAL	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MAX_SWAP_INTERVAL /;"	d
EGL_MESA_drm_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MESA_drm_image /;"	d
EGL_MESA_image_dma_buf_export	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MESA_image_dma_buf_export /;"	d
EGL_MESA_platform_gbm	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MESA_platform_gbm /;"	d
EGL_MESA_platform_surfaceless	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MESA_platform_surfaceless /;"	d
EGL_MESA_query_driver	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MESA_query_driver /;"	d
EGL_METADATA0_SIZE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA0_SIZE_NV /;"	d
EGL_METADATA0_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA0_TYPE_NV /;"	d
EGL_METADATA1_SIZE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA1_SIZE_NV /;"	d
EGL_METADATA1_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA1_TYPE_NV /;"	d
EGL_METADATA2_SIZE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA2_SIZE_NV /;"	d
EGL_METADATA2_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA2_TYPE_NV /;"	d
EGL_METADATA3_SIZE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA3_SIZE_NV /;"	d
EGL_METADATA3_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA3_TYPE_NV /;"	d
EGL_METADATA_SCALING_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_METADATA_SCALING_EXT /;"	d
EGL_MIN_SWAP_INTERVAL	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MIN_SWAP_INTERVAL /;"	d
EGL_MIPMAP_LEVEL	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MIPMAP_LEVEL /;"	d
EGL_MIPMAP_TEXTURE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MIPMAP_TEXTURE /;"	d
EGL_MULTISAMPLE_RESOLVE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MULTISAMPLE_RESOLVE /;"	d
EGL_MULTISAMPLE_RESOLVE_BOX	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MULTISAMPLE_RESOLVE_BOX /;"	d
EGL_MULTISAMPLE_RESOLVE_BOX_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MULTISAMPLE_RESOLVE_BOX_BIT /;"	d
EGL_MULTISAMPLE_RESOLVE_DEFAULT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_MULTISAMPLE_RESOLVE_DEFAULT /;"	d
EGL_MULTIVIEW_VIEW_COUNT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MULTIVIEW_VIEW_COUNT_EXT /;"	d
EGL_MUTABLE_RENDER_BUFFER_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_MUTABLE_RENDER_BUFFER_BIT_KHR /;"	d
EGL_NATIVE_BUFFER_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_ANDROID /;"	d
EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_MULTIPLANE_SEPARATE_IMG /;"	d
EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_PLANE_OFFSET_IMG /;"	d
EGL_NATIVE_BUFFER_TIZEN	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_TIZEN /;"	d
EGL_NATIVE_BUFFER_USAGE_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_USAGE_ANDROID /;"	d
EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_USAGE_PROTECTED_BIT_ANDROID /;"	d
EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_USAGE_RENDERBUFFER_BIT_ANDROID /;"	d
EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_BUFFER_USAGE_TEXTURE_BIT_ANDROID /;"	d
EGL_NATIVE_PIXMAP_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_PIXMAP_KHR /;"	d
EGL_NATIVE_RENDERABLE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NATIVE_RENDERABLE /;"	d
EGL_NATIVE_SURFACE_TIZEN	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NATIVE_SURFACE_TIZEN /;"	d
EGL_NATIVE_VISUAL_ID	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NATIVE_VISUAL_ID /;"	d
EGL_NATIVE_VISUAL_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NATIVE_VISUAL_TYPE /;"	d
EGL_NOK_swap_region	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NOK_swap_region /;"	d
EGL_NOK_swap_region2	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NOK_swap_region2 /;"	d
EGL_NOK_texture_from_pixmap	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NOK_texture_from_pixmap /;"	d
EGL_NONE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NONE /;"	d
EGL_NON_CONFORMANT_CONFIG	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NON_CONFORMANT_CONFIG /;"	d
EGL_NOT_INITIALIZED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NOT_INITIALIZED /;"	d
EGL_NO_CONFIG_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_CONFIG_KHR /;"	d
EGL_NO_CONTEXT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_CONTEXT /;"	d
EGL_NO_DEVICE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_DEVICE_EXT /;"	d
EGL_NO_DISPLAY	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_DISPLAY /;"	d
EGL_NO_FILE_DESCRIPTOR_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_FILE_DESCRIPTOR_KHR /;"	d
EGL_NO_IMAGE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_IMAGE /;"	d
EGL_NO_IMAGE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_IMAGE_KHR /;"	d
EGL_NO_NATIVE_FENCE_FD_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_NATIVE_FENCE_FD_ANDROID /;"	d
EGL_NO_OUTPUT_LAYER_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_OUTPUT_LAYER_EXT /;"	d
EGL_NO_OUTPUT_PORT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_OUTPUT_PORT_EXT /;"	d
EGL_NO_RESET_NOTIFICATION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_RESET_NOTIFICATION /;"	d
EGL_NO_RESET_NOTIFICATION_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_RESET_NOTIFICATION_EXT /;"	d
EGL_NO_RESET_NOTIFICATION_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_RESET_NOTIFICATION_KHR /;"	d
EGL_NO_STREAM_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_STREAM_KHR /;"	d
EGL_NO_SURFACE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_SURFACE /;"	d
EGL_NO_SYNC	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_SYNC /;"	d
EGL_NO_SYNC_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_SYNC_KHR /;"	d
EGL_NO_SYNC_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NO_SYNC_NV /;"	d
EGL_NO_TEXTURE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_NO_TEXTURE /;"	d
EGL_NV_3dvision_surface	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_3dvision_surface /;"	d
EGL_NV_context_priority_realtime	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_context_priority_realtime /;"	d
EGL_NV_coverage_sample	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_coverage_sample /;"	d
EGL_NV_coverage_sample_resolve	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_coverage_sample_resolve /;"	d
EGL_NV_cuda_event	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_cuda_event /;"	d
EGL_NV_depth_nonlinear	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_depth_nonlinear /;"	d
EGL_NV_device_cuda	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_device_cuda /;"	d
EGL_NV_native_query	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_native_query /;"	d
EGL_NV_post_convert_rounding	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_post_convert_rounding /;"	d
EGL_NV_post_sub_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_post_sub_buffer /;"	d
EGL_NV_quadruple_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_quadruple_buffer /;"	d
EGL_NV_robustness_video_memory_purge	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_robustness_video_memory_purge /;"	d
EGL_NV_stream_consumer_gltexture_yuv	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_consumer_gltexture_yuv /;"	d
EGL_NV_stream_cross_display	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_cross_display /;"	d
EGL_NV_stream_cross_object	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_cross_object /;"	d
EGL_NV_stream_cross_partition	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_cross_partition /;"	d
EGL_NV_stream_cross_process	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_cross_process /;"	d
EGL_NV_stream_cross_system	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_cross_system /;"	d
EGL_NV_stream_dma	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_dma /;"	d
EGL_NV_stream_fifo_next	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_fifo_next /;"	d
EGL_NV_stream_fifo_synchronous	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_fifo_synchronous /;"	d
EGL_NV_stream_flush	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_flush /;"	d
EGL_NV_stream_frame_limits	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_frame_limits /;"	d
EGL_NV_stream_metadata	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_metadata /;"	d
EGL_NV_stream_origin	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_origin /;"	d
EGL_NV_stream_remote	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_remote /;"	d
EGL_NV_stream_reset	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_reset /;"	d
EGL_NV_stream_socket	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_socket /;"	d
EGL_NV_stream_socket_inet	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_socket_inet /;"	d
EGL_NV_stream_socket_unix	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_socket_unix /;"	d
EGL_NV_stream_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_stream_sync /;"	d
EGL_NV_sync	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_sync /;"	d
EGL_NV_system_time	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_system_time /;"	d
EGL_NV_triple_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_NV_triple_buffer /;"	d
EGL_OBJECT_CONTEXT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_CONTEXT_KHR /;"	d
EGL_OBJECT_DISPLAY_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_DISPLAY_KHR /;"	d
EGL_OBJECT_IMAGE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_IMAGE_KHR /;"	d
EGL_OBJECT_STREAM_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_STREAM_KHR /;"	d
EGL_OBJECT_SURFACE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_SURFACE_KHR /;"	d
EGL_OBJECT_SYNC_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_SYNC_KHR /;"	d
EGL_OBJECT_THREAD_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OBJECT_THREAD_KHR /;"	d
EGL_OPENGL_API	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENGL_API /;"	d
EGL_OPENGL_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENGL_BIT /;"	d
EGL_OPENGL_ES2_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENGL_ES2_BIT /;"	d
EGL_OPENGL_ES3_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENGL_ES3_BIT /;"	d
EGL_OPENGL_ES3_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OPENGL_ES3_BIT_KHR /;"	d
EGL_OPENGL_ES_API	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENGL_ES_API /;"	d
EGL_OPENGL_ES_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENGL_ES_BIT /;"	d
EGL_OPENVG_API	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENVG_API /;"	d
EGL_OPENVG_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENVG_BIT /;"	d
EGL_OPENVG_IMAGE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_OPENVG_IMAGE /;"	d
EGL_OPENWF_DEVICE_ID_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OPENWF_DEVICE_ID_EXT /;"	d
EGL_OPENWF_PIPELINE_ID_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OPENWF_PIPELINE_ID_EXT /;"	d
EGL_OPENWF_PORT_ID_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OPENWF_PORT_ID_EXT /;"	d
EGL_OPTIMAL_FORMAT_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_OPTIMAL_FORMAT_BIT_KHR /;"	d
EGL_PBUFFER_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_PBUFFER_BIT /;"	d
EGL_PENDING_FRAME_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PENDING_FRAME_NV /;"	d
EGL_PENDING_METADATA_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PENDING_METADATA_NV /;"	d
EGL_PIXEL_ASPECT_RATIO	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_PIXEL_ASPECT_RATIO /;"	d
EGL_PIXMAP_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_PIXMAP_BIT /;"	d
EGL_PLATFORM_ANDROID_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_ANDROID_KHR /;"	d
EGL_PLATFORM_DEVICE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_DEVICE_EXT /;"	d
EGL_PLATFORM_GBM_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_GBM_KHR /;"	d
EGL_PLATFORM_GBM_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_GBM_MESA /;"	d
EGL_PLATFORM_SURFACELESS_MESA	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_SURFACELESS_MESA /;"	d
EGL_PLATFORM_WAYLAND_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_WAYLAND_EXT /;"	d
EGL_PLATFORM_WAYLAND_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_WAYLAND_KHR /;"	d
EGL_PLATFORM_X11_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_X11_EXT /;"	d
EGL_PLATFORM_X11_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_X11_KHR /;"	d
EGL_PLATFORM_X11_SCREEN_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_X11_SCREEN_EXT /;"	d
EGL_PLATFORM_X11_SCREEN_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PLATFORM_X11_SCREEN_KHR /;"	d
EGL_POST_SUB_BUFFER_SUPPORTED_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_POST_SUB_BUFFER_SUPPORTED_NV /;"	d
EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PRIMARY_COMPOSITOR_CONTEXT_EXT /;"	d
EGL_PRODUCER_AUTO_ORIENTATION_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PRODUCER_AUTO_ORIENTATION_NV /;"	d
EGL_PRODUCER_FRAME_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PRODUCER_FRAME_KHR /;"	d
EGL_PRODUCER_MAX_FRAME_HINT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PRODUCER_MAX_FRAME_HINT_NV /;"	d
EGL_PRODUCER_METADATA_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PRODUCER_METADATA_NV /;"	d
EGL_PROTECTED_CONTENT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_PROTECTED_CONTENT_EXT /;"	d
EGL_QUADRUPLE_BUFFER_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_QUADRUPLE_BUFFER_NV /;"	d
EGL_READ	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_READ /;"	d
EGL_READS_DONE_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_READS_DONE_TIME_ANDROID /;"	d
EGL_READ_SURFACE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_READ_SURFACE_BIT_KHR /;"	d
EGL_RECORDABLE_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_RECORDABLE_ANDROID /;"	d
EGL_RED_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_RED_SIZE /;"	d
EGL_RENDERABLE_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_RENDERABLE_TYPE /;"	d
EGL_RENDERING_COMPLETE_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_RENDERING_COMPLETE_TIME_ANDROID /;"	d
EGL_RENDER_BUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_RENDER_BUFFER /;"	d
EGL_REQUESTED_PRESENT_TIME_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_REQUESTED_PRESENT_TIME_ANDROID /;"	d
EGL_RGB_BUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_RGB_BUFFER /;"	d
EGL_RIGHT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_RIGHT_NV /;"	d
EGL_SAMPLES	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SAMPLES /;"	d
EGL_SAMPLE_BUFFERS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SAMPLE_BUFFERS /;"	d
EGL_SAMPLE_RANGE_HINT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SAMPLE_RANGE_HINT_EXT /;"	d
EGL_SIGNALED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SIGNALED /;"	d
EGL_SIGNALED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SIGNALED_KHR /;"	d
EGL_SIGNALED_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SIGNALED_NV /;"	d
EGL_SINGLE_BUFFER	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SINGLE_BUFFER /;"	d
EGL_SLOW_CONFIG	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SLOW_CONFIG /;"	d
EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_DISPLAY_PRIMARY_BX_EXT /;"	d
EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_DISPLAY_PRIMARY_BY_EXT /;"	d
EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_DISPLAY_PRIMARY_GX_EXT /;"	d
EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_DISPLAY_PRIMARY_GY_EXT /;"	d
EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_DISPLAY_PRIMARY_RX_EXT /;"	d
EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_DISPLAY_PRIMARY_RY_EXT /;"	d
EGL_SMPTE2086_MAX_LUMINANCE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_MAX_LUMINANCE_EXT /;"	d
EGL_SMPTE2086_MIN_LUMINANCE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_MIN_LUMINANCE_EXT /;"	d
EGL_SMPTE2086_WHITE_POINT_X_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_WHITE_POINT_X_EXT /;"	d
EGL_SMPTE2086_WHITE_POINT_Y_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SMPTE2086_WHITE_POINT_Y_EXT /;"	d
EGL_SOCKET_HANDLE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SOCKET_HANDLE_NV /;"	d
EGL_SOCKET_TYPE_INET_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SOCKET_TYPE_INET_NV /;"	d
EGL_SOCKET_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SOCKET_TYPE_NV /;"	d
EGL_SOCKET_TYPE_UNIX_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SOCKET_TYPE_UNIX_NV /;"	d
EGL_STENCIL_SIZE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_STENCIL_SIZE /;"	d
EGL_STREAM_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_BIT_KHR /;"	d
EGL_STREAM_CONSUMER_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_CONSUMER_NV /;"	d
EGL_STREAM_CROSS_DISPLAY_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_CROSS_DISPLAY_NV /;"	d
EGL_STREAM_CROSS_OBJECT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_CROSS_OBJECT_NV /;"	d
EGL_STREAM_CROSS_PARTITION_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_CROSS_PARTITION_NV /;"	d
EGL_STREAM_CROSS_PROCESS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_CROSS_PROCESS_NV /;"	d
EGL_STREAM_CROSS_SYSTEM_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_CROSS_SYSTEM_NV /;"	d
EGL_STREAM_DMA_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_DMA_NV /;"	d
EGL_STREAM_DMA_SERVER_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_DMA_SERVER_NV /;"	d
EGL_STREAM_ENDPOINT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_ENDPOINT_NV /;"	d
EGL_STREAM_FIFO_LENGTH_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_FIFO_LENGTH_KHR /;"	d
EGL_STREAM_FIFO_SYNCHRONOUS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_FIFO_SYNCHRONOUS_NV /;"	d
EGL_STREAM_FRAME_MAJOR_AXIS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_FRAME_MAJOR_AXIS_NV /;"	d
EGL_STREAM_FRAME_ORIGIN_X_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_FRAME_ORIGIN_X_NV /;"	d
EGL_STREAM_FRAME_ORIGIN_Y_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_FRAME_ORIGIN_Y_NV /;"	d
EGL_STREAM_LOCAL_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_LOCAL_NV /;"	d
EGL_STREAM_PRODUCER_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_PRODUCER_NV /;"	d
EGL_STREAM_PROTOCOL_FD_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_PROTOCOL_FD_NV /;"	d
EGL_STREAM_PROTOCOL_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_PROTOCOL_NV /;"	d
EGL_STREAM_PROTOCOL_SOCKET_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_PROTOCOL_SOCKET_NV /;"	d
EGL_STREAM_STATE_CONNECTING_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_CONNECTING_KHR /;"	d
EGL_STREAM_STATE_CREATED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_CREATED_KHR /;"	d
EGL_STREAM_STATE_DISCONNECTED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_DISCONNECTED_KHR /;"	d
EGL_STREAM_STATE_EMPTY_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_EMPTY_KHR /;"	d
EGL_STREAM_STATE_INITIALIZING_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_INITIALIZING_NV /;"	d
EGL_STREAM_STATE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_KHR /;"	d
EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_NEW_FRAME_AVAILABLE_KHR /;"	d
EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_STATE_OLD_FRAME_AVAILABLE_KHR /;"	d
EGL_STREAM_TIME_CONSUMER_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_TIME_CONSUMER_KHR /;"	d
EGL_STREAM_TIME_NOW_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_TIME_NOW_KHR /;"	d
EGL_STREAM_TIME_PENDING_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_TIME_PENDING_NV /;"	d
EGL_STREAM_TIME_PRODUCER_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_TIME_PRODUCER_KHR /;"	d
EGL_STREAM_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_STREAM_TYPE_NV /;"	d
EGL_SUCCESS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SUCCESS /;"	d
EGL_SUPPORT_RESET_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SUPPORT_RESET_NV /;"	d
EGL_SUPPORT_REUSE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SUPPORT_REUSE_NV /;"	d
EGL_SURFACE_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SURFACE_TYPE /;"	d
EGL_SWAP_BEHAVIOR	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SWAP_BEHAVIOR /;"	d
EGL_SWAP_BEHAVIOR_PRESERVED_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SWAP_BEHAVIOR_PRESERVED_BIT /;"	d
EGL_SWAP_INTERVAL_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SWAP_INTERVAL_EXT /;"	d
EGL_SYNC_CLIENT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CLIENT_EXT /;"	d
EGL_SYNC_CLIENT_SIGNAL_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CLIENT_SIGNAL_EXT /;"	d
EGL_SYNC_CL_EVENT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_CL_EVENT /;"	d
EGL_SYNC_CL_EVENT_COMPLETE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_CL_EVENT_COMPLETE /;"	d
EGL_SYNC_CL_EVENT_COMPLETE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CL_EVENT_COMPLETE_KHR /;"	d
EGL_SYNC_CL_EVENT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CL_EVENT_KHR /;"	d
EGL_SYNC_CONDITION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_CONDITION /;"	d
EGL_SYNC_CONDITION_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CONDITION_KHR /;"	d
EGL_SYNC_CONDITION_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CONDITION_NV /;"	d
EGL_SYNC_CUDA_EVENT_COMPLETE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CUDA_EVENT_COMPLETE_NV /;"	d
EGL_SYNC_CUDA_EVENT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_CUDA_EVENT_NV /;"	d
EGL_SYNC_FENCE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_FENCE /;"	d
EGL_SYNC_FENCE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_FENCE_KHR /;"	d
EGL_SYNC_FENCE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_FENCE_NV /;"	d
EGL_SYNC_FLUSH_COMMANDS_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_FLUSH_COMMANDS_BIT /;"	d
EGL_SYNC_FLUSH_COMMANDS_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_FLUSH_COMMANDS_BIT_KHR /;"	d
EGL_SYNC_FLUSH_COMMANDS_BIT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_FLUSH_COMMANDS_BIT_NV /;"	d
EGL_SYNC_NATIVE_FENCE_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_NATIVE_FENCE_ANDROID /;"	d
EGL_SYNC_NATIVE_FENCE_FD_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_NATIVE_FENCE_FD_ANDROID /;"	d
EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_NATIVE_FENCE_SIGNALED_ANDROID /;"	d
EGL_SYNC_NEW_FRAME_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_NEW_FRAME_NV /;"	d
EGL_SYNC_PRIOR_COMMANDS_COMPLETE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE /;"	d
EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_KHR /;"	d
EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_PRIOR_COMMANDS_COMPLETE_NV /;"	d
EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_PRIOR_COMMANDS_IMPLICIT_EXTERNAL_ARM /;"	d
EGL_SYNC_REUSABLE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_REUSABLE_KHR /;"	d
EGL_SYNC_STATUS	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_STATUS /;"	d
EGL_SYNC_STATUS_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_STATUS_KHR /;"	d
EGL_SYNC_STATUS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_STATUS_NV /;"	d
EGL_SYNC_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_SYNC_TYPE /;"	d
EGL_SYNC_TYPE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_TYPE_KHR /;"	d
EGL_SYNC_TYPE_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_SYNC_TYPE_NV /;"	d
EGL_TEXTURE_2D	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TEXTURE_2D /;"	d
EGL_TEXTURE_EXTERNAL_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TEXTURE_EXTERNAL_WL /;"	d
EGL_TEXTURE_FORMAT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TEXTURE_FORMAT /;"	d
EGL_TEXTURE_RGB	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TEXTURE_RGB /;"	d
EGL_TEXTURE_RGBA	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TEXTURE_RGBA /;"	d
EGL_TEXTURE_TARGET	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TEXTURE_TARGET /;"	d
EGL_TEXTURE_Y_UV_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TEXTURE_Y_UV_WL /;"	d
EGL_TEXTURE_Y_U_V_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TEXTURE_Y_U_V_WL /;"	d
EGL_TEXTURE_Y_XUXV_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TEXTURE_Y_XUXV_WL /;"	d
EGL_TIMEOUT_EXPIRED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TIMEOUT_EXPIRED /;"	d
EGL_TIMEOUT_EXPIRED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIMEOUT_EXPIRED_KHR /;"	d
EGL_TIMEOUT_EXPIRED_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIMEOUT_EXPIRED_NV /;"	d
EGL_TIMESTAMPS_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIMESTAMPS_ANDROID /;"	d
EGL_TIMESTAMP_INVALID_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIMESTAMP_INVALID_ANDROID /;"	d
EGL_TIMESTAMP_PENDING_ANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIMESTAMP_PENDING_ANDROID /;"	d
EGL_TIZEN_image_native_buffer	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIZEN_image_native_buffer /;"	d
EGL_TIZEN_image_native_surface	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TIZEN_image_native_surface /;"	d
EGL_TOP_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TOP_NV /;"	d
EGL_TRACK_REFERENCES_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TRACK_REFERENCES_KHR /;"	d
EGL_TRANSPARENT_BLUE_VALUE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TRANSPARENT_BLUE_VALUE /;"	d
EGL_TRANSPARENT_GREEN_VALUE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TRANSPARENT_GREEN_VALUE /;"	d
EGL_TRANSPARENT_RED_VALUE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TRANSPARENT_RED_VALUE /;"	d
EGL_TRANSPARENT_RGB	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TRANSPARENT_RGB /;"	d
EGL_TRANSPARENT_TYPE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TRANSPARENT_TYPE /;"	d
EGL_TRIPLE_BUFFER_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_TRIPLE_BUFFER_NV /;"	d
EGL_TRUE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_TRUE /;"	d
EGL_UNKNOWN	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_UNKNOWN /;"	d
EGL_UNSIGNALED	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_UNSIGNALED /;"	d
EGL_UNSIGNALED_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_UNSIGNALED_KHR /;"	d
EGL_UNSIGNALED_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_UNSIGNALED_NV /;"	d
EGL_UPPER_LEFT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_UPPER_LEFT_KHR /;"	d
EGL_VENDOR	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VENDOR /;"	d
EGL_VERSION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION /;"	d
EGL_VERSION_1_0	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION_1_0 /;"	d
EGL_VERSION_1_1	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION_1_1 /;"	d
EGL_VERSION_1_2	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION_1_2 /;"	d
EGL_VERSION_1_3	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION_1_3 /;"	d
EGL_VERSION_1_4	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION_1_4 /;"	d
EGL_VERSION_1_5	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERSION_1_5 /;"	d
EGL_VERTICAL_RESOLUTION	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VERTICAL_RESOLUTION /;"	d
EGL_VG_ALPHA_FORMAT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_ALPHA_FORMAT /;"	d
EGL_VG_ALPHA_FORMAT_NONPRE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_ALPHA_FORMAT_NONPRE /;"	d
EGL_VG_ALPHA_FORMAT_PRE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_ALPHA_FORMAT_PRE /;"	d
EGL_VG_ALPHA_FORMAT_PRE_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_ALPHA_FORMAT_PRE_BIT /;"	d
EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_VG_ALPHA_FORMAT_PRE_BIT_KHR /;"	d
EGL_VG_COLORSPACE	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_COLORSPACE /;"	d
EGL_VG_COLORSPACE_LINEAR	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_COLORSPACE_LINEAR /;"	d
EGL_VG_COLORSPACE_LINEAR_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_COLORSPACE_LINEAR_BIT /;"	d
EGL_VG_COLORSPACE_LINEAR_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_VG_COLORSPACE_LINEAR_BIT_KHR /;"	d
EGL_VG_COLORSPACE_sRGB	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_VG_COLORSPACE_sRGB /;"	d
EGL_VG_PARENT_IMAGE_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_VG_PARENT_IMAGE_KHR /;"	d
EGL_WAYLAND_BUFFER_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_WAYLAND_BUFFER_WL /;"	d
EGL_WAYLAND_PLANE_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_WAYLAND_PLANE_WL /;"	d
EGL_WAYLAND_Y_INVERTED_WL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_WAYLAND_Y_INVERTED_WL /;"	d
EGL_WIDTH	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_WIDTH /;"	d
EGL_WINDOW_BIT	host/libs/graphics_detector/include/EGL/egl.h	/^#define EGL_WINDOW_BIT /;"	d
EGL_WL_bind_wayland_display	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_WL_bind_wayland_display /;"	d
EGL_WL_create_wayland_buffer_from_image	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_WL_create_wayland_buffer_from_image /;"	d
EGL_WRITE_SURFACE_BIT_KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_WRITE_SURFACE_BIT_KHR /;"	d
EGL_X_AXIS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_X_AXIS_NV /;"	d
EGL_YUV_BUFFER_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_BUFFER_EXT /;"	d
EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CHROMA_HORIZONTAL_SITING_HINT_EXT /;"	d
EGL_YUV_CHROMA_SITING_0_5_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CHROMA_SITING_0_5_EXT /;"	d
EGL_YUV_CHROMA_SITING_0_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CHROMA_SITING_0_EXT /;"	d
EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CHROMA_VERTICAL_SITING_HINT_EXT /;"	d
EGL_YUV_COLOR_SPACE_HINT_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_COLOR_SPACE_HINT_EXT /;"	d
EGL_YUV_CSC_STANDARD_2020_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CSC_STANDARD_2020_EXT /;"	d
EGL_YUV_CSC_STANDARD_601_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CSC_STANDARD_601_EXT /;"	d
EGL_YUV_CSC_STANDARD_709_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CSC_STANDARD_709_EXT /;"	d
EGL_YUV_CSC_STANDARD_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_CSC_STANDARD_EXT /;"	d
EGL_YUV_DEPTH_RANGE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_DEPTH_RANGE_EXT /;"	d
EGL_YUV_DEPTH_RANGE_FULL_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_DEPTH_RANGE_FULL_EXT /;"	d
EGL_YUV_DEPTH_RANGE_LIMITED_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_DEPTH_RANGE_LIMITED_EXT /;"	d
EGL_YUV_FULL_RANGE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_FULL_RANGE_EXT /;"	d
EGL_YUV_NARROW_RANGE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_NARROW_RANGE_EXT /;"	d
EGL_YUV_NUMBER_OF_PLANES_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_NUMBER_OF_PLANES_EXT /;"	d
EGL_YUV_ORDER_AYUV_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_AYUV_EXT /;"	d
EGL_YUV_ORDER_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_EXT /;"	d
EGL_YUV_ORDER_UYVY_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_UYVY_EXT /;"	d
EGL_YUV_ORDER_VYUY_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_VYUY_EXT /;"	d
EGL_YUV_ORDER_YUV_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_YUV_EXT /;"	d
EGL_YUV_ORDER_YUYV_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_YUYV_EXT /;"	d
EGL_YUV_ORDER_YVU_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_YVU_EXT /;"	d
EGL_YUV_ORDER_YVYU_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_ORDER_YVYU_EXT /;"	d
EGL_YUV_PLANE0_TEXTURE_UNIT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE0_TEXTURE_UNIT_NV /;"	d
EGL_YUV_PLANE1_TEXTURE_UNIT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE1_TEXTURE_UNIT_NV /;"	d
EGL_YUV_PLANE2_TEXTURE_UNIT_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE2_TEXTURE_UNIT_NV /;"	d
EGL_YUV_PLANE_BPP_0_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE_BPP_0_EXT /;"	d
EGL_YUV_PLANE_BPP_10_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE_BPP_10_EXT /;"	d
EGL_YUV_PLANE_BPP_8_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE_BPP_8_EXT /;"	d
EGL_YUV_PLANE_BPP_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_PLANE_BPP_EXT /;"	d
EGL_YUV_SUBSAMPLE_4_2_0_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_SUBSAMPLE_4_2_0_EXT /;"	d
EGL_YUV_SUBSAMPLE_4_2_2_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_SUBSAMPLE_4_2_2_EXT /;"	d
EGL_YUV_SUBSAMPLE_4_4_4_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_SUBSAMPLE_4_4_4_EXT /;"	d
EGL_YUV_SUBSAMPLE_EXT	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_YUV_SUBSAMPLE_EXT /;"	d
EGL_Y_AXIS_NV	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_Y_AXIS_NV /;"	d
EGL_Y_INVERTED_NOK	host/libs/graphics_detector/include/EGL/eglext.h	/^#define EGL_Y_INVERTED_NOK /;"	d
EGLenum	host/libs/graphics_detector/include/EGL/egl.h	/^typedef unsigned int EGLenum;$/;"	t	typeref:typename:unsigned int
EGLint	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef khronos_int32_t EGLint;$/;"	t	typeref:typename:khronos_int32_t
EGLnsecsANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef khronos_stime_nanoseconds_t EGLnsecsANDROID;$/;"	t	typeref:typename:khronos_stime_nanoseconds_t
EGLsizeiANDROID	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef khronos_ssize_t EGLsizeiANDROID;$/;"	t	typeref:typename:khronos_ssize_t
EGLuint64KHR	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef khronos_uint64_t EGLuint64KHR;$/;"	t	typeref:typename:khronos_uint64_t
EGLuint64NV	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef khronos_utime_nanoseconds_t EGLuint64NV;$/;"	t	typeref:typename:khronos_utime_nanoseconds_t
EMULATOR_RADIO_INTERFACE	guest/hals/ril/reference-ril/reference-ril.c	/^#define EMULATOR_RADIO_INTERFACE /;"	d	file:
ENABLE	host/commands/modem_simulator/sim_service.h	/^      ENABLE,$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockStatus
ENABLE	host/commands/modem_simulator/sup_service.h	/^      ENABLE        = 1,$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::CallForwardInfoStatus
END	tests/ril/runtests.sh	/^  cat <<END$/;"	h
END	tests/wifi/runtests.sh	/^  cat <<END$/;"	h
END_OF_MSG_MARK	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^constexpr char END_OF_MSG_MARK[] = "\\n\\n\\n\\n";$/;"	v	typeref:typename:char[]
EOF	tools/create_base_image_arm.sh	/^	cat > ${tmpfile} << "EOF"$/;"	h
EOF	tools/create_base_image_gce.sh	/^sudo tee \/mnt\/image\/etc\/sysctl.d\/80-nsjail.conf >\/dev\/null <<EOF$/;"	h
EOF	tools/create_base_image_hostlib.sh	/^  cat <<EOF$/;"	h
EOF	tools/network-setup.sh	/^	cat >>$USER_HOME\/.ssh\/config << EOF$/;"	h
EOF	tools/network-setup.sh	/^cat > \/etc\/systemd\/system\/iptables-rockpi.service << EOF$/;"	h
EOF	tools/network-setup.sh	/^cat > \/usr\/local\/sbin\/iptables-rockpi.sh << EOF$/;"	h
EOF	tools/network-setup.sh	/^cat >\/etc\/dnsmasq.d\/${ROCKNET}.conf << EOF$/;"	h
EOF	tools/network-setup.sh	/^cat >\/etc\/network\/interfaces.d\/${ROCKNET}.conf <<EOF$/;"	h
EOF	tools/network-setup.sh	/^cat >\/etc\/udev\/rules.d\/82-${ROCKNET}.rules <<EOF$/;"	h
EPDG	guest/hals/ril/reference-libril/ril.h	/^    EPDG = 1, \/* Key type to be used for ePDG *\/$/;"	e	enum:__anon0bfbaecf2b03
ERASURE	host/commands/modem_simulator/sup_service.h	/^      ERASURE       = 4,$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::CallForwardInfoStatus
ETHERNET_NETWORK_CONNECTED_MESSAGE	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private static final String ETHERNET_NETWORK_CONNECTED_MESSAGE =$/;"	f	class:ConnectivityChecker	file:
EUTRAN	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN = 0x03,      \/\/ Evolved Universal Terrestrial Radio Access Network$/;"	e	enum:__anon0bfbaecfa503
EUTRAN_BAND_1	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_1 = 1,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_10	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_10 = 10,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_11	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_11 = 11,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_12	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_12 = 12,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_13	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_13 = 13,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_14	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_14 = 14,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_17	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_17 = 17,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_18	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_18 = 18,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_19	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_19 = 19,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_2	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_2 = 2,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_20	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_20 = 20,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_21	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_21 = 21,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_22	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_22 = 22,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_23	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_23 = 23,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_24	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_24 = 24,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_25	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_25 = 25,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_26	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_26 = 26,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_27	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_27 = 27,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_28	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_28 = 28,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_3	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_3 = 3,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_30	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_30 = 30,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_31	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_31 = 31,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_33	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_33 = 33,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_34	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_34 = 34,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_35	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_35 = 35,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_36	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_36 = 36,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_37	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_37 = 37,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_38	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_38 = 38,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_39	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_39 = 39,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_4	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_4 = 4,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_40	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_40 = 40,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_41	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_41 = 41,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_42	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_42 = 42,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_43	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_43 = 43,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_44	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_44 = 44,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_45	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_45 = 45,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_46	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_46 = 46,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_47	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_47 = 47,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_48	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_48 = 48,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_5	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_5 = 5,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_6	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_6 = 6,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_65	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_65 = 65,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_66	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_66 = 66,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_68	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_68 = 68,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_7	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_7 = 7,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_70	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_70 = 70,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_8	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_8 = 8,$/;"	e	enum:__anon0bfbaecfa903
EUTRAN_BAND_9	guest/hals/ril/reference-libril/ril.h	/^    EUTRAN_BAND_9 = 9,$/;"	e	enum:__anon0bfbaecfa903
EVDO	guest/hals/ril/reference-ril/reference-ril.c	/^#define EVDO /;"	d	file:
EVDO_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_EVDO_SignalStrength     EVDO_SignalStrength;$/;"	m	struct:__anon0bfbaecf5108	typeref:typename:RIL_EVDO_SignalStrength
EVDO_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_EVDO_SignalStrength     EVDO_SignalStrength;$/;"	m	struct:__anon0bfbaecf5208	typeref:typename:RIL_EVDO_SignalStrength
EVDO_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_EVDO_SignalStrength     EVDO_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_EVDO_SignalStrength
EVDO_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_EVDO_SignalStrength EVDO_SignalStrength;$/;"	m	struct:__anon0bfbaecf4f08	typeref:typename:RIL_EVDO_SignalStrength
EVDO_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_EVDO_SignalStrength EVDO_SignalStrength;$/;"	m	struct:__anon0bfbaecf5008	typeref:typename:RIL_EVDO_SignalStrength
EXCLUDES	common/libs/concurrency/thread_annotations.h	/^#define EXCLUDES(/;"	d
EXCLUDE_BUILD_RAMDUMP_UPLOADER_DEBUG_TOOL	shared/BoardConfig.mk	/^EXCLUDE_BUILD_RAMDUMP_UPLOADER_DEBUG_TOOL := true$/;"	m
EXTERNAL	host/commands/metrics/proto/common.proto	/^  EXTERNAL = 1;$/;"	e	enum:UserType
EXTERNAL_VSOC_LIBNL_INCLUDE	guest/libs/wpa_supplicant_8_lib/Android.mk	/^EXTERNAL_VSOC_LIBNL_INCLUDE := external\/gce\/libnl\/include$/;"	m
EXTERNAL_VSOC_LIBNL_INCLUDE	guest/libs/wpa_supplicant_8_lib/Android.mk	/^EXTERNAL_VSOC_LIBNL_INCLUDE :=$/;"	m
EarlyBootEnded	guest/hals/keymaster/remote/remote_keymaster.cpp	/^EarlyBootEndedResponse RemoteKeymaster::EarlyBootEnded() {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:EarlyBootEndedResponse
EarlyBootEnded	guest/hals/keymint/remote/remote_keymaster.cpp	/^EarlyBootEndedResponse RemoteKeymaster::EarlyBootEnded() {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:EarlyBootEndedResponse
EbtablesBroute	host/libs/allocd/alloc_utils.cpp	/^bool EbtablesBroute(const std::string& name, bool use_ipv4, bool add,$/;"	f	namespace:cuttlefish	typeref:typename:bool
EbtablesFilter	host/libs/allocd/alloc_utils.cpp	/^bool EbtablesFilter(const std::string& name, bool use_ipv4, bool add,$/;"	f	namespace:cuttlefish	typeref:typename:bool
EmitEvent	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^bool VirtualDeviceBase::EmitEvent(uint16_t type,$/;"	f	class:VirtualDeviceBase	typeref:typename:bool
EnableBuiltInAEC	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::EnableBuiltInAEC(bool enable) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
EnableBuiltInAGC	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::EnableBuiltInAGC(bool enable) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
EnableBuiltInNS	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::EnableBuiltInNS(bool enable) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
EnableCredentials	common/libs/utils/unix_sockets.cpp	/^Result<void> UnixMessageSocket::EnableCredentials(bool enable) {$/;"	f	class:cuttlefish::UnixMessageSocket	typeref:typename:Result<void>
Enabled	host/commands/assemble_cvd/disk_flags.cc	/^  bool Enabled() const override { return !config_.protected_vm(); }$/;"	f	class:cuttlefish::InitializeAccessKregistryImage	typeref:typename:bool	file:
Enabled	host/commands/assemble_cvd/disk_flags.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::InitializeMetadataImage	typeref:typename:bool	file:
Enabled	host/commands/assemble_cvd/disk_flags.cc	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::BootImageRepacker	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/boot_state_machine.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/boot_state_machine.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return config_.console(); }$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return config_.enable_host_bluetooth(); }$/;"	f	class:cuttlefish::BluetoothConnector	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return config_.enable_host_bluetooth(); }$/;"	f	class:cuttlefish::RootCanal	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return config_.enable_host_bluetooth(); }$/;"	f	class:cuttlefish::SecureEnvironment	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::ConfigServer	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::LogcatReceiver	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::TombstoneReceiver	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::VmmCommands	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::MetricsService	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::OpenWrt	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::VehicleHalServer	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch.cc	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::WmediumdServer	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch_modem.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch_streamer.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/launch_streamer.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/main.cc	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/server_loop.cpp	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/validate.cpp	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateTapDevices	typeref:typename:bool	file:
Enabled	host/commands/run_cvd/validate.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateHostConfigurationFeature	typeref:typename:bool	file:
Enabled	host/libs/config/adb/launch.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbConnector	typeref:typename:bool	file:
Enabled	host/libs/config/adb/launch.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:bool	file:
Enabled	host/libs/config/data_image.cpp	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::InitializeDataImageImpl	typeref:typename:bool	file:
Enabled	host/libs/config/data_image.cpp	/^  bool Enabled() const override { return true; }$/;"	f	class:cuttlefish::InitializeMiscImageImpl	typeref:typename:bool	file:
Enabled	host/libs/config/data_image.cpp	/^  bool Enabled() const override {$/;"	f	class:cuttlefish::InitializeEspImageImpl	typeref:typename:bool	file:
EncodeBase64	common/libs/utils/base64.cpp	/^bool EncodeBase64(const void *data, size_t size, std::string *out) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
EncoderLoop	host/frontend/webrtc/lib/local_recorder.cpp	/^void LocalRecorder::Display::EncoderLoop() {$/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:void
EncryptedSerializable	host/commands/secure_env/encrypted_serializable.cpp	/^EncryptedSerializable::EncryptedSerializable($/;"	f	class:cuttlefish::EncryptedSerializable
EncryptedSerializable	host/commands/secure_env/encrypted_serializable.h	/^class EncryptedSerializable : public keymaster::Serializable {$/;"	c	namespace:cuttlefish
End	host/libs/image_aggregator/image_aggregator.cc	/^  GptEnd End(const GptBeginning& head) const {$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:GptEnd	file:
EnqueueMessage	host/libs/websocket/websocket_handler.cpp	/^void WebSocketHandler::EnqueueMessage(const uint8_t* data, size_t len,$/;"	f	class:cuttlefish::WebSocketHandler	typeref:typename:void
EnqueueMessage	host/libs/websocket/websocket_handler.h	/^  void EnqueueMessage(const char* data, size_t len, bool binary = false) {$/;"	f	class:cuttlefish::WebSocketHandler	typeref:typename:void
EnqueueWrite	host/commands/console_forwarder/main.cpp	/^  void EnqueueWrite(std::shared_ptr<std::vector<char>> buf_ptr, SharedFD fd) {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:void	file:
EnsureDirectoryExists	host/commands/assemble_cvd/clean.cc	/^bool EnsureDirectoryExists(const std::string& directory_path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
Enum2Base	common/libs/confui/utils.h	/^constexpr typename std::underlying_type_t<T> Enum2Base(T t) {$/;"	f	namespace:cuttlefish	typeref:typename:std::underlying_type_t<T>
Error	host/libs/confui/cbor.h	/^  enum class Error : uint32_t {$/;"	g	class:cuttlefish::confui::Cbor	typeref:typename:uint32_t
ErrorCodeV41	guest/hals/keymaster/remote/remote_keymaster4_device.h	/^using ErrorCodeV41 = ::android::hardware::keymaster::V4_1::ErrorCode;$/;"	t	namespace:keymaster::V4_1	typeref:typename:::android::hardware::keymaster::V4_1::ErrorCode
ErrorFD	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::ErrorFD(int error) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
ErrorType	host/commands/metrics/proto/cf_metrics_event.proto	/^  enum ErrorType {$/;"	g	message:cuttlefish.MetricsEvent
EspImageTag	host/libs/config/data_image.cpp	/^struct EspImageTag {};$/;"	s	namespace:cuttlefish	file:
EstablishAndMaintainConnection	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^[[noreturn]] void cuttlefish::EstablishAndMaintainConnection(std::string address) {$/;"	f	class:cuttlefish	typeref:typename:void
EstablishConnection	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^void EstablishConnection(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:void
EstablishHalConnection	host/libs/confui/host_server.cc	/^SharedFD HostServer::EstablishHalConnection() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:SharedFD
Esys	host/commands/secure_env/test_tpm.cpp	/^ESYS_CONTEXT* TestTpm::Esys() { return esys_; }$/;"	f	class:cuttlefish::TestTpm	typeref:typename:ESYS_CONTEXT *
Esys	host/commands/secure_env/tpm_resource_manager.cpp	/^ESYS_CONTEXT* TpmResourceManager::Esys() {$/;"	f	class:cuttlefish::TpmResourceManager	typeref:typename:ESYS_CONTEXT *
EsysDeleter	host/commands/secure_env/tpm_hmac.h	/^struct EsysDeleter {$/;"	s	namespace:cuttlefish
EthernetBridge	host/libs/allocd/resource.h	/^  EthernetBridge,$/;"	e	enum:cuttlefish::ResourceType
EthernetIface	host/libs/allocd/resource.h	/^  EthernetIface(const std::string& name, uid_t uid, uint16_t iface_id,$/;"	f	class:cuttlefish::EthernetIface
EthernetIface	host/libs/allocd/resource.h	/^  EthernetIface,$/;"	e	enum:cuttlefish::ResourceType
EthernetIface	host/libs/allocd/resource.h	/^class EthernetIface : public StaticResource {$/;"	c	namespace:cuttlefish
EthernetNetworkConfig	host/libs/allocd/alloc_utils.h	/^struct EthernetNetworkConfig {$/;"	s	namespace:cuttlefish
EthernetNetworkConnected	host/commands/kernel_log_monitor/kernel_log_server.h	/^  EthernetNetworkConnected = 7,$/;"	e	enum:monitor::Event
EvaluateAction	host/libs/config/data_image.cpp	/^  Result<void> EvaluateAction(DataImageAction action) {$/;"	f	class:cuttlefish::InitializeDataImageImpl	typeref:typename:Result<void>	file:
Event	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Event(int initval, int flags) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
Event	host/commands/kernel_log_monitor/kernel_log_server.h	/^enum Event : int32_t {$/;"	g	namespace:monitor	typeref:typename:int32_t
Event	host/commands/modem_simulator/thread_looper.h	/^  struct Event {$/;"	s	class:cuttlefish::ThreadLooper
EventCallback	host/commands/kernel_log_monitor/kernel_log_server.h	/^using EventCallback = std::function<SubscriptionAction(Json::Value)>;$/;"	t	namespace:monitor
EventFormat	host/commands/kernel_log_monitor/kernel_log_server.cc	/^enum EventFormat {$/;"	g	namespace:__anonfa7764770111	file:
EventLoop	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^void EventLoop(std::shared_ptr<VirtualDeviceBase> device,$/;"	f	namespace:__anon7d4eee310111	typeref:typename:void
EventReporter	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public EventReporter() {$/;"	m	class:EventReporter
EventReporter	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^public class EventReporter extends JobBase {$/;"	c
EventType	host/commands/metrics/proto/cf_metrics_event.proto	/^  enum EventType {$/;"	g	message:cuttlefish.MetricsEvent
EventfdRead	common/libs/fs/shared_fd.cpp	/^int FileInstance::EventfdRead(eventfd_t* value) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
EventfdWrite	common/libs/fs/shared_fd.cpp	/^int FileInstance::EventfdWrite(eventfd_t value) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
Executable	common/libs/utils/subprocess.h	/^  const std::string& Executable() const { return command_[0]; }$/;"	f	class:cuttlefish::Command	typeref:typename:const std::string &
ExitOnFail	tools/create_base_image.go	/^    ExitOnFail$/;"	c	package:main
ExitWithParent	common/libs/utils/subprocess.h	/^  bool ExitWithParent() const { return exit_with_parent_; }$/;"	f	class:cuttlefish::SubprocessOptions	typeref:typename:bool
ExitWithParent	common/libs/utils/subprocess.h	/^  void ExitWithParent(bool exit_with_parent) {$/;"	f	class:cuttlefish::SubprocessOptions	typeref:typename:void
ExpandedStorageSize	host/libs/image_aggregator/image_aggregator.cc	/^std::uint64_t ExpandedStorageSize(const std::string& file_path) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:std::uint64_t
ExportKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ExportKey(const ExportKeyRequest& request, ExportKeyResponse* response) {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ExportKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ExportKey(const ExportKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ExtractAll	common/libs/utils/archive.cpp	/^bool Archive::ExtractAll(const std::string& target_directory) {$/;"	f	class:cuttlefish::Archive	typeref:typename:bool
ExtractFiles	common/libs/utils/archive.cpp	/^bool Archive::ExtractFiles(const std::vector<std::string>& to_extract,$/;"	f	class:cuttlefish::Archive	typeref:typename:bool
ExtractImages	host/commands/fetcher/install_zip.cc	/^std::vector<std::string> ExtractImages(const std::string& archive_file,$/;"	f	typeref:typename:std::vector<std::string>
ExtractKernelParamsFromFetcherConfig	host/commands/assemble_cvd/assemble_cvd.cc	/^static void ExtractKernelParamsFromFetcherConfig($/;"	f	namespace:cuttlefish::__anon1e335d460111	typeref:typename:void	file:
ExtractToMemory	common/libs/utils/archive.cpp	/^std::string Archive::ExtractToMemory(const std::string& path) {$/;"	f	class:cuttlefish::Archive	typeref:typename:std::string
ExtractValue	host/commands/assemble_cvd/boot_image_utils.cc	/^std::string ExtractValue(const std::string& dictionary, const std::string& key) {$/;"	f	namespace:cuttlefish::__anonbfa95aa40111	typeref:typename:std::string
FAX	host/commands/modem_simulator/sim_service.h	/^      FAX = 1 << 2,     \/\/ facsimile services$/;"	e	enum:cuttlefish::SimService::FacilityLock::Class
FD	host/commands/modem_simulator/sim_service.h	/^      FD = 10,  \/\/ SIM fixed FDN dialing lock, PIN2 is required as a password$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
FLOAT	host/libs/confui/cbor.h	/^    FLOAT = 7,$/;"	e	enum:cuttlefish::confui::Cbor::Type
FSCK_ERROR_CORRECTED	host/libs/config/data_image.cpp	/^const int FSCK_ERROR_CORRECTED = 1;$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const int
FSCK_ERROR_CORRECTED_REQUIRES_REBOOT	host/libs/config/data_image.cpp	/^const int FSCK_ERROR_CORRECTED_REQUIRES_REBOOT = 2;$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const int
FULL	common/libs/utils/tee_logging.h	/^  FULL,$/;"	e	enum:cuttlefish::MetadataLevel
FULL_MATCH	host/commands/modem_simulator/modem_service.h	/^  enum MatchMode {FULL_MATCH = 0, PARTIAL_MATCH = 1};$/;"	e	enum:cuttlefish::CommandHandler::MatchMode
FacilityLock	host/commands/modem_simulator/sim_service.h	/^    FacilityLock(LockStatus status) : lock_status(status) {}$/;"	f	struct:cuttlefish::SimService::FacilityLock
FacilityLock	host/commands/modem_simulator/sim_service.h	/^  struct FacilityLock {$/;"	s	class:cuttlefish::SimService
Failure	host/libs/allocd/request.h	/^  Failure       \/\/ Request failed$/;"	e	enum:cuttlefish::RequestStatus
FailureRecordMap	host/commands/secure_env/soft_gatekeeper.h	/^    typedef std::unordered_map<uint32_t, failure_record_t> FailureRecordMap;$/;"	t	class:gatekeeper::SoftGateKeeper	typeref:typename:std::unordered_map<uint32_t,failure_record_t>
FallBackStop	host/commands/stop/main.cc	/^int FallBackStop(const std::set<std::string>& paths) {$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:int
FallbackPaths	host/commands/stop/main.cc	/^std::set<std::string> FallbackPaths() {$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:std::set<std::string>
FastHashMap	host/commands/secure_env/soft_gatekeeper.h	/^    typedef std::unordered_map<uint64_t, fast_hash_t> FastHashMap;$/;"	t	class:gatekeeper::SoftGateKeeper	typeref:typename:std::unordered_map<uint64_t,fast_hash_t>
Fcntl	common/libs/fs/shared_fd.cpp	/^int FileInstance::Fcntl(int command, int value) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
Feature	host/libs/config/feature.h	/^class Feature : public virtual FeatureSuperclass<Feature> {$/;"	c	namespace:cuttlefish
FeatureSuperclass	host/libs/config/feature.h	/^class FeatureSuperclass {$/;"	c	namespace:cuttlefish
FetchCvdMain	host/commands/fetcher/fetch_cvd.cc	/^int FetchCvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
FetcherConfig	host/libs/config/fetcher_config.cpp	/^FetcherConfig::FetcherConfig() : dictionary_(new Json::Value()) {$/;"	f	class:cuttlefish::FetcherConfig
FetcherConfig	host/libs/config/fetcher_config.h	/^class FetcherConfig {$/;"	c	namespace:cuttlefish
Fifo	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Fifo(const std::string& path, mode_t mode) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
FileCrc	host/libs/config/host_tools_version.cpp	/^static uint32_t FileCrc(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:uint32_t	file:
FileDescriptors	common/libs/utils/unix_sockets.cpp	/^Result<std::vector<SharedFD>> UnixSocketMessage::FileDescriptors() {$/;"	f	class:cuttlefish::UnixSocketMessage	typeref:typename:Result<std::vector<SharedFD>>
FileExists	common/libs/utils/files.cpp	/^bool FileExists(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
FileHasContent	common/libs/utils/files.cpp	/^bool FileHasContent(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
FileInstance	common/libs/fs/shared_fd.cpp	/^FileInstance::FileInstance(int fd, int in_errno)$/;"	f	class:cuttlefish::FileInstance
FileInstance	common/libs/fs/shared_fd.h	/^class FileInstance {$/;"	c	namespace:cuttlefish
FileModificationTime	common/libs/utils/files.cpp	/^std::chrono::system_clock::time_point FileModificationTime(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:std::chrono::system_clock::time_point
FileSize	common/libs/utils/files.cpp	/^off_t FileSize(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:off_t
FileSizes	common/libs/utils/files.h	/^struct FileSizes {$/;"	s	namespace:cuttlefish
FileSource	host/libs/config/fetcher_config.h	/^enum FileSource {$/;"	g	namespace:cuttlefish
FinalizeTcti	host/commands/secure_env/device_tpm.cpp	/^static void FinalizeTcti(TSS2_TCTI_CONTEXT* tcti_context) {$/;"	f	namespace:cuttlefish	typeref:typename:void	file:
FindAndroidInfoConfig	host/libs/config/config_flag.cpp	/^  std::optional<std::string> FindAndroidInfoConfig() const {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:std::optional<std::string>	file:
FindAttribute	host/commands/modem_simulator/sim_service.cpp	/^XMLElement* SimService::SimFileSystem::FindAttribute(XMLElement *parent,$/;"	f	class:cuttlefish::SimService::SimFileSystem	typeref:typename:XMLElement *
FindConfigFromStdin	host/commands/run_cvd/main.cc	/^const CuttlefishConfig* FindConfigFromStdin() {$/;"	f	namespace:cuttlefish::__anonadab6e0c0111	typeref:typename:const CuttlefishConfig *
FindCvdFileWithSuffix	host/libs/config/fetcher_config.cpp	/^std::string FetcherConfig::FindCvdFileWithSuffix(const std::string& suffix) const {$/;"	f	class:cuttlefish::FetcherConfig	typeref:typename:std::string
FindFetcherConfig	host/commands/assemble_cvd/assemble_cvd.cc	/^FetcherConfig FindFetcherConfig(const std::vector<std::string>& files) {$/;"	f	namespace:cuttlefish::__anon1e335d460111	typeref:typename:FetcherConfig
FindImports	host/commands/assemble_cvd/super_image_mixer.cc	/^void FindImports(Archive* archive, const std::string& build_prop_file) {$/;"	f	namespace:cuttlefish::__anonae6530d30111	typeref:typename:void
FindSession	host/libs/allocd/resource_manager.cpp	/^std::optional<std::shared_ptr<Session>> ResourceManager::FindSession($/;"	f	class:cuttlefish::ResourceManager	typeref:typename:std::optional<std::shared_ptr<Session>>
FinishOperation	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::FinishOperation(const FinishOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
FinishOperation	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::FinishOperation(const FinishOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
FixTimeZone	host/commands/modem_simulator/misc_service.cpp	/^void MiscService::FixTimeZone(std::string& line) {$/;"	f	class:cuttlefish::MiscService	typeref:typename:void
FixedCredentialSource	host/commands/fetcher/credential_source.cc	/^FixedCredentialSource::FixedCredentialSource(const std::string& credential) {$/;"	f	class:cuttlefish::FixedCredentialSource
FixedCredentialSource	host/commands/fetcher/credential_source.h	/^class FixedCredentialSource : public CredentialSource {$/;"	c	namespace:cuttlefish
FixedDataImagePath	host/libs/config/data_image.cpp	/^class FixedDataImagePath : public DataImagePath {$/;"	c	namespace:cuttlefish	file:
FixedDataImagePathComponent	host/libs/config/data_image.cpp	/^fruit::Component<DataImagePath> FixedDataImagePathComponent($/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<DataImagePath>
FixedMiscImagePath	host/libs/config/data_image.cpp	/^class FixedMiscImagePath : public MiscImagePath {$/;"	c	namespace:cuttlefish	file:
FixedMiscImagePathComponent	host/libs/config/data_image.cpp	/^fruit::Component<MiscImagePath> FixedMiscImagePathComponent($/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<MiscImagePath>
Flag	common/libs/utils/flag_parser.h	/^class Flag {$/;"	c	namespace:cuttlefish
FlagAlias	common/libs/utils/flag_parser.h	/^struct FlagAlias {$/;"	s	namespace:cuttlefish
FlagAliasMode	common/libs/utils/flag_parser.h	/^enum class FlagAliasMode {$/;"	g	namespace:cuttlefish
FlagFeature	host/libs/config/feature.h	/^class FlagFeature : public FeatureSuperclass<FlagFeature> {$/;"	c	namespace:cuttlefish
FlagForwarder	host/commands/start/flag_forwarder.cc	/^FlagForwarder::FlagForwarder(std::set<std::string> subprocesses)$/;"	f	class:FlagForwarder
FlagForwarder	host/commands/start/flag_forwarder.h	/^class FlagForwarder {$/;"	c
FlagMatch	common/libs/utils/flag_parser.h	/^struct FlagMatch {$/;"	s	namespace:cuttlefish
FlagProcessResult	common/libs/utils/flag_parser.h	/^  enum class FlagProcessResult {$/;"	g	class:cuttlefish::Flag
Flags	host/libs/config/custom_actions.cpp	/^  std::vector<Flag> Flags() const {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:std::vector<Flag>	file:
FlagsComponent	host/commands/assemble_cvd/assemble_cvd.cc	/^fruit::Component<> FlagsComponent() {$/;"	f	namespace:cuttlefish::__anon1e335d460111	typeref:typename:fruit::Component<>
FlagsForSubprocess	host/commands/start/flag_forwarder.cc	/^std::vector<gflags::CommandLineFlagInfo> FlagsForSubprocess(std::string helpxml_output) {$/;"	f	namespace:__anon4552bec90111	typeref:typename:std::vector<gflags::CommandLineFlagInfo>
ForCurrentInstance	host/libs/config/cuttlefish_config.cpp	/^int ForCurrentInstance(int base) { return base + GetInstance() - 1; }$/;"	f	namespace:cuttlefish	typeref:typename:int
ForCurrentInstance	host/libs/config/cuttlefish_config.cpp	/^std::string ForCurrentInstance(const char* prefix) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
ForDefaultInstance	host/libs/config/cuttlefish_config.cpp	/^CuttlefishConfig::InstanceSpecific CuttlefishConfig::ForDefaultInstance()$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:CuttlefishConfig::InstanceSpecific
ForInstance	host/commands/modem_simulator/nvram_config.cpp	/^NvramConfig::InstanceSpecific NvramConfig::ForInstance(int num) const {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:NvramConfig::InstanceSpecific
ForInstance	host/libs/config/cuttlefish_config.cpp	/^CuttlefishConfig::InstanceSpecific CuttlefishConfig::ForInstance($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:CuttlefishConfig::InstanceSpecific
ForInstance	host/libs/config/cuttlefish_config.cpp	/^CuttlefishConfig::MutableInstanceSpecific CuttlefishConfig::ForInstance($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:CuttlefishConfig::MutableInstanceSpecific
ForceFsckImage	host/libs/config/data_image.cpp	/^bool ForceFsckImage(const CuttlefishConfig& config,$/;"	f	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:bool
ForegroundLauncherPipe	host/commands/run_cvd/boot_state_machine.cc	/^  SharedFD ForegroundLauncherPipe() { return foreground_launcher_pipe_; }$/;"	f	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:SharedFD	file:
ForgetConnection	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionContextImpl::ForgetConnection(void* raw) {$/;"	f	class:WsConnectionContextImpl	typeref:typename:void
ForwardCommand	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ForwardCommand(AndroidKeymasterCommand command, const Serializable& req,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ForwardCommand	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ForwardCommand(AndroidKeymasterCommand command,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ForwardHandler	host/frontend/webrtc_operator/client_handler.cpp	/^ForwardHandler::ForwardHandler(struct lws* wsi,$/;"	f	class:cuttlefish::ForwardHandler
ForwardHandler	host/frontend/webrtc_operator/client_handler.h	/^class ForwardHandler : public ClientDynHandler {$/;"	c	namespace:cuttlefish
FragileTpmStorage	host/commands/secure_env/fragile_tpm_storage.cpp	/^FragileTpmStorage::FragileTpmStorage($/;"	f	class:cuttlefish::FragileTpmStorage
FragileTpmStorage	host/commands/secure_env/fragile_tpm_storage.h	/^class FragileTpmStorage : public GatekeeperStorage {$/;"	c	namespace:cuttlefish
FrameCallback	host/libs/wayland/wayland_surfaces.h	/^  using FrameCallback =$/;"	t	class:wayland::Surfaces
FrameMultiplexer	host/libs/screen_connector/screen_connector.h	/^  using FrameMultiplexer = ScreenConnectorInputMultiplexer<ProcessedFrameType>;$/;"	t	class:cuttlefish::ScreenConnector	typeref:typename:ScreenConnectorInputMultiplexer<ProcessedFrameType>
FromContext	host/commands/secure_env/in_process_tpm.cpp	/^  static Impl* FromContext(TSS2_TCTI_CONTEXT* context) {$/;"	f	class:cuttlefish::InProcessTpm::Impl	typeref:typename:Impl *	file:
FromCredentials	common/libs/utils/unix_sockets.cpp	/^ControlMessage ControlMessage::FromCredentials(const ucred& credentials) {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:ControlMessage
FromFileDescriptors	common/libs/utils/unix_sockets.cpp	/^Result<ControlMessage> ControlMessage::FromFileDescriptors($/;"	f	class:cuttlefish::ControlMessage	typeref:typename:Result<ControlMessage>
FromPool	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^std::vector<uint8_t> FromPool(int size) {$/;"	f	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:std::vector<uint8_t>
FromRaw	common/libs/utils/unix_sockets.cpp	/^ControlMessage ControlMessage::FromRaw(const cmsghdr* cmsg) {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:ControlMessage
FromString	host/commands/start/flag_forwarder.cc	/^T FromString(const std::string& str) {$/;"	f	namespace:__anon4552bec90111	typeref:typename:T
FsmInput	host/libs/confui/server_common.h	/^enum class FsmInput : std::uint32_t {$/;"	g	namespace:cuttlefish::confui	typeref:typename:std::uint32_t
Full	host/libs/screen_connector/screen_connector_queue.h	/^  bool Full() const {$/;"	f	class:cuttlefish::ScreenConnectorQueue	typeref:typename:bool
FullOTA_GetBlockDifferences	shared/releasetools.py	/^def FullOTA_GetBlockDifferences(info):$/;"	f
GENERATED	host/libs/config/fetcher_config.h	/^  GENERATED,$/;"	e	enum:cuttlefish::FileSource
GERAN	guest/hals/ril/reference-libril/ril.h	/^    GERAN = 0x01,       \/\/ GSM EDGE Radio Access Network$/;"	e	enum:__anon0bfbaecfa503
GERAN_BAND_450	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_450 = 3,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_480	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_480 = 4,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_710	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_710 = 5,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_750	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_750 = 6,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_850	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_850 = 8,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_DCS1800	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_DCS1800 = 12,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_E900	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_E900 = 10,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_ER900	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_ER900 = 14,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_P900	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_P900 = 9,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_PCS1900	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_PCS1900 = 13,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_R900	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_R900 = 11,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_T380	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_T380 = 1,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_T410	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_T410 = 2,$/;"	e	enum:__anon0bfbaecfa703
GERAN_BAND_T810	guest/hals/ril/reference-libril/ril.h	/^    GERAN_BAND_T810 = 7,$/;"	e	enum:__anon0bfbaecfa703
GET_CHANNEL_STATUS	host/commands/modem_simulator/stk_service.h	/^    GET_CHANNEL_STATUS  = 0x44$/;"	e	enum:cuttlefish::StkService::CommandType
GET_INKEY	host/commands/modem_simulator/stk_service.h	/^    GET_INKEY           = 0x22,$/;"	e	enum:cuttlefish::StkService::CommandType
GET_INPUT	host/commands/modem_simulator/stk_service.h	/^    GET_INPUT           = 0x23,$/;"	e	enum:cuttlefish::StkService::CommandType
GID	shared/config/cgroups.json	/^      "GID": "system"$/;"	s	object:Cgroups.0
GNSS_SERIAL_BUFFER_SIZE	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^constexpr uint32_t GNSS_SERIAL_BUFFER_SIZE = 4096;$/;"	v	typeref:typename:uint32_t
GOOGLE	host/commands/metrics/proto/common.proto	/^  GOOGLE = 0;$/;"	e	enum:UserType
GPT_NUM_PARTITIONS	host/libs/image_aggregator/image_aggregator.cc	/^constexpr int GPT_NUM_PARTITIONS = 128;$/;"	v	namespace:cuttlefish::__anon02806fd80111	typeref:typename:int
GRPCPP_GRPCPP_H	host/commands/gnss_grpc_proxy/grpcpp.h	/^#define GRPCPP_GRPCPP_H$/;"	d
GSM	guest/hals/ril/reference-ril/reference-ril.c	/^#define GSM /;"	d	file:
GUARDED_BY	common/libs/concurrency/thread_annotations.h	/^#define GUARDED_BY(/;"	d
GUEST_GCE_NETWORK_NETWORK_INTERFACE_H_	common/libs/net/network_interface.h	/^#define GUEST_GCE_NETWORK_NETWORK_INTERFACE_H_$/;"	d
GW_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_GW_SignalStrength       GW_SignalStrength;$/;"	m	struct:__anon0bfbaecf5108	typeref:typename:RIL_GW_SignalStrength
GW_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_GW_SignalStrength       GW_SignalStrength;$/;"	m	struct:__anon0bfbaecf5208	typeref:typename:RIL_GW_SignalStrength
GW_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_GW_SignalStrength       GW_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_GW_SignalStrength
GW_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_GW_SignalStrength   GW_SignalStrength;$/;"	m	struct:__anon0bfbaecf4f08	typeref:typename:RIL_GW_SignalStrength
GW_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_GW_SignalStrength   GW_SignalStrength;$/;"	m	struct:__anon0bfbaecf5008	typeref:typename:RIL_GW_SignalStrength
Gatekeeper	host/libs/config/cuttlefish_config.h	/^  Gatekeeper,$/;"	e	enum:cuttlefish::SecureHal
GatekeeperChannel	common/libs/security/gatekeeper_channel.cpp	/^GatekeeperChannel::GatekeeperChannel(SharedFD input, SharedFD output)$/;"	f	class:cuttlefish::GatekeeperChannel
GatekeeperChannel	common/libs/security/gatekeeper_channel.h	/^class GatekeeperChannel {$/;"	c	namespace:cuttlefish
GatekeeperCommandDestroyer	common/libs/security/gatekeeper_channel.h	/^class GatekeeperCommandDestroyer {$/;"	c	namespace:cuttlefish
GatekeeperRawMessage	common/libs/security/gatekeeper_channel.h	/^struct GatekeeperRawMessage {$/;"	s	namespace:gatekeeper
GatekeeperResponder	host/commands/secure_env/gatekeeper_responder.cpp	/^GatekeeperResponder::GatekeeperResponder($/;"	f	class:cuttlefish::GatekeeperResponder
GatekeeperResponder	host/commands/secure_env/gatekeeper_responder.h	/^class GatekeeperResponder {$/;"	c	namespace:cuttlefish
GatekeeperStorage	host/commands/secure_env/gatekeeper_storage.h	/^class GatekeeperStorage {$/;"	c	namespace:cuttlefish
GatewayConfig	host/libs/allocd/alloc_utils.h	/^struct GatewayConfig {$/;"	s	namespace:cuttlefish
GceBroadcastReceiver	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceBroadcastReceiver.java	/^public class GceBroadcastReceiver extends BroadcastReceiver {$/;"	c
GceFuture	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public GceFuture(String name) {$/;"	m	class:GceFuture
GceFuture	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^public class GceFuture<T> extends AbstractFuture<T> {$/;"	c
GceMetadataCredentialSource	host/commands/fetcher/credential_source.cc	/^GceMetadataCredentialSource::GceMetadataCredentialSource(CurlWrapper& curl)$/;"	f	class:cuttlefish::GceMetadataCredentialSource
GceMetadataCredentialSource	host/commands/fetcher/credential_source.h	/^class GceMetadataCredentialSource : public CredentialSource {$/;"	c	namespace:cuttlefish
GceService	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public GceService() {}$/;"	m	class:GceService
GceService	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^public class GceService extends Service {$/;"	c
GceWifiManager	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    public GceWifiManager(Context context, EventReporter eventReporter, JobExecutor executor) {$/;"	m	class:GceWifiManager
GceWifiManager	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^public class GceWifiManager extends JobBase {$/;"	c
GenerateAndroidBuildActions	build/cvd-host-package.go	/^func (c *cvdHostPackage) GenerateAndroidBuildActions(ctx android.ModuleContext) {$/;"	f	struct:cuttlefish.cvdHostPackage
GenerateAttestation	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster::CertificateChain GenerateAttestation($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster::CertificateChain
GenerateAttestation	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster::CertificateChain TpmKeymasterContext::GenerateAttestation($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster::CertificateChain
GenerateBcc	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^TpmRemoteProvisioningContext::GenerateBcc(bool testMode) const {$/;"	f	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:std::pair<std::vector<uint8_t>,cppbor::Array>
GenerateCsr	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GenerateCsr(const GenerateCsrRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GenerateHmacSha256	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^TpmRemoteProvisioningContext::GenerateHmacSha256($/;"	f	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:std::optional<cppcose::HmacSha256>
GenerateKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GenerateKey(const GenerateKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GenerateKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GenerateKey(const GenerateKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GenerateKeyFrame	host/frontend/webrtc/lib/video_track_source_impl.h	/^  void GenerateKeyFrame() override {}$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:void
GeneratePersistentBootconfig	host/commands/assemble_cvd/disk_flags.cc	/^static void GeneratePersistentBootconfig($/;"	f	namespace:cuttlefish	typeref:typename:void	file:
GenerateProcessedFrameCallback	host/frontend/webrtc/display_handler.h	/^  using GenerateProcessedFrameCallback = ScreenConnector::GenerateProcessedFrameCallback;$/;"	t	class:cuttlefish::DisplayHandler	typeref:typename:ScreenConnector::GenerateProcessedFrameCallback
GenerateProcessedFrameCallback	host/libs/screen_connector/screen_connector.h	/^  using GenerateProcessedFrameCallback = std::function<void($/;"	t	class:cuttlefish::ScreenConnector
GenerateProcessedFrameCallbackImpl	host/libs/screen_connector/screen_connector_common.h	/^using GenerateProcessedFrameCallbackImpl =$/;"	t	namespace:cuttlefish
GenerateRandom	host/commands/secure_env/tpm_random_source.cpp	/^keymaster_error_t TpmRandomSource::GenerateRandom($/;"	f	class:cuttlefish::TpmRandomSource	typeref:typename:keymaster_error_t
GenerateRandomHandle	host/commands/secure_env/fragile_tpm_storage.cpp	/^TPM2_HANDLE FragileTpmStorage::GenerateRandomHandle() {$/;"	f	class:cuttlefish::FragileTpmStorage	typeref:typename:TPM2_HANDLE
GenerateRenderer	host/libs/confui/host_renderer.cc	/^std::unique_ptr<ConfUiRenderer> ConfUiRenderer::GenerateRenderer($/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::unique_ptr<ConfUiRenderer>
GenerateRkpKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GenerateRkpKey(const GenerateRkpKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GenerateSelfSignedCertificate	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster::CertificateChain GenerateSelfSignedCertificate($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster::CertificateChain
GenerateSelfSignedCertificate	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster::CertificateChain TpmKeymasterContext::GenerateSelfSignedCertificate($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster::CertificateChain
GenerateTimestampToken	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GenerateTimestampToken($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GenerateTimestampToken	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^keymaster_error_t TpmKeymasterEnforcement::GenerateTimestampToken($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:keymaster_error_t
GenerateUniqueId	host/commands/secure_env/tpm_attestation_record.cpp	/^keymaster::Buffer TpmAttestationRecordContext::GenerateUniqueId($/;"	f	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:keymaster::Buffer
Get	common/libs/device_config/guest_device_config.cpp	/^std::unique_ptr<DeviceConfigHelper> DeviceConfigHelper::Get() {$/;"	f	class:cuttlefish::DeviceConfigHelper	typeref:typename:std::unique_ptr<DeviceConfigHelper>
Get	common/libs/device_config/host_device_config.cpp	/^std::unique_ptr<DeviceConfigHelper> DeviceConfigHelper::Get() {$/;"	f	class:cuttlefish::DeviceConfigHelper	typeref:typename:std::unique_ptr<DeviceConfigHelper>
Get	host/commands/modem_simulator/nvram_config.cpp	/^\/* static *\/ const NvramConfig* NvramConfig::Get() {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:const NvramConfig *
Get	host/frontend/webrtc_operator/client_handler.cpp	/^std::shared_ptr<PollConnectionHandler> PollConnectionStore::Get($/;"	f	class:cuttlefish::PollConnectionStore	typeref:typename:std::shared_ptr<PollConnectionHandler>
Get	host/libs/config/cuttlefish_config.cpp	/^\/*static*\/ const CuttlefishConfig* CuttlefishConfig::Get() {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:const CuttlefishConfig *
Get	host/libs/confui/host_mode_ctrl.h	/^  static HostModeCtrl& Get() {$/;"	f	class:cuttlefish::HostModeCtrl	typeref:typename:HostModeCtrl &
Get	host/libs/confui/host_server.cc	/^HostServer& HostServer::Get($/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:HostServer &
Get	host/libs/confui/host_utils.cc	/^std::optional<std::thread::id> ThreadTracer::Get(const std::string& name) {$/;"	f	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:std::optional<std::thread::id>
Get	host/libs/confui/host_utils.cc	/^std::string ThreadTracer::Get(const std::thread::id tid) {$/;"	f	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:std::string
Get	host/libs/screen_connector/screen_connector.h	/^  static std::unique_ptr<ScreenConnector<ProcessedFrameType>> Get($/;"	f	class:cuttlefish::ScreenConnector	typeref:typename:std::unique_ptr<ScreenConnector<ProcessedFrameType>>
GetAbs	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^const std::vector<const uint32_t>& VirtualDeviceBase::GetAbs() const {$/;"	f	class:VirtualDeviceBase	typeref:typename:const std::vector<const uint32_t> &
GetAbs	guest/commands/vsoc_input_service/virtual_touchscreen.cpp	/^const std::vector<const uint32_t>& VirtualTouchScreen::GetAbs() const {$/;"	f	class:cuttlefish_input_service::VirtualTouchScreen	typeref:typename:const std::vector<const uint32_t> &
GetActiveInterfaces	host/libs/allocd/resource_manager.h	/^  const std::set<std::string>& GetActiveInterfaces() {$/;"	f	class:cuttlefish::Session	typeref:typename:const std::set<std::string> &
GetAttestationChain	host/commands/secure_env/tpm_attestation_record.cpp	/^TpmAttestationRecordContext::GetAttestationChain(keymaster_algorithm_t algorithm,$/;"	f	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:keymaster::CertificateChain
GetAttestationKey	host/commands/secure_env/tpm_attestation_record.cpp	/^TpmAttestationRecordContext::GetAttestationKey(keymaster_algorithm_t algorithm,$/;"	f	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:keymaster::KeymasterKeyBlob
GetAudioSource	host/frontend/webrtc/lib/streamer.cpp	/^std::shared_ptr<AudioSource> Streamer::GetAudioSource() {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:std::shared_ptr<AudioSource>
GetAuthTokenKey	host/commands/secure_env/soft_gatekeeper.h	/^    virtual bool GetAuthTokenKey(const uint8_t** auth_token_key, uint32_t* length) const {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
GetAuthTokenKey	host/commands/secure_env/tpm_gatekeeper.cpp	/^bool TpmGatekeeper::GetAuthTokenKey($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:bool
GetBootPatchlevel	host/commands/secure_env/proxy_keymaster_context.h	/^  std::optional<uint32_t> GetBootPatchlevel() const override {$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:std::optional<uint32_t>
GetBootPatchlevel	host/commands/secure_env/tpm_keymaster_context.cpp	/^std::optional<uint32_t> TpmKeymasterContext::GetBootPatchlevel() const {$/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::optional<uint32_t>
GetBoundary	host/libs/confui/host_renderer.h	/^  Boundary GetBoundary(LayoutElement&& e) const {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:Boundary
GetBridgeName	host/libs/allocd/resource.h	/^  std::string GetBridgeName() { return bridge_name_; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:std::string
GetCameraStream	host/frontend/webrtc/lib/client_handler.cpp	/^ClientVideoTrackInterface* ClientHandler::GetCameraStream() {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:ClientVideoTrackInterface *
GetCandidateProcessGroups	host/commands/stop/main.cc	/^std::set<pid_t> GetCandidateProcessGroups(const std::set<std::string>& paths) {$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:std::set<pid_t>
GetCommonIccEFPath	host/commands/modem_simulator/sim_service.cpp	/^std::string SimService::SimFileSystem::GetCommonIccEFPath(EFId efid) {$/;"	f	class:cuttlefish::SimService::SimFileSystem	typeref:typename:std::string
GetConfigFilePath	host/commands/assemble_cvd/flags.cc	/^std::string GetConfigFilePath(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
GetConnection	host/frontend/webrtc/lib/ws_connection.cpp	/^std::shared_ptr<WsConnectionImpl> WsConnectionContextImpl::GetConnection($/;"	f	class:WsConnectionContextImpl	typeref:typename:std::shared_ptr<WsConnectionImpl>
GetControlSocketPath	host/commands/health/health.cpp	/^std::string GetControlSocketPath(const cuttlefish::CuttlefishConfig& config) {$/;"	f	typeref:typename:std::string
GetControlSocketPath	host/libs/vm_manager/crosvm_manager.cpp	/^std::string GetControlSocketPath($/;"	f	namespace:cuttlefish::vm_manager::__anon9162129c0111	typeref:typename:std::string
GetCurrentSelectItem	host/commands/modem_simulator/stk_service.cpp	/^XMLElement* StkService::GetCurrentSelectItem() {$/;"	f	class:cuttlefish::StkService	typeref:typename:XMLElement *
GetCurrentSessionId	host/libs/confui/host_server.h	/^  std::string GetCurrentSessionId() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:std::string
GetCurrentState	host/libs/confui/host_server.h	/^  std::string GetCurrentState() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:std::string
GetCurrentTimeStamp	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::GetCurrentTimeStamp() {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
GetCuttlefishEnvPath	host/commands/assemble_cvd/flags.cc	/^std::string GetCuttlefishEnvPath() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
GetDataIn	host/libs/websocket/websocket_handler.h	/^  const std::string& GetDataIn() const { return in_buffer_; }$/;"	f	class:cuttlefish::DynHandler	typeref:typename:const std::string &
GetDefaultVsockCid	host/libs/config/cuttlefish_config.cpp	/^int GetDefaultVsockCid() {$/;"	f	namespace:cuttlefish	typeref:typename:int
GetDevice	host/frontend/webrtc_operator/device_registry.cpp	/^std::shared_ptr<DeviceHandler> DeviceRegistry::GetDevice($/;"	f	class:cuttlefish::DeviceRegistry	typeref:typename:std::shared_ptr<DeviceHandler>
GetDeviceConfig	common/libs/device_config/device_config.h	/^  const DeviceConfig& GetDeviceConfig() const { return device_config_; }$/;"	f	class:cuttlefish::DeviceConfigHelper	typeref:typename:const DeviceConfig &
GetDeviceConfig	common/libs/device_config/device_config_shared.cpp	/^DeviceConfig GetDeviceConfig() {$/;"	f	namespace:cuttlefish	typeref:typename:DeviceConfig
GetEncoderSelector	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^VP8OnlyEncoderFactory::GetEncoderSelector() const {$/;"	f	class:cuttlefish::webrtc_streaming::VP8OnlyEncoderFactory	typeref:typename:std::unique_ptr<webrtc::VideoEncoderFactory::EncoderSelectorInterface>
GetEntry	host/commands/secure_env/insecure_fallback_storage.cpp	/^Json::Value* InsecureFallbackStorage::GetEntry(const Json::Value& key) {$/;"	f	class:cuttlefish::InsecureFallbackStorage	typeref:typename:Json::Value *
GetEntry	host/commands/secure_env/insecure_fallback_storage.cpp	/^const Json::Value* InsecureFallbackStorage::GetEntry($/;"	f	class:cuttlefish::InsecureFallbackStorage	typeref:typename:const Json::Value *
GetErrno	common/libs/fs/shared_fd.h	/^  int GetErrno() const { return errno_; }$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
GetErrorCode	host/libs/confui/cbor.h	/^  Error GetErrorCode() const { return buffer_status_; }$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:Error
GetEventBuffer	host/frontend/webrtc/connection_observer.cpp	/^std::unique_ptr<InputEventBuffer> GetEventBuffer() {$/;"	f	namespace:cuttlefish	typeref:typename:std::unique_ptr<InputEventBuffer>
GetEventTypes	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^const std::vector<const uint32_t>& VirtualDeviceBase::GetEventTypes() const {$/;"	f	class:VirtualDeviceBase	typeref:typename:const std::vector<const uint32_t> &
GetEventTypes	guest/commands/vsoc_input_service/virtual_keyboard.cpp	/^const std::vector<const uint32_t>& VirtualKeyboard::GetEventTypes() const {$/;"	f	class:cuttlefish_input_service::VirtualKeyboard	typeref:typename:const std::vector<const uint32_t> &
GetEventTypes	guest/commands/vsoc_input_service/virtual_power_button.cpp	/^const std::vector<const uint32_t>& VirtualPowerButton::GetEventTypes() const {$/;"	f	class:cuttlefish_input_service::VirtualPowerButton	typeref:typename:const std::vector<const uint32_t> &
GetEventTypes	guest/commands/vsoc_input_service/virtual_touchscreen.cpp	/^const std::vector<const uint32_t>& VirtualTouchScreen::GetEventTypes() const {$/;"	f	class:cuttlefish_input_service::VirtualTouchScreen	typeref:typename:const std::vector<const uint32_t> &
GetExtraData	common/libs/confui/protocol_types.h	/^  std::vector<std::uint8_t> GetExtraData() const { return extra_data_; }$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::vector<std::uint8_t>
GetFailureRecord	host/commands/secure_env/soft_gatekeeper.h	/^    virtual bool GetFailureRecord(uint32_t uid, secure_id_t user_id, failure_record_t* record,$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
GetFailureRecord	host/commands/secure_env/tpm_gatekeeper.cpp	/^bool TpmGatekeeper::GetFailureRecord($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:bool
GetFailureRecordImpl	host/commands/secure_env/tpm_gatekeeper.cpp	/^static bool GetFailureRecordImpl($/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
GetFsType	host/libs/config/data_image.cpp	/^std::string GetFsType(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
GetGlobalConfigFileLink	host/libs/config/cuttlefish_config.cpp	/^std::string GetGlobalConfigFileLink() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
GetGlobalID	host/libs/allocd/resource.h	/^  uint32_t GetGlobalID() { return global_id_; }$/;"	f	class:cuttlefish::StaticResource	typeref:typename:uint32_t
GetGracePeriod	host/libs/confui/session.cc	/^static const std::chrono::milliseconds GetGracePeriod() {$/;"	f	namespace:cuttlefish::confui	typeref:typename:const std::chrono::milliseconds	file:
GetGraphicsAvailability	host/libs/graphics_detector/graphics_detector.cpp	/^GraphicsAvailability GetGraphicsAvailability() {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:GraphicsAvailability
GetGraphicsAvailabilityWithSubprocessCheck	host/libs/graphics_detector/graphics_detector.cpp	/^GraphicsAvailability GetGraphicsAvailabilityWithSubprocessCheck() {$/;"	f	namespace:cuttlefish	typeref:typename:GraphicsAvailability
GetHandle	host/commands/secure_env/fragile_tpm_storage.cpp	/^TPM2_HANDLE FragileTpmStorage::GetHandle(const Json::Value& key) const {$/;"	f	class:cuttlefish::FragileTpmStorage	typeref:typename:TPM2_HANDLE
GetHasIpv4	host/libs/allocd/resource.h	/^  bool GetHasIpv4() { return has_ipv4_; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:bool
GetHasIpv6	host/libs/allocd/resource.h	/^  bool GetHasIpv6() { return has_ipv6_; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:bool
GetHiddenTags	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster::AuthorizationSet GetHiddenTags($/;"	f	namespace:cuttlefish::__anone862986b0111	typeref:typename:keymaster::AuthorizationSet
GetHmacSharingParameters	guest/hals/keymaster/remote/remote_keymaster.cpp	/^GetHmacSharingParametersResponse RemoteKeymaster::GetHmacSharingParameters() {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:GetHmacSharingParametersResponse
GetHmacSharingParameters	guest/hals/keymint/remote/remote_keymaster.cpp	/^GetHmacSharingParametersResponse RemoteKeymaster::GetHmacSharingParameters() {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:GetHmacSharingParametersResponse
GetHmacSharingParameters	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^keymaster_error_t TpmKeymasterEnforcement::GetHmacSharingParameters($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:keymaster_error_t
GetHostId	host/commands/modem_simulator/modem_service.cpp	/^std::string ModemService::GetHostId() {$/;"	f	class:cuttlefish::ModemService	typeref:typename:std::string
GetIccProfile	host/commands/modem_simulator/sim_service.cpp	/^XMLElement* SimService::GetIccProfile() {$/;"	f	class:cuttlefish::SimService	typeref:typename:XMLElement *
GetId	host/libs/confui/host_utils.cc	/^std::optional<std::thread::id> GetId(const std::string& name) {$/;"	f	namespace:cuttlefish::confui::thread	typeref:typename:std::optional<std::thread::id>
GetId	host/libs/confui/session.h	/^  std::string GetId() { return session_id_; }$/;"	f	class:cuttlefish::confui::Session	typeref:typename:std::string
GetIfaceId	host/libs/allocd/resource.h	/^  uint16_t GetIfaceId() { return iface_id_; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:uint16_t
GetIfaceId	host/libs/allocd/resource.h	/^  uint16_t GetIfaceId() { return iface_id_; }$/;"	f	class:cuttlefish::MobileIface	typeref:typename:uint16_t
GetInstance	host/libs/config/cuttlefish_config.cpp	/^int GetInstance() {$/;"	f	namespace:cuttlefish	typeref:typename:int
GetIpAddr	host/libs/allocd/resource.h	/^  std::string GetIpAddr() { return ipaddr_; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:std::string
GetIpAddr	host/libs/allocd/resource.h	/^  std::string GetIpAddr() { return ipaddr_; }$/;"	f	class:cuttlefish::MobileIface	typeref:typename:std::string
GetKernelConfigAndSetDefaults	host/commands/assemble_cvd/flags.cc	/^bool GetKernelConfigAndSetDefaults(KernelConfig* kernel_config) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
GetKeyCharacteristics	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GetKeyCharacteristics(const GetKeyCharacteristicsRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GetKeyCharacteristics	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GetKeyCharacteristics($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GetKeyFactory	host/commands/secure_env/proxy_keymaster_context.h	/^  const keymaster::KeyFactory* GetKeyFactory($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:const keymaster::KeyFactory *
GetKeyFactory	host/commands/secure_env/tpm_keymaster_context.cpp	/^const KeyFactory* TpmKeymasterContext::GetKeyFactory($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:const KeyFactory *
GetKeys	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^const std::vector<const uint32_t>& VirtualDeviceBase::GetKeys() const {$/;"	f	class:VirtualDeviceBase	typeref:typename:const std::vector<const uint32_t> &
GetKeys	guest/commands/vsoc_input_service/virtual_keyboard.cpp	/^const std::vector<const uint32_t>& VirtualKeyboard::GetKeys() const {$/;"	f	class:cuttlefish_input_service::VirtualKeyboard	typeref:typename:const std::vector<const uint32_t> &
GetKeys	guest/commands/vsoc_input_service/virtual_power_button.cpp	/^const std::vector<const uint32_t>& VirtualPowerButton::GetKeys() const {$/;"	f	class:cuttlefish_input_service::VirtualPowerButton	typeref:typename:const std::vector<const uint32_t> &
GetKeys	guest/commands/vsoc_input_service/virtual_touchscreen.cpp	/^const std::vector<const uint32_t>& VirtualTouchScreen::GetKeys() const {$/;"	f	class:cuttlefish_input_service::VirtualTouchScreen	typeref:typename:const std::vector<const uint32_t> &
GetKmVersion	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster::KmVersion GetKmVersion() const override {$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster::KmVersion
GetKmVersion	host/commands/secure_env/tpm_keymaster_context.h	/^  keymaster::KmVersion GetKmVersion() const override {$/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster::KmVersion
GetLegacyConfigFilePath	host/commands/assemble_cvd/assemble_cvd.cc	/^std::string GetLegacyConfigFilePath(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish::__anon1e335d460111	typeref:typename:std::string
GetLinuxVersion	host/libs/vm_manager/host_configuration.cpp	/^std::pair<int,int> GetLinuxVersion() {$/;"	f	namespace:cuttlefish::vm_manager::__anon1edaaabd0111	typeref:typename:std::pair<int,int>
GetLocale	common/libs/confui/protocol_types.h	/^  std::string GetLocale() const { return locale_; }$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::string
GetLocation	common/libs/confui/protocol_types.h	/^  std::pair<int, int> GetLocation() { return {x_, y_}; }$/;"	f	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:std::pair<int,int>
GetMessage	common/libs/confui/protocol_types.h	/^  auto GetMessage() const { return message_; }$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:auto
GetMessage	host/libs/confui/cbor.h	/^  std::vector<std::uint8_t>&& GetMessage() {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:std::vector<std::uint8_t> &&
GetMillisecondsSinceBoot	host/commands/secure_env/soft_gatekeeper.h	/^    virtual uint64_t GetMillisecondsSinceBoot() const {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:uint64_t
GetMillisecondsSinceBoot	host/commands/secure_env/tpm_gatekeeper.cpp	/^uint64_t TpmGatekeeper::GetMillisecondsSinceBoot() const {$/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:uint64_t
GetMode	host/libs/confui/host_mode_ctrl.h	/^  auto GetMode() {$/;"	f	class:cuttlefish::HostModeCtrl	typeref:typename:auto
GetMode	host/libs/screen_connector/screen_connector_ctrl.h	/^  auto GetMode() {$/;"	f	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:auto
GetMonitorPath	host/libs/vm_manager/qemu_manager.cpp	/^std::string GetMonitorPath(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish::vm_manager::__anonb2b4da3a0111	typeref:typename:std::string
GetMoreAudioData	host/frontend/webrtc/lib/audio_device.cpp	/^int CfAudioDeviceModule::GetMoreAudioData(void* data, int bytes_per_sample,$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int
GetMoreAudioData	host/frontend/webrtc/lib/streamer.cpp	/^  int GetMoreAudioData(void* data, int bytes_per_sample,$/;"	f	class:cuttlefish::webrtc_streaming::__anonab9390d10111::AudioDeviceModuleWrapper	typeref:typename:int	file:
GetName	host/libs/allocd/resource.h	/^  std::string GetName() { return name_; }$/;"	f	class:cuttlefish::StaticResource	typeref:typename:std::string
GetName	host/libs/confui/host_utils.cc	/^std::string GetName(const std::thread::id tid) {$/;"	f	namespace:cuttlefish::confui::thread	typeref:typename:std::string
GetNextHexInt	host/commands/modem_simulator/command_parser.cpp	/^int CommandParser::GetNextHexInt() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:int
GetNextInt	host/commands/modem_simulator/command_parser.cpp	/^int CommandParser::GetNextInt() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:int
GetNextStr	host/commands/modem_simulator/command_parser.cpp	/^std::string_view CommandParser::GetNextStr() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:std::string_view
GetNextStr	host/commands/modem_simulator/command_parser.cpp	/^std::string_view CommandParser::GetNextStr(char flag) {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:std::string_view
GetNextStrDeciToHex	host/commands/modem_simulator/command_parser.cpp	/^std::string CommandParser::GetNextStrDeciToHex() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:std::string
GetOperationFactory	host/commands/secure_env/proxy_keymaster_context.h	/^  const keymaster::OperationFactory* GetOperationFactory($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:const keymaster::OperationFactory *
GetOperationFactory	host/commands/secure_env/tpm_keymaster_context.cpp	/^const OperationFactory* TpmKeymasterContext::GetOperationFactory($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:const OperationFactory *
GetPartitionGUID	host/libs/image_aggregator/image_aggregator.cc	/^  static const char* GetPartitionGUID(MultipleImagePartition source) {$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:const char *	file:
GetPasswordKey	host/commands/secure_env/soft_gatekeeper.h	/^    virtual void GetPasswordKey(const uint8_t** password_key, uint32_t* length) {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:void
GetPasswordKey	host/commands/secure_env/tpm_gatekeeper.cpp	/^void TpmGatekeeper::GetPasswordKey($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:void
GetPath	host/libs/websocket/websocket_server.cpp	/^std::string GetPath(struct lws* wsi) {$/;"	f	namespace:cuttlefish::__anon8185be2f0111	typeref:typename:std::string
GetPhoneNumber	host/commands/modem_simulator/sim_service.cpp	/^std::string SimService::GetPhoneNumber() {$/;"	f	class:cuttlefish::SimService	typeref:typename:std::string
GetPhoneNumberFromAddress	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::GetPhoneNumberFromAddress() {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
GetPlayoutUnderrunCount	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::GetPlayoutUnderrunCount() const { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
GetPromptText	common/libs/confui/protocol_types.h	/^  std::string GetPromptText() const { return prompt_text_; }$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::string
GetProperties	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^const std::vector<const uint32_t>& VirtualDeviceBase::GetProperties() const {$/;"	f	class:VirtualDeviceBase	typeref:typename:const std::vector<const uint32_t> &
GetProperties	guest/commands/vsoc_input_service/virtual_touchscreen.cpp	/^const std::vector<const uint32_t>& VirtualTouchScreen::GetProperties() const {$/;"	f	class:cuttlefish_input_service::VirtualTouchScreen	typeref:typename:const std::vector<const uint32_t> &
GetQemuVersion	host/libs/vm_manager/qemu_manager.cpp	/^std::pair<int,int> GetQemuVersion(const std::string& qemu_binary)$/;"	f	namespace:cuttlefish::vm_manager::__anonb2b4da3a0111	typeref:typename:std::pair<int,int>
GetRandom	host/commands/secure_env/soft_gatekeeper.h	/^    virtual void GetRandom(void* random, uint32_t requested_length) const {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:void
GetRandom	host/commands/secure_env/tpm_gatekeeper.cpp	/^void TpmGatekeeper::GetRandom(void* random, uint32_t requested_size) const {$/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:void
GetRawFromServer	common/libs/device_config/guest_device_config.cpp	/^bool GetRawFromServer(DeviceConfig* data) {$/;"	f	namespace:cuttlefish::__anon4ec25d870111	typeref:typename:bool
GetRemoteProvisioningContext	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster::RemoteProvisioningContext* GetRemoteProvisioningContext()$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster::RemoteProvisioningContext *
GetRemoteProvisioningContext	host/commands/secure_env/tpm_keymaster_context.cpp	/^TpmKeymasterContext::GetRemoteProvisioningContext() const {$/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster::RemoteProvisioningContext *
GetResolutionFromSettings	host/frontend/webrtc/lib/camera_streamer.cpp	/^CameraStreamer::Resolution CameraStreamer::GetResolutionFromSettings($/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:CameraStreamer::Resolution
GetResourceType	host/libs/allocd/resource.h	/^  ResourceType GetResourceType() { return ty_; }$/;"	f	class:cuttlefish::StaticResource	typeref:typename:ResourceType
GetResponse	common/libs/confui/protocol_types.h	/^  auto GetResponse() const { return response_; }$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:auto
GetResponse	common/libs/confui/protocol_types.h	/^  auto GetResponse() const { return response_; }$/;"	f	class:cuttlefish::confui::ConfUiUserSelectionMessage	typeref:typename:auto
GetResponse	common/libs/confui/protocol_types.h	/^  auto GetResponse() const { return response_; }$/;"	f	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:auto
GetRootElement	host/commands/modem_simulator/sim_service.cpp	/^XMLElement* SimService::SimFileSystem::GetRootElement() {$/;"	f	class:cuttlefish::SimService::SimFileSystem	typeref:typename:XMLElement *
GetScreenConnectorCallback	host/frontend/webrtc/display_handler.cpp	/^DisplayHandler::GenerateProcessedFrameCallback DisplayHandler::GetScreenConnectorCallback() {$/;"	f	class:cuttlefish::DisplayHandler	typeref:typename:DisplayHandler::GenerateProcessedFrameCallback
GetSecurityLevel	host/commands/secure_env/tpm_attestation_record.cpp	/^keymaster_security_level_t TpmAttestationRecordContext::GetSecurityLevel() const {$/;"	f	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:keymaster_security_level_t
GetSessionID	host/libs/allocd/resource_manager.h	/^  uint32_t GetSessionID() { return session_id_; }$/;"	f	class:cuttlefish::Session	typeref:typename:uint32_t
GetSessionId	common/libs/confui/protocol_types.h	/^  std::string GetSessionId() const { return session_id_; }$/;"	f	class:cuttlefish::confui::ConfUiMessage	typeref:typename:std::string
GetSessionId	guest/hals/confirmationui/guest_session.h	/^    std::string GetSessionId() const { return session_name_; }$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::string
GetShortName	common/libs/utils/subprocess.h	/^  std::string GetShortName() const {$/;"	f	class:cuttlefish::Command	typeref:typename:std::string
GetSign	common/libs/confui/protocol_types.h	/^  auto GetSign() const { return sign_; }$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:auto
GetSignalStrength	host/commands/modem_simulator/network_service.cpp	/^std::string NetworkService::GetSignalStrength() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:std::string
GetSimOperator	host/commands/modem_simulator/sim_service.cpp	/^std::string SimService::GetSimOperator() {$/;"	f	class:cuttlefish::SimService	typeref:typename:std::string
GetSimStatus	host/commands/modem_simulator/sim_service.cpp	/^SimService::SimStatus SimService::GetSimStatus() const {$/;"	f	class:cuttlefish::SimService	typeref:typename:SimService::SimStatus
GetSockName	common/libs/fs/shared_fd.cpp	/^int FileInstance::GetSockName(struct sockaddr* addr, socklen_t* addrlen) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
GetSockOpt	common/libs/fs/shared_fd.cpp	/^int FileInstance::GetSockOpt(int level, int optname, void* optval,$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
GetState	host/libs/confui/session.h	/^  MainLoopState GetState() { return state_; }$/;"	f	class:cuttlefish::confui::Session	typeref:typename:MainLoopState
GetStats	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^bool VideoTrackSourceImpl::GetStats(Stats *stats) {$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:bool
GetStatusMessage	common/libs/confui/protocol_types.h	/^  std::string GetStatusMessage() const { return status_message_; }$/;"	f	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:std::string
GetSuplementaryGroups	common/libs/utils/users.cpp	/^std::vector<gid_t> GetSuplementaryGroups() {$/;"	f	namespace:cuttlefish::__anonced26a190111	typeref:typename:std::vector<gid_t>
GetSupportedAlgorithms	host/commands/secure_env/proxy_keymaster_context.h	/^  const keymaster_algorithm_t* GetSupportedAlgorithms($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:const keymaster_algorithm_t *
GetSupportedAlgorithms	host/commands/secure_env/tpm_keymaster_context.cpp	/^const keymaster_algorithm_t* TpmKeymasterContext::GetSupportedAlgorithms($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:const keymaster_algorithm_t *
GetSupportedFormats	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^std::vector<webrtc::SdpVideoFormat> VP8OnlyEncoderFactory::GetSupportedFormats()$/;"	f	class:cuttlefish::webrtc_streaming::VP8OnlyEncoderFactory	typeref:typename:std::vector<webrtc::SdpVideoFormat>
GetSystemVersion	host/commands/secure_env/proxy_keymaster_context.h	/^  void GetSystemVersion(uint32_t* os_version,$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:void
GetSystemVersion	host/commands/secure_env/tpm_keymaster_context.cpp	/^void TpmKeymasterContext::GetSystemVersion($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:void
GetThreadTracer	host/libs/confui/host_utils.cc	/^ThreadTracer& GetThreadTracer() {$/;"	f	namespace:cuttlefish::confui::thread	typeref:typename:ThreadTracer &
GetTouchClientByLabel	host/frontend/webrtc/connection_observer.h	/^  SharedFD GetTouchClientByLabel(const std::string& label) {$/;"	f	struct:cuttlefish::InputSockets	typeref:typename:SharedFD
GetType	common/libs/confui/protocol_types.h	/^  ConfUiCmd GetType() const override { return ConfUiCmd::kCliAck; }$/;"	f	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:ConfUiCmd
GetType	common/libs/confui/protocol_types.h	/^  ConfUiCmd GetType() const override { return ConfUiCmd::kCliRespond; }$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:ConfUiCmd
GetType	common/libs/confui/protocol_types.h	/^  ConfUiCmd GetType() const override { return ConfUiCmd::kStart; }$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:ConfUiCmd
GetType	common/libs/confui/protocol_types.h	/^  ConfUiCmd GetType() const override { return ConfUiCmd::kUserInputEvent; }$/;"	f	class:cuttlefish::confui::ConfUiUserSelectionMessage	typeref:typename:ConfUiCmd
GetType	common/libs/confui/protocol_types.h	/^  ConfUiCmd GetType() const override { return ConfUiCmd::kUserTouchEvent; }$/;"	f	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:ConfUiCmd
GetType	common/libs/confui/protocol_types.h	/^  ConfUiCmd GetType() const override { return cmd; }$/;"	f	class:cuttlefish::confui::ConfUiGenericMessage	typeref:typename:ConfUiCmd
GetUID	host/libs/allocd/resource_manager.h	/^  uid_t GetUID() { return uid_; }$/;"	f	class:cuttlefish::Session	typeref:typename:uid_t
GetUiOpts	common/libs/confui/protocol_types.h	/^  std::vector<teeui::UIOption> GetUiOpts() const { return ui_opts_; }$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::vector<teeui::UIOption>
GetUid	host/libs/allocd/resource.h	/^  uid_t GetUid() { return uid_; }$/;"	f	class:cuttlefish::StaticResource	typeref:typename:uid_t
GetUseEbtablesLegacy	host/libs/allocd/resource.h	/^  bool GetUseEbtablesLegacy() { return use_ebtables_legacy_; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:bool
GetUserData	host/libs/wayland/wayland_utils.h	/^T* GetUserData(wl_resource* resource) {$/;"	f	namespace:wayland	typeref:typename:T *
GetUserIDFromSock	host/libs/allocd/resource_manager.cpp	/^uid_t GetUserIDFromSock(SharedFD client_socket) {$/;"	f	namespace:cuttlefish	typeref:typename:uid_t
GetUserImages	shared/releasetools.py	/^def GetUserImages(input_tmp, input_zip):$/;"	f
GetUserName	host/libs/allocd/alloc_utils.cpp	/^std::optional<std::string> GetUserName(uid_t uid) {$/;"	f	namespace:cuttlefish	typeref:typename:std::optional<std::string>
GetUsimEFPath	host/commands/modem_simulator/sim_service.cpp	/^std::string SimService::SimFileSystem::GetUsimEFPath(EFId efid) {$/;"	f	class:cuttlefish::SimService::SimFileSystem	typeref:typename:std::string
GetVendorPatchlevel	host/commands/secure_env/proxy_keymaster_context.h	/^  std::optional<uint32_t> GetVendorPatchlevel() const override {$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:std::optional<uint32_t>
GetVendorPatchlevel	host/commands/secure_env/tpm_keymaster_context.cpp	/^std::optional<uint32_t> TpmKeymasterContext::GetVendorPatchlevel() const {$/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::optional<uint32_t>
GetVerifiedBootParams	host/commands/secure_env/tpm_attestation_record.cpp	/^const VerifiedBootParams* TpmAttestationRecordContext::GetVerifiedBootParams($/;"	f	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:const VerifiedBootParams *
GetVersion	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GetVersion(const GetVersionRequest& request, GetVersionResponse* response)/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GetVersion	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::GetVersion(const GetVersionRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
GetVmManager	host/libs/vm_manager/vm_manager.cpp	/^std::unique_ptr<VmManager> GetVmManager(const std::string& name, Arch arch) {$/;"	f	namespace:cuttlefish::vm_manager	typeref:typename:std::unique_ptr<VmManager>
GetVoiceRegistrationState	host/commands/modem_simulator/network_service.cpp	/^NetworkService::RegistrationState NetworkService::GetVoiceRegistrationState() const {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:NetworkService::RegistrationState
GetVsockServerPort	host/libs/config/cuttlefish_config.cpp	/^int GetVsockServerPort($/;"	f	namespace:cuttlefish	typeref:typename:int
Getter	common/libs/utils/flag_parser.cpp	/^Flag Flag::Getter(std::function<std::string()> fn) && {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag
Getter	common/libs/utils/flag_parser.cpp	/^Flag& Flag::Getter(std::function<std::string()> fn) & {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag &
GflagsCompatFlag	common/libs/utils/flag_parser.cpp	/^Flag GflagsCompatFlag(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
GflagsCompatFlag	common/libs/utils/flag_parser.cpp	/^Flag GflagsCompatFlag(const std::string& name, bool& value) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
GflagsCompatFlag	common/libs/utils/flag_parser.cpp	/^Flag GflagsCompatFlag(const std::string& name, int32_t& value) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
GflagsCompatFlag	common/libs/utils/flag_parser.cpp	/^Flag GflagsCompatFlag(const std::string& name, std::string& value) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
GflagsCompatNumericFlagGeneric	common/libs/utils/flag_parser.cpp	/^static Flag GflagsCompatNumericFlagGeneric(const std::string& name, T& value) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag	file:
GflagsComponent	host/commands/assemble_cvd/flag_feature.cpp	/^fruit::Component<fruit::Required<ConfigFlag>, ParseGflags> GflagsComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<ConfigFlag>,ParseGflags>
GfxstreamEnabledTest	tests/graphics/src/com/android/cuttlefish/tests/GfxstreamEnabledTest.java	/^public class GfxstreamEnabledTest extends BaseHostJUnit4Test {$/;"	c
GnssGrpcProxy	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^service GnssGrpcProxy {$/;"	s	package:gnss_grpc_proxy
GnssGrpcProxyBinary	host/libs/config/known_paths.cpp	/^std::string GnssGrpcProxyBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
GnssGrpcProxyServer	host/commands/run_cvd/launch.cc	/^class GnssGrpcProxyServer : public CommandSource {$/;"	c	namespace:cuttlefish	file:
GnssGrpcProxyServiceImpl	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    GnssGrpcProxyServiceImpl(cuttlefish::SharedFD gnss_in,$/;"	f	class:GnssGrpcProxyServiceImpl	file:
GnssGrpcProxyServiceImpl	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^class GnssGrpcProxyServiceImpl final : public GnssGrpcProxy::Service {$/;"	c	file:
GptBeginning	host/libs/image_aggregator/image_aggregator.cc	/^struct __attribute__((packed)) GptBeginning {$/;"	s	namespace:cuttlefish::__anon02806fd80111	file:
GptEnd	host/libs/image_aggregator/image_aggregator.cc	/^struct __attribute__((packed)) GptEnd {$/;"	s	namespace:cuttlefish::__anon02806fd80111	file:
GptHeader	host/libs/image_aggregator/image_aggregator.cc	/^struct __attribute__((packed)) GptHeader {$/;"	s	namespace:cuttlefish::__anon02806fd80111	file:
GptPartitionEntry	host/libs/image_aggregator/image_aggregator.cc	/^struct __attribute__((packed)) GptPartitionEntry {$/;"	s	namespace:cuttlefish::__anon02806fd80111	file:
GraphicsAvailability	host/libs/graphics_detector/graphics_detector.h	/^struct GraphicsAvailability {$/;"	s	namespace:cuttlefish
GroupIdFromName	common/libs/utils/users.cpp	/^gid_t GroupIdFromName(const std::string& group_name) {$/;"	f	namespace:cuttlefish::__anonced26a190111	typeref:typename:gid_t
GuessSeverity	common/libs/utils/tee_logging.cpp	/^static LogSeverity GuessSeverity($/;"	f	namespace:cuttlefish	typeref:typename:LogSeverity	file:
GuestSession	guest/hals/confirmationui/guest_session.h	/^    GuestSession(const std::uint32_t session_id, ListenerState& listener_state,$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession
GuestSession	guest/hals/confirmationui/guest_session.h	/^class GuestSession {$/;"	c	namespace:android::hardware::confirmationui::V1_0::implementation
HANDLE_MESSAGE	host/commands/secure_env/keymaster_responder.cpp	/^#define HANDLE_MESSAGE(/;"	d	file:
HANDLE_MESSAGE_W_RETURN	host/commands/secure_env/keymaster_responder.cpp	/^#define HANDLE_MESSAGE_W_RETURN(/;"	d	file:
HANDLE_MESSAGE_W_RETURN_NO_ARG	host/commands/secure_env/keymaster_responder.cpp	/^#define HANDLE_MESSAGE_W_RETURN_NO_ARG(/;"	d	file:
HANDOVER_CANCELED	guest/hals/ril/reference-libril/ril.h	/^    HANDOVER_CANCELED = 3$/;"	e	enum:__anon0bfbaecf8e03
HANDOVER_COMPLETED	guest/hals/ril/reference-libril/ril.h	/^    HANDOVER_COMPLETED = 1,$/;"	e	enum:__anon0bfbaecf8e03
HANDOVER_FAILED	guest/hals/ril/reference-libril/ril.h	/^    HANDOVER_FAILED = 2,$/;"	e	enum:__anon0bfbaecf8e03
HANDOVER_STARTED	guest/hals/ril/reference-libril/ril.h	/^    HANDOVER_STARTED = 0,$/;"	e	enum:__anon0bfbaecf8e03
HANDSHAKE_RETRY_COUNT	guest/hals/ril/reference-ril/atchannel.c	/^#define HANDSHAKE_RETRY_COUNT /;"	d	file:
HANDSHAKE_TIMEOUT_MSEC	guest/hals/ril/reference-ril/atchannel.c	/^#define HANDSHAKE_TIMEOUT_MSEC /;"	d	file:
HCI_ACLDATA_PKT	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_ACLDATA_PKT /;"	d	file:
HCI_EVENT_PKT	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_EVENT_PKT /;"	d	file:
HCI_ISODATA_PKT	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_ISODATA_PKT /;"	d	file:
HCI_MAX_ACL_SIZE	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_MAX_ACL_SIZE /;"	d	file:
HCI_MAX_ACL_SIZE	host/commands/bt_connector/main.cpp	/^#define HCI_MAX_ACL_SIZE /;"	d	file:
HCI_MAX_FRAME_SIZE	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_MAX_FRAME_SIZE /;"	d	file:
HCI_MAX_FRAME_SIZE	host/commands/bt_connector/main.cpp	/^#define HCI_MAX_FRAME_SIZE /;"	d	file:
HCI_SCODATA_PKT	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_SCODATA_PKT /;"	d	file:
HCI_VENDOR_PKT	guest/commands/bt_vhci_forwarder/main.cpp	/^#define HCI_VENDOR_PKT /;"	d	file:
HIDL_FETCH_IBluetoothHci	guest/hals/bt/remote/remote_bluetooth.cpp	/^IBluetoothHci* HIDL_FETCH_IBluetoothHci(const char* \/* name *\/) {$/;"	f	namespace:android::hardware::bluetooth::V1_1::remote	typeref:typename:IBluetoothHci *
HIDL_FETCH_ICameraProvider	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^extern "C" ICameraProvider* HIDL_FETCH_ICameraProvider(const char* name) {$/;"	f	namespace:android::hardware::camera::provider::V2_7::implementation	typeref:typename:ICameraProvider *
HIDL_FETCH_IHealth	guest/hals/health/health.cpp	/^extern "C" IHealth* HIDL_FETCH_IHealth(const char* instance) {$/;"	f	typeref:typename:IHealth *
HMacImplementation	host/libs/confui/sign.cc	/^class HMacImplementation {$/;"	c	namespace:cuttlefish::confui	file:
HMacer	host/libs/confui/sign.cc	/^  using HMacer = HMacImplementation;$/;"	t	function:cuttlefish::confui::sign	typeref:typename:HMacImplementation	file:
HOST_CROSS_2ND_ARCH	vsoc_arm64/BoardConfig.mk	/^HOST_CROSS_2ND_ARCH :=$/;"	m
HOST_CROSS_2ND_ARCH	vsoc_arm64_only/BoardConfig.mk	/^HOST_CROSS_2ND_ARCH :=$/;"	m
HOST_CROSS_2ND_ARCH	vsoc_arm_only/BoardConfig.mk	/^HOST_CROSS_2ND_ARCH :=$/;"	m
HOST_CROSS_ARCH	vsoc_arm64/BoardConfig.mk	/^HOST_CROSS_ARCH := arm64$/;"	m
HOST_CROSS_ARCH	vsoc_arm64_only/BoardConfig.mk	/^HOST_CROSS_ARCH := arm64$/;"	m
HOST_CROSS_ARCH	vsoc_arm_only/BoardConfig.mk	/^HOST_CROSS_ARCH := arm64$/;"	m
HOST_CROSS_OS	vsoc_arm64/BoardConfig.mk	/^HOST_CROSS_OS := linux_bionic$/;"	m
HOST_CROSS_OS	vsoc_arm64_only/BoardConfig.mk	/^HOST_CROSS_OS := linux_bionic$/;"	m
HOST_CROSS_OS	vsoc_arm_only/BoardConfig.mk	/^HOST_CROSS_OS := linux_bionic$/;"	m
HOST_TOOLS	host/commands/fetcher/fetch_cvd.cc	/^const std::string HOST_TOOLS = "cvd-host_package.tar.gz";$/;"	v	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:const std::string
HalCmdFetcherLoop	host/libs/confui/host_server.cc	/^void HostServer::HalCmdFetcherLoop() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
HalHostVsockPort	host/libs/confui/host_server.cc	/^static int HalHostVsockPort() {$/;"	f	namespace:cuttlefish::confui	typeref:typename:int	file:
HandleAcceptCall	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleAcceptCall(const Client& client) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleActivateDataCall	host/commands/modem_simulator/data_service.cpp	/^void DataService::HandleActivateDataCall(const Client& client,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
HandleBroadcastConfig	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleBroadcastConfig(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleCLIP	host/commands/modem_simulator/sup_service.cpp	/^void SupService::HandleCLIP(const Client& client) {$/;"	f	class:cuttlefish::SupService	typeref:typename:void
HandleCLIR	host/commands/modem_simulator/sup_service.cpp	/^void SupService::HandleCLIR(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SupService	typeref:typename:void
HandleCSIM_IO	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleCSIM_IO(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleCallForward	host/commands/modem_simulator/sup_service.cpp	/^void SupService::HandleCallForward(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SupService	typeref:typename:void
HandleCallWaiting	host/commands/modem_simulator/sup_service.cpp	/^void SupService::HandleCallWaiting(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SupService	typeref:typename:void
HandleCancelUssd	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleCancelUssd(const Client& client,$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleCdmaRoamingPreference	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleCdmaRoamingPreference(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleCdmaSubscriptionSource	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleCdmaSubscriptionSource(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleChangeOrEnterPIN	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleChangeOrEnterPIN(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleChangePassword	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleChangePassword(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleClientMessage	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::HandleClientMessage(const Json::Value& server_message) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
HandleCloseLogicalChannel	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleCloseLogicalChannel(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleCommand	host/commands/modem_simulator/modem_service.cpp	/^void CommandHandler::HandleCommand(const Client& client,$/;"	f	class:cuttlefish::CommandHandler	typeref:typename:void
HandleCommandDefaultSupported	host/commands/modem_simulator/modem_service.cpp	/^void ModemService::HandleCommandDefaultSupported(const Client& client) {$/;"	f	class:cuttlefish::ModemService	typeref:typename:void
HandleConfigMessage	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::HandleConfigMessage(const Json::Value& server_message) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
HandleConnection	common/frontend/socket_vsock_proxy/main.cpp	/^void HandleConnection(cuttlefish::SharedFD vsock,$/;"	f	namespace:__anon913036200111	typeref:typename:void
HandleCurrentCalls	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleCurrentCalls(const Client& client) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleDataNetworkRegistration	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleDataNetworkRegistration(const Client& client,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleDeleteSmsOnSim	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleDeleteSmsOnSim(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleDial	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleDial(const Client& client, const std::string& command) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleEmergencyMode	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleEmergencyMode(const Client& client,$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleEnterDataState	host/commands/modem_simulator/data_service.cpp	/^void DataService::HandleEnterDataState(const Client& client,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
HandleFacilityLock	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleFacilityLock(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleForward	host/frontend/webrtc_operator/device_handler.cpp	/^void DeviceHandler::HandleForward(const Json::Value& message) {$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:void
HandleGetIMEI	host/commands/modem_simulator/misc_service.cpp	/^void MiscService::HandleGetIMEI(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::MiscService	typeref:typename:void
HandleGetIMSI	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleGetIMSI(const Client& client) {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleGetIccId	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleGetIccId(const Client& client) {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleGetPreferredNetworkType	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleGetPreferredNetworkType(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleGetSmscAddress	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleGetSmscAddress(const Client& client) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleHangup	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleHangup(const Client& client,$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleInSession	host/libs/confui/session.cc	/^bool Session::HandleInSession(SharedFD hal_cli, const FsmInput fsm_input,$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
HandleIncomingMessage	host/commands/kernel_log_monitor/kernel_log_server.cc	/^bool KernelLogServer::HandleIncomingMessage() {$/;"	f	class:monitor::KernelLogServer	typeref:typename:bool
HandleInit	host/libs/confui/session.cc	/^bool Session::HandleInit(SharedFD hal_cli, const FsmInput fsm_input,$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
HandleMessage	host/frontend/webrtc/lib/camera_streamer.cpp	/^void CameraStreamer::HandleMessage(const Json::Value& message) {$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:void
HandleMessage	host/frontend/webrtc/lib/camera_streamer.cpp	/^void CameraStreamer::HandleMessage(const std::vector<char>& message) {$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:void
HandleMessage	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::HandleMessage(const Json::Value &message) {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
HandleModemCommand	host/commands/modem_simulator/modem_service.cpp	/^bool ModemService::HandleModemCommand(const Client& client,$/;"	f	class:cuttlefish::ModemService	typeref:typename:bool
HandleMute	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleMute(const Client& client, const std::string& command) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleOpenLogicalChannel	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleOpenLogicalChannel(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandlePDPContext	host/commands/modem_simulator/data_service.cpp	/^void DataService::HandlePDPContext(const Client& client,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
HandleQueryAvailableNetwork	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleQueryAvailableNetwork(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleQueryDataCallList	host/commands/modem_simulator/data_service.cpp	/^void DataService::HandleQueryDataCallList(const Client& client) {$/;"	f	class:cuttlefish::DataService	typeref:typename:void
HandleQueryNetworkSelectionMode	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleQueryNetworkSelectionMode(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleQueryPDPContextList	host/commands/modem_simulator/data_service.cpp	/^void DataService::HandleQueryPDPContextList(const Client& client) {$/;"	f	class:cuttlefish::DataService	typeref:typename:void
HandleQueryRemainTimes	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleQueryRemainTimes(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleQuerySupportedTechs	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleQuerySupportedTechs(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleRadioPower	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleRadioPower(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleRadioPowerReq	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleRadioPowerReq(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleReadDynamicParam	host/commands/modem_simulator/data_service.cpp	/^void DataService::HandleReadDynamicParam(const Client& client,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
HandleReceiveRemoteCTEC	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleReceiveRemoteCTEC(const Client& client,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleReceiveRemoteSMS	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleReceiveRemoteSMS(const Client& \/*client*\/, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleReceiveRemoteSignal	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleReceiveRemoteSignal(const Client& client,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleReceiveRemoteVoiceDataReg	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleReceiveRemoteVoiceDataReg(const Client& client,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleReceiveSMS	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleReceiveSMS(PDUParser sms_pdu) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleRegistrationRequest	host/frontend/webrtc_operator/device_handler.cpp	/^void DeviceHandler::HandleRegistrationRequest(const Json::Value& message) {$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:void
HandleRejectCall	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleRejectCall(const Client& client) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleReloadConfigCommand	host/commands/wmediumd_control/main.cpp	/^bool HandleReloadConfigCommand(cuttlefish::WmediumdController& client,$/;"	f	typeref:typename:bool
HandleRemoteCall	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleRemoteCall(const Client& client,$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleReportStkServiceIsRunning	host/commands/modem_simulator/stk_service.cpp	/^void StkService::HandleReportStkServiceIsRunning(const Client& client) {$/;"	f	class:cuttlefish::StkService	typeref:typename:void
HandleRequestOperator	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleRequestOperator(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleSIMStatusReq	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleSIMStatusReq(const Client& client) {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleSIM_IO	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleSIM_IO(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleSMSAcknowledge	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleSMSAcknowledge(const Client& client, std::string& \/*command*\/) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleSMSStatuReport	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleSMSStatuReport(PDUParser sms_pdu, int message_reference) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleSendDtmf	host/commands/modem_simulator/call_service.cpp	/^void CallService::HandleSendDtmf(const Client& client,$/;"	f	class:cuttlefish::CallService	typeref:typename:void
HandleSendEnvelope	host/commands/modem_simulator/stk_service.cpp	/^void StkService::HandleSendEnvelope(const Client& client , std::string& command) {$/;"	f	class:cuttlefish::StkService	typeref:typename:void
HandleSendSMS	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleSendSMS(const Client& client, std::string& \/*command*\/) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleSendSMSPDU	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleSendSMSPDU(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleSendTerminalResponseToSim	host/commands/modem_simulator/stk_service.cpp	/^void StkService::HandleSendTerminalResponseToSim(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::StkService	typeref:typename:void
HandleSetNetworkSelectionMode	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleSetNetworkSelectionMode(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleSetPreferredNetworkType	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleSetPreferredNetworkType(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleSetSmscAddress	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleSetSmscAddress(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleSetSnrCommand	host/commands/wmediumd_control/main.cpp	/^bool HandleSetSnrCommand(cuttlefish::WmediumdController& client,$/;"	f	typeref:typename:bool
HandleSignalStrength	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleSignalStrength(const Client& client) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleSimAuthentication	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleSimAuthentication(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleSuppServiceNotifications	host/commands/modem_simulator/sup_service.cpp	/^void SupService::HandleSuppServiceNotifications(const Client& client, std::string& \/*command*\//;"	f	class:cuttlefish::SupService	typeref:typename:void
HandleSurfaceFrame	host/libs/wayland/wayland_surfaces.cpp	/^void Surfaces::HandleSurfaceFrame(std::uint32_t display_number,$/;"	f	class:wayland::Surfaces	typeref:typename:void
HandleTransmitLogicalChannel	host/commands/modem_simulator/sim_service.cpp	/^void SimService::HandleTransmitLogicalChannel(const Client& client,$/;"	f	class:cuttlefish::SimService	typeref:typename:void
HandleUSSD	host/commands/modem_simulator/sup_service.cpp	/^void SupService::HandleUSSD(const Client& client, std::string& \/*command*\/) {$/;"	f	class:cuttlefish::SupService	typeref:typename:void
HandleVoiceNetworkRegistration	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::HandleVoiceNetworkRegistration(const Client& client,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
HandleWaitStop	host/libs/confui/session.cc	/^bool Session::HandleWaitStop(SharedFD hal_cli, const FsmInput fsm_input) {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
HandleWriteSMSPduToSim	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleWriteSMSPduToSim(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
HandleWriteSMSToSim	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::HandleWriteSMSToSim(const Client& client, std::string& command) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
Hardware Configuration	host/frontend/webrtc_operator/assets/client.html	/^        <h3>Hardware Configuration<\/h3>$/;"	j
HardwareAuthToken	host/libs/confui/cbor.h	/^  using HardwareAuthToken =$/;"	t	class:cuttlefish::confui::Cbor	typeref:typename:android::hardware::keymaster::V4_0::HardwareAuthToken
HasAlias	common/libs/utils/flag_parser.cpp	/^bool Flag::HasAlias(const FlagAlias& test) const {$/;"	f	class:cuttlefish::Flag	typeref:typename:bool
HasConfig	host/libs/config/config_flag.cpp	/^  bool HasConfig(const std::string& name) const {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:bool	file:
HasCredentials	common/libs/utils/unix_sockets.cpp	/^bool UnixSocketMessage::HasCredentials() {$/;"	f	class:cuttlefish::UnixSocketMessage	typeref:typename:bool
HasFileDescriptors	common/libs/utils/unix_sockets.cpp	/^bool UnixSocketMessage::HasFileDescriptors() {$/;"	f	class:cuttlefish::UnixSocketMessage	typeref:typename:bool
HasKey	host/commands/secure_env/fragile_tpm_storage.cpp	/^bool FragileTpmStorage::HasKey(const Json::Value& key) const {$/;"	f	class:cuttlefish::FragileTpmStorage	typeref:typename:bool
HasKey	host/commands/secure_env/insecure_fallback_storage.cpp	/^bool InsecureFallbackStorage::HasKey(const Json::Value& key) const {$/;"	f	class:cuttlefish::InsecureFallbackStorage	typeref:typename:bool
Headers	host/commands/fetcher/build_api.cc	/^std::vector<std::string> BuildApi::Headers() {$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::vector<std::string>
HealthImpl	guest/hals/health/health.cpp	/^  HealthImpl(std::unique_ptr<healthd_config>&& config)$/;"	f	class:android::hardware::health::V2_1::implementation::HealthImpl	file:
HealthImpl	guest/hals/health/health.cpp	/^class HealthImpl : public Health {$/;"	c	namespace:android::hardware::health::V2_1::implementation	file:
Height	host/libs/confui/host_renderer.h	/^  int Height() const { return h_; }$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:int
Help	common/libs/utils/flag_parser.cpp	/^Flag Flag::Help(const std::string& help) && {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag
Help	common/libs/utils/flag_parser.cpp	/^Flag& Flag::Help(const std::string& help) & {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag &
HelpFlag	common/libs/utils/flag_parser.cpp	/^Flag HelpFlag(const std::vector<Flag>& flags, const std::string& text) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
Hex2ToByte	host/commands/modem_simulator/pdu_parser.cpp	/^int PDUParser::Hex2ToByte(const std::string& hex) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:int
HexCharToInt	host/commands/modem_simulator/pdu_parser.cpp	/^int PDUParser::HexCharToInt(char c) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:int
HmacSerializable	host/commands/secure_env/hmac_serializable.cpp	/^HmacSerializable::HmacSerializable($/;"	f	class:cuttlefish::HmacSerializable
HmacSerializable	host/commands/secure_env/hmac_serializable.h	/^class HmacSerializable : public keymaster::Serializable {$/;"	c	namespace:cuttlefish
HoldingBuffer	host/frontend/webrtc/audio_handler.h	/^  struct HoldingBuffer {$/;"	s	class:cuttlefish::AudioHandler
HostArch	common/libs/utils/environment.cpp	/^Arch HostArch() {$/;"	f	namespace:cuttlefish	typeref:typename:Arch
HostArchStr	common/libs/utils/environment.cpp	/^std::string HostArchStr() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
HostBinaryPath	host/libs/config/cuttlefish_config.cpp	/^std::string HostBinaryPath(const std::string& binary_name) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
HostError	common/libs/confui/protocol_types.h	/^struct HostError {$/;"	s	namespace:cuttlefish::confui
HostMessageFetcherLoop	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^void TrustyConfirmationUI::HostMessageFetcherLoop() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:void
HostModeCtrl	host/libs/confui/host_mode_ctrl.h	/^  HostModeCtrl() : atomic_mode_(ModeType::kAndroidMode) {}$/;"	f	class:cuttlefish::HostModeCtrl
HostModeCtrl	host/libs/confui/host_mode_ctrl.h	/^class HostModeCtrl {$/;"	c	namespace:cuttlefish
HostServer	host/libs/confui/host_server.cc	/^HostServer::HostServer($/;"	f	class:cuttlefish::confui::HostServer
HostServer	host/libs/confui/host_server.h	/^class HostServer : public HostVirtualInput {$/;"	c	namespace:cuttlefish::confui
HostSupportsQemuCli	host/libs/config/cuttlefish_config.cpp	/^bool HostSupportsQemuCli() {$/;"	f	namespace:cuttlefish	typeref:typename:bool
HostToolsCrc	host/libs/config/host_tools_version.cpp	/^std::map<std::string, uint32_t> HostToolsCrc() {$/;"	f	namespace:cuttlefish	typeref:typename:std::map<std::string,uint32_t>
HostToolsUpdated	host/commands/start/main.cc	/^bool HostToolsUpdated() {$/;"	f	namespace:__anon8e1e78490111	typeref:typename:bool
HostVirtualInput	host/libs/confui/host_virtual_input.h	/^class HostVirtualInput {$/;"	c	namespace:cuttlefish::confui
HttpClientError	host/commands/fetcher/curl_wrapper.h	/^  bool HttpClientError() { return http_code >= 400 && http_code <= 499; }$/;"	f	struct:cuttlefish::CurlResponse	typeref:typename:bool
HttpInfo	host/commands/fetcher/curl_wrapper.h	/^  bool HttpInfo() { return http_code >= 100 && http_code <= 199; }$/;"	f	struct:cuttlefish::CurlResponse	typeref:typename:bool
HttpRedirect	host/commands/fetcher/curl_wrapper.h	/^  bool HttpRedirect() { return http_code >= 300 && http_code <= 399; }$/;"	f	struct:cuttlefish::CurlResponse	typeref:typename:bool
HttpServerError	host/commands/fetcher/curl_wrapper.h	/^  bool HttpServerError() { return http_code >= 500 && http_code <= 599; }$/;"	f	struct:cuttlefish::CurlResponse	typeref:typename:bool
HttpStatusCode	host/libs/websocket/websocket_handler.h	/^enum class HttpStatusCode : int {$/;"	g	namespace:cuttlefish	typeref:typename:int
HttpSuccess	host/commands/fetcher/curl_wrapper.h	/^  bool HttpSuccess() { return http_code >= 200 && http_code <= 299; }$/;"	f	struct:cuttlefish::CurlResponse	typeref:typename:bool
HvcNum	host/libs/vm_manager/crosvm_builder.cpp	/^int CrosvmBuilder::HvcNum() { return hvc_num_; }$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:int
ID	host/libs/allocd/request.h	/^  ID,                \/\/ Allocate and return a new Session ID$/;"	e	enum:cuttlefish::RequestType
INIT_BOOTCHART	shared/BoardConfig.mk	/^INIT_BOOTCHART := true$/;"	m
INJECT	host/commands/assemble_cvd/disk_flags.cc	/^  INJECT(BootImageRepacker(const CuttlefishConfig& config)) : config_(config) {}$/;"	f	class:cuttlefish::BootImageRepacker	file:
INJECT	host/commands/assemble_cvd/disk_flags.cc	/^  INJECT(InitializeAccessKregistryImage($/;"	f	class:cuttlefish::InitializeAccessKregistryImage	file:
INJECT	host/commands/assemble_cvd/disk_flags.cc	/^  INJECT(InitializeMetadataImage()) {}$/;"	f	class:cuttlefish::InitializeMetadataImage	file:
INJECT	host/commands/assemble_cvd/flag_feature.cpp	/^  INJECT(ParseGflagsImpl(ConfigFlag& config)) : config_(config) {}$/;"	f	class:cuttlefish::ParseGflagsImpl	file:
INJECT	host/commands/run_cvd/boot_state_machine.cc	/^  INJECT(CvdBootStateMachine(ProcessLeader& process_leader,$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	file:
INJECT	host/commands/run_cvd/boot_state_machine.cc	/^  INJECT(ProcessLeader(const CuttlefishConfig& config)) : config_(config) {}$/;"	f	class:cuttlefish::__anone7ed366f0111::ProcessLeader	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT($/;"	f	class:cuttlefish::GnssGrpcProxyServer	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(BluetoothConnector(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::BluetoothConnector	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(ConfigServer(const CuttlefishConfig::InstanceSpecific& instance))$/;"	f	class:cuttlefish::ConfigServer	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(ConsoleForwarder(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::ConsoleForwarder	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(KernelLogMonitor(const CuttlefishConfig::InstanceSpecific& instance))$/;"	f	class:cuttlefish::KernelLogMonitor	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(LogcatReceiver(const CuttlefishConfig::InstanceSpecific& instance))$/;"	f	class:cuttlefish::LogcatReceiver	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(MetricsService(const CuttlefishConfig& config)) : config_(config) {}$/;"	f	class:cuttlefish::MetricsService	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(OpenWrt(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::OpenWrt	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(RootCanal(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::RootCanal	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(SecureEnvironment(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::SecureEnvironment	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(TombstoneReceiver(const CuttlefishConfig::InstanceSpecific& instance))$/;"	f	class:cuttlefish::TombstoneReceiver	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(VehicleHalServer(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::VehicleHalServer	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(VmmCommands(const CuttlefishConfig& config, VmManager& vmm))$/;"	f	class:cuttlefish::VmmCommands	file:
INJECT	host/commands/run_cvd/launch.cc	/^  INJECT(WmediumdServer(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::WmediumdServer	file:
INJECT	host/commands/run_cvd/launch_modem.cpp	/^  INJECT(ModemSimulator(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::ModemSimulator	file:
INJECT	host/commands/run_cvd/launch_streamer.cpp	/^  INJECT(StreamerSockets(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::__anon6b0274e10111::StreamerSockets	file:
INJECT	host/commands/run_cvd/launch_streamer.cpp	/^  INJECT(WebRtcServer(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	file:
INJECT	host/commands/run_cvd/main.cc	/^  INJECT($/;"	f	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	file:
INJECT	host/commands/run_cvd/server_loop.cpp	/^  INJECT(ServerLoopImpl(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	file:
INJECT	host/commands/run_cvd/validate.cpp	/^  INJECT(ValidateHostConfigurationFeature()) {}$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateHostConfigurationFeature	file:
INJECT	host/commands/run_cvd/validate.cpp	/^  INJECT(ValidateTapDevices(const CuttlefishConfig::InstanceSpecific& instance))$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateTapDevices	file:
INJECT	host/libs/config/adb/config.cpp	/^  INJECT(AdbConfigFragmentImpl(AdbConfig& config)) : config_(config) {}$/;"	f	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	file:
INJECT	host/libs/config/adb/data.cpp	/^  INJECT(AdbConfigImpl()) {}$/;"	f	class:cuttlefish::AdbConfigImpl	file:
INJECT	host/libs/config/adb/flags.cpp	/^  INJECT(AdbConfigFlagImpl(AdbConfig& config, ConfigFlag& config_flag))$/;"	f	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	file:
INJECT	host/libs/config/adb/launch.cpp	/^  INJECT(AdbConnector(const AdbHelper& helper)) : helper_(helper) {}$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbConnector	file:
INJECT	host/libs/config/adb/launch.cpp	/^  INJECT(AdbHelper(const CuttlefishConfig::InstanceSpecific& instance,$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	file:
INJECT	host/libs/config/adb/launch.cpp	/^  INJECT(SocketVsockProxy(const AdbHelper& helper,$/;"	f	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	file:
INJECT	host/libs/config/adb/test.cpp	/^  INJECT(TestData(AdbConfig& config, AdbConfigFragment& fragment))$/;"	f	struct:cuttlefish::TestData	file:
INJECT	host/libs/config/config_flag.cpp	/^  INJECT(ConfigFlagImpl(ConfigReader& cr, SystemImageDirFlag& s))$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	file:
INJECT	host/libs/config/config_flag.cpp	/^  INJECT(ConfigFlagPlaceholderImpl()) {}$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagPlaceholderImpl	file:
INJECT	host/libs/config/config_flag.cpp	/^  INJECT(SystemImageDirFlagImpl()) {$/;"	f	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	file:
INJECT	host/libs/config/custom_actions.cpp	/^  INJECT(CustomActionConfigImpl(ConfigFlag& config)) : config_(config) {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	file:
INJECT	host/libs/config/data_image.cpp	/^  INJECT(FixedDataImagePath(ANNOTATED(DataImageTag, std::string) path))$/;"	f	class:cuttlefish::FixedDataImagePath	file:
INJECT	host/libs/config/data_image.cpp	/^  INJECT(FixedMiscImagePath(ANNOTATED(MiscImageTag, std::string) path))$/;"	f	class:cuttlefish::FixedMiscImagePath	file:
INJECT	host/libs/config/data_image.cpp	/^  INJECT(InitializeDataImageImpl(const CuttlefishConfig& config,$/;"	f	class:cuttlefish::InitializeDataImageImpl	file:
INJECT	host/libs/config/data_image.cpp	/^  INJECT(InitializeEspImageImpl(ANNOTATED(EspImageTag, std::string) esp_image,$/;"	f	class:cuttlefish::InitializeEspImageImpl	file:
INJECT	host/libs/config/data_image.cpp	/^  INJECT(InitializeMiscImageImpl(MiscImagePath& misc_path))$/;"	f	class:cuttlefish::InitializeMiscImageImpl	file:
INOTIFY_MAX_EVENT_SIZE	guest/monitoring/tombstone_transmit/tombstone_transmit.cpp	/^#define INOTIFY_MAX_EVENT_SIZE /;"	d	file:
INTENT_ACTION_BLUETOOTH_CHANGED	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public static final String INTENT_ACTION_BLUETOOTH_CHANGED = "com.android.google.gce.gceserv/;"	f	class:GceService
INTENT_ACTION_CONFIGURE	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public static final String INTENT_ACTION_CONFIGURE = "com.android.google.gce.gceservice.CONF/;"	f	class:GceService
INTENT_ACTION_NETWORK_CHANGED	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public static final String INTENT_ACTION_NETWORK_CHANGED = "com.android.google.gce.gceservic/;"	f	class:GceService
INTERNAL_extra_source	tools/create_base_image.go	/^var INTERNAL_extra_source string$/;"	v	package:main	typeref:typename:string
INTERROGATE	host/commands/modem_simulator/sup_service.h	/^      INTERROGATE   = 2,$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::CallForwardInfoStatus
INVALID_HEX_CHAR	guest/hals/ril/reference-libril/ril_service.cpp	/^#define INVALID_HEX_CHAR /;"	d	file:
IOCTL_VM_SOCKETS_GET_LOCAL_CID	common/libs/fs/vm_sockets.h	/^#define IOCTL_VM_SOCKETS_GET_LOCAL_CID /;"	d
IOError	host/libs/audio_connector/buffers.h	/^  IOError,$/;"	e	enum:cuttlefish::Status
IR	host/commands/modem_simulator/sim_service.h	/^      IR = 5,  \/\/ Barr all call, when roaming outside Home Country$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
ISIM_ABSENT	guest/hals/ril/reference-ril/reference-ril.c	/^    ISIM_ABSENT = 12,$/;"	e	enum:__anon70d7df6f0303	file:
ISIM_NETWORK_PERSONALIZATION	guest/hals/ril/reference-ril/reference-ril.c	/^    ISIM_NETWORK_PERSONALIZATION = 17,$/;"	e	enum:__anon70d7df6f0303	file:
ISIM_NOT_READY	guest/hals/ril/reference-ril/reference-ril.c	/^    ISIM_NOT_READY = 13,$/;"	e	enum:__anon70d7df6f0303	file:
ISIM_PIN	guest/hals/ril/reference-ril/reference-ril.c	/^    ISIM_PIN = 15,$/;"	e	enum:__anon70d7df6f0303	file:
ISIM_PUK	guest/hals/ril/reference-ril/reference-ril.c	/^    ISIM_PUK = 16,$/;"	e	enum:__anon70d7df6f0303	file:
ISIM_READY	guest/hals/ril/reference-ril/reference-ril.c	/^    ISIM_READY = 14,$/;"	e	enum:__anon70d7df6f0303	file:
IS_MULTIMODE	guest/hals/ril/reference-ril/reference-ril.c	/^#define IS_MULTIMODE(/;"	d	file:
ITERATION_PERIOD_MS	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    private static final int ITERATION_PERIOD_MS = 10 * 1000;$/;"	f	class:JobExecutor	file:
IfaceConfig	host/commands/assemble_cvd/alloc.h	/^struct IfaceConfig {$/;"	s	namespace:cuttlefish
IfaceData	host/commands/assemble_cvd/alloc.h	/^struct IfaceData {$/;"	s	namespace:cuttlefish
IfaceTyToStr	host/libs/allocd/utils.cpp	/^std::string IfaceTyToStr(IfaceType iface) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
IfaceTyToStrMap	host/libs/allocd/utils.cpp	/^const std::map<IfaceType, std::string> IfaceTyToStrMap = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<IfaceType,std::string>
IfaceType	host/libs/allocd/request.h	/^enum class IfaceType : uint16_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint16_t
IgnoreOnFail	tools/create_base_image.go	/^    IgnoreOnFail OnFail = iota$/;"	c	package:main	typeref:type:OnFail
ImagePartition	host/libs/image_aggregator/image_aggregator.h	/^struct ImagePartition {$/;"	s	namespace:cuttlefish
ImagePartitionType	host/libs/image_aggregator/image_aggregator.h	/^enum ImagePartitionType {$/;"	g	namespace:cuttlefish
Impl	host/commands/secure_env/in_process_tpm.cpp	/^  Impl() {$/;"	f	class:cuttlefish::InProcessTpm::Impl	file:
Impl	host/commands/secure_env/in_process_tpm.cpp	/^class InProcessTpm::Impl {$/;"	c	class:cuttlefish::InProcessTpm	file:
Impl	host/frontend/webrtc/lib/local_recorder.cpp	/^class LocalRecorder::Impl {$/;"	c	class:cuttlefish::webrtc_streaming::LocalRecorder	file:
Impl	host/frontend/webrtc/lib/streamer.cpp	/^class Streamer::Impl : public WsConnectionObserver {$/;"	c	class:cuttlefish::webrtc_streaming::Streamer	file:
Impls	host/libs/config/inject.h	/^    static fruit::Component<Deps> Impls() {$/;"	f	struct:cuttlefish::Multibindings::Bases	typeref:typename:fruit::Component<Deps>
Impls	host/libs/config/inject.h	/^    static fruit::Component<Deps> Impls() {$/;"	f	struct:cuttlefish::Multibindings::OneBase	typeref:typename:fruit::Component<Deps>
ImportKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ImportKey(const ImportKeyRequest& request, ImportKeyResponse* response) {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ImportKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ImportKey(const ImportKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ImportWrappedKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ImportWrappedKey(const ImportWrappedKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ImportWrappedKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::ImportWrappedKey(const ImportWrappedKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
ImsCdmaSms	guest/hals/ril/reference-libril/ril_service.cpp	/^struct ImsCdmaSms {$/;"	s	file:
InGroup	common/libs/utils/subprocess.h	/^  bool InGroup() const { return in_group_; }$/;"	f	class:cuttlefish::SubprocessOptions	typeref:typename:bool
InGroup	common/libs/utils/subprocess.h	/^  void InGroup(bool in_group) {$/;"	f	class:cuttlefish::SubprocessOptions	typeref:typename:void
InGroup	common/libs/utils/users.cpp	/^bool InGroup(const std::string& group) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
InProcessTpm	host/commands/secure_env/in_process_tpm.cpp	/^InProcessTpm::InProcessTpm() : impl_(new Impl()) {}$/;"	f	class:cuttlefish::InProcessTpm
InProcessTpm	host/commands/secure_env/in_process_tpm.h	/^class InProcessTpm : public Tpm {$/;"	c	namespace:cuttlefish
IncrementalOTA_GetBlockDifferences	shared/releasetools.py	/^def IncrementalOTA_GetBlockDifferences(info):$/;"	f
Index	common/libs/net/network_interface.h	/^  size_t Index() const {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:size_t
InfoCommand	host/libs/audio_connector/commands.h	/^  InfoCommand(AudioCommandType type, uint32_t start_id, size_t count, R* reply)$/;"	f	class:cuttlefish::InfoCommand
InfoCommand	host/libs/audio_connector/commands.h	/^class InfoCommand : public AudioCommand {$/;"	c	namespace:cuttlefish
Init	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::Init() { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
Init	host/libs/confui/cbor.cc	/^void Cbor::Init() {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:void
InitBootloaderEnvPartition	host/commands/assemble_cvd/boot_config.cc	/^bool InitBootloaderEnvPartition(const CuttlefishConfig& config,$/;"	f	namespace:cuttlefish	typeref:typename:bool
InitDefaultNvramConfig	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InitDefaultNvramConfig() {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:void
InitFilesystemAndCreateConfig	host/commands/assemble_cvd/assemble_cvd.cc	/^const CuttlefishConfig* InitFilesystemAndCreateConfig($/;"	f	namespace:cuttlefish::__anon1e335d460111	typeref:typename:const CuttlefishConfig *
InitMicrophone	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::InitMicrophone() { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
InitNvramConfigService	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InitNvramConfigService(size_t num_instances, int sim_type) {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:void
InitPlayout	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::InitPlayout() { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
InitRamFsTag	host/libs/config/data_image.cpp	/^struct InitRamFsTag {};$/;"	s	namespace:cuttlefish	file:
InitRecording	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::InitRecording() { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
InitSpeaker	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::InitSpeaker() { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
Initialize	guest/hals/keymaster/remote/remote_keymaster.cpp	/^bool RemoteKeymaster::Initialize() {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:bool
Initialize	guest/hals/keymint/remote/remote_keymaster.cpp	/^bool RemoteKeymaster::Initialize() {$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:bool
Initialize	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::Initialize($/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
InitializeAccessKregistryImage	host/commands/assemble_cvd/disk_flags.cc	/^class InitializeAccessKregistryImage : public Feature {$/;"	c	namespace:cuttlefish	file:
InitializeCommandHandlers	host/commands/modem_simulator/call_service.cpp	/^std::vector<CommandHandler> CallService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::CallService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/data_service.cpp	/^std::vector<CommandHandler> DataService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::DataService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/misc_service.cpp	/^std::vector<CommandHandler> MiscService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::MiscService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/network_service.cpp	/^std::vector<CommandHandler> NetworkService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/sim_service.cpp	/^std::vector<CommandHandler> SimService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::SimService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/sms_service.cpp	/^std::vector<CommandHandler> SmsService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::SmsService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/stk_service.cpp	/^std::vector<CommandHandler> StkService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::StkService	typeref:typename:std::vector<CommandHandler>
InitializeCommandHandlers	host/commands/modem_simulator/sup_service.cpp	/^std::vector<CommandHandler> SupService::InitializeCommandHandlers() {$/;"	f	class:cuttlefish::SupService	typeref:typename:std::vector<CommandHandler>
InitializeCuttlefishConfiguration	host/commands/assemble_cvd/flags.cc	/^CuttlefishConfig InitializeCuttlefishConfiguration($/;"	f	namespace:cuttlefish	typeref:typename:CuttlefishConfig
InitializeDataImage	host/libs/config/data_image.h	/^class InitializeDataImage : public Feature {};$/;"	c	namespace:cuttlefish
InitializeDataImageComponent	host/libs/config/data_image.cpp	/^InitializeDataImageComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig,DataImagePath>,InitializeDataImage>
InitializeDataImageImpl	host/libs/config/data_image.cpp	/^class InitializeDataImageImpl : public InitializeDataImage {$/;"	c	namespace:cuttlefish	file:
InitializeEspImage	host/libs/config/data_image.h	/^class InitializeEspImage : public Feature {};$/;"	c	namespace:cuttlefish
InitializeEspImageComponent	host/libs/config/data_image.cpp	/^fruit::Component<InitializeEspImage> InitializeEspImageComponent($/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<InitializeEspImage>
InitializeEspImageImpl	host/libs/config/data_image.cpp	/^class InitializeEspImageImpl : public InitializeEspImage {$/;"	c	namespace:cuttlefish	file:
InitializeFacilityLock	host/commands/modem_simulator/sim_service.cpp	/^void SimService::InitializeFacilityLock() {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
InitializeLwsObjects	host/libs/websocket/websocket_server.cpp	/^void WebSocketServer::InitializeLwsObjects() {$/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:void
InitializeMetadataImage	host/commands/assemble_cvd/disk_flags.cc	/^class InitializeMetadataImage : public Feature {$/;"	c	namespace:cuttlefish	file:
InitializeMiscImage	host/libs/config/data_image.h	/^class InitializeMiscImage : public Feature {};$/;"	c	namespace:cuttlefish
InitializeMiscImageComponent	host/libs/config/data_image.cpp	/^InitializeMiscImageComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<MiscImagePath>,InitializeMiscImage>
InitializeMiscImageImpl	host/libs/config/data_image.cpp	/^class InitializeMiscImageImpl : public InitializeMiscImage {$/;"	c	namespace:cuttlefish	file:
InitializeNetworkConfiguration	common/libs/device_config/host_device_config.cpp	/^bool InitializeNetworkConfiguration(const CuttlefishConfig& cuttlefish_config,$/;"	f	namespace:cuttlefish::__anonf277137d0111	typeref:typename:bool
InitializeNetworkOperator	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::InitializeNetworkOperator() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
InitializeScreenConfiguration	common/libs/device_config/host_device_config.cpp	/^void InitializeScreenConfiguration(const CuttlefishConfig& cuttlefish_config,$/;"	f	namespace:cuttlefish::__anonf277137d0111	typeref:typename:void
InitializeServiceState	host/commands/modem_simulator/call_service.cpp	/^void CallService::InitializeServiceState() {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
InitializeServiceState	host/commands/modem_simulator/data_service.cpp	/^void DataService::InitializeServiceState() {$/;"	f	class:cuttlefish::DataService	typeref:typename:void
InitializeServiceState	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::InitializeServiceState() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
InitializeServiceState	host/commands/modem_simulator/sim_service.cpp	/^void SimService::InitializeServiceState() {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
InitializeServiceState	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::InitializeServiceState() {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
InitializeServiceState	host/commands/modem_simulator/sup_service.cpp	/^void SupService::InitializeServiceState() {$/;"	f	class:cuttlefish::SupService	typeref:typename:void
InitializeSimFileSystemAndSimState	host/commands/modem_simulator/sim_service.cpp	/^void SimService::InitializeSimFileSystemAndSimState() {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
InitializeSimOperator	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::InitializeSimOperator() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
Initialized	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::Initialized() const { return true; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
InjectHingeAngle	guest/commands/sensor_injection/main.cpp	/^void InjectHingeAngle(int angle) {$/;"	f	typeref:typename:void
InjectOrientation	guest/commands/sensor_injection/main.cpp	/^void InjectOrientation(bool portrait) {$/;"	f	typeref:typename:void
InputChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^InputChannelHandler::InputChannelHandler($/;"	f	class:cuttlefish::webrtc_streaming::InputChannelHandler
InputChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^class InputChannelHandler : public webrtc::DataChannelObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming	file:
InputEvent	guest/commands/vsoc_input_service/vsoc_input_service.h	/^struct InputEvent {$/;"	s	namespace:cuttlefish::input_events
InputEventBuffer	host/frontend/webrtc/connection_observer.cpp	/^struct InputEventBuffer {$/;"	s	namespace:cuttlefish	file:
InputEventBufferImpl	host/frontend/webrtc/connection_observer.cpp	/^  InputEventBufferImpl() {$/;"	f	struct:cuttlefish::InputEventBufferImpl	file:
InputEventBufferImpl	host/frontend/webrtc/connection_observer.cpp	/^struct InputEventBufferImpl : public InputEventBuffer {$/;"	s	namespace:cuttlefish	file:
InputSockets	host/frontend/webrtc/connection_observer.h	/^struct InputSockets {$/;"	s	namespace:cuttlefish
InsecureFallbackStorage	host/commands/secure_env/insecure_fallback_storage.cpp	/^InsecureFallbackStorage::InsecureFallbackStorage($/;"	f	class:cuttlefish::InsecureFallbackStorage
InsecureFallbackStorage	host/commands/secure_env/insecure_fallback_storage.h	/^class InsecureFallbackStorage : public GatekeeperStorage {$/;"	c	namespace:cuttlefish
Insert	host/commands/modem_simulator/thread_looper.cpp	/^void ThreadLooper::Insert(const Event &event) {$/;"	f	class:cuttlefish::ThreadLooper	typeref:typename:void
Insert	host/libs/allocd/resource_manager.h	/^  void Insert($/;"	f	class:cuttlefish::Session	typeref:typename:void
InstallAlwaysNeededDependencyTag	build/cvd-host-package.go	/^	android.InstallAlwaysNeededDependencyTag \/\/ to force installation of both "deps" and manually/;"	M	struct:cuttlefish.dependencyTag	typeref:typename:android.InstallAlwaysNeededDependencyTag
InstanceFromEnvironment	host/libs/config/cuttlefish_config.cpp	/^int InstanceFromEnvironment() {$/;"	f	namespace:cuttlefish::__anon2cec80f10111	typeref:typename:int
InstanceSpecific	host/commands/modem_simulator/nvram_config.h	/^    InstanceSpecific(const NvramConfig* config, const std::string& id)$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific
InstanceSpecific	host/commands/modem_simulator/nvram_config.h	/^  class InstanceSpecific {$/;"	c	class:cuttlefish::NvramConfig
InstanceSpecific	host/libs/config/cuttlefish_config.h	/^    InstanceSpecific(const CuttlefishConfig* config, const std::string& id)$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific
InstanceSpecific	host/libs/config/cuttlefish_config.h	/^  class InstanceSpecific {$/;"	c	class:cuttlefish::CuttlefishConfig
Instances	host/libs/config/cuttlefish_config.cpp	/^std::vector<CuttlefishConfig::InstanceSpecific> CuttlefishConfig::Instances()$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::vector<CuttlefishConfig::InstanceSpecific>
InstantiateDynHandler	host/libs/websocket/websocket_server.cpp	/^std::unique_ptr<DynHandler> WebSocketServer::InstantiateDynHandler($/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:std::unique_ptr<DynHandler>
InstantiateHandler	host/libs/websocket/websocket_server.cpp	/^std::shared_ptr<WebSocketHandler> WebSocketServer::InstantiateHandler($/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:std::shared_ptr<WebSocketHandler>
IntToHexString	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::IntToHexString(int value) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
IntToHexStringTimeZoneDiff	host/commands/modem_simulator/pdu_parser.cpp	/^std::string PDUParser::IntToHexStringTimeZoneDiff(int tzdiff_hour) {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:std::string
Interactive	guest/hals/confirmationui/guest_session.h	/^        Interactive = 3,$/;"	e	enum:android::hardware::confirmationui::V1_0::implementation::GuestSession::ListenerState
InterfaceState	guest/hals/ril/reference-ril/reference-ril.c	/^enum InterfaceState {$/;"	g	file:
InternalDeps	host/commands/run_cvd/launch.cc	/^  using InternalDeps = fruit::Required<const CuttlefishConfig, VmManager,$/;"	t	function:cuttlefish::launchComponent	typeref:typename:fruit::Required<const CuttlefishConfig,VmManager,const CuttlefishConfig::InstanceSpecific,KernelLogPipeProvider>	file:
IntersectPortRanges	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^std::pair<uint16_t, uint16_t> IntersectPortRanges($/;"	f	namespace:cuttlefish::webrtc_streaming::__anonff3d797e0111	typeref:typename:std::pair<uint16_t,uint16_t>
Invalid	host/libs/allocd/request.h	/^  Invalid = 0,       \/\/ Invalid Request$/;"	e	enum:cuttlefish::RequestType
Invalid	host/libs/allocd/request.h	/^  Invalid = 0,  \/\/ Invalid status$/;"	e	enum:cuttlefish::RequestStatus
Invalid	host/libs/allocd/request.h	/^  Invalid = 0,  \/\/ an invalid interface$/;"	e	enum:cuttlefish::IfaceType
Invalid	host/libs/allocd/resource.h	/^  Invalid = 0,$/;"	e	enum:cuttlefish::ResourceType
InvalidFlagGuard	common/libs/utils/flag_parser.cpp	/^Flag InvalidFlagGuard() {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
IoStatusMsg	host/libs/audio_connector/shm_layout.h	/^struct IoStatusMsg {$/;"	s	namespace:cuttlefish
IoTransferMsg	host/libs/audio_connector/shm_layout.h	/^struct IoTransferMsg {$/;"	s	namespace:cuttlefish
Ioctl	common/libs/fs/shared_fd.cpp	/^int FileInstance::Ioctl(int request, void* val) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
IptableConfig	host/libs/allocd/alloc_utils.cpp	/^bool IptableConfig(const std::string& network, bool add) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
IsATTY	common/libs/fs/shared_fd.cpp	/^bool FileInstance::IsATTY() {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:bool
IsAndroidMode	host/libs/confui/host_mode_ctrl.h	/^  auto IsAndroidMode() { return (atomic_mode_ == ModeType::kAndroidMode); }$/;"	f	class:cuttlefish::HostModeCtrl	typeref:typename:auto
IsCallbackSet	host/libs/screen_connector/screen_connector.h	/^  bool IsCallbackSet() const override {$/;"	f	class:cuttlefish::ScreenConnector	typeref:typename:bool
IsCancel	host/libs/confui/session.h	/^  bool IsCancel(const int x, const int y) {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsCapture	host/frontend/webrtc/audio_handler.cpp	/^bool IsCapture(uint32_t stream_id) {$/;"	f	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:bool
IsConfUiActive	host/libs/confui/host_server.cc	/^bool HostServer::IsConfUiActive() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:bool
IsConfUiActive	host/libs/confui/session.cc	/^bool Session::IsConfUiActive() const {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsConfirm	host/libs/confui/session.h	/^  bool IsConfirm(const int x, const int y) {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsConfirmatioUiMode	host/libs/confui/host_mode_ctrl.h	/^  auto IsConfirmatioUiMode() {$/;"	f	class:cuttlefish::HostModeCtrl	typeref:typename:auto
IsConnected	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::IsConnected() const { return fd_->IsOpen(); }$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
IsConnectionReady	host/frontend/webrtc/lib/camera_streamer.cpp	/^bool CameraStreamer::IsConnectionReady() {$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:bool
IsCredentials	common/libs/utils/unix_sockets.cpp	/^bool ControlMessage::IsCredentials() const {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:bool
IsDirectoryEmpty	common/libs/utils/files.cpp	/^bool IsDirectoryEmpty(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
IsEmpty	common/libs/concurrency/multiplexer.h	/^  bool IsEmpty(const int idx) { return queues_[idx]->IsEmpty(); }$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:bool
IsEmpty	common/libs/concurrency/thread_safe_queue.h	/^  bool IsEmpty() {$/;"	f	class:cuttlefish::ThreadSafeQueue	typeref:typename:bool
IsEmpty	host/libs/confui/host_renderer.h	/^  bool IsEmpty() const { return teeui_frame_.empty(); }$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:bool
IsEmpty	host/libs/screen_connector/screen_connector_queue.h	/^  bool IsEmpty() const {$/;"	f	class:cuttlefish::ScreenConnectorQueue	typeref:typename:bool
IsFDNEnabled	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::IsFDNEnabled() {$/;"	f	class:cuttlefish::SimService	typeref:typename:bool
IsFileDescriptors	common/libs/utils/unix_sockets.cpp	/^bool ControlMessage::IsFileDescriptors() const {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:bool
IsFinalResponseError	host/commands/modem_simulator/unittest/service_test.cpp	/^  inline bool IsFinalResponseError(std::string response) {$/;"	f	class:ModemServiceTest	typeref:typename:bool	file:
IsFinalResponseSuccess	host/commands/modem_simulator/unittest/service_test.cpp	/^  inline bool IsFinalResponseSuccess(std::string response) {$/;"	f	class:ModemServiceTest	typeref:typename:bool	file:
IsFixedDialNumber	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::IsFixedDialNumber(std::string_view number) {$/;"	f	class:cuttlefish::SimService	typeref:typename:bool
IsFrameReady	host/libs/confui/host_renderer.h	/^  bool IsFrameReady() const { return raw_frame_ && !raw_frame_->IsEmpty(); }$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
IsFull	common/libs/concurrency/thread_safe_queue.h	/^  bool IsFull() {$/;"	f	class:cuttlefish::ThreadSafeQueue	typeref:typename:bool
IsHardwareBacked	host/commands/secure_env/soft_gatekeeper.h	/^    virtual bool IsHardwareBacked() const { return false; }$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
IsHardwareBacked	host/commands/secure_env/tpm_gatekeeper.cpp	/^bool TpmGatekeeper::IsHardwareBacked() const {$/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:bool
IsHasNetwork	host/commands/modem_simulator/network_service.cpp	/^bool NetworkService::IsHasNetwork() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:bool
IsHostCompatible	common/libs/utils/environment.cpp	/^bool IsHostCompatible(Arch arch) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
IsInCancel	host/libs/confui/host_renderer.h	/^  bool IsInCancel(const std::uint32_t x, const std::uint32_t y) {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
IsInConfirm	host/libs/confui/host_renderer.h	/^  bool IsInConfirm(const std::uint32_t x, const std::uint32_t y) {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
IsInside	host/libs/confui/host_renderer.h	/^  bool IsInside(const std::uint32_t x, const std::uint32_t y) const {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
IsInteger	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^bool IsInteger(const std::string& str) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:bool
IsIntermediateResponse	host/commands/modem_simulator/unittest/service_test.cpp	/^  inline bool IsIntermediateResponse(std::string response) {$/;"	f	class:ModemServiceTest	typeref:typename:bool	file:
IsInverted	host/libs/confui/session.cc	/^bool Session::IsInverted() const {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsLikelySoftwareRenderer	host/libs/graphics_detector/graphics_detector.cpp	/^bool IsLikelySoftwareRenderer(const std::string& renderer) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:bool
IsMagnified	host/libs/confui/session.cc	/^bool Session::IsMagnified() const {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsMalformedUtf8	host/libs/confui/cbor.h	/^  bool IsMalformedUtf8() const {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
IsMessageTooLong	host/libs/confui/cbor.h	/^  bool IsMessageTooLong() const { return buffer_status_ == Error::OUT_OF_DATA; }$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
IsNeededStatuReport	host/commands/modem_simulator/pdu_parser.cpp	/^bool PDUParser::IsNeededStatuReport() {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:bool
IsOk	host/libs/confui/cbor.h	/^  bool IsOk() const { return buffer_status_ == Error::OK; }$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
IsOnlyDigits	common/libs/confui/utils.h	/^inline bool IsOnlyDigits(const std::string& src) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
IsOpen	common/libs/fs/shared_fd.h	/^  bool IsOpen() const { return fd_ != -1; }$/;"	f	class:cuttlefish::FileInstance	typeref:typename:bool
IsOperational	common/libs/net/network_interface.h	/^  bool IsOperational() const {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:bool
IsRadioOn	host/commands/modem_simulator/modem_simulator.cpp	/^bool ModemSimulator::IsRadioOn() const {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:bool
IsReadyForUserInput	host/libs/confui/session.cc	/^bool Session::IsReadyForUserInput() const {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsRegular	common/libs/fs/shared_fd.h	/^  bool IsRegular() const { return is_regular_file_; }$/;"	f	class:cuttlefish::FileInstance	typeref:typename:bool
IsRegularFile	common/libs/fs/shared_fd.cpp	/^bool IsRegularFile(const int fd) {$/;"	f	namespace:cuttlefish::__anond70c3a4f0111	typeref:typename:bool
IsRunningInContainer	common/libs/utils/environment.cpp	/^bool IsRunningInContainer() {$/;"	f	namespace:cuttlefish	typeref:typename:bool
IsRunningInDocker	common/libs/utils/environment.cpp	/^static bool IsRunningInDocker() {$/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
IsSet	common/libs/fs/shared_fd.cpp	/^bool FileInstance::IsSet(fd_set* in) const {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:bool
IsSet	common/libs/fs/shared_select.h	/^  bool IsSet(const SharedFD& in) const {$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:bool
IsSetUpSuccessful	host/libs/confui/host_renderer.h	/^  bool IsSetUpSuccessful() const { return is_setup_well_; }$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
IsStdinValid	host/commands/run_cvd/main.cc	/^bool IsStdinValid() {$/;"	f	namespace:cuttlefish::__anonadab6e0c0111	typeref:typename:bool
IsSuccess	common/libs/confui/protocol_types.h	/^  bool IsSuccess() const { return is_success_; }$/;"	f	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:bool
IsSupported	host/libs/vm_manager/crosvm_manager.cpp	/^bool CrosvmManager::IsSupported() {$/;"	f	class:cuttlefish::vm_manager::CrosvmManager	typeref:typename:bool
IsSupported	host/libs/vm_manager/qemu_manager.cpp	/^bool QemuManager::IsSupported() {$/;"	f	class:cuttlefish::vm_manager::QemuManager	typeref:typename:bool
IsUsbConnected	recovery/recovery_ui.cpp	/^    bool IsUsbConnected() override {$/;"	f	class:CuttlefishRecoveryUI	typeref:typename:bool	file:
IsUserAbort	host/libs/confui/host_server.cc	/^static bool IsUserAbort(ConfUiMessage& msg) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool	file:
IsUserInput	host/libs/confui/session.h	/^  bool IsUserInput(const FsmInput fsm_input) {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
IsValidPDU	host/commands/modem_simulator/pdu_parser.cpp	/^bool PDUParser::IsValidPDU() {$/;"	f	class:cuttlefish::PDUParser	typeref:typename:bool
IsWaitingSmsPdu	host/commands/modem_simulator/modem_simulator.cpp	/^bool ModemSimulator::IsWaitingSmsPdu() {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:bool
IsWaitingSmsPdu	host/commands/modem_simulator/sms_service.h	/^  bool IsWaitingSmsPdu() { return is_waiting_sms_pdu_; }$/;"	f	class:cuttlefish::SmsService	typeref:typename:bool
IsWaitingSmsToSim	host/commands/modem_simulator/sms_service.h	/^  bool IsWaitingSmsToSim() { return is_waiting_sms_to_sim_; }$/;"	f	class:cuttlefish::SmsService	typeref:typename:bool
JACKS	host/frontend/webrtc/audio_handler.cpp	/^const virtio_snd_jack_info JACKS[] = {};$/;"	v	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:const virtio_snd_jack_info[]
JackInfoCommand	host/libs/audio_connector/commands.cpp	/^JackInfoCommand::JackInfoCommand(uint32_t start_id, size_t count,$/;"	f	class:cuttlefish::JackInfoCommand
JackInfoCommand	host/libs/audio_connector/commands.h	/^class JackInfoCommand : public InfoCommand<virtio_snd_jack_info> {$/;"	c	namespace:cuttlefish
JacksInfo	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::JacksInfo(JackInfoCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
JobBase	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^    JobBase(String tag) {$/;"	m	class:JobBase
JobBase	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^public abstract class JobBase {$/;"	c
JobExecutor	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    public JobExecutor() {$/;"	m	class:JobExecutor
JobExecutor	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^public class JobExecutor {$/;"	c
JoinArrays	host/frontend/webrtc_operator/assets/js/adb.js	/^function JoinArrays(arr1, arr2) {$/;"	f
Json	host/libs/config/cuttlefish_config.h	/^namespace Json {$/;"	n
Json	host/libs/config/fetcher_config.h	/^namespace Json {$/;"	n
JsonHandleCreateInterfaceRequest	host/libs/allocd/resource_manager.cpp	/^Json::Value ResourceManager::JsonHandleCreateInterfaceRequest($/;"	f	class:cuttlefish::ResourceManager	typeref:typename:Json::Value
JsonHandleDestroyInterfaceRequest	host/libs/allocd/resource_manager.cpp	/^Json::Value ResourceManager::JsonHandleDestroyInterfaceRequest($/;"	f	class:cuttlefish::ResourceManager	typeref:typename:Json::Value
JsonHandleIdRequest	host/libs/allocd/resource_manager.cpp	/^Json::Value ResourceManager::JsonHandleIdRequest() {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:Json::Value
JsonHandleShutdownRequest	host/libs/allocd/resource_manager.cpp	/^Json::Value ResourceManager::JsonHandleShutdownRequest(SharedFD client_socket) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:Json::Value
JsonHandleStopSessionRequest	host/libs/allocd/resource_manager.cpp	/^Json::Value ResourceManager::JsonHandleStopSessionRequest($/;"	f	class:cuttlefish::ResourceManager	typeref:typename:Json::Value
JsonRequestReader	host/libs/allocd/request.h	/^class JsonRequestReader {$/;"	c	namespace:cuttlefish
JsonSerializable	host/commands/secure_env/json_serializable.cpp	/^JsonSerializable::JsonSerializable(Json::Value& json) : json_(json) {}$/;"	f	class:cuttlefish::JsonSerializable
JsonSerializable	host/commands/secure_env/json_serializable.cpp	/^class JsonSerializable : public keymaster::Serializable {$/;"	c	namespace:cuttlefish	file:
JsonServer	host/libs/allocd/resource_manager.cpp	/^void ResourceManager::JsonServer() {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:void
JsonToCvdFile	host/libs/config/fetcher_config.cpp	/^CvdFile JsonToCvdFile(const std::string& file_path, const Json::Value& json) {$/;"	f	namespace:cuttlefish::__anonf7286d770211	typeref:typename:CvdFile
KEEPALIVE_ACTIVE	guest/hals/ril/reference-libril/ril.h	/^    KEEPALIVE_ACTIVE,                       \/* Keepalive session is active *\/$/;"	e	enum:__anon0bfbaecfc603
KEEPALIVE_INACTIVE	guest/hals/ril/reference-libril/ril.h	/^    KEEPALIVE_INACTIVE,                     \/* Keepalive session is inactive *\/$/;"	e	enum:__anon0bfbaecfc603
KEEPALIVE_PENDING	guest/hals/ril/reference-libril/ril.h	/^    KEEPALIVE_PENDING                       \/* Keepalive session status not available *\/$/;"	e	enum:__anon0bfbaecfc603
KERNEL_BUILD	host/libs/config/fetcher_config.h	/^  KERNEL_BUILD,$/;"	e	enum:cuttlefish::FileSource
KHRONOS_APIATTRIBUTES	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#define KHRONOS_APIATTRIBUTES /;"	d
KHRONOS_APIATTRIBUTES	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#define KHRONOS_APIATTRIBUTES$/;"	d
KHRONOS_APICALL	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#   define KHRONOS_APICALL /;"	d
KHRONOS_APICALL	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#   define KHRONOS_APICALL$/;"	d
KHRONOS_APIENTRY	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#   define KHRONOS_APIENTRY /;"	d
KHRONOS_APIENTRY	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#   define KHRONOS_APIENTRY$/;"	d
KHRONOS_BOOLEAN_ENUM_FORCE_SIZE	host/libs/graphics_detector/include/KHR/khrplatform.h	/^    KHRONOS_BOOLEAN_ENUM_FORCE_SIZE = KHRONOS_MAX_ENUM$/;"	e	enum:__anon5c4f198b0103
KHRONOS_FALSE	host/libs/graphics_detector/include/KHR/khrplatform.h	/^    KHRONOS_FALSE = 0,$/;"	e	enum:__anon5c4f198b0103
KHRONOS_MAX_ENUM	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#define KHRONOS_MAX_ENUM /;"	d
KHRONOS_STATIC	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#   define KHRONOS_STATIC /;"	d
KHRONOS_SUPPORT_FLOAT	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#define KHRONOS_SUPPORT_FLOAT /;"	d
KHRONOS_SUPPORT_INT64	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#define KHRONOS_SUPPORT_INT64 /;"	d
KHRONOS_TRUE	host/libs/graphics_detector/include/KHR/khrplatform.h	/^    KHRONOS_TRUE  = 1,$/;"	e	enum:__anon5c4f198b0103
KLOG_FORMAT	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String KLOG_FORMAT = "<%d>%s: %s\\n";$/;"	f	class:EventReporter	file:
KLOG_NOTICE	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final int KLOG_NOTICE = 5;$/;"	f	class:EventReporter	file:
KLOG_OUTPUT	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String KLOG_OUTPUT = "\/dev\/kmsg";$/;"	f	class:EventReporter	file:
KernelCommandLineFromConfig	host/libs/config/kernel_args.cpp	/^std::vector<std::string> KernelCommandLineFromConfig($/;"	f	namespace:cuttlefish	typeref:typename:std::vector<std::string>
KernelConfig	host/commands/assemble_cvd/flags.h	/^struct KernelConfig {$/;"	s	namespace:cuttlefish
KernelLoaded	host/commands/kernel_log_monitor/kernel_log_server.h	/^  KernelLoaded = 8,  \/\/ BootStarted actually comes quite late in the boot.$/;"	e	enum:monitor::Event
KernelLogEventsHandler	host/frontend/webrtc/kernel_log_events_handler.cpp	/^KernelLogEventsHandler::KernelLogEventsHandler($/;"	f	class:cuttlefish::KernelLogEventsHandler
KernelLogEventsHandler	host/frontend/webrtc/kernel_log_events_handler.h	/^struct KernelLogEventsHandler {$/;"	s	namespace:cuttlefish
KernelLogMonitor	host/commands/run_cvd/launch.cc	/^class KernelLogMonitor : public CommandSource,$/;"	c	namespace:cuttlefish	file:
KernelLogMonitorBinary	host/libs/config/known_paths.cpp	/^std::string KernelLogMonitorBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
KernelLogPipe	host/commands/run_cvd/launch.cc	/^  SharedFD KernelLogPipe() override {$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:SharedFD	file:
KernelLogPipeProvider	host/libs/config/kernel_log_pipe_provider.h	/^class KernelLogPipeProvider : public virtual Feature {$/;"	c	namespace:cuttlefish
KernelLogServer	host/commands/kernel_log_monitor/kernel_log_server.cc	/^KernelLogServer::KernelLogServer(cuttlefish::SharedFD pipe_fd,$/;"	f	class:monitor::KernelLogServer
KernelLogServer	host/commands/kernel_log_monitor/kernel_log_server.h	/^class KernelLogServer {$/;"	c	namespace:monitor
KernelPathTag	host/libs/config/data_image.cpp	/^struct KernelPathTag {};$/;"	s	namespace:cuttlefish	file:
KeymasterChannel	common/libs/security/keymaster_channel.cpp	/^KeymasterChannel::KeymasterChannel(SharedFD input, SharedFD output)$/;"	f	class:cuttlefish::KeymasterChannel
KeymasterChannel	common/libs/security/keymaster_channel.h	/^class KeymasterChannel {$/;"	c	namespace:cuttlefish
KeymasterCommandDestroyer	common/libs/security/keymaster_channel.h	/^class KeymasterCommandDestroyer {$/;"	c	namespace:cuttlefish
KeymasterResponder	host/commands/secure_env/keymaster_responder.cpp	/^KeymasterResponder::KeymasterResponder($/;"	f	class:cuttlefish::KeymasterResponder
KeymasterResponder	host/commands/secure_env/keymaster_responder.h	/^class KeymasterResponder {$/;"	c	namespace:cuttlefish
Keymint	host/libs/config/cuttlefish_config.h	/^  Keymint,$/;"	e	enum:cuttlefish::SecureHal
KillSubprocess	common/libs/utils/subprocess.cpp	/^StopperResult KillSubprocess(Subprocess* subprocess) {$/;"	f	namespace:cuttlefish	typeref:typename:StopperResult
KmParamSet	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^    KmParamSet(KmParamSet&& other) noexcept$/;"	f	class:keymaster::V4_1::__anon49de69e60111::KmParamSet	file:
KmParamSet	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^    KmParamSet(const hidl_vec<KeyParameter>& keyParams) {$/;"	f	class:keymaster::V4_1::__anon49de69e60111::KmParamSet	file:
KmParamSet	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^class KmParamSet : public keymaster_key_param_set_t {$/;"	c	namespace:keymaster::V4_1::__anon49de69e60111	file:
LANGUAGE_NOTIFICATION	host/commands/modem_simulator/stk_service.h	/^    LANGUAGE_NOTIFICATION = 0x35,$/;"	e	enum:cuttlefish::StkService::CommandType
LAST_IMPRECISE_RIL_VERSION	guest/hals/ril/reference-libril/ril.h	/^#define LAST_IMPRECISE_RIL_VERSION /;"	d
LAUNCH_BROWSER	host/commands/modem_simulator/stk_service.h	/^    LAUNCH_BROWSER      = 0x15,$/;"	e	enum:cuttlefish::StkService::CommandType
LIB_ARGS_PROPERTY	guest/hals/rild/rild_cuttlefish.c	/^#define LIB_ARGS_PROPERTY /;"	d	file:
LOCAL_AUDIOCONTROL_HAL_PRODUCT_PACKAGE	shared/auto/device.mk	/^    LOCAL_AUDIOCONTROL_HAL_PRODUCT_PACKAGE := android.hardware.automotive.audiocontrol-service.e/;"	m
LOCAL_AUDIO_DEVICE_PACKAGE_OVERLAYS	shared/device.mk	/^LOCAL_AUDIO_DEVICE_PACKAGE_OVERLAYS ?=$/;"	m
LOCAL_AUDIO_PRODUCT_COPY_FILES	shared/auto/device.mk	/^LOCAL_AUDIO_PRODUCT_COPY_FILES ?= \\$/;"	m
LOCAL_AUDIO_PRODUCT_COPY_FILES	shared/device.mk	/^LOCAL_AUDIO_PRODUCT_COPY_FILES ?= \\$/;"	m
LOCAL_AUDIO_PRODUCT_PACKAGE	shared/device.mk	/^LOCAL_AUDIO_PRODUCT_PACKAGE ?= \\$/;"	m
LOCAL_BLUETOOTH_PRODUCT_PACKAGE	shared/device.mk	/^    LOCAL_BLUETOOTH_PRODUCT_PACKAGE := android.hardware.bluetooth@1.1-service.btlinux$/;"	m
LOCAL_BLUETOOTH_PRODUCT_PACKAGE	shared/device.mk	/^    LOCAL_BLUETOOTH_PRODUCT_PACKAGE := android.hardware.bluetooth@1.1-service.remote$/;"	m
LOCAL_BLUETOOTH_PRODUCT_PACKAGE	shared/device.mk	/^    LOCAL_BLUETOOTH_PRODUCT_PACKAGE := android.hardware.bluetooth@1.1-service.sim$/;"	m
LOCAL_BT_PROPERTIES	shared/device.mk	/^LOCAL_BT_PROPERTIES ?= \\$/;"	m
LOCAL_CFLAGS	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_CFLAGS := $(L_CFLAGS) \\$/;"	m
LOCAL_CONFIRMATIONUI_PRODUCT_PACKAGE	shared/device.mk	/^    LOCAL_CONFIRMATIONUI_PRODUCT_PACKAGE := android.hardware.confirmationui@1.0-service.cuttlefi/;"	m
LOCAL_C_INCLUDES	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_C_INCLUDES := \\$/;"	m
LOCAL_DISABLE_OMX	vsoc_arm64_only/phone/aosp_cf.mk	/^LOCAL_DISABLE_OMX := true$/;"	m
LOCAL_DISABLE_OMX	vsoc_x86_64_only/phone/aosp_cf.mk	/^LOCAL_DISABLE_OMX := true$/;"	m
LOCAL_DUMPSTATE_PRODUCT_PACKAGE	shared/device.mk	/^    LOCAL_DUMPSTATE_PRODUCT_PACKAGE := android.hardware.dumpstate@1.1-service.example$/;"	m
LOCAL_FILE	host/libs/config/fetcher_config.h	/^  LOCAL_FILE,$/;"	e	enum:cuttlefish::FileSource
LOCAL_GATEKEEPER_PRODUCT_PACKAGE	shared/device.mk	/^       LOCAL_GATEKEEPER_PRODUCT_PACKAGE := android.hardware.gatekeeper@1.0-service.remote$/;"	m
LOCAL_HEALTH_PRODUCT_PACKAGE	shared/device.mk	/^    LOCAL_HEALTH_PRODUCT_PACKAGE := \\$/;"	m
LOCAL_KEYMINT_PRODUCT_PACKAGE	shared/device.mk	/^       LOCAL_KEYMINT_PRODUCT_PACKAGE := android.hardware.security.keymint-service.remote$/;"	m
LOCAL_LICENSE_CONDITIONS	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_LICENSE_CONDITIONS := notice$/;"	m
LOCAL_LICENSE_KINDS	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_LICENSE_KINDS := SPDX-license-identifier-Apache-2.0$/;"	m
LOCAL_MODULE	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_MODULE := lib_driver_cmd_simulated_cf$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	guest/Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	guest/libs/Android.mk	/^LOCAL_PATH:= $(call my-dir)$/;"	m
LOCAL_PATH	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PREFER_VENDOR_APEX	vsoc_x86_64/phone/aosp_cf.mk	/^LOCAL_PREFER_VENDOR_APEX := true$/;"	m
LOCAL_SENSOR_PRODUCT_PACKAGE	shared/device.mk	/^       LOCAL_SENSOR_PRODUCT_PACKAGE := android.hardware.sensors@2.1-service.mock$/;"	m
LOCAL_SENSOR_PRODUCT_PACKAGE	shared/device.mk	/^       LOCAL_SENSOR_PRODUCT_PACKAGE := com.android.hardware.sensors$/;"	m
LOCAL_SHARED_LIBRARIES	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_SHARED_LIBRARIES := libc libcutils$/;"	m
LOCAL_SRC_FILES	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_SRC_FILES := $(WPA_SRC_FILE)$/;"	m
LOCAL_VENDOR_MODULE	guest/libs/wpa_supplicant_8_lib/Android.mk	/^LOCAL_VENDOR_MODULE := true$/;"	m
LOCAL_VHAL_PRODUCT_PACKAGE	shared/auto/device.mk	/^    LOCAL_VHAL_PRODUCT_PACKAGE := android.hardware.automotive.vehicle@2.0-service$/;"	m
LOCAL_WPA_SUPPLICANT_OVERLAY	shared/device.mk	/^LOCAL_WPA_SUPPLICANT_OVERLAY ?= $(LOCAL_PATH)\/config\/wpa_supplicant_overlay.conf$/;"	m
LOCK	host/commands/modem_simulator/sim_service.h	/^      LOCK = 1,$/;"	e	enum:cuttlefish::SimService::FacilityLock::Mode
LOG_NDEBUG	guest/hals/ril/reference-ril/atchannel.c	/^#define LOG_NDEBUG /;"	d	file:
LOG_TAG	guest/hals/bt/remote/remote_bluetooth.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/bt/remote/service.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/cached_stream_buffer.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/external-service.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/vsock_camera_device_3_4.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/vsock_camera_server.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/camera/vsock_frame_provider.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/gatekeeper/remote/service.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/health/health.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/keymint/remote/remote_keymint_device.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/keymint/remote/remote_secure_clock.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/keymint/remote/remote_shared_secret.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/keymint/remote/service.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-libril/ril.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-libril/ril_config.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-libril/ril_event.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-libril/ril_service.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-libril/sap_service.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-ril/atchannel.c	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/ril/reference-ril/reference-ril.c	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/hals/rild/rild_cuttlefish.c	/^#define LOG_TAG /;"	d	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^    private static final String LOG_TAG = "GceBluetoothChecker";$/;"	f	class:BluetoothChecker	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private static final String LOG_TAG = "GceConnChecker";$/;"	f	class:ConnectivityChecker	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String LOG_TAG = "GceEventReporter";$/;"	f	class:EventReporter	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceBroadcastReceiver.java	/^    private static final String LOG_TAG = "GceBroadcastReceiver";$/;"	f	class:GceBroadcastReceiver	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    private static final String LOG_TAG = "GceFuture";$/;"	f	class:GceFuture	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private static final String LOG_TAG = "GceService";$/;"	f	class:GceService	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private static final String LOG_TAG = "GceWifiManager";$/;"	f	class:GceWifiManager	file:
LOG_TAG	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    private static final String LOG_TAG = "GceExecutor";$/;"	f	class:JobExecutor	file:
LOG_TAG	host/frontend/webrtc/connection_observer.cpp	/^#define LOG_TAG /;"	d	file:
LOG_TAG	host/frontend/webrtc/lib/client_handler.cpp	/^#define LOG_TAG /;"	d	file:
LSeek	common/libs/fs/shared_fd.cpp	/^off_t FileInstance::LSeek(off_t offset, int whence) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:off_t
LTE	guest/hals/ril/reference-ril/reference-ril.c	/^#define LTE /;"	d	file:
LTE_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_LTE_SignalStrength  LTE_SignalStrength;$/;"	m	struct:__anon0bfbaecf5008	typeref:typename:RIL_LTE_SignalStrength
LTE_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_LTE_SignalStrength_v8   LTE_SignalStrength;$/;"	m	struct:__anon0bfbaecf5108	typeref:typename:RIL_LTE_SignalStrength_v8
LTE_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_LTE_SignalStrength_v8   LTE_SignalStrength;$/;"	m	struct:__anon0bfbaecf5208	typeref:typename:RIL_LTE_SignalStrength_v8
LTE_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_LTE_SignalStrength_v8   LTE_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_LTE_SignalStrength_v8
LabelConfMsg	host/libs/confui/host_renderer.h	/^  using LabelConfMsg = teeui::LabelBody;$/;"	t	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::LabelBody
LastModifiedTime	host/commands/fetcher/build_api.h	/^  unsigned long LastModifiedTime() const { return last_modified_time; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:unsigned long
LastUpdatedInputDisk	host/commands/assemble_cvd/disk_flags.cc	/^static std::chrono::system_clock::time_point LastUpdatedInputDisk($/;"	f	namespace:cuttlefish	typeref:typename:std::chrono::system_clock::time_point	file:
LatestBuildId	host/commands/fetcher/build_api.cc	/^std::string BuildApi::LatestBuildId(const std::string& branch,$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::string
Launch Viewer (WebRTC)	README.md	/^## Launch Viewer (WebRTC)$/;"	s	chapter:Cuttlefish Getting Started
LaunchAdbComponent	host/libs/config/adb/launch.cpp	/^LaunchAdbComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<KernelLogPipeProvider,const AdbConfig,const CuttlefishConfig::InstanceSpecific>>
LaunchConnectionMaintainerThread	host/frontend/adb_connector/main.cpp	/^void LaunchConnectionMaintainerThread(const std::string& address) {$/;"	f	namespace:__anona4a84cd70111	typeref:typename:void
LaunchCustomActionServers	host/commands/run_cvd/launch_streamer.cpp	/^std::vector<Command> LaunchCustomActionServers($/;"	f	namespace:cuttlefish::__anon6b0274e10111	typeref:typename:std::vector<Command>
LauncherAction	host/commands/run_cvd/runner_defs.h	/^enum class LauncherAction : char {$/;"	g	namespace:cuttlefish	typeref:typename:char
LauncherResponse	host/commands/run_cvd/runner_defs.h	/^enum class LauncherResponse : char {$/;"	g	namespace:cuttlefish	typeref:typename:char
LibraryCloser	host/libs/graphics_detector/graphics_detector.cpp	/^struct LibraryCloser {$/;"	s	namespace:cuttlefish::__anon29a199ff0111	file:
LinkAtCwd	common/libs/fs/shared_fd.cpp	/^int FileInstance::LinkAtCwd(const std::string& path) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
LinkTapToBridge	host/libs/allocd/alloc_utils.cpp	/^bool LinkTapToBridge(const std::string& tap_name,$/;"	f	namespace:cuttlefish	typeref:typename:bool
LinuxVersionAtLeast	host/libs/vm_manager/host_configuration.cpp	/^bool LinuxVersionAtLeast(std::vector<std::string>* config_commands,$/;"	f	namespace:cuttlefish::vm_manager::__anon1edaaabd0111	typeref:typename:bool
ListDeviceIds	host/frontend/webrtc_operator/device_registry.cpp	/^std::vector<std::string> DeviceRegistry::ListDeviceIds() const {$/;"	f	class:cuttlefish::DeviceRegistry	typeref:typename:std::vector<std::string>
Listen	common/libs/fs/shared_fd.cpp	/^int FileInstance::Listen(int backlog) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
ListenerState	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    using ListenerState = GuestSession::ListenerState;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:GuestSession::ListenerState
ListenerState	guest/hals/confirmationui/guest_session.h	/^    enum class ListenerState : uint32_t {$/;"	g	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:uint32_t
LoadFragment	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::LoadFragment(ConfigFragment& fragment) const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
LoadFromFile	host/commands/modem_simulator/nvram_config.cpp	/^bool NvramConfig::LoadFromFile(const char* file) {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:bool
LoadFromFile	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::LoadFromFile(const char* file) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
LoadFromFile	host/libs/config/fetcher_config.cpp	/^bool FetcherConfig::LoadFromFile(const std::string& file) {$/;"	f	class:cuttlefish::FetcherConfig	typeref:typename:bool
LoadKey	host/commands/secure_env/encrypted_serializable.cpp	/^static TpmObjectSlot LoadKey($/;"	f	namespace:cuttlefish	typeref:typename:TpmObjectSlot	file:
LoadNvramConfig	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::LoadNvramConfig() {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
LocalRecorder	host/frontend/webrtc/lib/local_recorder.cpp	/^LocalRecorder::LocalRecorder(std::unique_ptr<LocalRecorder::Impl> impl)$/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder
LocalRecorder	host/frontend/webrtc/lib/local_recorder.h	/^class LocalRecorder {$/;"	c	namespace:cuttlefish::webrtc_streaming
LockStatus	host/commands/modem_simulator/sim_service.h	/^    enum LockStatus {$/;"	g	struct:cuttlefish::SimService::FacilityLock
LockType	host/commands/modem_simulator/sim_service.h	/^    enum LockType {$/;"	g	struct:cuttlefish::SimService::FacilityLock
Log	common/libs/fs/shared_fd.cpp	/^void FileInstance::Log(const char* message) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:void
Log	common/libs/fs/shared_fd.cpp	/^void FileInstance::Log(const char*) {}$/;"	f	class:cuttlefish::FileInstance	typeref:typename:void
LogAndReplyError	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::LogAndReplyError(const std::string &error_msg) const {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
LogAndReplyError	host/frontend/webrtc_operator/signal_handler.cpp	/^void SignalHandler::LogAndReplyError(const std::string& error_message) {$/;"	f	class:cuttlefish::SignalHandler	typeref:typename:void
LogAndSetEnv	host/libs/vm_manager/qemu_manager.cpp	/^void LogAndSetEnv(const char* key, const std::string& value) {$/;"	f	namespace:cuttlefish::vm_manager::__anonb2b4da3a0111	typeref:typename:void
LogEvent	host/commands/metrics/proto/clientanalytics.proto	/^message LogEvent {$/;"	m
LogFileSeverity	common/libs/utils/tee_logging.cpp	/^LogSeverity LogFileSeverity() {$/;"	f	namespace:cuttlefish	typeref:typename:LogSeverity
LogRequest	host/commands/metrics/proto/clientanalytics.proto	/^message LogRequest {$/;"	m
LogResponse	host/commands/metrics/proto/clientanalytics.proto	/^message LogResponse {$/;"	m
LogSubprocessExit	host/commands/run_cvd/process_monitor.cc	/^static void LogSubprocessExit(const std::string& name, pid_t pid, int wstatus) {$/;"	f	namespace:cuttlefish	typeref:typename:void	file:
LogToFiles	common/libs/utils/tee_logging.cpp	/^TeeLogger LogToFiles(const std::vector<std::string>& files) {$/;"	f	namespace:cuttlefish	typeref:typename:TeeLogger
LogToStderrAndFiles	common/libs/utils/tee_logging.cpp	/^TeeLogger LogToStderrAndFiles(const std::vector<std::string>& files) {$/;"	f	namespace:cuttlefish	typeref:typename:TeeLogger
LogcatReceiver	host/commands/run_cvd/launch.cc	/^class LogcatReceiver : public CommandSource, public DiagnosticInformation {$/;"	c	namespace:cuttlefish	file:
LogcatReceiverBinary	host/libs/config/known_paths.cpp	/^std::string LogcatReceiverBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
LogicalChannel	host/commands/modem_simulator/sim_service.h	/^    LogicalChannel(int session_id) :$/;"	f	struct:cuttlefish::SimService::LogicalChannel
LogicalChannel	host/commands/modem_simulator/sim_service.h	/^  struct LogicalChannel {$/;"	s	class:cuttlefish::SimService
LookupInfo	tools/tombstone_to_line.py	/^LookupInfo = collections.namedtuple('LookupInfo',$/;"	v
Loop	host/frontend/webrtc/audio_handler.cpp	/^[[noreturn]] void AudioHandler::Loop() {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
Loop	host/frontend/webrtc/display_handler.cpp	/^[[noreturn]] void DisplayHandler::Loop() {$/;"	f	class:cuttlefish::DisplayHandler	typeref:typename:void
LwsCallback	host/frontend/webrtc/lib/ws_connection.cpp	/^int LwsCallback(struct lws* wsi, enum lws_callback_reasons reason, void* user,$/;"	f	typeref:typename:int
MALFORMED	host/libs/confui/cbor.h	/^    MALFORMED = 2,$/;"	e	enum:cuttlefish::confui::Cbor::Error
MALFORMED_UTF8	host/libs/confui/cbor.h	/^    MALFORMED_UTF8 = 3,$/;"	e	enum:cuttlefish::confui::Cbor::Error
MAP	host/libs/confui/cbor.h	/^    MAP = 5,$/;"	e	enum:cuttlefish::confui::Cbor::Type
MATCH_TPM_COMMAND	host/commands/secure_env/tpm_commands.cpp	/^    #define MATCH_TPM_COMMAND(/;"	d	file:
MAX	host/libs/confui/cbor.h	/^  enum class MessageSize : uint32_t { MAX = 6144u };$/;"	e	enum:cuttlefish::confui::Cbor::MessageSize
MAX_AT_RESPONSE	guest/hals/ril/reference-ril/atchannel.c	/^#define MAX_AT_RESPONSE /;"	d	file:
MAX_AT_RESPONSE	guest/hals/ril/reference-ril/reference-ril.c	/^#define MAX_AT_RESPONSE /;"	d	file:
MAX_BANDS	guest/hals/ril/reference-libril/ril.h	/^#define MAX_BANDS /;"	d
MAX_BROADCAST_SMS_CONFIG_INFO	guest/hals/ril/reference-libril/ril.h	/^#define MAX_BROADCAST_SMS_CONFIG_INFO /;"	d
MAX_CHANNELS	guest/hals/ril/reference-libril/ril.h	/^#define MAX_CHANNELS /;"	d
MAX_CLIENT_ID_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define MAX_CLIENT_ID_LENGTH /;"	d
MAX_COMMAND_BYTES	guest/hals/ril/reference-libril/ril.cpp	/^#define MAX_COMMAND_BYTES /;"	d	file:
MAX_DEBUG_SOCKET_NAME_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define MAX_DEBUG_SOCKET_NAME_LENGTH /;"	d
MAX_FD_EVENTS	guest/hals/ril/reference-libril/ril_event.h	/^#define MAX_FD_EVENTS /;"	d
MAX_HANDLE_ATTEMPTS	host/commands/secure_env/fragile_tpm_storage.cpp	/^static constexpr size_t MAX_HANDLE_ATTEMPTS = 1;$/;"	v	namespace:cuttlefish	typeref:typename:size_t	file:
MAX_INADDR_LEN	guest/hals/ril/reference-libril/ril.h	/^#define MAX_INADDR_LEN /;"	d
MAX_LIB_ARGS	guest/hals/rild/rild_cuttlefish.c	/^#define MAX_LIB_ARGS /;"	d	file:
MAX_LOGICAL_MODEM_NUM	guest/hals/ril/reference-libril/ril.h	/^#define MAX_LOGICAL_MODEM_NUM /;"	d
MAX_PDP	guest/hals/ril/reference-ril/reference-ril.c	/^#define MAX_PDP /;"	d	file:
MAX_POLL_DISABLED_WIFI_COUNT	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private static final int MAX_POLL_DISABLED_WIFI_COUNT = 10;$/;"	f	class:RilE2eTests	file:
MAX_QEMU_PIPE_NAME_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define MAX_QEMU_PIPE_NAME_LENGTH /;"	d
MAX_RADIO_ACCESS_NETWORKS	guest/hals/ril/reference-libril/ril.h	/^#define MAX_RADIO_ACCESS_NETWORKS /;"	d
MAX_RILDS	guest/hals/ril/reference-libril/ril.h	/^#define MAX_RILDS /;"	d
MAX_SERVICE_NAME_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define MAX_SERVICE_NAME_LENGTH /;"	d
MAX_STIR_RANDOM_BUFFER_SIZE	host/commands/secure_env/tpm_random_source.cpp	/^static int MAX_STIR_RANDOM_BUFFER_SIZE = 128;$/;"	v	namespace:cuttlefish	typeref:typename:int	file:
MAX_STRING_LENGTH	guest/hals/ril/reference-libril/ril_service.cpp	/^#define MAX_STRING_LENGTH /;"	d	file:
MAX_UINT_32_CHARS	host/commands/secure_env/soft_gatekeeper.h	/^    static const int MAX_UINT_32_CHARS = 11;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:const int
MAX_UUID_LENGTH	guest/hals/ril/reference-libril/ril.h	/^#define MAX_UUID_LENGTH /;"	d
MDM_CDMA	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_CDMA /;"	d	file:
MDM_EVDO	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_EVDO /;"	d	file:
MDM_GSM	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_GSM /;"	d	file:
MDM_LTE	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_LTE /;"	d	file:
MDM_NR	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_NR /;"	d	file:
MDM_TDSCDMA	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_TDSCDMA /;"	d	file:
MDM_WCDMA	guest/hals/ril/reference-ril/reference-ril.c	/^#define MDM_WCDMA /;"	d	file:
MEMSET_FREED	guest/hals/ril/reference-libril/ril.cpp	/^#define MEMSET_FREED /;"	d	file:
MESSAGE_SIZE	host/example_custom_actions/main.cpp	/^#define MESSAGE_SIZE /;"	d	file:
MF_SIM	host/commands/modem_simulator/sim_service.cpp	/^static const std::string MF_SIM       = "3F00";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
MIN	guest/hals/ril/reference-libril/ril_internal.h	/^#define MIN(/;"	d
MMap	common/libs/fs/shared_fd.cpp	/^ScopedMMap FileInstance::MMap(void* addr, size_t length, int prot, int flags,$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ScopedMMap
MOBILE_NETWORK_CONNECTED_MESSAGE	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private static final String MOBILE_NETWORK_CONNECTED_MESSAGE =$/;"	f	class:ConnectivityChecker	file:
MULTILINE	guest/hals/ril/reference-ril/atchannel.h	/^    MULTILINE    \/* multiple line intermediate response$/;"	e	enum:__anon512a2c1f0103
MUTEX_ACQUIRE	guest/hals/ril/reference-libril/ril_event.cpp	/^#define MUTEX_ACQUIRE(/;"	d	file:
MUTEX_DESTROY	guest/hals/ril/reference-libril/ril_event.cpp	/^#define MUTEX_DESTROY(/;"	d	file:
MUTEX_INIT	guest/hals/ril/reference-libril/ril_event.cpp	/^#define MUTEX_INIT(/;"	d	file:
MUTEX_RELEASE	guest/hals/ril/reference-libril/ril_event.cpp	/^#define MUTEX_RELEASE(/;"	d	file:
M_MODEM_TECH_CDMA	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_CDMA   = 1 << 2,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
M_MODEM_TECH_EVDO	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_EVDO   = 1 << 3,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
M_MODEM_TECH_GSM	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_GSM    = 1 << 0,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
M_MODEM_TECH_LTE	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_LTE    = 1 << 5,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
M_MODEM_TECH_NR	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_NR     = 1 << 6,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
M_MODEM_TECH_TDSCDMA	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_TDSCDMA= 1 << 4,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
M_MODEM_TECH_WCDMA	host/commands/modem_simulator/network_service.h	/^    M_MODEM_TECH_WCDMA  = 1 << 1,$/;"	e	enum:cuttlefish::NetworkService::ModemTechnology
MainLoop	host/libs/confui/host_server.cc	/^[[noreturn]] void HostServer::MainLoop() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
MainLoopState	host/libs/confui/server_common.h	/^enum class MainLoopState : std::uint32_t {$/;"	g	namespace:cuttlefish::confui	typeref:typename:std::uint32_t
MakeAddress	common/libs/fs/shared_fd.cpp	/^static void MakeAddress(const char* name, bool abstract,$/;"	f	namespace:cuttlefish	typeref:typename:void	file:
MakeCompositeDiskSpec	host/libs/image_aggregator/image_aggregator.cc	/^  CompositeDisk MakeCompositeDiskSpec(const std::string& header_file,$/;"	f	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:CompositeDisk	file:
MakeConnectMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string MakeConnectMessage(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
MakeDisconnectMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string MakeDisconnectMessage(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
MakeDynamicFlag	host/commands/start/flag_forwarder.cc	/^std::unique_ptr<SubprocessFlag> MakeDynamicFlag($/;"	f	namespace:__anon4552bec90111	typeref:typename:std::unique_ptr<SubprocessFlag>
MakeFileExecutable	common/libs/utils/files.cpp	/^bool MakeFileExecutable(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
MakeMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string MakeMessage(const std::string& user_message) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
MakeName	guest/hals/confirmationui/guest_session.h	/^    std::string MakeName(const std::uint32_t i) const {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::string
MakeShellUptimeMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string MakeShellUptimeMessage() {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
MakeSizeHeader	common/libs/confui/packet.h	/^std::vector<int> MakeSizeHeader(Args&&... args) {$/;"	f	namespace:cuttlefish::confui::packet::impl	typeref:typename:std::vector<int>
MakeTransportMessage	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string MakeTransportMessage(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
MakeVbParams	host/commands/secure_env/tpm_attestation_record.cpp	/^VerifiedBootParams MakeVbParams() {$/;"	f	namespace:cuttlefish::__anon03bde2800111	typeref:typename:VerifiedBootParams
ManagedGatekeeperMessage	common/libs/security/gatekeeper_channel.h	/^using ManagedGatekeeperMessage =$/;"	t	namespace:cuttlefish	typeref:typename:std::unique_ptr<GatekeeperRawMessage,GatekeeperCommandDestroyer>
ManagedKeymasterMessage	common/libs/security/keymaster_channel.h	/^using ManagedKeymasterMessage =$/;"	t	namespace:cuttlefish	typeref:typename:std::unique_ptr<keymaster_message,KeymasterCommandDestroyer>
ManagedLibrary	host/libs/graphics_detector/graphics_detector.cpp	/^using ManagedLibrary = std::unique_ptr<void, LibraryCloser>;$/;"	t	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:std::unique_ptr<void,LibraryCloser>	file:
MarkAll	common/libs/fs/shared_fd.cpp	/^void MarkAll(const SharedFDSet& input, fd_set* dest, int* max_index) {$/;"	f	namespace:cuttlefish::__anond70c3a4f0111	typeref:typename:void
MarkReplied	host/libs/audio_connector/commands.h	/^  void MarkReplied(AudioStatus status) { status_ = status; }$/;"	f	class:cuttlefish::AudioCommand	typeref:typename:void
MarshalFn	host/commands/secure_env/tpm_serialize.cpp	/^int MarshalFn = 0; \/\/ Break code without an explicit specialization.$/;"	v	namespace:cuttlefish	typeref:typename:int
MasterBootRecord	host/libs/config/mbr.h	/^struct __attribute__((packed)) MasterBootRecord {$/;"	s
MatchMode	host/commands/modem_simulator/modem_service.h	/^  enum MatchMode {FULL_MATCH = 0, PARTIAL_MATCH = 1};$/;"	g	class:cuttlefish::CommandHandler
MaxMicrophoneVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MaxMicrophoneVolume(uint32_t* maxVolume) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MaxSpeakerVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MaxSpeakerVolume(uint32_t* maxVolume) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MaybeWriteNotification	host/commands/run_cvd/boot_state_machine.cc	/^  bool MaybeWriteNotification() {$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:bool	file:
MbrPartitionEntry	host/libs/config/mbr.h	/^struct __attribute__((packed)) MbrPartitionEntry {$/;"	s
Md5	host/commands/fetcher/build_api.h	/^  const std::string& Md5() const { return md5; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:const std::string &
MediaCodecs	shared/config/media_codecs.xml	/^<!DOCTYPE MediaCodecs [$/;"	r
MediaSettings	shared/config/media_profiles.xml	/^<!DOCTYPE MediaSettings [$/;"	r
MemfdCreate	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::MemfdCreate(const std::string& name, unsigned int flags) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
Message	common/libs/utils/tcp_socket.h	/^using Message = std::vector<std::uint8_t>;$/;"	t	namespace:cuttlefish	typeref:typename:std::vector<std::uint8_t>
MessageSize	host/libs/confui/cbor.h	/^  enum class MessageSize : uint32_t { MAX = 6144u };$/;"	g	class:cuttlefish::confui::Cbor	typeref:typename:uint32_t
MetadataLevel	common/libs/utils/tee_logging.h	/^enum class MetadataLevel {$/;"	g	namespace:cuttlefish
MethodNotAllowed	host/libs/websocket/websocket_handler.h	/^  MethodNotAllowed = 405,$/;"	e	enum:cuttlefish::HttpStatusCode
MetricsBinary	host/libs/config/known_paths.cpp	/^std::string MetricsBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
MetricsEvent	host/commands/metrics/proto/cf_metrics_event.proto	/^message MetricsEvent {$/;"	m	package:cuttlefish
MetricsExitCodes	host/commands/metrics/metrics_defs.h	/^enum MetricsExitCodes : int {$/;"	g	namespace:cuttlefish	typeref:typename:int
MetricsService	host/commands/run_cvd/launch.cc	/^class MetricsService : public CommandSource {$/;"	c	namespace:cuttlefish	file:
MicrophoneIsInitialized	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::MicrophoneIsInitialized() const { return true; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
MicrophoneMute	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MicrophoneMute(bool* enabled) const { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MicrophoneMuteIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MicrophoneMuteIsAvailable(bool* available) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MicrophoneVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MicrophoneVolume(uint32_t* volume) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MicrophoneVolumeIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MicrophoneVolumeIsAvailable(bool* available) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MinMicrophoneVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MinMicrophoneVolume(uint32_t* minVolume) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MinSpeakerVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::MinSpeakerVolume(uint32_t* minVolume) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
MiscImagePath	host/libs/config/data_image.h	/^class MiscImagePath {$/;"	c	namespace:cuttlefish
MiscImageTag	host/libs/config/data_image.cpp	/^struct MiscImageTag {};$/;"	s	namespace:cuttlefish	file:
MiscInfo	host/commands/assemble_cvd/misc_info.h	/^using MiscInfo = std::map<std::string, std::string>;$/;"	t	namespace:cuttlefish	typeref:typename:std::map<std::string,std::string>
MiscService	host/commands/modem_simulator/misc_service.cpp	/^MiscService::MiscService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::MiscService
MiscService	host/commands/modem_simulator/misc_service.h	/^class MiscService : public ModemService, public std::enable_shared_from_this<MiscService>  {$/;"	c	namespace:cuttlefish
Mkstemp	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Mkstemp(std::string* path) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
MobileGatewayName	host/libs/allocd/alloc_utils.cpp	/^std::string MobileGatewayName(const std::string& ipaddr, uint16_t id) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
MobileIface	host/libs/allocd/resource.h	/^  MobileIface(const std::string& name, uid_t uid, uint16_t iface_id,$/;"	f	class:cuttlefish::MobileIface
MobileIface	host/libs/allocd/resource.h	/^  MobileIface,$/;"	e	enum:cuttlefish::ResourceType
MobileIface	host/libs/allocd/resource.h	/^class MobileIface : public StaticResource {$/;"	c	namespace:cuttlefish
MobileNetworkConnected	host/commands/kernel_log_monitor/kernel_log_server.h	/^  MobileNetworkConnected = 4,$/;"	e	enum:monitor::Event
MobileNetworkName	host/libs/allocd/alloc_utils.cpp	/^std::string MobileNetworkName(const std::string& ipaddr,$/;"	f	namespace:cuttlefish	typeref:typename:std::string
Mode	host/commands/modem_simulator/sim_service.h	/^    enum Mode {$/;"	g	struct:cuttlefish::SimService::FacilityLock
Mode	shared/config/cgroups.json	/^      "Mode": "0755",$/;"	s	object:Cgroups.0
ModeEnabled	host/libs/config/adb/launch.cpp	/^  bool ModeEnabled(const AdbMode& mode) const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:bool	file:
ModeType	host/libs/confui/host_mode_ctrl.h	/^  enum class ModeType : std::uint8_t { kAndroidMode = 55, kConfUI_Mode = 77 };$/;"	g	class:cuttlefish::HostModeCtrl	typeref:typename:std::uint8_t
ModeType	host/libs/screen_connector/screen_connector_ctrl.h	/^  enum class ModeType {$/;"	g	class:cuttlefish::ScreenConnectorCtrl
ModemInfo	guest/hals/ril/reference-ril/reference-ril.c	/^} ModemInfo;$/;"	t	typeref:struct:__anon70d7df6f0108	file:
ModemService	host/commands/modem_simulator/modem_service.cpp	/^ModemService::ModemService(int32_t service_id,$/;"	f	class:cuttlefish::ModemService
ModemService	host/commands/modem_simulator/modem_service.h	/^class ModemService {$/;"	c	namespace:cuttlefish
ModemServiceTest	host/commands/modem_simulator/unittest/service_test.cpp	/^class ModemServiceTest : public ::testing::Test {$/;"	c	file:
ModemServiceType	host/commands/modem_simulator/modem_service.h	/^enum ModemServiceType : int {$/;"	g	namespace:cuttlefish	typeref:typename:int
ModemSimulator	host/commands/modem_simulator/modem_simulator.cpp	/^ModemSimulator::ModemSimulator(int32_t modem_id)$/;"	f	class:cuttlefish::ModemSimulator
ModemSimulator	host/commands/modem_simulator/modem_simulator.h	/^class ModemSimulator {$/;"	c	namespace:cuttlefish
ModemSimulator	host/commands/run_cvd/launch_modem.cpp	/^class ModemSimulator : public CommandSource {$/;"	c	namespace:cuttlefish	file:
ModemSimulatorBinary	host/libs/config/known_paths.cpp	/^std::string ModemSimulatorBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
ModemSimulatorExitCodes	host/commands/modem_simulator/channel_monitor.h	/^enum ModemSimulatorExitCodes : int {$/;"	g	namespace:cuttlefish	typeref:typename:int
ModemTechnology	host/commands/modem_simulator/network_service.h	/^  enum ModemTechnology {$/;"	g	class:cuttlefish::NetworkService
Modes	host/libs/config/adb/data.cpp	/^  const std::set<AdbMode>& Modes() const override { return modes_; }$/;"	f	class:cuttlefish::AdbConfigImpl	typeref:typename:const std::set<AdbMode> &	file:
ModuleBase	build/cvd-host-package.go	/^	android.ModuleBase$/;"	M	struct:cuttlefish.cvdHostPackage	typeref:typename:android.ModuleBase
MonitorEntry	host/commands/run_cvd/process_monitor.h	/^struct MonitorEntry {$/;"	s	namespace:cuttlefish
MonitorLoop	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::MonitorLoop() {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
MonitorRoutine	host/commands/run_cvd/process_monitor.cc	/^bool ProcessMonitor::MonitorRoutine() {$/;"	f	class:cuttlefish::ProcessMonitor	typeref:typename:bool
MonitorWifiJob	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        public MonitorWifiJob() {$/;"	m	class:GceWifiManager.MonitorWifiJob
MonitorWifiJob	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private class MonitorWifiJob extends JobBase {$/;"	c	class:GceWifiManager
Multi	host/commands/run_cvd/launch.cc	/^  using Multi = Multibindings<InternalDeps>;$/;"	t	function:cuttlefish::launchComponent	typeref:typename:Multibindings<InternalDeps>	file:
Multibindings	host/libs/config/inject.h	/^struct Multibindings {$/;"	s	namespace:cuttlefish
MultipleImagePartition	host/libs/image_aggregator/image_aggregator.h	/^struct MultipleImagePartition {$/;"	s	namespace:cuttlefish
Multiplexer	common/libs/concurrency/multiplexer.h	/^  Multiplexer() : sem_items_{0} {}$/;"	f	class:cuttlefish::Multiplexer
Multiplexer	common/libs/concurrency/multiplexer.h	/^class Multiplexer {$/;"	c	namespace:cuttlefish
Multiplexer	host/libs/confui/host_server.h	/^  using Multiplexer =$/;"	t	class:cuttlefish::confui::HostServer	typeref:typename:Multiplexer<std::unique_ptr<ConfUiMessage>,ThreadSafeQueue<std::unique_ptr<ConfUiMessage>>>
Multiplexer	host/libs/screen_connector/screen_connector_multiplexer.h	/^  using Multiplexer = Multiplexer<ProcessedFrameType, Queue>;$/;"	t	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:Multiplexer<ProcessedFrameType,Queue>
MutableInstanceSpecific	host/libs/config/cuttlefish_config.h	/^    MutableInstanceSpecific(CuttlefishConfig* config, const std::string& id)$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific
MutableInstanceSpecific	host/libs/config/cuttlefish_config.h	/^  class MutableInstanceSpecific {$/;"	c	class:cuttlefish::CuttlefishConfig
N	host/commands/secure_env/soft_gatekeeper.h	/^    static const uint64_t N = 16384;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:const uint64_t
NATT_IPV4	guest/hals/ril/reference-libril/ril.h	/^    NATT_IPV4 = 0,              \/* Keepalive specified by RFC 3948 Sec. 2.3 using IPv4 *\/$/;"	e	enum:__anon0bfbaecfc403
NATT_IPV6	guest/hals/ril/reference-libril/ril.h	/^    NATT_IPV6 = 1               \/* Keepalive specified by RFC 3948 Sec. 2.3 using IPv6 *\/$/;"	e	enum:__anon0bfbaecfc403
NEGATIVE	host/libs/confui/cbor.h	/^    NEGATIVE = 1,$/;"	e	enum:cuttlefish::confui::Cbor::Type
NET_REGISTRATION_DENIED	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_DENIED       = 3,$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NET_REGISTRATION_EMERGENCY	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_EMERGENCY    = 8$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NET_REGISTRATION_HOME	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_HOME         = 1,$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NET_REGISTRATION_ROAMING	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_ROAMING      = 5,$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NET_REGISTRATION_SEARCHING	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_SEARCHING    = 2,$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NET_REGISTRATION_UNKNOWN	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_UNKNOWN      = 4,$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NET_REGISTRATION_UNREGISTERED	host/commands/modem_simulator/network_service.h	/^    NET_REGISTRATION_UNREGISTERED = 0,$/;"	e	enum:cuttlefish::NetworkService::RegistrationState
NGRAN	guest/hals/ril/reference-libril/ril.h	/^    NGRAN = 0x04,       \/\/ Next-Generation Radio Access Network$/;"	e	enum:__anon0bfbaecfa503
NGRAN_BAND_1	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_1 = 1,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_12	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_12 = 12,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_2	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_2 = 2,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_20	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_20 = 20,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_25	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_25 = 25,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_257	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_257 = 257,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_258	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_258 = 258,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_260	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_260 = 260,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_261	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_261 = 261,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_28	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_28 = 28,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_3	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_3 = 3,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_34	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_34 = 34,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_38	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_38 = 38,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_39	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_39 = 39,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_40	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_40 = 40,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_41	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_41 = 41,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_5	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_5 = 5,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_50	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_50 = 50,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_51	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_51 = 51,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_66	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_66 = 66,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_7	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_7 = 7,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_70	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_70 = 70,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_71	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_71 = 71,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_74	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_74 = 74,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_75	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_75 = 75,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_76	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_76 = 76,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_77	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_77 = 77,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_78	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_78 = 78,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_79	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_79 = 79,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_8	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_8 = 8,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_80	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_80 = 80,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_81	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_81 = 81,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_82	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_82 = 82,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_83	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_83 = 83,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_84	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_84 = 84,$/;"	e	enum:__anon0bfbaecfaa03
NGRAN_BAND_86	guest/hals/ril/reference-libril/ril.h	/^    NGRAN_BAND_86 = 86,$/;"	e	enum:__anon0bfbaecfaa03
NOTIFICATION_CHANNEL_ID	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private static final String NOTIFICATION_CHANNEL_ID = "cuttlefish-service";$/;"	f	class:GceService	file:
NOTIFICATION_CHANNEL_NAME	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private static final String NOTIFICATION_CHANNEL_NAME = "Cuttlefish Service";$/;"	f	class:GceService	file:
NOTIFICATION_ID	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private static final int NOTIFICATION_ID = 1;$/;"	f	class:GceService	file:
NOT_SET	host/libs/audio_connector/shm_layout.h	/^  NOT_SET = static_cast<uint32_t>(-1),$/;"	e	enum:cuttlefish::AudioStatus
NO_ACTIVE	host/commands/modem_simulator/data_service.h	/^    enum CidState {ACTIVE, NO_ACTIVE};$/;"	e	enum:cuttlefish::DataService::PDPContext::CidState
NO_MULTISIM_POLICY	guest/hals/ril/reference-libril/ril.h	/^    NO_MULTISIM_POLICY = 0,             \/* configuration applies to each slot independently. *\/$/;"	e	enum:__anon0bfbaecf2803
NO_RESULT	guest/hals/ril/reference-ril/atchannel.h	/^    NO_RESULT,   \/* no intermediate response expected *\/$/;"	e	enum:__anon512a2c1f0103
NO_THREAD_SAFETY_ANALYSIS	common/libs/concurrency/thread_annotations.h	/^#define NO_THREAD_SAFETY_ANALYSIS /;"	d
NR	guest/hals/ril/reference-ril/reference-ril.c	/^#define NR /;"	d	file:
NR_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_NR_SignalStrength       NR_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_NR_SignalStrength
NS_PER_S	guest/hals/ril/reference-ril/atchannel.c	/^#define NS_PER_S /;"	d	file:
NUMBER	host/libs/confui/cbor.h	/^    NUMBER = 0,$/;"	e	enum:cuttlefish::confui::Cbor::Type
NUMERIC	guest/hals/ril/reference-ril/atchannel.h	/^    NUMERIC,     \/* a single intermediate response starting with a 0-9 *\/$/;"	e	enum:__anon512a2c1f0103
NUM_CHMAPS	host/frontend/webrtc/audio_handler.cpp	/^constexpr uint32_t NUM_CHMAPS = sizeof(CHMAPS) \/ sizeof(CHMAPS[0]);$/;"	v	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:uint32_t
NUM_ELEMS	guest/hals/ril/reference-libril/ril.cpp	/^#define NUM_ELEMS(/;"	d	file:
NUM_ELEMS	guest/hals/ril/reference-ril/atchannel.c	/^#define NUM_ELEMS(/;"	d	file:
NUM_ELEMS_SOCKET	guest/hals/ril/reference-libril/ril_ex.h	/^#define NUM_ELEMS_SOCKET(/;"	d
NUM_JACKS	host/frontend/webrtc/audio_handler.cpp	/^constexpr uint32_t NUM_JACKS = sizeof(JACKS) \/ sizeof(JACKS[0]);$/;"	v	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:uint32_t
NUM_SERVICE_CLASSES	guest/hals/ril/reference-libril/ril.h	/^#define NUM_SERVICE_CLASSES /;"	d
NUM_STREAMS	host/frontend/webrtc/audio_handler.cpp	/^constexpr uint32_t NUM_STREAMS = sizeof(STREAMS) \/ sizeof(STREAMS[0]);$/;"	v	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:uint32_t
NUM_TOMBSTONES_IN_TEST	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private static final int NUM_TOMBSTONES_IN_TEST = 1000;$/;"	f	class:TombstoneTransmitTest	file:
NUM_TOMBSTONES_PER_LOOP	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private static final int NUM_TOMBSTONES_PER_LOOP = 500;$/;"	f	class:TombstoneTransmitTest	file:
Name	common/libs/net/network_interface.h	/^  const std::string& Name() const {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:const std::string &
Name	host/commands/assemble_cvd/disk_flags.cc	/^  std::string Name() const override { return "BootImageRepacker"; }$/;"	f	class:cuttlefish::BootImageRepacker	typeref:typename:std::string	file:
Name	host/commands/assemble_cvd/disk_flags.cc	/^  std::string Name() const override { return "InitializeAccessKregistryImage"; }$/;"	f	class:cuttlefish::InitializeAccessKregistryImage	typeref:typename:std::string	file:
Name	host/commands/assemble_cvd/disk_flags.cc	/^  std::string Name() const override { return "InitializeMetadataImage"; }$/;"	f	class:cuttlefish::InitializeMetadataImage	typeref:typename:std::string	file:
Name	host/commands/assemble_cvd/flag_feature.cpp	/^  std::string Name() const override { return "ParseGflags"; }$/;"	f	class:cuttlefish::ParseGflagsImpl	typeref:typename:std::string	file:
Name	host/commands/fetcher/build_api.h	/^  const std::string& Name() const { return name; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:const std::string &
Name	host/commands/run_cvd/boot_state_machine.cc	/^  std::string Name() const override { return "CvdBootStateMachine"; }$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:std::string	file:
Name	host/commands/run_cvd/boot_state_machine.cc	/^  std::string Name() const override { return "ProcessLeader"; }$/;"	f	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "BluetoothConnector"; }$/;"	f	class:cuttlefish::BluetoothConnector	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "ConfigServer"; }$/;"	f	class:cuttlefish::ConfigServer	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "ConsoleForwarder"; }$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "GnssGrpcProxyServer"; }$/;"	f	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "KernelLogMonitor"; }$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "LogcatReceiver"; }$/;"	f	class:cuttlefish::LogcatReceiver	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "MetricsService"; }$/;"	f	class:cuttlefish::MetricsService	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "OpenWrt"; }$/;"	f	class:cuttlefish::OpenWrt	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "RootCanal"; }$/;"	f	class:cuttlefish::RootCanal	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "SecureEnvironment"; }$/;"	f	class:cuttlefish::SecureEnvironment	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "TombstoneReceiver"; }$/;"	f	class:cuttlefish::TombstoneReceiver	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "VehicleHalServer"; }$/;"	f	class:cuttlefish::VehicleHalServer	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "VirtualMachineManager"; }$/;"	f	class:cuttlefish::VmmCommands	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch.cc	/^  std::string Name() const override { return "WmediumdServer"; }$/;"	f	class:cuttlefish::WmediumdServer	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch_modem.cpp	/^  std::string Name() const override { return "ModemSimulator"; }$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch_streamer.cpp	/^  std::string Name() const override { return "StreamerSockets"; }$/;"	f	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:std::string	file:
Name	host/commands/run_cvd/launch_streamer.cpp	/^  std::string Name() const override { return "WebRtcServer"; }$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:std::string	file:
Name	host/commands/run_cvd/main.cc	/^  std::string Name() const override { return "CuttlefishEnvironment"; }$/;"	f	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:std::string	file:
Name	host/commands/run_cvd/server_loop.cpp	/^  std::string Name() const override { return "ServerLoop"; }$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:std::string	file:
Name	host/commands/run_cvd/validate.cpp	/^  std::string Name() const override { return "ValidateHostConfiguration"; }$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateHostConfigurationFeature	typeref:typename:std::string	file:
Name	host/commands/run_cvd/validate.cpp	/^  std::string Name() const override { return "ValidateTapDevices"; }$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateTapDevices	typeref:typename:std::string	file:
Name	host/commands/start/flag_forwarder.cc	/^  const std::string& Name() const { return name_; }$/;"	f	class:SubprocessFlag	typeref:typename:const std::string &	file:
Name	host/libs/config/adb/config.cpp	/^  std::string Name() const override { return "AdbConfigFragmentImpl"; }$/;"	f	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	typeref:typename:std::string	file:
Name	host/libs/config/adb/flags.cpp	/^  std::string Name() const override { return "AdbConfigFlagImpl"; }$/;"	f	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:std::string	file:
Name	host/libs/config/adb/launch.cpp	/^  std::string Name() const override { return "AdbConnector"; }$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbConnector	typeref:typename:std::string	file:
Name	host/libs/config/adb/launch.cpp	/^  std::string Name() const override { return "SocketVsockProxy"; }$/;"	f	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:std::string	file:
Name	host/libs/config/config_flag.cpp	/^  std::string Name() const override { return "ConfigFlagImpl"; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:std::string	file:
Name	host/libs/config/config_flag.cpp	/^  std::string Name() const override { return "ConfigFlagPlaceholderImpl"; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagPlaceholderImpl	typeref:typename:std::string	file:
Name	host/libs/config/config_flag.cpp	/^  std::string Name() const override { return "ConfigReader"; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:std::string	file:
Name	host/libs/config/config_flag.cpp	/^  std::string Name() const override { return "SystemImageDirFlagImpl"; }$/;"	f	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:std::string	file:
Name	host/libs/config/custom_actions.cpp	/^  std::string Name() const override { return "CustomActionConfig"; }$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:std::string	file:
Name	host/libs/config/data_image.cpp	/^  std::string Name() const override { return "InitializeDataImageImpl"; }$/;"	f	class:cuttlefish::InitializeDataImageImpl	typeref:typename:std::string	file:
Name	host/libs/config/data_image.cpp	/^  std::string Name() const override { return "InitializeEspImageImpl"; }$/;"	f	class:cuttlefish::InitializeEspImageImpl	typeref:typename:std::string	file:
Name	host/libs/config/data_image.cpp	/^  std::string Name() const override { return "InitializeMiscImageImpl"; }$/;"	f	class:cuttlefish::InitializeMiscImageImpl	typeref:typename:std::string	file:
Name	shared/config/task_profiles.json	/^            "Name": "MemSoftLimit",$/;"	s	object:Profiles.28.Actions.0.Params
Name	shared/config/task_profiles.json	/^            "Name": "MemSoftLimit",$/;"	s	object:Profiles.29.Actions.0.Params
Name	shared/config/task_profiles.json	/^            "Name": "MemSwappiness",$/;"	s	object:Profiles.28.Actions.1.Params
Name	shared/config/task_profiles.json	/^            "Name": "MemSwappiness",$/;"	s	object:Profiles.29.Actions.1.Params
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.0.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.1.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.10.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.11.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.12.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.13.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.14.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.15.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.16.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.17.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.18.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.19.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.2.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.20.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.21.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.22.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.23.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.3.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.30.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.4.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.5.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.6.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.7.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.8.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "JoinCgroup",$/;"	s	object:Profiles.9.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "SetAttribute",$/;"	s	object:Profiles.28.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "SetAttribute",$/;"	s	object:Profiles.28.Actions.1
Name	shared/config/task_profiles.json	/^          "Name": "SetAttribute",$/;"	s	object:Profiles.29.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "SetAttribute",$/;"	s	object:Profiles.29.Actions.1
Name	shared/config/task_profiles.json	/^          "Name": "SetClamps",$/;"	s	object:Profiles.26.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "SetClamps",$/;"	s	object:Profiles.27.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "SetTimerSlack",$/;"	s	object:Profiles.24.Actions.0
Name	shared/config/task_profiles.json	/^          "Name": "SetTimerSlack",$/;"	s	object:Profiles.25.Actions.0
Name	shared/config/task_profiles.json	/^      "Name": "CPUSET_SP_BACKGROUND",$/;"	s	object:AggregateProfiles.7
Name	shared/config/task_profiles.json	/^      "Name": "CPUSET_SP_DEFAULT",$/;"	s	object:AggregateProfiles.6
Name	shared/config/task_profiles.json	/^      "Name": "CPUSET_SP_FOREGROUND",$/;"	s	object:AggregateProfiles.8
Name	shared/config/task_profiles.json	/^      "Name": "CPUSET_SP_RESTRICTED",$/;"	s	object:AggregateProfiles.11
Name	shared/config/task_profiles.json	/^      "Name": "CPUSET_SP_SYSTEM",$/;"	s	object:AggregateProfiles.10
Name	shared/config/task_profiles.json	/^      "Name": "CPUSET_SP_TOP_APP",$/;"	s	object:AggregateProfiles.9
Name	shared/config/task_profiles.json	/^      "Name": "CameraServiceCapacity",$/;"	s	object:Profiles.19
Name	shared/config/task_profiles.json	/^      "Name": "HighEnergySaving",$/;"	s	object:Profiles.0
Name	shared/config/task_profiles.json	/^      "Name": "HighIoPriority",$/;"	s	object:Profiles.22
Name	shared/config/task_profiles.json	/^      "Name": "HighMemoryUsage",$/;"	s	object:Profiles.29
Name	shared/config/task_profiles.json	/^      "Name": "HighPerformance",$/;"	s	object:Profiles.3
Name	shared/config/task_profiles.json	/^      "Name": "LowIoPriority",$/;"	s	object:Profiles.20
Name	shared/config/task_profiles.json	/^      "Name": "LowMemoryUsage",$/;"	s	object:Profiles.28
Name	shared/config/task_profiles.json	/^      "Name": "MaxIoPriority",$/;"	s	object:Profiles.23
Name	shared/config/task_profiles.json	/^      "Name": "MaxPerformance",$/;"	s	object:Profiles.4
Name	shared/config/task_profiles.json	/^      "Name": "NormalIoPriority",$/;"	s	object:Profiles.21
Name	shared/config/task_profiles.json	/^      "Name": "NormalPerformance",$/;"	s	object:Profiles.1
Name	shared/config/task_profiles.json	/^      "Name": "PerfBoost",$/;"	s	object:Profiles.26
Name	shared/config/task_profiles.json	/^      "Name": "PerfClamp",$/;"	s	object:Profiles.27
Name	shared/config/task_profiles.json	/^      "Name": "ProcessCapacityHigh",$/;"	s	object:Profiles.15
Name	shared/config/task_profiles.json	/^      "Name": "ProcessCapacityLow",$/;"	s	object:Profiles.13
Name	shared/config/task_profiles.json	/^      "Name": "ProcessCapacityMax",$/;"	s	object:Profiles.16
Name	shared/config/task_profiles.json	/^      "Name": "ProcessCapacityNormal",$/;"	s	object:Profiles.14
Name	shared/config/task_profiles.json	/^      "Name": "RealtimePerformance",$/;"	s	object:Profiles.5
Name	shared/config/task_profiles.json	/^      "Name": "SCHED_SP_BACKGROUND",$/;"	s	object:AggregateProfiles.1
Name	shared/config/task_profiles.json	/^      "Name": "SCHED_SP_DEFAULT",$/;"	s	object:AggregateProfiles.0
Name	shared/config/task_profiles.json	/^      "Name": "SCHED_SP_FOREGROUND",$/;"	s	object:AggregateProfiles.2
Name	shared/config/task_profiles.json	/^      "Name": "SCHED_SP_RT_APP",$/;"	s	object:AggregateProfiles.5
Name	shared/config/task_profiles.json	/^      "Name": "SCHED_SP_SYSTEM",$/;"	s	object:AggregateProfiles.4
Name	shared/config/task_profiles.json	/^      "Name": "SCHED_SP_TOP_APP",$/;"	s	object:AggregateProfiles.3
Name	shared/config/task_profiles.json	/^      "Name": "ServiceCapacityLow",$/;"	s	object:Profiles.17
Name	shared/config/task_profiles.json	/^      "Name": "ServiceCapacityRestricted",$/;"	s	object:Profiles.18
Name	shared/config/task_profiles.json	/^      "Name": "ServicePerformance",$/;"	s	object:Profiles.2
Name	shared/config/task_profiles.json	/^      "Name": "SystemMemoryProcess",$/;"	s	object:Profiles.30
Name	shared/config/task_profiles.json	/^      "Name": "TimerSlackHigh",$/;"	s	object:Profiles.24
Name	shared/config/task_profiles.json	/^      "Name": "TimerSlackNormal",$/;"	s	object:Profiles.25
Name	shared/config/task_profiles.json	/^      "Name": "VrKernelCapacity",$/;"	s	object:Profiles.6
Name	shared/config/task_profiles.json	/^      "Name": "VrProcessCapacityHigh",$/;"	s	object:Profiles.12
Name	shared/config/task_profiles.json	/^      "Name": "VrProcessCapacityLow",$/;"	s	object:Profiles.10
Name	shared/config/task_profiles.json	/^      "Name": "VrProcessCapacityNormal",$/;"	s	object:Profiles.11
Name	shared/config/task_profiles.json	/^      "Name": "VrServiceCapacityHigh",$/;"	s	object:Profiles.9
Name	shared/config/task_profiles.json	/^      "Name": "VrServiceCapacityLow",$/;"	s	object:Profiles.7
Name	shared/config/task_profiles.json	/^      "Name": "VrServiceCapacityNormal",$/;"	s	object:Profiles.8
NativeDisplayType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef EGLNativeDisplayType NativeDisplayType;$/;"	t	typeref:typename:EGLNativeDisplayType
NativePixmapType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef EGLNativePixmapType  NativePixmapType;$/;"	t	typeref:typename:EGLNativePixmapType
NativeVsock	host/libs/config/adb/adb.h	/^  NativeVsock,$/;"	e	enum:cuttlefish::AdbMode
NativeWindowType	host/libs/graphics_detector/include/EGL/eglplatform.h	/^typedef EGLNativeWindowType  NativeWindowType;$/;"	t	typeref:typename:EGLNativeWindowType
NetConfig	common/libs/device_config/host_device_config.cpp	/^class NetConfig {$/;"	c	namespace:cuttlefish::__anonf277137d0111	file:
NetlinkClient	common/libs/net/netlink_client.h	/^  NetlinkClient() {}$/;"	f	class:cuttlefish::NetlinkClient
NetlinkClient	common/libs/net/netlink_client.h	/^class NetlinkClient {$/;"	c	namespace:cuttlefish
NetlinkClientFactory	common/libs/net/netlink_client.h	/^class NetlinkClientFactory {$/;"	c	namespace:cuttlefish
NetlinkClientFactoryImpl	common/libs/net/netlink_client.cpp	/^class NetlinkClientFactoryImpl : public NetlinkClientFactory {$/;"	c	namespace:cuttlefish::__anon61381e100111	file:
NetlinkClientImpl	common/libs/net/netlink_client.cpp	/^class NetlinkClientImpl : public NetlinkClient {$/;"	c	namespace:cuttlefish::__anon61381e100111	file:
NetlinkRequest	common/libs/net/netlink_request.cpp	/^NetlinkRequest::NetlinkRequest(NetlinkRequest&& other) {$/;"	f	class:cuttlefish::NetlinkRequest
NetlinkRequest	common/libs/net/netlink_request.cpp	/^NetlinkRequest::NetlinkRequest(int32_t command, int32_t flags) {$/;"	f	class:cuttlefish::NetlinkRequest
NetlinkRequest	common/libs/net/netlink_request.h	/^class NetlinkRequest {$/;"	c	namespace:cuttlefish
NetworkInterface	common/libs/net/network_interface.h	/^  explicit NetworkInterface(size_t if_index)$/;"	f	class:cuttlefish::NetworkInterface
NetworkInterface	common/libs/net/network_interface.h	/^class NetworkInterface {$/;"	c	namespace:cuttlefish
NetworkInterfaceManager	common/libs/net/network_interface_manager.cpp	/^NetworkInterfaceManager::NetworkInterfaceManager($/;"	f	class:cuttlefish::NetworkInterfaceManager
NetworkInterfaceManager	common/libs/net/network_interface_manager.h	/^class NetworkInterfaceManager {$/;"	c	namespace:cuttlefish
NetworkOperator	host/commands/modem_simulator/network_service.h	/^    NetworkOperator() {}$/;"	f	struct:cuttlefish::NetworkService::NetworkOperator
NetworkOperator	host/commands/modem_simulator/network_service.h	/^    NetworkOperator(const std::string& number,$/;"	f	struct:cuttlefish::NetworkService::NetworkOperator
NetworkOperator	host/commands/modem_simulator/network_service.h	/^  struct NetworkOperator {$/;"	s	class:cuttlefish::NetworkService
NetworkRegistrationStatus	host/commands/modem_simulator/network_service.h	/^    NetworkRegistrationStatus() :$/;"	f	struct:cuttlefish::NetworkService::NetworkRegistrationStatus
NetworkRegistrationStatus	host/commands/modem_simulator/network_service.h	/^  struct NetworkRegistrationStatus {$/;"	s	class:cuttlefish::NetworkService
NetworkService	host/commands/modem_simulator/network_service.cpp	/^NetworkService::NetworkService(int32_t service_id,$/;"	f	class:cuttlefish::NetworkService
NetworkService	host/commands/modem_simulator/network_service.h	/^class NetworkService : public ModemService, public std::enable_shared_from_this<NetworkService> /;"	c	namespace:cuttlefish
NetworkTypeBitmap	guest/hals/ril/reference-ril/reference-ril.c	/^} NetworkTypeBitmap;$/;"	t	typeref:struct:__anon70d7df6f0208	file:
New	common/libs/net/netlink_client.cpp	/^  std::unique_ptr<NetlinkClient> New(int type) override {$/;"	f	class:cuttlefish::__anon61381e100111::NetlinkClientFactoryImpl	typeref:typename:std::unique_ptr<NetlinkClient>	file:
New	common/libs/net/network_interface_manager.cpp	/^std::unique_ptr<NetworkInterfaceManager> NetworkInterfaceManager::New($/;"	f	class:cuttlefish::NetworkInterfaceManager	typeref:typename:std::unique_ptr<NetworkInterfaceManager>
New	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^std::unique_ptr<WmediumdController> WmediumdController::New($/;"	f	class:cuttlefish::WmediumdController	typeref:typename:std::unique_ptr<WmediumdController>
NewfsMsdos	host/libs/config/data_image.cpp	/^bool NewfsMsdos(const std::string& data_image, int data_image_mb,$/;"	f	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:bool
NoContent	host/libs/websocket/websocket_handler.h	/^  NoContent = 204,$/;"	e	enum:cuttlefish::HttpStatusCode
None	guest/hals/confirmationui/guest_session.h	/^        None = 0,$/;"	e	enum:android::hardware::confirmationui::V1_0::implementation::GuestSession::ListenerState
NotFound	host/libs/websocket/websocket_handler.h	/^  NotFound = 404,$/;"	e	enum:cuttlefish::HttpStatusCode
NotSupported	host/libs/audio_connector/buffers.h	/^  NotSupported,$/;"	e	enum:cuttlefish::Status
NvBufferToRecord	host/commands/secure_env/tpm_gatekeeper.cpp	/^static std::optional<gatekeeper::failure_record_t> NvBufferToRecord($/;"	f	namespace:cuttlefish	typeref:typename:std::optional<gatekeeper::failure_record_t>	file:
NvramConfig	host/commands/modem_simulator/nvram_config.cpp	/^NvramConfig::NvramConfig(size_t num_instances, int sim_type)$/;"	f	class:cuttlefish::NvramConfig
NvramConfig	host/commands/modem_simulator/nvram_config.h	/^class NvramConfig {$/;"	c	namespace:cuttlefish
OI	host/commands/modem_simulator/sim_service.h	/^      OI = 2,  \/\/ Barr all outgoing international calls$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
OK	host/libs/confui/cbor.h	/^    OK = 0,$/;"	e	enum:cuttlefish::confui::Cbor::Error
ONE_VALID_SIM_MUST_BE_PRESENT	guest/hals/ril/reference-libril/ril.h	/^    ONE_VALID_SIM_MUST_BE_PRESENT = 1,  \/* Any SIM card can be used as far as one valid card is$/;"	e	enum:__anon0bfbaecf2803
ONLY_MESSAGE	common/libs/utils/tee_logging.h	/^  ONLY_MESSAGE,$/;"	e	enum:cuttlefish::MetadataLevel
OPEN_CHANNEL	host/commands/modem_simulator/stk_service.h	/^    OPEN_CHANNEL        = 0x40,$/;"	e	enum:cuttlefish::StkService::CommandType
OPER_SELECTION_AUTOMATIC	host/commands/modem_simulator/network_service.h	/^    OPER_SELECTION_AUTOMATIC = 0,$/;"	e	enum:cuttlefish::NetworkService::OperatorSelectionMode
OPER_SELECTION_DEREGISTRATION	host/commands/modem_simulator/network_service.h	/^    OPER_SELECTION_DEREGISTRATION,$/;"	e	enum:cuttlefish::NetworkService::OperatorSelectionMode
OPER_SELECTION_MANUAL	host/commands/modem_simulator/network_service.h	/^    OPER_SELECTION_MANUAL,$/;"	e	enum:cuttlefish::NetworkService::OperatorSelectionMode
OPER_SELECTION_MANUAL_AUTOMATIC	host/commands/modem_simulator/network_service.h	/^    OPER_SELECTION_MANUAL_AUTOMATIC$/;"	e	enum:cuttlefish::NetworkService::OperatorSelectionMode
OPER_SELECTION_SET_FORMAT	host/commands/modem_simulator/network_service.h	/^    OPER_SELECTION_SET_FORMAT,$/;"	e	enum:cuttlefish::NetworkService::OperatorSelectionMode
OPER_STATE_AVAILABLE	host/commands/modem_simulator/network_service.h	/^      OPER_STATE_AVAILABLE  = 1,$/;"	e	enum:cuttlefish::NetworkService::NetworkOperator::OperatorState
OPER_STATE_CURRENT	host/commands/modem_simulator/network_service.h	/^      OPER_STATE_CURRENT    = 2,$/;"	e	enum:cuttlefish::NetworkService::NetworkOperator::OperatorState
OPER_STATE_FORBIDDEN	host/commands/modem_simulator/network_service.h	/^      OPER_STATE_FORBIDDEN  = 3$/;"	e	enum:cuttlefish::NetworkService::NetworkOperator::OperatorState
OPER_STATE_UNKNOWN	host/commands/modem_simulator/network_service.h	/^      OPER_STATE_UNKNOWN    = 0,$/;"	e	enum:cuttlefish::NetworkService::NetworkOperator::OperatorState
OTA_TOOLS	host/commands/fetcher/fetch_cvd.cc	/^const std::string OTA_TOOLS = "otatools.zip";$/;"	v	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:const std::string
OTA_TOOLS_DIR	host/commands/fetcher/fetch_cvd.cc	/^const std::string OTA_TOOLS_DIR = "\/otatools\/";$/;"	v	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:const std::string
OUT_OF_DATA	host/libs/confui/cbor.h	/^    OUT_OF_DATA = 1,$/;"	e	enum:cuttlefish::confui::Cbor::Error
OVERRIDE_TARGET_FLATTEN_APEX	vsoc_x86_noapex/aosp_cf_noapex.mk	/^OVERRIDE_TARGET_FLATTEN_APEX := true$/;"	m
OX	host/commands/modem_simulator/sim_service.h	/^      OX = 3,  \/\/ Barr all outgoing international calls, except to Home Country$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
O_TMPFILE	host/commands/assemble_cvd/assemble_cvd.cc	/^# define O_TMPFILE /;"	d	file:
ObjectSlot	host/commands/secure_env/tpm_resource_manager.cpp	/^TpmResourceManager::ObjectSlot::ObjectSlot(TpmResourceManager* resource_manager)$/;"	f	class:cuttlefish::TpmResourceManager::ObjectSlot
ObjectSlot	host/commands/secure_env/tpm_resource_manager.cpp	/^TpmResourceManager::ObjectSlot::ObjectSlot(TpmResourceManager* resource_manager,$/;"	f	class:cuttlefish::TpmResourceManager::ObjectSlot
ObjectSlot	host/commands/secure_env/tpm_resource_manager.h	/^  class ObjectSlot {$/;"	c	class:cuttlefish::TpmResourceManager
ObtainConfig	common/libs/device_config/host_device_config.cpp	/^  bool ObtainConfig(const std::string& interface, const std::string& dns) {$/;"	f	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:bool	file:
OemHookImpl	guest/hals/ril/reference-libril/ril_service.cpp	/^struct OemHookImpl : public IOemHook {$/;"	s	file:
Ok	host/libs/audio_connector/buffers.h	/^  Ok = 0x8000,$/;"	e	enum:cuttlefish::Status
Ok	host/libs/websocket/websocket_handler.h	/^  Ok = 200,$/;"	e	enum:cuttlefish::HttpStatusCode
OnAdbChannelOpen	host/frontend/webrtc/connection_observer.cpp	/^  void OnAdbChannelOpen(std::function<bool(const uint8_t *, size_t)>$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnAdbMessage	host/frontend/webrtc/connection_observer.cpp	/^  void OnAdbMessage(const uint8_t *msg, size_t size) override {$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnBluetoothChannelOpen	host/frontend/webrtc/connection_observer.cpp	/^  void OnBluetoothChannelOpen(std::function<bool(const uint8_t *, size_t)>$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnBluetoothMessage	host/frontend/webrtc/connection_observer.cpp	/^  void OnBluetoothMessage(const uint8_t *msg, size_t size) override {$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnBootEvtReceived	host/commands/run_cvd/boot_state_machine.cc	/^  bool OnBootEvtReceived(SharedFD boot_events_pipe) {$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:bool	file:
OnCameraData	host/frontend/webrtc/connection_observer.cpp	/^  void OnCameraData(const std::vector<char> &data) override {$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnCaptureBuffer	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::OnCaptureBuffer(RxBuffer buffer) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
OnClose	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::OnClose() {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
OnClose	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::OnClose() {$/;"	f	class:WsConnectionImpl	typeref:typename:void
OnClose	host/frontend/webrtc/main.cpp	/^  virtual void OnClose() override {$/;"	f	class:CfOperatorObserver	typeref:typename:void	file:
OnClosed	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientWSHandler::OnClosed() {$/;"	f	class:cuttlefish::ClientWSHandler	typeref:typename:void
OnClosed	host/frontend/webrtc_operator/device_handler.cpp	/^void DeviceHandler::OnClosed() {$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:void
OnConnected	host/frontend/webrtc/connection_observer.cpp	/^  void OnConnected(std::function<void(const uint8_t *, size_t, bool)>$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnConnected	host/frontend/webrtc_operator/signal_handler.cpp	/^void SignalHandler::OnConnected() {}$/;"	f	class:cuttlefish::SignalHandler	typeref:typename:void
OnConnectionChange	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnConnectionChange($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnConsumedCb	host/libs/audio_connector/buffers.h	/^using OnConsumedCb = std::function<void(AudioStatus, uint32_t \/*latency*\/,$/;"	t	namespace:cuttlefish
OnControlChannelOpen	host/frontend/webrtc/connection_observer.cpp	/^  void OnControlChannelOpen(std::function<bool(const Json::Value)>$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnControlMessage	host/frontend/webrtc/connection_observer.cpp	/^  void OnControlMessage(const uint8_t* msg, size_t size) override {$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnCreateSDPFailure	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnCreateSDPFailure(webrtc::RTCError error) {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnCreateSDPSuccess	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnCreateSDPSuccess($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnDataChannel	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnDataChannel($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnDataRegisterStateChanged	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::OnDataRegisterStateChanged() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
OnEncodedImage	host/frontend/webrtc/lib/local_recorder.cpp	/^webrtc::EncodedImageCallback::Result LocalRecorder::Display::OnEncodedImage($/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:webrtc::EncodedImageCallback::Result
OnError	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::OnError(const std::string& error) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
OnError	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::OnError(const std::string& error) {$/;"	f	class:WsConnectionImpl	typeref:typename:void
OnError	host/frontend/webrtc/main.cpp	/^  virtual void OnError() override {$/;"	f	class:CfOperatorObserver	typeref:typename:void	file:
OnFail	tools/create_base_image.go	/^type OnFail int$/;"	t	package:main	typeref:typename:int
OnFailure	host/frontend/webrtc/lib/client_handler.cpp	/^  void OnFailure(webrtc::RTCError error) override {$/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdCreateSessionDescriptionObserver	typeref:typename:void	file:
OnFailure	host/frontend/webrtc/lib/client_handler.cpp	/^  void OnFailure(webrtc::RTCError error) override {$/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdSetSessionDescriptionObserver	typeref:typename:void	file:
OnFirstClientConnected	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::OnFirstClientConnected() {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
OnFrame	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::OnFrame(std::shared_ptr<AudioFrameBuffer> frame,$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
OnFrame	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  void OnFrame(std::shared_ptr<AudioFrameBuffer> frame,$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImplSinkWrapper	typeref:typename:void
OnFrame	host/frontend/webrtc/lib/camera_streamer.cpp	/^void CameraStreamer::OnFrame(const webrtc::VideoFrame& client_frame) {$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:void
OnFrame	host/frontend/webrtc/lib/local_recorder.cpp	/^void LocalRecorder::Display::OnFrame(const webrtc::VideoFrame& frame) {$/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:void
OnFrame	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^void VideoTrackSourceImpl::OnFrame(std::shared_ptr<VideoFrameBuffer> frame,$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:void
OnFrame	host/frontend/webrtc/lib/video_track_source_impl.h	/^  void OnFrame(std::shared_ptr<VideoFrameBuffer> frame,$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImplSinkWrapper	typeref:typename:void
OnIceCandidate	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnIceCandidate($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnIceCandidateError	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnIceCandidateError(const std::string &address, int port,$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnIceCandidateError	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnIceCandidateError(const std::string &host_candidate,$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnIceCandidatesRemoved	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnIceCandidatesRemoved($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnIceGatheringChange	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnIceGatheringChange($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnKeyboardEvent	host/frontend/webrtc/connection_observer.cpp	/^  void OnKeyboardEvent(uint16_t code, bool down) override {$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnMessage	host/frontend/webrtc/lib/client_handler.cpp	/^void AdbChannelHandler::OnMessage(const webrtc::DataBuffer &msg) {$/;"	f	class:cuttlefish::webrtc_streaming::AdbChannelHandler	typeref:typename:void
OnMessage	host/frontend/webrtc/lib/client_handler.cpp	/^void BluetoothChannelHandler::OnMessage(const webrtc::DataBuffer &msg) {$/;"	f	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler	typeref:typename:void
OnMessage	host/frontend/webrtc/lib/client_handler.cpp	/^void CameraChannelHandler::OnMessage(const webrtc::DataBuffer &msg) {$/;"	f	class:cuttlefish::webrtc_streaming::CameraChannelHandler	typeref:typename:void
OnMessage	host/frontend/webrtc/lib/client_handler.cpp	/^void ControlChannelHandler::OnMessage(const webrtc::DataBuffer &msg) {$/;"	f	class:cuttlefish::webrtc_streaming::ControlChannelHandler	typeref:typename:void
OnMessage	host/frontend/webrtc/lib/client_handler.cpp	/^void InputChannelHandler::OnMessage(const webrtc::DataBuffer &msg) {$/;"	f	class:cuttlefish::webrtc_streaming::InputChannelHandler	typeref:typename:void
OnMultiTouchEvent	host/frontend/webrtc/connection_observer.cpp	/^  void OnMultiTouchEvent(const std::string &display_label, Json::Value id,$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnNextFrame	host/libs/screen_connector/screen_connector.h	/^  ProcessedFrameType OnNextFrame() { return sc_frame_multiplexer_.Pop(); }$/;"	f	class:cuttlefish::ScreenConnector	typeref:typename:ProcessedFrameType
OnOpen	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::OnOpen() {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
OnOpen	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::OnOpen() {$/;"	f	class:WsConnectionImpl	typeref:typename:void
OnPlaybackBuffer	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::OnPlaybackBuffer(TxBuffer buffer) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
OnReceive	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::OnReceive(const uint8_t* msg, size_t length,$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
OnReceive	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::OnReceive(const uint8_t* data, size_t len,$/;"	f	class:WsConnectionImpl	typeref:typename:void
OnReceive	host/frontend/webrtc_operator/signal_handler.cpp	/^void SignalHandler::OnReceive(const uint8_t* msg, size_t len, bool binary) {$/;"	f	class:cuttlefish::SignalHandler	typeref:typename:void
OnReceive	host/frontend/webrtc_operator/signal_handler.cpp	/^void SignalHandler::OnReceive(const uint8_t* msg, size_t len, bool binary,$/;"	f	class:cuttlefish::SignalHandler	typeref:typename:void
OnReceive	host/libs/websocket/websocket_handler.h	/^  virtual void OnReceive(const uint8_t* msg, size_t len, bool binary,$/;"	f	class:cuttlefish::WebSocketHandler	typeref:typename:void
OnRegistered	host/frontend/webrtc/main.cpp	/^  virtual void OnRegistered() override {$/;"	f	class:CfOperatorObserver	typeref:typename:void	file:
OnRemoveTrack	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnRemoveTrack($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnRenegotiationNeeded	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnRenegotiationNeeded() {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnRequestAck	guest/hals/ril/reference-libril/ril.h	/^    void (*OnRequestAck) (RIL_Token t);$/;"	m	struct:RIL_Env	typeref:typename:void (*)(RIL_Token t)
OnRequestComplete	guest/hals/ril/reference-libril/ril.h	/^    void (*OnRequestComplete)(RIL_Token t, RIL_Errno e,$/;"	m	struct:RIL_Env	typeref:typename:void (*)(RIL_Token t,RIL_Errno e,void * response,size_t responselen)
OnSetRemoteDescriptionComplete	host/frontend/webrtc/lib/client_handler.cpp	/^  void OnSetRemoteDescriptionComplete(webrtc::RTCError error) override {$/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdOnSetRemoteDescription	typeref:typename:void	file:
OnSetSDPFailure	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnSetSDPFailure(webrtc::RTCError error) {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnSignalStrengthChanged	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::OnSignalStrengthChanged() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
OnSignalingChange	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnSignalingChange($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnSimStatusChanged	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::OnSimStatusChanged(SimService::SimStatus sim_status) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
OnSimStatusChanged	host/commands/modem_simulator/sim_service.cpp	/^void SimService::OnSimStatusChanged() {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
OnSocketReadyCb	host/commands/run_cvd/process_monitor.h	/^using OnSocketReadyCb = std::function<bool(MonitorEntry*, int)>;$/;"	t	namespace:cuttlefish
OnStandardizedIceConnectionChange	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnStandardizedIceConnectionChange($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnStateChange	host/frontend/webrtc/lib/client_handler.cpp	/^void AdbChannelHandler::OnStateChange() {$/;"	f	class:cuttlefish::webrtc_streaming::AdbChannelHandler	typeref:typename:void
OnStateChange	host/frontend/webrtc/lib/client_handler.cpp	/^void BluetoothChannelHandler::OnStateChange() {$/;"	f	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler	typeref:typename:void
OnStateChange	host/frontend/webrtc/lib/client_handler.cpp	/^void CameraChannelHandler::OnStateChange() {$/;"	f	class:cuttlefish::webrtc_streaming::CameraChannelHandler	typeref:typename:void
OnStateChange	host/frontend/webrtc/lib/client_handler.cpp	/^void ControlChannelHandler::OnStateChange() {$/;"	f	class:cuttlefish::webrtc_streaming::ControlChannelHandler	typeref:typename:void
OnStateChange	host/frontend/webrtc/lib/client_handler.cpp	/^void InputChannelHandler::OnStateChange() {$/;"	f	class:cuttlefish::webrtc_streaming::InputChannelHandler	typeref:typename:void
OnSuccess	host/frontend/webrtc/lib/client_handler.cpp	/^  void OnSuccess() override {$/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdSetSessionDescriptionObserver	typeref:typename:void	file:
OnSuccess	host/frontend/webrtc/lib/client_handler.cpp	/^  void OnSuccess(webrtc::SessionDescriptionInterface *desc) override {$/;"	f	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdCreateSessionDescriptionObserver	typeref:typename:void	file:
OnSwitchEvent	host/frontend/webrtc/connection_observer.cpp	/^  void OnSwitchEvent(uint16_t code, bool state) override {$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnTouchEvent	host/frontend/webrtc/connection_observer.cpp	/^  void OnTouchEvent(const std::string &display_label, int x, int y,$/;"	f	class:cuttlefish::ConnectionObserverImpl	typeref:typename:void	file:
OnTrack	host/frontend/webrtc/lib/client_handler.cpp	/^void ClientHandler::OnTrack($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:void
OnUnsolicitedCommandForTR	host/commands/modem_simulator/stk_service.cpp	/^void StkService::OnUnsolicitedCommandForTR(std::string& command) {$/;"	f	class:cuttlefish::StkService	typeref:typename:void
OnUnsolicitedResponse	guest/hals/ril/reference-libril/ril.h	/^    void (*OnUnsolicitedResponse)(int unsolResponse, const void *data, size_t datalen);$/;"	m	struct:RIL_Env	typeref:typename:void (*)(int unsolResponse,const void * data,size_t datalen)
OnUnsolicitedResponse	guest/hals/ril/reference-libril/ril.h	/^    void (*OnUnsolicitedResponse)(int unsolResponse, const void *data, size_t datalen, RIL_SOCKE/;"	m	struct:RIL_Env	typeref:typename:void (*)(int unsolResponse,const void * data,size_t datalen,RIL_SOCKET_ID socket_id)
OnVoiceRegisterStateChanged	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::OnVoiceRegisterStateChanged() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
OnWritable	host/libs/websocket/websocket_handler.cpp	/^bool WebSocketHandler::OnWritable() {$/;"	f	class:cuttlefish::WebSocketHandler	typeref:typename:bool
OnWritable	host/libs/websocket/websocket_handler.cpp	/^int DynHandler::OnWritable() {$/;"	f	class:cuttlefish::DynHandler	typeref:typename:int
OnWriteable	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionImpl::OnWriteable() {$/;"	f	class:WsConnectionImpl	typeref:typename:void
OneBase	host/libs/config/inject.h	/^  struct OneBase {$/;"	s	struct:cuttlefish::Multibindings
OneBaseOneImpl	host/libs/config/inject.h	/^  static fruit::Component<Deps> OneBaseOneImpl() {$/;"	f	struct:cuttlefish::Multibindings	typeref:typename:fruit::Component<Deps>
OneshotHmac	host/commands/secure_env/tpm_hmac.cpp	/^static UniqueEsysPtr<TPM2B_DIGEST> OneshotHmac($/;"	f	namespace:cuttlefish	typeref:typename:UniqueEsysPtr<TPM2B_DIGEST>	file:
Open	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Open(const std::string& path, int flags, mode_t mode) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
Open	common/libs/net/network_interface_manager.cpp	/^std::unique_ptr<NetworkInterface> NetworkInterfaceManager::Open($/;"	f	class:cuttlefish::NetworkInterfaceManager	typeref:typename:std::unique_ptr<NetworkInterface>
OpenNetlink	common/libs/net/netlink_client.cpp	/^bool NetlinkClientImpl::OpenNetlink(int type) {$/;"	f	class:cuttlefish::__anon61381e100111::NetlinkClientImpl	typeref:typename:bool
OpenPTY	host/commands/console_forwarder/main.cpp	/^  SharedFD OpenPTY() {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:SharedFD	file:
OpenSocketConnection	common/frontend/socket_vsock_proxy/main.cpp	/^cuttlefish::SharedFD OpenSocketConnection() {$/;"	f	namespace:__anon913036200111	typeref:typename:cuttlefish::SharedFD
OpenTapInterface	common/libs/utils/network.cpp	/^SharedFD OpenTapInterface(const std::string& interface_name) {$/;"	f	namespace:cuttlefish	typeref:typename:SharedFD
OpenWrt	host/commands/run_cvd/launch.cc	/^class OpenWrt : public CommandSource {$/;"	c	namespace:cuttlefish	file:
OperatorObserver	host/frontend/webrtc/lib/streamer.h	/^class OperatorObserver {$/;"	c	namespace:cuttlefish::webrtc_streaming
OperatorSelectionMode	host/commands/modem_simulator/network_service.h	/^  enum OperatorSelectionMode {$/;"	g	class:cuttlefish::NetworkService
OperatorServerConfig	host/frontend/webrtc/lib/streamer.cpp	/^struct OperatorServerConfig {$/;"	s	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	file:
OperatorState	host/commands/modem_simulator/network_service.h	/^    enum OperatorState {$/;"	g	struct:cuttlefish::NetworkService::NetworkOperator
OsType	host/commands/metrics/proto/cf_metrics_event.proto	/^  enum OsType {$/;"	g	message:cuttlefish.MetricsEvent
PARTIAL	guest/hals/ril/reference-libril/ril.h	/^    PARTIAL = 0x01,   \/\/ The result contains a part of the scan results$/;"	e	enum:__anon0bfbaecfb203
PARTIAL_MATCH	host/commands/modem_simulator/modem_service.h	/^  enum MatchMode {FULL_MATCH = 0, PARTIAL_MATCH = 1};$/;"	e	enum:cuttlefish::CommandHandler::MatchMode
PARTITION_SIZE_SHIFT	common/libs/utils/size_utils.h	/^constexpr int PARTITION_SIZE_SHIFT = 12;$/;"	v	namespace:cuttlefish	typeref:typename:int
PDPContext	host/commands/modem_simulator/data_service.h	/^  struct PDPContext {$/;"	s	class:cuttlefish::DataService
PDPInfo	guest/hals/ril/reference-ril/reference-ril.c	/^struct PDPInfo {$/;"	s	file:
PDPState	guest/hals/ril/reference-ril/reference-ril.c	/^enum PDPState {$/;"	g	file:
PDP_BUSY	guest/hals/ril/reference-ril/reference-ril.c	/^    PDP_BUSY,$/;"	e	enum:PDPState	file:
PDP_FAIL_ACTIVATION_REJECT_GGSN	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ACTIVATION_REJECT_GGSN = 0x1E,   \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ACTIVATION_REJECT_UNSPECIFIED = 0x1F,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_APN_TYPE_CONFLICT	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_APN_TYPE_CONFLICT = 0x70,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_AUTH_FAILURE_ON_EMERGENCY_CALL = 0x7A,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_COMPANION_IFACE_IN_USE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_COMPANION_IFACE_IN_USE = 0x76,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_CONDITIONAL_IE_ERROR	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_CONDITIONAL_IE_ERROR = 0x64,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_DATA_REGISTRATION_FAIL	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_DATA_REGISTRATION_FAIL = -2,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_EMERGENCY_IFACE_ONLY	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_EMERGENCY_IFACE_ONLY = 0x74,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_EMM_ACCESS_BARRED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_EMM_ACCESS_BARRED = 0x73,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_EMM_ACCESS_BARRED_INFINITE_RETRY = 0x79,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_ERROR_UNSPECIFIED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ERROR_UNSPECIFIED = 0xffff, \/* retry silently. Will be deprecated soon as$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_ESM_INFO_NOT_RECEIVED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ESM_INFO_NOT_RECEIVED = 0x35,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_FEATURE_NOT_SUPP	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_FEATURE_NOT_SUPP = 0x28,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_FILTER_SEMANTIC_ERROR	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_FILTER_SEMANTIC_ERROR = 0x2C,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_FILTER_SYTAX_ERROR	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_FILTER_SYTAX_ERROR = 0x2D,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_IFACE_AND_POL_FAMILY_MISMATCH = 0x78,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_IFACE_MISMATCH	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_IFACE_MISMATCH = 0x75,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_INSUFFICIENT_RESOURCES	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_INSUFFICIENT_RESOURCES = 0x1A,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_INTERNAL_CALL_PREEMPT_BY_HIGH_PRIO_APN = 0x72,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_INVALID_MANDATORY_INFO	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_INVALID_MANDATORY_INFO = 0x60,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_INVALID_PCSCF_ADDR	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_INVALID_PCSCF_ADDR = 0x71,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_INVALID_TRANSACTION_ID	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_INVALID_TRANSACTION_ID = 0x51,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_IP_ADDRESS_MISMATCH	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_IP_ADDRESS_MISMATCH = 0x77,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_LLC_SNDCP	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_LLC_SNDCP = 0x19,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MATCH_ALL_RULE_NOT_ALLOWED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MATCH_ALL_RULE_NOT_ALLOWED = 0x8CD,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MAX_ACTIVE_PDP_CONTEXT_REACHED = 0x41,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MESSAGE_INCORRECT_SEMANTIC = 0x5F,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MESSAGE_TYPE_UNSUPPORTED = 0x61,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MISSING_UNKNOWN_APN	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MISSING_UNKNOWN_APN = 0x1B,      \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MSG_AND_PROTOCOL_STATE_UNCOMPATIBLE = 0x65,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MSG_TYPE_NONCOMPATIBLE_STATE = 0x62,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_MULTI_CONN_TO_SAME_PDN_NOT_ALLOWED = 0x37,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_NAS_SIGNALLING	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_NAS_SIGNALLING = 0x0E,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_NETWORK_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_NETWORK_FAILURE = 0x26,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_NONE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_NONE = 0, \/* No error, connection ok *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_NSAPI_IN_USE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_NSAPI_IN_USE = 0x23,         \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_1	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_1 = 0x1001,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_10	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_10 = 0x100A,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_11	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_11 = 0x100B,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_12	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_12 = 0x100C,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_13	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_13 = 0x100D,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_14	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_14 = 0x100E,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_15	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_15 = 0x100F,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_2	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_2 = 0x1002,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_3	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_3 = 0x1003,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_4	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_4 = 0x1004,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_5	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_5 = 0x1005,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_6	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_6 = 0x1006,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_7	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_7 = 0x1007,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_8	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_8 = 0x1008,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OEM_DCFAILCAUSE_9	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OEM_DCFAILCAUSE_9 = 0x1009,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_ONLY_IPV4_ALLOWED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ONLY_IPV4_ALLOWED = 0x32, \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_ONLY_IPV6_ALLOWED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ONLY_IPV6_ALLOWED = 0x33, \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_ONLY_SINGLE_BEARER_ALLOWED = 0x34,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_OPERATOR_BARRED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_OPERATOR_BARRED = 0x08, \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_PDN_CONN_DOES_NOT_EXIST	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_PDN_CONN_DOES_NOT_EXIST = 0x36,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_PDP_WITHOUT_ACTIVE_TFT = 0x2E,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_PREF_RADIO_TECH_CHANGED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_PREF_RADIO_TECH_CHANGED = -4, \/* preferred technology has changed, should retry$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_PROTOCOL_ERRORS	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_PROTOCOL_ERRORS = 0x6F, \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_QOS_NOT_ACCEPTED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_QOS_NOT_ACCEPTED = 0x25,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_RADIO_POWER_OFF	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_RADIO_POWER_OFF = -5,      \/* data call was disconnected because radio was resetti/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_REGULAR_DEACTIVATION	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_REGULAR_DEACTIVATION = 0x24, \/* possibly restart radio,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_SERVICE_OPTION_NOT_SUBSCRIBED = 0x21, \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_SERVICE_OPTION_NOT_SUPPORTED = 0x20,  \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_SERVICE_OPTION_OUT_OF_ORDER = 0x22,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_SIGNAL_LOST	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_SIGNAL_LOST = -3,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_SLICE_REJECTED	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_SLICE_REJECTED = 0x8CC,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_TETHERED_CALL_ACTIVE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_TETHERED_CALL_ACTIVE = -6, \/* data call was disconnected by modem because tethered$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_TFT_SEMANTIC_ERROR	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_TFT_SEMANTIC_ERROR = 0x29,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_TFT_SYTAX_ERROR	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_TFT_SYTAX_ERROR = 0x2A,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_UMTS_REACTIVATION_REQ	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_UMTS_REACTIVATION_REQ = 0x27,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_UNKNOWN_INFO_ELEMENT	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_UNKNOWN_INFO_ELEMENT = 0x63,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_UNKNOWN_PDP_ADDRESS_TYPE = 0x1C, \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_UNKNOWN_PDP_CONTEXT	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_UNKNOWN_PDP_CONTEXT = 0x2B,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_UNSUPPORTED_APN_IN_CURRENT_PLMN = 0x42,$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_USER_AUTHENTICATION	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_USER_AUTHENTICATION = 0x1D,      \/* no retry *\/$/;"	e	enum:__anon0bfbaecf2f03
PDP_FAIL_VOICE_REGISTRATION_FAIL	guest/hals/ril/reference-libril/ril.h	/^    PDP_FAIL_VOICE_REGISTRATION_FAIL = -1,$/;"	e	enum:__anon0bfbaecf2f03
PDP_IDLE	guest/hals/ril/reference-ril/reference-ril.c	/^    PDP_IDLE,$/;"	e	enum:PDPState	file:
PDUParser	host/commands/modem_simulator/pdu_parser.cpp	/^PDUParser::PDUParser(std::string &pdu) {$/;"	f	class:cuttlefish::PDUParser
PDUParser	host/commands/modem_simulator/pdu_parser.h	/^class PDUParser {$/;"	c	namespace:cuttlefish
PFNEGLBINDAPIPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLBINDAPIPROC) (EGLenum api);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLenum api)
PFNEGLBINDTEXIMAGEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLBINDTEXIMAGEPROC) (EGLDisplay dpy, EGLSurface surface, EG/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint buffer)
PFNEGLBINDWAYLANDDISPLAYWL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define PFNEGLBINDWAYLANDDISPLAYWL /;"	d
PFNEGLBINDWAYLANDDISPLAYWLPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLBINDWAYLANDDISPLAYWLPROC) (EGLDisplay dpy, struct wl_disp/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,struct wl_display * display)
PFNEGLCHOOSECONFIGPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCHOOSECONFIGPROC) (EGLDisplay dpy, const EGLint *attrib_l/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,const EGLint * attrib_list,EGLConfig * configs,EGLint config_size,EGLint * num_config)
PFNEGLCLIENTSIGNALSYNCEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCLIENTSIGNALSYNCEXTPROC) (EGLDisplay dpy, EGLSync sync, c/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSync sync,const EGLAttrib * attrib_list)
PFNEGLCLIENTWAITSYNCKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLCLIENTWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLi/;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLDisplay dpy,EGLSyncKHR sync,EGLint flags,EGLTimeKHR timeout)
PFNEGLCLIENTWAITSYNCNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLCLIENTWAITSYNCNVPROC) (EGLSyncNV sync, EGLint flags, EGLTimeN/;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLSyncNV sync,EGLint flags,EGLTimeNV timeout)
PFNEGLCLIENTWAITSYNCPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLCLIENTWAITSYNCPROC) (EGLDisplay dpy, EGLSync sync, EGLint fla/;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLDisplay dpy,EGLSync sync,EGLint flags,EGLTime timeout)
PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORBINDTEXWINDOWEXTPROC) (EGLint external_win_id);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint external_win_id)
PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORSETCONTEXTATTRIBUTESEXTPROC) (EGLint external_r/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint external_ref_id,const EGLint * context_attributes,EGLint num_entries)
PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORSETCONTEXTLISTEXTPROC) (const EGLint *external_/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(const EGLint * external_ref_ids,EGLint num_entries)
PFNEGLCOMPOSITORSETSIZEEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORSETSIZEEXTPROC) (EGLint external_win_id, EGLint/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint external_win_id,EGLint width,EGLint height)
PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORSETWINDOWATTRIBUTESEXTPROC) (EGLint external_wi/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint external_win_id,const EGLint * window_attributes,EGLint num_entries)
PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORSETWINDOWLISTEXTPROC) (EGLint external_ref_id, /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint external_ref_id,const EGLint * external_win_ids,EGLint num_entries)
PFNEGLCOMPOSITORSWAPPOLICYEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOMPOSITORSWAPPOLICYEXTPROC) (EGLint external_win_id, EGL/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint external_win_id,EGLint policy)
PFNEGLCOPYBUFFERSPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLCOPYBUFFERSPROC) (EGLDisplay dpy, EGLSurface surface, EGL/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLNativePixmapType target)
PFNEGLCREATECONTEXTPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLContext (EGLAPIENTRYP PFNEGLCREATECONTEXTPROC) (EGLDisplay dpy, EGLConfig config, EGL/;"	t	typeref:typename:EGLContext (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,EGLContext share_context,const EGLint * attrib_list)
PFNEGLCREATEDRMIMAGEMESAPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLImageKHR (EGLAPIENTRYP PFNEGLCREATEDRMIMAGEMESAPROC) (EGLDisplay dpy, const EGLint *a/;"	t	typeref:typename:EGLImageKHR (EGLAPIENTRYP)(EGLDisplay dpy,const EGLint * attrib_list)
PFNEGLCREATEFENCESYNCNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSyncNV (EGLAPIENTRYP PFNEGLCREATEFENCESYNCNVPROC) (EGLDisplay dpy, EGLenum condition,/;"	t	typeref:typename:EGLSyncNV (EGLAPIENTRYP)(EGLDisplay dpy,EGLenum condition,const EGLint * attrib_list)
PFNEGLCREATEIMAGEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLImageKHR (EGLAPIENTRYP PFNEGLCREATEIMAGEKHRPROC) (EGLDisplay dpy, EGLContext ctx, EGL/;"	t	typeref:typename:EGLImageKHR (EGLAPIENTRYP)(EGLDisplay dpy,EGLContext ctx,EGLenum target,EGLClientBuffer buffer,const EGLint * attrib_list)
PFNEGLCREATEIMAGEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLImage (EGLAPIENTRYP PFNEGLCREATEIMAGEPROC) (EGLDisplay dpy, EGLContext ctx, EGLenum t/;"	t	typeref:typename:EGLImage (EGLAPIENTRYP)(EGLDisplay dpy,EGLContext ctx,EGLenum target,EGLClientBuffer buffer,const EGLAttrib * attrib_list)
PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLClientBuffer (EGLAPIENTRYP PFNEGLCREATENATIVECLIENTBUFFERANDROIDPROC) (const EGLint */;"	t	typeref:typename:EGLClientBuffer (EGLAPIENTRYP)(const EGLint * attrib_list)
PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPBUFFERFROMCLIENTBUFFERPROC) (EGLDisplay dpy, EGLen/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLenum buftype,EGLClientBuffer buffer,EGLConfig config,const EGLint * attrib_list)
PFNEGLCREATEPBUFFERSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPBUFFERSURFACEPROC) (EGLDisplay dpy, EGLConfig conf/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,const EGLint * attrib_list)
PFNEGLCREATEPIXMAPSURFACEHIPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPIXMAPSURFACEHIPROC) (EGLDisplay dpy, EGLConfig con/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,struct EGLClientPixmapHI * pixmap)
PFNEGLCREATEPIXMAPSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPIXMAPSURFACEPROC) (EGLDisplay dpy, EGLConfig confi/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,EGLNativePixmapType pixmap,const EGLint * attrib_list)
PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPLATFORMPIXMAPSURFACEEXTPROC) (EGLDisplay dpy, EGLC/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,void * native_pixmap,const EGLint * attrib_list)
PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPLATFORMPIXMAPSURFACEPROC) (EGLDisplay dpy, EGLConf/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,void * native_pixmap,const EGLAttrib * attrib_list)
PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPLATFORMWINDOWSURFACEEXTPROC) (EGLDisplay dpy, EGLC/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,void * native_window,const EGLint * attrib_list)
PFNEGLCREATEPLATFORMWINDOWSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEPLATFORMWINDOWSURFACEPROC) (EGLDisplay dpy, EGLConf/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,void * native_window,const EGLAttrib * attrib_list)
PFNEGLCREATESTREAMATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLStreamKHR (EGLAPIENTRYP PFNEGLCREATESTREAMATTRIBKHRPROC) (EGLDisplay dpy, const EGLAt/;"	t	typeref:typename:EGLStreamKHR (EGLAPIENTRYP)(EGLDisplay dpy,const EGLAttrib * attrib_list)
PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLStreamKHR (EGLAPIENTRYP PFNEGLCREATESTREAMFROMFILEDESCRIPTORKHRPROC) (EGLDisplay dpy,/;"	t	typeref:typename:EGLStreamKHR (EGLAPIENTRYP)(EGLDisplay dpy,EGLNativeFileDescriptorKHR file_descriptor)
PFNEGLCREATESTREAMKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLStreamKHR (EGLAPIENTRYP PFNEGLCREATESTREAMKHRPROC) (EGLDisplay dpy, const EGLint *att/;"	t	typeref:typename:EGLStreamKHR (EGLAPIENTRYP)(EGLDisplay dpy,const EGLint * attrib_list)
PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATESTREAMPRODUCERSURFACEKHRPROC) (EGLDisplay dpy, EGLC/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,EGLStreamKHR stream,const EGLint * attrib_list)
PFNEGLCREATESTREAMSYNCNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSyncKHR (EGLAPIENTRYP PFNEGLCREATESTREAMSYNCNVPROC) (EGLDisplay dpy, EGLStreamKHR str/;"	t	typeref:typename:EGLSyncKHR (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum type,const EGLint * attrib_list)
PFNEGLCREATESYNC64KHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSyncKHR (EGLAPIENTRYP PFNEGLCREATESYNC64KHRPROC) (EGLDisplay dpy, EGLenum type, const/;"	t	typeref:typename:EGLSyncKHR (EGLAPIENTRYP)(EGLDisplay dpy,EGLenum type,const EGLAttribKHR * attrib_list)
PFNEGLCREATESYNCKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLSyncKHR (EGLAPIENTRYP PFNEGLCREATESYNCKHRPROC) (EGLDisplay dpy, EGLenum type, const E/;"	t	typeref:typename:EGLSyncKHR (EGLAPIENTRYP)(EGLDisplay dpy,EGLenum type,const EGLint * attrib_list)
PFNEGLCREATESYNCPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSync (EGLAPIENTRYP PFNEGLCREATESYNCPROC) (EGLDisplay dpy, EGLenum type, const EGLAttr/;"	t	typeref:typename:EGLSync (EGLAPIENTRYP)(EGLDisplay dpy,EGLenum type,const EGLAttrib * attrib_list)
PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWL /;"	d
PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef struct wl_buffer *(EGLAPIENTRYP PFNEGLCREATEWAYLANDBUFFERFROMIMAGEWLPROC) (EGLDisplay dp/;"	t	typeref:struct:wl_buffer * (EGLAPIENTRYP)(EGLDisplay dpy,EGLImageKHR image)
PFNEGLCREATEWINDOWSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLCREATEWINDOWSURFACEPROC) (EGLDisplay dpy, EGLConfig confi/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,EGLNativeWindowType win,const EGLint * attrib_list)
PFNEGLDEBUGMESSAGECONTROLKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLDEBUGMESSAGECONTROLKHRPROC) (EGLDEBUGPROCKHR callback, const /;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLDEBUGPROCKHR callback,const EGLAttrib * attrib_list)
PFNEGLDESTROYCONTEXTPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYCONTEXTPROC) (EGLDisplay dpy, EGLContext ctx);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLContext ctx)
PFNEGLDESTROYIMAGEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYIMAGEKHRPROC) (EGLDisplay dpy, EGLImageKHR image);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLImageKHR image)
PFNEGLDESTROYIMAGEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYIMAGEPROC) (EGLDisplay dpy, EGLImage image);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLImage image)
PFNEGLDESTROYSTREAMKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSTREAMKHRPROC) (EGLDisplay dpy, EGLStreamKHR strea/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLDESTROYSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSURFACEPROC) (EGLDisplay dpy, EGLSurface surface);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface)
PFNEGLDESTROYSYNCKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSyncKHR sync)
PFNEGLDESTROYSYNCNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSYNCNVPROC) (EGLSyncNV sync);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLSyncNV sync)
PFNEGLDESTROYSYNCPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLDESTROYSYNCPROC) (EGLDisplay dpy, EGLSync sync);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSync sync)
PFNEGLDUPNATIVEFENCEFDANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLDUPNATIVEFENCEFDANDROIDPROC) (EGLDisplay dpy, EGLSyncKHR sync/;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLDisplay dpy,EGLSyncKHR sync)
PFNEGLEXPORTDMABUFIMAGEMESAPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLEXPORTDMABUFIMAGEMESAPROC) (EGLDisplay dpy, EGLImageKHR i/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLImageKHR image,int * fds,EGLint * strides,EGLint * offsets)
PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLEXPORTDMABUFIMAGEQUERYMESAPROC) (EGLDisplay dpy, EGLImage/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLImageKHR image,int * fourcc,int * num_planes,EGLuint64KHR * modifiers)
PFNEGLEXPORTDRMIMAGEMESAPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLEXPORTDRMIMAGEMESAPROC) (EGLDisplay dpy, EGLImageKHR imag/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLImageKHR image,EGLint * name,EGLint * handle,EGLint * stride)
PFNEGLFENCENVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLFENCENVPROC) (EGLSyncNV sync);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLSyncNV sync)
PFNEGLGETCOMPOSITORTIMINGANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETCOMPOSITORTIMINGANDROIDPROC) (EGLDisplay dpy, EGLSurfa/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint numTimestamps,const EGLint * names,EGLnsecsANDROID * values)
PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETCOMPOSITORTIMINGSUPPORTEDANDROIDPROC) (EGLDisplay dpy,/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint name)
PFNEGLGETCONFIGATTRIBPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETCONFIGATTRIBPROC) (EGLDisplay dpy, EGLConfig config, E/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig config,EGLint attribute,EGLint * value)
PFNEGLGETCONFIGSPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETCONFIGSPROC) (EGLDisplay dpy, EGLConfig *configs, EGLi/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLConfig * configs,EGLint config_size,EGLint * num_config)
PFNEGLGETCURRENTCONTEXTPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLContext (EGLAPIENTRYP PFNEGLGETCURRENTCONTEXTPROC) (void);$/;"	t	typeref:typename:EGLContext (EGLAPIENTRYP)(void)
PFNEGLGETCURRENTDISPLAYPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETCURRENTDISPLAYPROC) (void);$/;"	t	typeref:typename:EGLDisplay (EGLAPIENTRYP)(void)
PFNEGLGETCURRENTSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLSurface (EGLAPIENTRYP PFNEGLGETCURRENTSURFACEPROC) (EGLint readdraw);$/;"	t	typeref:typename:EGLSurface (EGLAPIENTRYP)(EGLint readdraw)
PFNEGLGETDISPLAYDRIVERCONFIGPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef char *(EGLAPIENTRYP PFNEGLGETDISPLAYDRIVERCONFIGPROC) (EGLDisplay dpy);$/;"	t	typeref:typename:char * (EGLAPIENTRYP)(EGLDisplay dpy)
PFNEGLGETDISPLAYDRIVERNAMEPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLGETDISPLAYDRIVERNAMEPROC) (EGLDisplay dpy);$/;"	t	typeref:typename:const char * (EGLAPIENTRYP)(EGLDisplay dpy)
PFNEGLGETDISPLAYPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETDISPLAYPROC) (EGLNativeDisplayType display_id);$/;"	t	typeref:typename:EGLDisplay (EGLAPIENTRYP)(EGLNativeDisplayType display_id)
PFNEGLGETERRORPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLGETERRORPROC) (void);$/;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(void)
PFNEGLGETFRAMETIMESTAMPSANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETFRAMETIMESTAMPSANDROIDPROC) (EGLDisplay dpy, EGLSurfac/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLuint64KHR frameId,EGLint numTimestamps,const EGLint * timestamps,EGLnsecsANDROID * values)
PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETFRAMETIMESTAMPSUPPORTEDANDROIDPROC) (EGLDisplay dpy, E/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint timestamp)
PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLClientBuffer (EGLAPIENTRYP PFNEGLGETNATIVECLIENTBUFFERANDROIDPROC) (const struct AHar/;"	t	typeref:typename:EGLClientBuffer (EGLAPIENTRYP)(const struct AHardwareBuffer * buffer)
PFNEGLGETNEXTFRAMEIDANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETNEXTFRAMEIDANDROIDPROC) (EGLDisplay dpy, EGLSurface su/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLuint64KHR * frameId)
PFNEGLGETOUTPUTLAYERSEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETOUTPUTLAYERSEXTPROC) (EGLDisplay dpy, const EGLAttrib /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,const EGLAttrib * attrib_list,EGLOutputLayerEXT * layers,EGLint max_layers,EGLint * num_layers)
PFNEGLGETOUTPUTPORTSEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETOUTPUTPORTSEXTPROC) (EGLDisplay dpy, const EGLAttrib */;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,const EGLAttrib * attrib_list,EGLOutputPortEXT * ports,EGLint max_ports,EGLint * num_ports)
PFNEGLGETPLATFORMDISPLAYEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYEXTPROC) (EGLenum platform, void *nativ/;"	t	typeref:typename:EGLDisplay (EGLAPIENTRYP)(EGLenum platform,void * native_display,const EGLint * attrib_list)
PFNEGLGETPLATFORMDISPLAYPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLDisplay (EGLAPIENTRYP PFNEGLGETPLATFORMDISPLAYPROC) (EGLenum platform, void *native_d/;"	t	typeref:typename:EGLDisplay (EGLAPIENTRYP)(EGLenum platform,void * native_display,const EGLAttrib * attrib_list)
PFNEGLGETPROCADDRESSPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef __eglMustCastToProperFunctionPointerType (EGLAPIENTRYP PFNEGLGETPROCADDRESSPROC) (const /;"	t	typeref:typename:__eglMustCastToProperFunctionPointerType (EGLAPIENTRYP)(const char * procname)
PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLNativeFileDescriptorKHR (EGLAPIENTRYP PFNEGLGETSTREAMFILEDESCRIPTORKHRPROC) (EGLDispl/;"	t	typeref:typename:EGLNativeFileDescriptorKHR (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLGETSYNCATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETSYNCATTRIBKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, E/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSyncKHR sync,EGLint attribute,EGLint * value)
PFNEGLGETSYNCATTRIBNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETSYNCATTRIBNVPROC) (EGLSyncNV sync, EGLint attribute, E/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLSyncNV sync,EGLint attribute,EGLint * value)
PFNEGLGETSYNCATTRIBPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLGETSYNCATTRIBPROC) (EGLDisplay dpy, EGLSync sync, EGLint /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSync sync,EGLint attribute,EGLAttrib * value)
PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLuint64NV (EGLAPIENTRYP PFNEGLGETSYSTEMTIMEFREQUENCYNVPROC) (void);$/;"	t	typeref:typename:EGLuint64NV (EGLAPIENTRYP)(void)
PFNEGLGETSYSTEMTIMENVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLuint64NV (EGLAPIENTRYP PFNEGLGETSYSTEMTIMENVPROC) (void);$/;"	t	typeref:typename:EGLuint64NV (EGLAPIENTRYP)(void)
PFNEGLINITIALIZEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLINITIALIZEPROC) (EGLDisplay dpy, EGLint *major, EGLint *m/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint * major,EGLint * minor)
PFNEGLLABELOBJECTKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLLABELOBJECTKHRPROC) (EGLDisplay display, EGLenum objectType, /;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLDisplay display,EGLenum objectType,EGLObjectKHR object,EGLLabelKHR label)
PFNEGLLOCKSURFACEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLLOCKSURFACEKHRPROC) (EGLDisplay dpy, EGLSurface surface, /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,const EGLint * attrib_list)
PFNEGLMAKECURRENTPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLMAKECURRENTPROC) (EGLDisplay dpy, EGLSurface draw, EGLSur/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface draw,EGLSurface read,EGLContext ctx)
PFNEGLOUTPUTLAYERATTRIBEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLOUTPUTLAYERATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputLayer/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLOutputLayerEXT layer,EGLint attribute,EGLAttrib value)
PFNEGLOUTPUTPORTATTRIBEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLOUTPUTPORTATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputPortEX/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLOutputPortEXT port,EGLint attribute,EGLAttrib value)
PFNEGLPOSTSUBBUFFERNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLPOSTSUBBUFFERNVPROC) (EGLDisplay dpy, EGLSurface surface,/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint x,EGLint y,EGLint width,EGLint height)
PFNEGLPRESENTATIONTIMEANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLPRESENTATIONTIMEANDROIDPROC) (EGLDisplay dpy, EGLSurface /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLnsecsANDROID time)
PFNEGLQUERYAPIPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLenum (EGLAPIENTRYP PFNEGLQUERYAPIPROC) (void);$/;"	t	typeref:typename:EGLenum (EGLAPIENTRYP)(void)
PFNEGLQUERYCONTEXTPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYCONTEXTPROC) (EGLDisplay dpy, EGLContext ctx, EGLint/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLContext ctx,EGLint attribute,EGLint * value)
PFNEGLQUERYDEBUGKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDEBUGKHRPROC) (EGLint attribute, EGLAttrib *value);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint attribute,EGLAttrib * value)
PFNEGLQUERYDEVICEATTRIBEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDEVICEATTRIBEXTPROC) (EGLDeviceEXT device, EGLint at/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDeviceEXT device,EGLint attribute,EGLAttrib * value)
PFNEGLQUERYDEVICESEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDEVICESEXTPROC) (EGLint max_devices, EGLDeviceEXT *d/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint max_devices,EGLDeviceEXT * devices,EGLint * num_devices)
PFNEGLQUERYDEVICESTRINGEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYDEVICESTRINGEXTPROC) (EGLDeviceEXT device, EGLint n/;"	t	typeref:typename:const char * (EGLAPIENTRYP)(EGLDeviceEXT device,EGLint name)
PFNEGLQUERYDISPLAYATTRIBEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBEXTPROC) (EGLDisplay dpy, EGLint attrib/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint attribute,EGLAttrib * value)
PFNEGLQUERYDISPLAYATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBKHRPROC) (EGLDisplay dpy, EGLint name, /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint name,EGLAttrib * value)
PFNEGLQUERYDISPLAYATTRIBNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDISPLAYATTRIBNVPROC) (EGLDisplay dpy, EGLint attribu/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint attribute,EGLAttrib * value)
PFNEGLQUERYDMABUFFORMATSEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDMABUFFORMATSEXTPROC) (EGLDisplay dpy, EGLint max_fo/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint max_formats,EGLint * formats,EGLint * num_formats)
PFNEGLQUERYDMABUFMODIFIERSEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYDMABUFMODIFIERSEXTPROC) (EGLDisplay dpy, EGLint form/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint format,EGLint max_modifiers,EGLuint64KHR * modifiers,EGLBoolean * external_only,EGLint * num_modifiers)
PFNEGLQUERYNATIVEDISPLAYNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYNATIVEDISPLAYNVPROC) (EGLDisplay dpy, EGLNativeDispl/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLNativeDisplayType * display_id)
PFNEGLQUERYNATIVEPIXMAPNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYNATIVEPIXMAPNVPROC) (EGLDisplay dpy, EGLSurface surf/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surf,EGLNativePixmapType * pixmap)
PFNEGLQUERYNATIVEWINDOWNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYNATIVEWINDOWNVPROC) (EGLDisplay dpy, EGLSurface surf/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surf,EGLNativeWindowType * window)
PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYOUTPUTLAYERATTRIBEXTPROC) (EGLDisplay dpy, EGLOutput/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLOutputLayerEXT layer,EGLint attribute,EGLAttrib * value)
PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYOUTPUTLAYERSTRINGEXTPROC) (EGLDisplay dpy, EGLOutpu/;"	t	typeref:typename:const char * (EGLAPIENTRYP)(EGLDisplay dpy,EGLOutputLayerEXT layer,EGLint name)
PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYOUTPUTPORTATTRIBEXTPROC) (EGLDisplay dpy, EGLOutputP/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLOutputPortEXT port,EGLint attribute,EGLAttrib * value)
PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYOUTPUTPORTSTRINGEXTPROC) (EGLDisplay dpy, EGLOutput/;"	t	typeref:typename:const char * (EGLAPIENTRYP)(EGLDisplay dpy,EGLOutputPortEXT port,EGLint name)
PFNEGLQUERYSTREAMATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR s/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum attribute,EGLAttrib * value)
PFNEGLQUERYSTREAMKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream,/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum attribute,EGLint * value)
PFNEGLQUERYSTREAMMETADATANVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMMETADATANVPROC) (EGLDisplay dpy, EGLStreamKHR /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum name,EGLint n,EGLint offset,EGLint size,void * data)
PFNEGLQUERYSTREAMTIMEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMTIMEKHRPROC) (EGLDisplay dpy, EGLStreamKHR str/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum attribute,EGLTimeKHR * value)
PFNEGLQUERYSTREAMU64KHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSTREAMU64KHRPROC) (EGLDisplay dpy, EGLStreamKHR stre/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum attribute,EGLuint64KHR * value)
PFNEGLQUERYSTRINGPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef const char *(EGLAPIENTRYP PFNEGLQUERYSTRINGPROC) (EGLDisplay dpy, EGLint name);$/;"	t	typeref:typename:const char * (EGLAPIENTRYP)(EGLDisplay dpy,EGLint name)
PFNEGLQUERYSURFACE64KHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSURFACE64KHRPROC) (EGLDisplay dpy, EGLSurface surfac/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint attribute,EGLAttribKHR * value)
PFNEGLQUERYSURFACEPOINTERANGLEPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSURFACEPOINTERANGLEPROC) (EGLDisplay dpy, EGLSurface/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint attribute,void ** value)
PFNEGLQUERYSURFACEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYSURFACEPROC) (EGLDisplay dpy, EGLSurface surface, EG/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint attribute,EGLint * value)
PFNEGLQUERYWAYLANDBUFFERWL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define PFNEGLQUERYWAYLANDBUFFERWL /;"	d
PFNEGLQUERYWAYLANDBUFFERWLPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLQUERYWAYLANDBUFFERWLPROC) (EGLDisplay dpy, struct wl_reso/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,struct wl_resource * buffer,EGLint attribute,EGLint * value)
PFNEGLRELEASETEXIMAGEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLRELEASETEXIMAGEPROC) (EGLDisplay dpy, EGLSurface surface,/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint buffer)
PFNEGLRELEASETHREADPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLRELEASETHREADPROC) (void);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(void)
PFNEGLRESETSTREAMNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLRESETSTREAMNVPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLSETBLOBCACHEFUNCSANDROIDPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef void (EGLAPIENTRYP PFNEGLSETBLOBCACHEFUNCSANDROIDPROC) (EGLDisplay dpy, EGLSetBlobFuncAN/;"	t	typeref:typename:void (EGLAPIENTRYP)(EGLDisplay dpy,EGLSetBlobFuncANDROID set,EGLGetBlobFuncANDROID get)
PFNEGLSETDAMAGEREGIONKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSETDAMAGEREGIONKHRPROC) (EGLDisplay dpy, EGLSurface surfa/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint * rects,EGLint n_rects)
PFNEGLSETSTREAMATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSETSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR str/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum attribute,EGLAttrib value)
PFNEGLSETSTREAMMETADATANVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSETSTREAMMETADATANVPROC) (EGLDisplay dpy, EGLStreamKHR st/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLint n,EGLint offset,EGLint size,const void * data)
PFNEGLSIGNALSYNCKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSIGNALSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLe/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSyncKHR sync,EGLenum mode)
PFNEGLSIGNALSYNCNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSIGNALSYNCNVPROC) (EGLSyncNV sync, EGLenum mode);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLSyncNV sync,EGLenum mode)
PFNEGLSTREAMATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMATTRIBKHRPROC) (EGLDisplay dpy, EGLStreamKHR stream/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLenum attribute,EGLint value)
PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERACQUIREATTRIBKHRPROC) (EGLDisplay dpy, EGLS/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,const EGLAttrib * attrib_list)
PFNEGLSTREAMCONSUMERACQUIREKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERACQUIREKHRPROC) (EGLDisplay dpy, EGLStreamK/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALATTRIBSNVPROC) (EGLDisplay/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,const EGLAttrib * attrib_list)
PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERGLTEXTUREEXTERNALKHRPROC) (EGLDisplay dpy, /;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLSTREAMCONSUMEROUTPUTEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMEROUTPUTEXTPROC) (EGLDisplay dpy, EGLStreamKH/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,EGLOutputLayerEXT layer)
PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERRELEASEATTRIBKHRPROC) (EGLDisplay dpy, EGLS/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream,const EGLAttrib * attrib_list)
PFNEGLSTREAMCONSUMERRELEASEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMCONSUMERRELEASEKHRPROC) (EGLDisplay dpy, EGLStreamK/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLSTREAMFLUSHNVPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSTREAMFLUSHNVPROC) (EGLDisplay dpy, EGLStreamKHR stream);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLStreamKHR stream)
PFNEGLSURFACEATTRIBPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSURFACEATTRIBPROC) (EGLDisplay dpy, EGLSurface surface, E/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint attribute,EGLint value)
PFNEGLSWAPBUFFERSPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSPROC) (EGLDisplay dpy, EGLSurface surface);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface)
PFNEGLSWAPBUFFERSREGION2NOKPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSREGION2NOKPROC) (EGLDisplay dpy, EGLSurface su/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint numRects,const EGLint * rects)
PFNEGLSWAPBUFFERSREGIONNOKPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSREGIONNOKPROC) (EGLDisplay dpy, EGLSurface sur/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,EGLint numRects,const EGLint * rects)
PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSWITHDAMAGEEXTPROC) (EGLDisplay dpy, EGLSurface/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,const EGLint * rects,EGLint n_rects)
PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPBUFFERSWITHDAMAGEKHRPROC) (EGLDisplay dpy, EGLSurface/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface,const EGLint * rects,EGLint n_rects)
PFNEGLSWAPINTERVALPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLSWAPINTERVALPROC) (EGLDisplay dpy, EGLint interval);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLint interval)
PFNEGLTERMINATEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLTERMINATEPROC) (EGLDisplay dpy);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy)
PFNEGLUNBINDWAYLANDDISPLAYWL	host/libs/graphics_detector/include/EGL/eglext.h	/^#define PFNEGLUNBINDWAYLANDDISPLAYWL /;"	d
PFNEGLUNBINDWAYLANDDISPLAYWLPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLUNBINDWAYLANDDISPLAYWLPROC) (EGLDisplay dpy, struct wl_di/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,struct wl_display * display)
PFNEGLUNLOCKSURFACEKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLUNLOCKSURFACEKHRPROC) (EGLDisplay dpy, EGLSurface surface/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSurface surface)
PFNEGLUNSIGNALSYNCEXTPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLUNSIGNALSYNCEXTPROC) (EGLDisplay dpy, EGLSync sync, const/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSync sync,const EGLAttrib * attrib_list)
PFNEGLWAITCLIENTPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLWAITCLIENTPROC) (void);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(void)
PFNEGLWAITGLPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLWAITGLPROC) (void);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(void)
PFNEGLWAITNATIVEPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLWAITNATIVEPROC) (EGLint engine);$/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLint engine)
PFNEGLWAITSYNCKHRPROC	host/libs/graphics_detector/include/EGL/eglext.h	/^typedef EGLint (EGLAPIENTRYP PFNEGLWAITSYNCKHRPROC) (EGLDisplay dpy, EGLSyncKHR sync, EGLint fla/;"	t	typeref:typename:EGLint (EGLAPIENTRYP)(EGLDisplay dpy,EGLSyncKHR sync,EGLint flags)
PFNEGLWAITSYNCPROC	host/libs/graphics_detector/include/EGL/egl.h	/^typedef EGLBoolean (EGLAPIENTRYP PFNEGLWAITSYNCPROC) (EGLDisplay dpy, EGLSync sync, EGLint flags/;"	t	typeref:typename:EGLBoolean (EGLAPIENTRYP)(EGLDisplay dpy,EGLSync sync,EGLint flags)
PHONE_PROCESS	guest/hals/ril/reference-libril/ril.cpp	/^#define PHONE_PROCESS /;"	d	file:
PLAY_TONE	host/commands/modem_simulator/stk_service.h	/^    PLAY_TONE           = 0x20,$/;"	e	enum:cuttlefish::StkService::CommandType
PPP_TTY_PATH_ETH0	guest/hals/ril/reference-ril/reference-ril.c	/^#define PPP_TTY_PATH_ETH0 /;"	d	file:
PREFERRED_NETWORK	guest/hals/ril/reference-ril/reference-ril.c	/^#define PREFERRED_NETWORK(/;"	d	file:
PREF_NET_TYPE_CDMA_EVDO_AUTO	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_CDMA_EVDO_AUTO           = 4, \/* CDMA and EvDo (auto mode, according to PRL) /;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_CDMA_ONLY	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_CDMA_ONLY                = 5, \/* CDMA only *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_EVDO_ONLY	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_EVDO_ONLY                = 6, \/* EvDo only *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_GSM_ONLY	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_GSM_ONLY                 = 1, \/* GSM only *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_GSM_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_GSM_WCDMA                = 0, \/* GSM\/WCDMA (WCDMA preferred) *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_GSM_WCDMA_AUTO	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_GSM_WCDMA_AUTO           = 3, \/* GSM\/WCDMA (auto mode, according to PRL) *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_GSM_WCDMA_CDMA_EVDO_AUTO	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_GSM_WCDMA_CDMA_EVDO_AUTO = 7, \/* GSM\/WCDMA, CDMA, and EvDo (auto mode, accor/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_LTE_CDMA_EVDO	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_LTE_CDMA_EVDO            = 8, \/* LTE, CDMA and EvDo *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_LTE_CMDA_EVDO_GSM_WCDMA  = 10, \/* LTE, CDMA, EvDo, GSM\/WCDMA *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_LTE_GSM_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_LTE_GSM_WCDMA            = 9, \/* LTE, GSM\/WCDMA *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_LTE_ONLY	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_LTE_ONLY                 = 11, \/* LTE only *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_LTE_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_LTE_WCDMA                = 12,  \/* LTE\/WCDMA *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_GSM	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_GSM             = 16, \/* TD-SCDMA and GSM *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_GSM_LTE	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_GSM_LTE         = 17, \/* TD-SCDMA,GSM and LTE *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_GSM_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_GSM_WCDMA       = 18, \/* TD-SCDMA, GSM\/WCDMA *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_GSM_WCDMA_CDMA_EVDO_AUTO	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_GSM_WCDMA_CDMA_EVDO_AUTO  = 21, \/* TD-SCDMA, GSM\/WCDMA, CDMA and Ev/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_GSM_WCDMA_LTE	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_GSM_WCDMA_LTE   = 20, \/* TD-SCDMA, GSM\/WCDMA and LTE *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_LTE	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_LTE             = 15, \/* TD-SCDMA and LTE *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_LTE_CDMA_EVDO_GSM_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_LTE_CDMA_EVDO_GSM_WCDMA   = 22  \/* TD-SCDMA, LTE, CDMA, EvDo GSM\/WC/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_ONLY	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_ONLY            = 13, \/* TD-SCDMA only *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_WCDMA           = 14, \/* TD-SCDMA and WCDMA *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_TD_SCDMA_WCDMA_LTE	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_TD_SCDMA_WCDMA_LTE       = 19, \/* TD-SCDMA, WCDMA and LTE *\/$/;"	e	enum:__anon0bfbaecf0b03
PREF_NET_TYPE_WCDMA	guest/hals/ril/reference-libril/ril.h	/^    PREF_NET_TYPE_WCDMA                    = 2, \/* WCDMA  *\/$/;"	e	enum:__anon0bfbaecf0b03
PRINTBUF_SIZE	guest/hals/ril/reference-libril/ril.cpp	/^#define PRINTBUF_SIZE /;"	d	file:
PRODUCT_BRAND	shared/auto/device.mk	/^PRODUCT_BRAND := generic$/;"	m
PRODUCT_BUILD_RECOVERY_IMAGE	shared/device.mk	/^PRODUCT_BUILD_RECOVERY_IMAGE := true$/;"	m
PRODUCT_DEVICE	vsoc_arm64/auto/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_arm64$/;"	m
PRODUCT_DEVICE	vsoc_arm64/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_arm64$/;"	m
PRODUCT_DEVICE	vsoc_arm64_only/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_arm64_only$/;"	m
PRODUCT_DEVICE	vsoc_arm_only/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_arm_only$/;"	m
PRODUCT_DEVICE	vsoc_x86/auto/device.mk	/^PRODUCT_DEVICE := vsoc_x86$/;"	m
PRODUCT_DEVICE	vsoc_x86/go_512_phone/device.mk	/^PRODUCT_DEVICE := vsoc_x86$/;"	m
PRODUCT_DEVICE	vsoc_x86/go_phone/device.mk	/^PRODUCT_DEVICE := vsoc_x86$/;"	m
PRODUCT_DEVICE	vsoc_x86/pasan/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_x86$/;"	m
PRODUCT_DEVICE	vsoc_x86/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_x86$/;"	m
PRODUCT_DEVICE	vsoc_x86/tv/device.mk	/^PRODUCT_DEVICE := vsoc_x86$/;"	m
PRODUCT_DEVICE	vsoc_x86_64/auto/device.mk	/^PRODUCT_DEVICE := vsoc_x86_64$/;"	m
PRODUCT_DEVICE	vsoc_x86_64/pc/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_x86_64$/;"	m
PRODUCT_DEVICE	vsoc_x86_64/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_x86_64$/;"	m
PRODUCT_DEVICE	vsoc_x86_64/tv/device.mk	/^PRODUCT_DEVICE := vsoc_x86_64$/;"	m
PRODUCT_DEVICE	vsoc_x86_64_only/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_x86_64_only$/;"	m
PRODUCT_DEVICE	vsoc_x86_noapex/aosp_cf_noapex.mk	/^PRODUCT_DEVICE := vsoc_x86_noapex$/;"	m
PRODUCT_DEVICE	vsoc_x86_only/phone/aosp_cf.mk	/^PRODUCT_DEVICE := vsoc_x86_only$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_arm64/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_arm64_only/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_arm_only/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_x86/pasan/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_x86/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_x86_64/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_x86_64_only/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS	vsoc_x86_only/phone/aosp_cf.mk	/^PRODUCT_ENFORCE_ARTIFACT_PATH_REQUIREMENTS := relaxed$/;"	m
PRODUCT_ENFORCE_RRO_TARGETS	shared/auto/device.mk	/^PRODUCT_ENFORCE_RRO_TARGETS := framework-res$/;"	m
PRODUCT_ENFORCE_RRO_TARGETS	shared/phone/device.mk	/^PRODUCT_ENFORCE_RRO_TARGETS := framework-res$/;"	m
PRODUCT_EXTRA_VNDK_VERSIONS	shared/device.mk	/^PRODUCT_EXTRA_VNDK_VERSIONS := 28 29 30$/;"	m
PRODUCT_FS_COMPRESSION	shared/device.mk	/^PRODUCT_FS_COMPRESSION := 1$/;"	m
PRODUCT_MAKEFILES	AndroidProducts.mk	/^PRODUCT_MAKEFILES := \\$/;"	m
PRODUCT_MANUFACTURER	vsoc_arm64/auto/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_arm64/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_arm64_only/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_arm_only/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86/auto/device.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86/go_512_phone/device.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86/go_phone/device.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86/pasan/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86/tv/device.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_64/auto/device.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_64/pc/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_64/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_64/tv/device.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_64_only/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_noapex/aosp_cf_noapex.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MANUFACTURER	vsoc_x86_only/phone/aosp_cf.mk	/^PRODUCT_MANUFACTURER := Google$/;"	m
PRODUCT_MODEL	vsoc_arm64/auto/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish arm64 auto$/;"	m
PRODUCT_MODEL	vsoc_arm64/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish arm64 phone$/;"	m
PRODUCT_MODEL	vsoc_arm64_only/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish arm64 phone 64-bit only$/;"	m
PRODUCT_MODEL	vsoc_arm_only/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish arm phone 32-bit only$/;"	m
PRODUCT_MODEL	vsoc_x86/auto/device.mk	/^PRODUCT_MODEL := Cuttlefish x86 auto$/;"	m
PRODUCT_MODEL	vsoc_x86/go_512_phone/device.mk	/^PRODUCT_MODEL := Cuttlefish x86 Go 512 phone$/;"	m
PRODUCT_MODEL	vsoc_x86/go_phone/device.mk	/^PRODUCT_MODEL := Cuttlefish x86 Go phone$/;"	m
PRODUCT_MODEL	vsoc_x86/pasan/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish x86 phone$/;"	m
PRODUCT_MODEL	vsoc_x86/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish x86 phone$/;"	m
PRODUCT_MODEL	vsoc_x86/tv/device.mk	/^PRODUCT_MODEL := Cuttlefish x86 tv$/;"	m
PRODUCT_MODEL	vsoc_x86_64/auto/device.mk	/^PRODUCT_MODEL := Cuttlefish x86_64 auto$/;"	m
PRODUCT_MODEL	vsoc_x86_64/pc/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish x86_64 pc$/;"	m
PRODUCT_MODEL	vsoc_x86_64/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish x86_64 phone$/;"	m
PRODUCT_MODEL	vsoc_x86_64/phone/aosp_cf_foldable.mk	/^PRODUCT_MODEL := Cuttlefish x86_64 foldable$/;"	m
PRODUCT_MODEL	vsoc_x86_64/tv/device.mk	/^PRODUCT_MODEL := Cuttlefish x86_64 tv$/;"	m
PRODUCT_MODEL	vsoc_x86_64_only/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish x86_64 phone 64-bit only$/;"	m
PRODUCT_MODEL	vsoc_x86_noapex/aosp_cf_noapex.mk	/^PRODUCT_MODEL := Cuttlefish x86 phone without APEX support$/;"	m
PRODUCT_MODEL	vsoc_x86_only/phone/aosp_cf.mk	/^PRODUCT_MODEL := Cuttlefish x86 phone 32-bit kernel$/;"	m
PRODUCT_NAME	vsoc_arm64/auto/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_arm64_auto$/;"	m
PRODUCT_NAME	vsoc_arm64/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_arm64_phone$/;"	m
PRODUCT_NAME	vsoc_arm64/phone/aosp_cf_hwasan.mk	/^PRODUCT_NAME := aosp_cf_arm64_phone_hwasan$/;"	m
PRODUCT_NAME	vsoc_arm64_only/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_arm64_only_phone$/;"	m
PRODUCT_NAME	vsoc_arm64_only/phone/aosp_cf_hwasan.mk	/^PRODUCT_NAME := aosp_cf_arm64_only_phone_hwasan$/;"	m
PRODUCT_NAME	vsoc_arm_only/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_arm_only_phone$/;"	m
PRODUCT_NAME	vsoc_x86/auto/device.mk	/^PRODUCT_NAME := aosp_cf_x86_auto$/;"	m
PRODUCT_NAME	vsoc_x86/go_512_phone/device.mk	/^PRODUCT_NAME := aosp_cf_x86_go_512_phone$/;"	m
PRODUCT_NAME	vsoc_x86/go_phone/device.mk	/^PRODUCT_NAME := aosp_cf_x86_go_phone$/;"	m
PRODUCT_NAME	vsoc_x86/pasan/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_x86_pasan$/;"	m
PRODUCT_NAME	vsoc_x86/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_x86_phone$/;"	m
PRODUCT_NAME	vsoc_x86/tv/device.mk	/^PRODUCT_NAME := aosp_cf_x86_tv$/;"	m
PRODUCT_NAME	vsoc_x86_64/auto/device.mk	/^PRODUCT_NAME := aosp_cf_x86_64_auto$/;"	m
PRODUCT_NAME	vsoc_x86_64/pc/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_x86_64_pc$/;"	m
PRODUCT_NAME	vsoc_x86_64/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_x86_64_phone$/;"	m
PRODUCT_NAME	vsoc_x86_64/phone/aosp_cf_foldable.mk	/^PRODUCT_NAME := aosp_cf_x86_64_foldable$/;"	m
PRODUCT_NAME	vsoc_x86_64/tv/device.mk	/^PRODUCT_NAME := aosp_cf_x86_64_tv$/;"	m
PRODUCT_NAME	vsoc_x86_64_only/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_x86_64_only_phone$/;"	m
PRODUCT_NAME	vsoc_x86_noapex/aosp_cf_noapex.mk	/^PRODUCT_NAME := aosp_cf_x86_phone_noapex$/;"	m
PRODUCT_NAME	vsoc_x86_only/phone/aosp_cf.mk	/^PRODUCT_NAME := aosp_cf_x86_only_phone$/;"	m
PRODUCT_OTA_ENFORCE_VINTF_KERNEL_REQUIREMENTS	vsoc_arm_only/phone/aosp_cf.mk	/^PRODUCT_OTA_ENFORCE_VINTF_KERNEL_REQUIREMENTS := false$/;"	m
PRODUCT_OTA_ENFORCE_VINTF_KERNEL_REQUIREMENTS	vsoc_x86_only/phone/aosp_cf.mk	/^PRODUCT_OTA_ENFORCE_VINTF_KERNEL_REQUIREMENTS := false$/;"	m
PRODUCT_PACKAGE_OVERLAYS	vsoc_x86/go_512_phone/device.mk	/^PRODUCT_PACKAGE_OVERLAYS := device\/google\/cuttlefish\/vsoc_x86\/phone\/overlay$/;"	m
PRODUCT_PACKAGE_OVERLAYS	vsoc_x86/go_phone/device.mk	/^PRODUCT_PACKAGE_OVERLAYS := device\/google\/cuttlefish\/vsoc_x86\/phone\/overlay$/;"	m
PRODUCT_REQUIRES_INSECURE_EXECMEM_FOR_SWIFTSHADER	shared/device.mk	/^PRODUCT_REQUIRES_INSECURE_EXECMEM_FOR_SWIFTSHADER := true$/;"	m
PRODUCT_SET_DEBUGFS_RESTRICTIONS	shared/device.mk	/^PRODUCT_SET_DEBUGFS_RESTRICTIONS := true$/;"	m
PRODUCT_SHIPPING_API_LEVEL	shared/device.mk	/^PRODUCT_SHIPPING_API_LEVEL := 33$/;"	m
PRODUCT_USE_DYNAMIC_PARTITIONS	shared/device.mk	/^PRODUCT_USE_DYNAMIC_PARTITIONS := true$/;"	m
PROPERTY_RIL_IMPL	guest/hals/ril/reference-libril/ril.cpp	/^#define PROPERTY_RIL_IMPL /;"	d	file:
PROVIDE_LOCAL_INFORMATION	host/commands/modem_simulator/stk_service.h	/^    PROVIDE_LOCAL_INFORMATION = 0x26,$/;"	e	enum:cuttlefish::StkService::CommandType
PT_GUARDED_BY	common/libs/concurrency/thread_annotations.h	/^#define PT_GUARDED_BY(/;"	d
PackagingBase	build/cvd-host-package.go	/^	android.PackagingBase$/;"	M	struct:cuttlefish.cvdHostPackage	typeref:typename:android.PackagingBase
PackagingItemAlwaysDepTag	build/cvd-host-package.go	/^	android.PackagingItemAlwaysDepTag  \/\/ to force packaging of both "deps" and manually added de/;"	M	struct:cuttlefish.dependencyTag	typeref:typename:android.PackagingItemAlwaysDepTag
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.0.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.1.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.10.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.11.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.12.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.13.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.14.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.15.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.16.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.17.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.18.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.19.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.2.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.20.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.21.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.22.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.23.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.24.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.25.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.26.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.27.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.28.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.28.Actions.1
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.29.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.29.Actions.1
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.3.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.30.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.4.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.5.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.6.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.7.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.8.Actions.0
Params	shared/config/task_profiles.json	/^          "Params":$/;"	o	object:Profiles.9.Actions.0
ParentKey	host/commands/secure_env/primary_key_builder.cpp	/^void PrimaryKeyBuilder::ParentKey() {$/;"	f	class:cuttlefish::PrimaryKeyBuilder	typeref:typename:void
ParentKeyCreator	host/commands/secure_env/primary_key_builder.cpp	/^ParentKeyCreator(const std::string& unique) {$/;"	f	namespace:cuttlefish	typeref:typename:std::function<TpmObjectSlot (TpmResourceManager &)>
ParentToChildMessage	host/commands/run_cvd/process_monitor.cc	/^struct ParentToChildMessage {$/;"	s	namespace:cuttlefish	file:
Parse	common/libs/utils/flag_parser.cpp	/^bool Flag::Parse(std::vector<std::string>& arguments) const {$/;"	f	class:cuttlefish::Flag	typeref:typename:bool
Parse	common/libs/utils/flag_parser.cpp	/^bool Flag::Parse(std::vector<std::string>&& arguments) const {$/;"	f	class:cuttlefish::Flag	typeref:typename:bool
ParseAddress	common/libs/utils/network.cpp	/^bool ParseAddress(const std::string& address, const std::string& separator,$/;"	f	namespace:cuttlefish::__anoncaae79910111	typeref:typename:bool
ParseAddressList	host/frontend/adb_connector/main.cpp	/^std::vector<std::string> ParseAddressList(std::string ports) {$/;"	f	namespace:__anona4a84cd70111	typeref:typename:std::vector<std::string>
ParseDisplayConfig	host/commands/assemble_cvd/flags.cc	/^std::optional<CuttlefishConfig::DisplayConfig> ParseDisplayConfig($/;"	f	namespace:cuttlefish::__anon145bfaab0111	typeref:typename:std::optional<CuttlefishConfig::DisplayConfig>
ParseDnsmasqLeases	common/libs/utils/network.cpp	/^std::vector<DnsmasqDhcp4Lease> ParseDnsmasqLeases(SharedFD lease_file) {$/;"	f	namespace:cuttlefish	typeref:typename:std::vector<DnsmasqDhcp4Lease>
ParseFlags	common/libs/utils/flag_parser.cpp	/^bool ParseFlags(const std::vector<Flag>& flags,$/;"	f	namespace:cuttlefish	typeref:typename:bool
ParseGflags	host/commands/assemble_cvd/flag_feature.h	/^class ParseGflags : public FlagFeature {};$/;"	c	namespace:cuttlefish
ParseGflagsImpl	host/commands/assemble_cvd/flag_feature.cpp	/^class ParseGflagsImpl : public ParseGflags {$/;"	c	namespace:cuttlefish	file:
ParseHttpHeaders	host/frontend/webrtc/main.cpp	/^static std::vector<std::pair<std::string, std::string>> ParseHttpHeaders($/;"	f	typeref:typename:std::vector<std::pair<std::string,std::string>>	file:
ParseInteger	common/libs/utils/flag_parser.cpp	/^std::optional<T> ParseInteger(const std::string& value) {$/;"	f	namespace:cuttlefish	typeref:typename:std::optional<T>
ParseInterfaceAttributes	common/libs/device_config/host_device_config.cpp	/^  bool ParseInterfaceAttributes(const std::string& interface) {$/;"	f	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:bool	file:
ParseInterfaceAttributes	common/libs/device_config/host_device_config.cpp	/^  bool ParseInterfaceAttributes(struct ifaddrs* ifa) {$/;"	f	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:bool	file:
ParseIpAddress	common/libs/utils/network.cpp	/^bool ParseIpAddress(const std::string& address, std::uint8_t ip[4]) {$/;"	f	namespace:cuttlefish::__anoncaae79910111	typeref:typename:bool
ParseKeyBlob	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t ParseKeyBlob($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
ParseKeyBlob	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::ParseKeyBlob($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
ParseMacAddress	common/libs/utils/network.cpp	/^bool ParseMacAddress(const std::string& address, std::uint8_t mac[6]) {$/;"	f	namespace:cuttlefish::__anoncaae79910111	typeref:typename:bool
ParseMessage	host/frontend/webrtc/lib/streamer.cpp	/^bool ParseMessage(const uint8_t* data, size_t length, Json::Value* msg_out) {$/;"	f	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:bool
ParseMiscInfo	host/commands/assemble_cvd/misc_info.cc	/^MiscInfo ParseMiscInfo(const std::string& misc_info_contents) {$/;"	f	namespace:cuttlefish	typeref:typename:MiscInfo
ParsePortRange	host/commands/assemble_cvd/flags.cc	/^std::pair<uint16_t, uint16_t> ParsePortRange(const std::string& flag) {$/;"	f	namespace:cuttlefish::__anon145bfaab0111	typeref:typename:std::pair<uint16_t,uint16_t>
ParseRawData	common/libs/confui/packet.cpp	/^static std::optional<ParsedPacket> ParseRawData($/;"	f	namespace:cuttlefish::confui::packet	typeref:typename:std::optional<ParsedPacket>	file:
ParseTimeZone	host/commands/modem_simulator/misc_service.cpp	/^void MiscService::ParseTimeZone() {$/;"	f	class:cuttlefish::MiscService	typeref:typename:void
ParsedPacket	common/libs/confui/packet_types.h	/^struct ParsedPacket {$/;"	s	namespace:cuttlefish::confui::packet
PartitionInfo	host/libs/image_aggregator/image_aggregator.cc	/^struct PartitionInfo {$/;"	s	namespace:cuttlefish::__anon02806fd80111	file:
Path	host/libs/config/config_flag.cpp	/^  const std::string& Path() override { return path_; }$/;"	f	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:const std::string &	file:
Path	host/libs/config/data_image.cpp	/^  const std::string& Path() const override { return path_; }$/;"	f	class:cuttlefish::FixedDataImagePath	typeref:typename:const std::string &	file:
Path	host/libs/config/data_image.cpp	/^  const std::string& Path() const override { return path_; }$/;"	f	class:cuttlefish::FixedMiscImagePath	typeref:typename:const std::string &	file:
Path	shared/config/cgroups.json	/^      "Path": "\/dev\/cpuset",$/;"	s	object:Cgroups.0
Path	shared/config/task_profiles.json	/^            "Path": ""$/;"	s	object:Profiles.1.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": ""$/;"	s	object:Profiles.14.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": ""$/;"	s	object:Profiles.21.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": ""$/;"	s	object:Profiles.22.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": ""$/;"	s	object:Profiles.23.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": ""$/;"	s	object:Profiles.6.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "application"$/;"	s	object:Profiles.11.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "application\/background"$/;"	s	object:Profiles.10.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "application\/performance"$/;"	s	object:Profiles.12.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "background"$/;"	s	object:Profiles.0.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "background"$/;"	s	object:Profiles.13.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "background"$/;"	s	object:Profiles.20.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "camera-daemon"$/;"	s	object:Profiles.19.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "foreground"$/;"	s	object:Profiles.15.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "foreground"$/;"	s	object:Profiles.3.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "restricted"$/;"	s	object:Profiles.18.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "rt"$/;"	s	object:Profiles.5.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "system"$/;"	s	object:Profiles.30.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "system"$/;"	s	object:Profiles.8.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "system-background"$/;"	s	object:Profiles.17.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "system-background"$/;"	s	object:Profiles.2.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "system\/background"$/;"	s	object:Profiles.7.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "system\/performance"$/;"	s	object:Profiles.9.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "top-app"$/;"	s	object:Profiles.16.Actions.0.Params
Path	shared/config/task_profiles.json	/^            "Path": "top-app"$/;"	s	object:Profiles.4.Actions.0.Params
PathsForInstance	host/commands/stop/main.cc	/^std::set<std::string> PathsForInstance(const CuttlefishConfig& config,$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:std::set<std::string>
Payload	common/libs/confui/packet_types.h	/^using Payload = std::tuple<PayloadHeader, BufferType>;$/;"	t	namespace:cuttlefish::confui::packet	typeref:typename:std::tuple<PayloadHeader,BufferType>
PayloadHeader	common/libs/confui/packet_types.h	/^struct PayloadHeader {$/;"	s	namespace:cuttlefish::confui::packet
Pending	host/libs/allocd/request.h	/^  Pending,      \/\/ Request which has not been attempted$/;"	e	enum:cuttlefish::RequestStatus
PerInstanceInternalPath	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::PerInstanceInternalPath($/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
PerInstancePath	host/commands/modem_simulator/cf_device_config.cpp	/^std::string DeviceConfig::PerInstancePath(const char* file_name) {$/;"	f	class:cuttlefish::modem::DeviceConfig	typeref:typename:std::string
PerInstancePath	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::PerInstancePath($/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
PhysicalChannelConfigV1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^using PhysicalChannelConfigV1_4 =$/;"	t	typeref:typename:android::hardware::radio::V1_4::PhysicalChannelConfig	file:
PinStatus	host/commands/modem_simulator/sim_service.h	/^  struct PinStatus {$/;"	s	class:cuttlefish::SimService
Pipe	common/libs/fs/shared_fd.cpp	/^bool SharedFD::Pipe(SharedFD* fd0, SharedFD* fd1) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
Playing	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::Playing() const { return playing_; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
PlayoutDelay	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::PlayoutDelay(uint16_t* delayMS) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
PlayoutDeviceName	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::PlayoutDeviceName($/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
PlayoutDevices	host/frontend/webrtc/lib/audio_device.cpp	/^int16_t CfAudioDeviceModule::PlayoutDevices() { return 1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int16_t
PlayoutIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::PlayoutIsAvailable(bool* available) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
PlayoutIsInitialized	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::PlayoutIsInitialized() const { return true; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
Poll	host/frontend/webrtc_operator/client_handler.cpp	/^HttpStatusCode ClientDynHandler::Poll($/;"	f	class:cuttlefish::ClientDynHandler	typeref:typename:HttpStatusCode
PollConnectionHandler	host/frontend/webrtc_operator/client_handler.cpp	/^class PollConnectionHandler : public ClientHandler {$/;"	c	namespace:cuttlefish	file:
PollConnectionStore	host/frontend/webrtc_operator/client_handler.h	/^class PollConnectionStore {$/;"	c	namespace:cuttlefish
PollHandler	host/frontend/webrtc_operator/client_handler.cpp	/^PollHandler::PollHandler(struct lws* wsi, PollConnectionStore* poll_store)$/;"	f	class:cuttlefish::PollHandler
PollHandler	host/frontend/webrtc_operator/client_handler.h	/^class PollHandler : public ClientDynHandler {$/;"	c	namespace:cuttlefish
PollMessages	host/frontend/webrtc_operator/client_handler.cpp	/^  std::vector<Json::Value> PollMessages() {$/;"	f	class:cuttlefish::PollConnectionHandler	typeref:typename:std::vector<Json::Value>	file:
PollingConnector	host/frontend/webrtc_operator/assets/js/server_connector.js	/^class PollingConnector extends Connector {$/;"	c
Pop	common/libs/concurrency/multiplexer.h	/^  T Pop() {$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:T
Pop	common/libs/concurrency/multiplexer.h	/^  T Pop(QueueSelector selector) {$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:T
Pop	common/libs/concurrency/thread_safe_queue.h	/^  T Pop() {$/;"	f	class:cuttlefish::ThreadSafeQueue	typeref:typename:T
Pop	host/libs/screen_connector/screen_connector_multiplexer.h	/^  ProcessedFrameType Pop() {$/;"	f	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:ProcessedFrameType
Pop	host/libs/screen_connector/screen_connector_queue.h	/^  T Pop() {$/;"	f	class:cuttlefish::ScreenConnectorQueue	typeref:typename:T
PopAll	common/libs/concurrency/thread_safe_queue.h	/^  QueueImpl PopAll() {$/;"	f	class:cuttlefish::ThreadSafeQueue	typeref:typename:QueueImpl
PopList	common/libs/net/netlink_request.cpp	/^void NetlinkRequest::PopList() {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
PopulateEglAvailability	host/libs/graphics_detector/graphics_detector.cpp	/^void PopulateEglAvailability(GraphicsAvailability* availability) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:void
PopulateGlAvailability	host/libs/graphics_detector/graphics_detector.cpp	/^void PopulateGlAvailability(GraphicsAvailability* availability) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:void
PopulateGles1Availability	host/libs/graphics_detector/graphics_detector.cpp	/^void PopulateGles1Availability(GraphicsAvailability* availability) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:void
PopulateGles2Availability	host/libs/graphics_detector/graphics_detector.cpp	/^void PopulateGles2Availability(GraphicsAvailability* availability) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:void
PopulateVulkanAvailability	host/libs/graphics_detector/graphics_detector.cpp	/^void PopulateVulkanAvailability(GraphicsAvailability* availability) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:void
PortRangeSocketFactory	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^PortRangeSocketFactory::PortRangeSocketFactory($/;"	f	class:cuttlefish::webrtc_streaming::PortRangeSocketFactory
PortRangeSocketFactory	host/frontend/webrtc/lib/port_range_socket_factory.h	/^class PortRangeSocketFactory : public rtc::BasicPacketSocketFactory {$/;"	c	namespace:cuttlefish::webrtc_streaming
Post	host/commands/modem_simulator/thread_looper.cpp	/^ThreadLooper::Serial ThreadLooper::Post(Callback cb) {$/;"	f	class:cuttlefish::ThreadLooper	typeref:typename:ThreadLooper::Serial
PostWithDelay	host/commands/modem_simulator/thread_looper.cpp	/^ThreadLooper::Serial ThreadLooper::PostWithDelay($/;"	f	class:cuttlefish::ThreadLooper	typeref:typename:ThreadLooper::Serial
PowerwashCvdMain	host/commands/powerwash_cvd/powerwash_cvd.cc	/^int PowerwashCvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish::__anon7281a6ce0111	typeref:typename:int
PowerwashFiles	host/commands/run_cvd/server_loop.cpp	/^  bool PowerwashFiles() {$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:bool	file:
PowerwashTest	tests/powerwash/src/com/android/cuttlefish/tests/PowerwashTest.java	/^public class PowerwashTest extends BaseHostJUnit4Test {$/;"	c
PrefixLength	common/libs/net/network_interface.h	/^  int PrefixLength() const {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:int
PrepareStream	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::PrepareStream(StreamControlCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
PrimaryKeyBuilder	host/commands/secure_env/primary_key_builder.cpp	/^PrimaryKeyBuilder::PrimaryKeyBuilder() : public_area_({}) {$/;"	f	class:cuttlefish::PrimaryKeyBuilder
PrimaryKeyBuilder	host/commands/secure_env/primary_key_builder.h	/^class PrimaryKeyBuilder {$/;"	c	namespace:cuttlefish
PrintAll	host/commands/run_cvd/reporting.cpp	/^void DiagnosticInformation::PrintAll($/;"	f	class:cuttlefish::DiagnosticInformation	typeref:typename:void
Process	common/libs/utils/flag_parser.cpp	/^Flag::FlagProcessResult Flag::Process($/;"	f	class:cuttlefish::Flag	typeref:typename:Flag::FlagProcessResult
Process	host/commands/assemble_cvd/flag_feature.cpp	/^  bool Process(std::vector<std::string>& args) override {$/;"	f	class:cuttlefish::ParseGflagsImpl	typeref:typename:bool	file:
Process	host/libs/config/adb/flags.cpp	/^  bool Process(std::vector<std::string>& args) override {$/;"	f	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:bool	file:
Process	host/libs/config/config_flag.cpp	/^  bool Process(std::vector<std::string>& args) override {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:bool	file:
Process	host/libs/config/config_flag.cpp	/^  bool Process(std::vector<std::string>& args) override {$/;"	f	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:bool	file:
Process	host/libs/config/config_flag.cpp	/^  bool Process(std::vector<std::string>&) override { return true; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagPlaceholderImpl	typeref:typename:bool	file:
Process	host/libs/config/config_flag.cpp	/^  bool Process(std::vector<std::string>&) override {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:bool	file:
Process	host/libs/config/custom_actions.cpp	/^  bool Process(std::vector<std::string>& args) override {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:bool	file:
ProcessEvents	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^bool VSoCInputService::ProcessEvents() {$/;"	f	class:VSoCInputService	typeref:typename:bool
ProcessFlags	host/libs/config/feature.cpp	/^bool FlagFeature::ProcessFlags(const std::vector<FlagFeature*>& features,$/;"	f	class:cuttlefish::FlagFeature	typeref:typename:bool
ProcessLeader	host/commands/run_cvd/boot_state_machine.cc	/^class ProcessLeader : public Feature {$/;"	c	namespace:cuttlefish::__anone7ed366f0111	file:
ProcessMessage	host/commands/secure_env/gatekeeper_responder.cpp	/^bool GatekeeperResponder::ProcessMessage() {$/;"	f	class:cuttlefish::GatekeeperResponder	typeref:typename:bool
ProcessMessage	host/commands/secure_env/keymaster_responder.cpp	/^bool KeymasterResponder::ProcessMessage() {$/;"	f	class:cuttlefish::KeymasterResponder	typeref:typename:bool
ProcessMonitor	host/commands/run_cvd/process_monitor.cc	/^ProcessMonitor::ProcessMonitor(bool restart_subprocesses)$/;"	f	class:cuttlefish::ProcessMonitor
ProcessMonitor	host/commands/run_cvd/process_monitor.h	/^class ProcessMonitor {$/;"	c	namespace:cuttlefish
ProcessSubscriptions	host/commands/kernel_log_monitor/kernel_log_server.cc	/^void ProcessSubscriptions($/;"	f	namespace:__anonfa7764770111	typeref:typename:void
ProductName	host/commands/fetcher/build_api.cc	/^std::string BuildApi::ProductName(const DeviceBuild& build) {$/;"	f	class:cuttlefish::BuildApi	typeref:typename:std::string
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "LowIoPriority", "TimerSlackHigh" ]$/;"	a	object:AggregateProfiles.1
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "HighEnergySaving", "ProcessCapacityLow", "LowIoPriority", "TimerSlackHigh" /;"	a	object:AggregateProfiles.7
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "HighIoPriority", "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.2
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "HighPerformance", "ProcessCapacityHigh", "HighIoPriority", "TimerSlackNorma/;"	a	object:AggregateProfiles.8
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.3
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "MaxPerformance", "ProcessCapacityMax", "MaxIoPriority", "TimerSlackNormal" /;"	a	object:AggregateProfiles.9
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "RealtimePerformance", "MaxIoPriority", "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.5
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "ServiceCapacityLow", "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.10
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "ServiceCapacityRestricted", "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.11
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "ServicePerformance", "LowIoPriority", "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.4
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.0
Profiles	shared/config/task_profiles.json	/^      "Profiles": [ "TimerSlackNormal" ]$/;"	a	object:AggregateProfiles.6
Profiles	shared/config/task_profiles.json	/^  "Profiles": [$/;"	a
PromptUserConfirmation	guest/hals/confirmationui/guest_session.cpp	/^GuestSession::ResultTriple GuestSession::PromptUserConfirmation() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:GuestSession::ResultTriple
ProtectiveMbr	host/libs/image_aggregator/image_aggregator.cc	/^MasterBootRecord ProtectiveMbr(std::uint64_t size) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:MasterBootRecord
ProxyKeymasterContext	host/commands/secure_env/proxy_keymaster_context.h	/^  ProxyKeymasterContext(KeymasterContext& wrapped) : wrapped_(wrapped) {}$/;"	f	class:cuttlefish::ProxyKeymasterContext
ProxyKeymasterContext	host/commands/secure_env/proxy_keymaster_context.h	/^class ProxyKeymasterContext : public keymaster::KeymasterContext {$/;"	c	namespace:cuttlefish
PublicDeps	host/commands/run_cvd/launch.cc	/^using PublicDeps = fruit::Required<const CuttlefishConfig, VmManager,$/;"	t	namespace:cuttlefish	typeref:typename:fruit::Required<const CuttlefishConfig,VmManager,const CuttlefishConfig::InstanceSpecific>	file:
Push	common/libs/concurrency/multiplexer.h	/^  void Push(const int idx, T&& t) {$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:void
Push	common/libs/concurrency/thread_safe_queue.h	/^  bool Push(U&& u) {$/;"	f	class:cuttlefish::ThreadSafeQueue	typeref:typename:bool
Push	guest/hals/confirmationui/guest_session.h	/^    void Push(std::unique_ptr<ConfUiMessage>&& msg) { incoming_msg_queue_.Push(std::move(msg)); /;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:void
Push	host/libs/screen_connector/screen_connector_queue.h	/^  void Push(T&& item) {$/;"	f	class:cuttlefish::ScreenConnectorQueue	typeref:typename:void
PushList	common/libs/net/netlink_request.cpp	/^void NetlinkRequest::PushList(uint16_t type) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void
PushToAndroidQueue	host/libs/screen_connector/screen_connector_multiplexer.h	/^  void PushToAndroidQueue(ProcessedFrameType&& t) {$/;"	f	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:void
PushToConfUiQueue	host/libs/screen_connector/screen_connector_multiplexer.h	/^  void PushToConfUiQueue(ProcessedFrameType&& t) {$/;"	f	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:void
QCOW2_MAGIC	host/libs/image_aggregator/image_aggregator.cc	/^static const std::string QCOW2_MAGIC = "QFI\\xfb";$/;"	v	namespace:cuttlefish::__anon02806fd80111	typeref:typename:const std::string	file:
QCowHeader	host/libs/image_aggregator/image_aggregator.cc	/^struct __attribute__((packed)) QCowHeader {$/;"	s	namespace:cuttlefish::__anon02806fd80111	file:
QUERY	host/commands/modem_simulator/sim_service.h	/^      QUERY = 2,$/;"	e	enum:cuttlefish::SimService::FacilityLock::Mode
QemuManager	host/libs/vm_manager/qemu_manager.cpp	/^QemuManager::QemuManager(Arch arch) : arch_(arch) {}$/;"	f	class:cuttlefish::vm_manager::QemuManager
QemuManager	host/libs/vm_manager/qemu_manager.h	/^class QemuManager : public VmManager {$/;"	c	namespace:cuttlefish::vm_manager
QueryVideoEncoder	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^webrtc::VideoEncoderFactory::CodecInfo VP8OnlyEncoderFactory::QueryVideoEncoder($/;"	f	class:cuttlefish::webrtc_streaming::VP8OnlyEncoderFactory	typeref:typename:webrtc::VideoEncoderFactory::CodecInfo
Queue	guest/hals/confirmationui/guest_session.h	/^    using Queue = cuttlefish::ThreadSafeQueue<std::unique_ptr<ConfUiMessage>>;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:cuttlefish::ThreadSafeQueue<std::unique_ptr<ConfUiMessage>>
Queue	host/libs/screen_connector/screen_connector_multiplexer.h	/^  using Queue = ScreenConnectorQueue<ProcessedFrameType>;$/;"	t	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:ScreenConnectorQueue<ProcessedFrameType>
QueueFullHandler	common/libs/concurrency/thread_safe_queue.h	/^  using QueueFullHandler = std::function<void(QueueImpl*)>;$/;"	t	class:cuttlefish::ThreadSafeQueue
QueueFullHandler	guest/hals/confirmationui/guest_session.h	/^    void QueueFullHandler(QueueImpl* queue_impl) {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:void
QueueImpl	common/libs/concurrency/thread_safe_queue.h	/^  using QueueImpl = std::deque<T>;$/;"	t	class:cuttlefish::ThreadSafeQueue	typeref:typename:std::deque<T>
QueueImpl	guest/hals/confirmationui/guest_session.h	/^    using QueueImpl = Queue::QueueImpl;$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:Queue::QueueImpl
QueuePtr	common/libs/concurrency/multiplexer.h	/^  using QueuePtr = std::unique_ptr<Queue>;$/;"	t	class:cuttlefish::Multiplexer	typeref:typename:std::unique_ptr<Queue>
QueueSelector	common/libs/concurrency/multiplexer.h	/^  using QueueSelector = std::function<int(void)>;$/;"	t	class:cuttlefish::Multiplexer
RADIO_ACCESS_NET_CDMA2000	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_NET_CDMA2000 = 4, \/* CDMA 2000 network *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_ACCESS_NET_EUTRAN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_NET_EUTRAN = 3, \/* Evolved Universal Terrestrial Radio Access Network *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_ACCESS_NET_GERAN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_NET_GERAN = 1, \/* GSM EDGE Radio Access Network *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_ACCESS_NET_IWLAN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_NET_IWLAN = 5, \/* Interworking Wireless LAN *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_ACCESS_NET_NGRAN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_NET_NGRAN = 6, \/* Next-Generation Radio Access Network *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_ACCESS_NET_UTRAN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_NET_UTRAN = 2, \/* Universal Terrestrial Radio Access Network *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_ACCESS_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_ACCESS_UNKNOWN = 0, \/* Unknown access network *\/$/;"	e	enum:__anon0bfbaecf5503
RADIO_STATE_OFF	guest/hals/ril/reference-libril/ril.h	/^    RADIO_STATE_OFF = 0,                   \/* Radio explictly powered off (eg CFUN=0) *\/$/;"	e	enum:__anon0bfbaecf0403
RADIO_STATE_OFF	host/commands/modem_simulator/network_service.h	/^    RADIO_STATE_OFF,$/;"	e	enum:cuttlefish::NetworkService::RadioState
RADIO_STATE_ON	guest/hals/ril/reference-libril/ril.h	/^    RADIO_STATE_ON = 10                    \/* Radio is on *\/$/;"	e	enum:__anon0bfbaecf0403
RADIO_STATE_ON	host/commands/modem_simulator/network_service.h	/^    RADIO_STATE_ON,$/;"	e	enum:cuttlefish::NetworkService::RadioState
RADIO_STATE_UNAVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    RADIO_STATE_UNAVAILABLE = 1,           \/* Radio unavailable (eg, resetting or not booted) */;"	e	enum:__anon0bfbaecf0403
RADIO_TECH_1xRTT	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_1xRTT =  6,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_3GPP	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_3GPP = 1, \/* 3GPP Technologies - GSM, WCDMA *\/$/;"	e	enum:__anon0bfbaecf1703
RADIO_TECH_3GPP2	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_3GPP2 = 2 \/* 3GPP2 Technologies - CDMA *\/$/;"	e	enum:__anon0bfbaecf1703
RADIO_TECH_EDGE	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_EDGE = 2,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_EHRPD	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_EHRPD = 13,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_EVDO_0	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_EVDO_0 = 7,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_EVDO_A	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_EVDO_A = 8,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_EVDO_B	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_EVDO_B = 12,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_GPRS	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_GPRS = 1,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_GSM	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_GSM = 16, \/\/ Only supports voice$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_HSDPA	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_HSDPA = 9,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_HSPA	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_HSPA = 11,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_HSPAP	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_HSPAP = 15, \/\/ HSPA+$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_HSUPA	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_HSUPA = 10,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_IS95A	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_IS95A = 4,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_IS95B	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_IS95B = 5,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_IWLAN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_IWLAN = 18,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_LTE	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_LTE = 14,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_LTE_CA	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_LTE_CA = 19,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_NR	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_NR = 20$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_TD_SCDMA	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_TD_SCDMA = 17,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_UMTS	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_UMTS = 3,$/;"	e	enum:__anon0bfbaecf0503
RADIO_TECH_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RADIO_TECH_UNKNOWN = 0,$/;"	e	enum:__anon0bfbaecf0503
RAF_1xRTT	guest/hals/ril/reference-libril/ril.h	/^    RAF_1xRTT = (1 << RADIO_TECH_1xRTT),$/;"	e	enum:__anon0bfbaecf0603
RAF_EDGE	guest/hals/ril/reference-libril/ril.h	/^    RAF_EDGE = (1 << RADIO_TECH_EDGE),$/;"	e	enum:__anon0bfbaecf0603
RAF_EHRPD	guest/hals/ril/reference-libril/ril.h	/^    RAF_EHRPD = (1 << RADIO_TECH_EHRPD),$/;"	e	enum:__anon0bfbaecf0603
RAF_EVDO_0	guest/hals/ril/reference-libril/ril.h	/^    RAF_EVDO_0 = (1 << RADIO_TECH_EVDO_0),$/;"	e	enum:__anon0bfbaecf0603
RAF_EVDO_A	guest/hals/ril/reference-libril/ril.h	/^    RAF_EVDO_A = (1 << RADIO_TECH_EVDO_A),$/;"	e	enum:__anon0bfbaecf0603
RAF_EVDO_B	guest/hals/ril/reference-libril/ril.h	/^    RAF_EVDO_B = (1 << RADIO_TECH_EVDO_B),$/;"	e	enum:__anon0bfbaecf0603
RAF_GPRS	guest/hals/ril/reference-libril/ril.h	/^    RAF_GPRS = (1 << RADIO_TECH_GPRS),$/;"	e	enum:__anon0bfbaecf0603
RAF_GSM	guest/hals/ril/reference-libril/ril.h	/^    RAF_GSM = (1 << RADIO_TECH_GSM),$/;"	e	enum:__anon0bfbaecf0603
RAF_HSDPA	guest/hals/ril/reference-libril/ril.h	/^    RAF_HSDPA = (1 << RADIO_TECH_HSDPA),$/;"	e	enum:__anon0bfbaecf0603
RAF_HSPA	guest/hals/ril/reference-libril/ril.h	/^    RAF_HSPA = (1 << RADIO_TECH_HSPA),$/;"	e	enum:__anon0bfbaecf0603
RAF_HSPAP	guest/hals/ril/reference-libril/ril.h	/^    RAF_HSPAP = (1 << RADIO_TECH_HSPAP),$/;"	e	enum:__anon0bfbaecf0603
RAF_HSUPA	guest/hals/ril/reference-libril/ril.h	/^    RAF_HSUPA = (1 << RADIO_TECH_HSUPA),$/;"	e	enum:__anon0bfbaecf0603
RAF_IS95A	guest/hals/ril/reference-libril/ril.h	/^    RAF_IS95A = (1 << RADIO_TECH_IS95A),$/;"	e	enum:__anon0bfbaecf0603
RAF_IS95B	guest/hals/ril/reference-libril/ril.h	/^    RAF_IS95B = (1 << RADIO_TECH_IS95B),$/;"	e	enum:__anon0bfbaecf0603
RAF_LTE	guest/hals/ril/reference-libril/ril.h	/^    RAF_LTE = (1 << RADIO_TECH_LTE),$/;"	e	enum:__anon0bfbaecf0603
RAF_LTE_CA	guest/hals/ril/reference-libril/ril.h	/^    RAF_LTE_CA = (1 << RADIO_TECH_LTE_CA),$/;"	e	enum:__anon0bfbaecf0603
RAF_NR	guest/hals/ril/reference-libril/ril.h	/^    RAF_NR = (1 << RADIO_TECH_NR)$/;"	e	enum:__anon0bfbaecf0603
RAF_TD_SCDMA	guest/hals/ril/reference-libril/ril.h	/^    RAF_TD_SCDMA = (1 << RADIO_TECH_TD_SCDMA),$/;"	e	enum:__anon0bfbaecf0603
RAF_UMTS	guest/hals/ril/reference-libril/ril.h	/^    RAF_UMTS = (1 << RADIO_TECH_UMTS),$/;"	e	enum:__anon0bfbaecf0603
RAF_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RAF_UNKNOWN =  (1 <<  RADIO_TECH_UNKNOWN),$/;"	e	enum:__anon0bfbaecf0603
RC_PHASE_APPLY	guest/hals/ril/reference-libril/ril.h	/^    RC_PHASE_APPLY      = 2,  \/\/ APPLY is sent after all LM's receive START and returned$/;"	e	enum:__anon0bfbaecf0803
RC_PHASE_CONFIGURED	guest/hals/ril/reference-libril/ril.h	/^    RC_PHASE_CONFIGURED = 0,  \/\/ LM is configured is initial value and value after FINISH comp/;"	e	enum:__anon0bfbaecf0803
RC_PHASE_FINISH	guest/hals/ril/reference-libril/ril.h	/^    RC_PHASE_FINISH     = 4   \/\/ FINISH is sent after all commands have completed. If an error$/;"	e	enum:__anon0bfbaecf0803
RC_PHASE_START	guest/hals/ril/reference-libril/ril.h	/^    RC_PHASE_START      = 1,  \/\/ START is sent before Apply and indicates that an APPLY will b/;"	e	enum:__anon0bfbaecf0803
RC_PHASE_UNSOL_RSP	guest/hals/ril/reference-libril/ril.h	/^    RC_PHASE_UNSOL_RSP  = 3,  \/\/ UNSOL_RSP is sent with RIL_UNSOL_RADIO_CAPABILITY$/;"	e	enum:__anon0bfbaecf0803
RC_STATUS_FAIL	guest/hals/ril/reference-libril/ril.h	/^    RC_STATUS_FAIL       = 2, \/\/ Tell modem the action transaction of set radio$/;"	e	enum:__anon0bfbaecf0903
RC_STATUS_NONE	guest/hals/ril/reference-libril/ril.h	/^    RC_STATUS_NONE       = 0, \/\/ This parameter has no meaning with RC_PHASE_START,$/;"	e	enum:__anon0bfbaecf0903
RC_STATUS_SUCCESS	guest/hals/ril/reference-libril/ril.h	/^    RC_STATUS_SUCCESS    = 1, \/\/ Tell modem the action transaction of set radio$/;"	e	enum:__anon0bfbaecf0903
READ_ONLY	host/libs/image_aggregator/cdisk_spec.proto	/^  READ_ONLY = 0;$/;"	e	enum:ReadWriteCapability
READ_WRITE	host/libs/image_aggregator/cdisk_spec.proto	/^  READ_WRITE = 1;$/;"	e	enum:ReadWriteCapability
RECEIVE_DATA	host/commands/modem_simulator/stk_service.h	/^    RECEIVE_DATA        = 0x42,$/;"	e	enum:cuttlefish::StkService::CommandType
REFRESH	host/commands/modem_simulator/stk_service.h	/^    REFRESH             = 0x01,$/;"	e	enum:cuttlefish::StkService::CommandType
REFRESH_URL	host/commands/fetcher/credential_source.cc	/^std::string REFRESH_URL = "http:\/\/metadata.google.internal\/computeMetadata\/"$/;"	v	namespace:cuttlefish::__anone81850a20111	typeref:typename:std::string
REFRESH_WINDOW	host/commands/fetcher/credential_source.cc	/^std::chrono::steady_clock::duration REFRESH_WINDOW =$/;"	v	namespace:cuttlefish::__anone81850a20111	typeref:typename:std::chrono::steady_clock::duration
REGISTRATION	host/commands/modem_simulator/sup_service.h	/^      REGISTRATION  = 3,$/;"	e	enum:cuttlefish::SupService::CallForwardInfo::CallForwardInfoStatus
REGISTRATION_UNSOL_DISABLED	host/commands/modem_simulator/network_service.h	/^      REGISTRATION_UNSOL_DISABLED     = 0,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::RegistrationUnsolMode
REGISTRATION_UNSOL_ENABLED	host/commands/modem_simulator/network_service.h	/^      REGISTRATION_UNSOL_ENABLED      = 1,$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::RegistrationUnsolMode
REGISTRATION_UNSOL_ENABLED_FULL	host/commands/modem_simulator/network_service.h	/^      REGISTRATION_UNSOL_ENABLED_FULL = 2$/;"	e	enum:cuttlefish::NetworkService::NetworkRegistrationStatus::RegistrationUnsolMode
REG_DATA_STATE_LEN	guest/hals/ril/reference-ril/reference-ril.c	/^#define REG_DATA_STATE_LEN /;"	d	file:
REG_STATE_LEN	guest/hals/ril/reference-ril/reference-ril.c	/^#define REG_STATE_LEN /;"	d	file:
RELEASE	common/libs/concurrency/thread_annotations.h	/^#define RELEASE(/;"	d
RELEASE_SHARED	common/libs/concurrency/thread_annotations.h	/^#define RELEASE_SHARED(/;"	d
REMOTE	host/commands/modem_simulator/channel_monitor.h	/^  enum ClientType { RIL, REMOTE };$/;"	e	enum:cuttlefish::Client::ClientType
REMOTE_KEYMASTER_H_	guest/hals/keymaster/remote/remote_keymaster.h	/^#define REMOTE_KEYMASTER_H_$/;"	d
REMOTE_KEYMASTER_H_	guest/hals/keymint/remote/remote_keymaster.h	/^#define REMOTE_KEYMASTER_H_$/;"	d
REPOLL_CALLS_COUNT_MAX	guest/hals/ril/reference-ril/reference-ril.c	/^#define REPOLL_CALLS_COUNT_MAX /;"	d	file:
REQUIRES	common/libs/concurrency/thread_annotations.h	/^#define REQUIRES(/;"	d
REQUIRES_SHARED	common/libs/concurrency/thread_annotations.h	/^#define REQUIRES_SHARED(/;"	d
RESPONSE_DATA_FILE_DES_FLAG	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_DES_FLAG /;"	d	file:
RESPONSE_DATA_FILE_DES_LEN_FLAG	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_DES_LEN_FLAG /;"	d	file:
RESPONSE_DATA_FILE_RECORD_LEN_1	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_RECORD_LEN_1 /;"	d	file:
RESPONSE_DATA_FILE_RECORD_LEN_2	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_RECORD_LEN_2 /;"	d	file:
RESPONSE_DATA_FILE_SIZE_1	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_SIZE_1 /;"	d	file:
RESPONSE_DATA_FILE_SIZE_2	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_SIZE_2 /;"	d	file:
RESPONSE_DATA_FILE_TYPE	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_FILE_TYPE /;"	d	file:
RESPONSE_DATA_RECORD_LENGTH	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_RECORD_LENGTH /;"	d	file:
RESPONSE_DATA_STRUCTURE	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_DATA_STRUCTURE /;"	d	file:
RESPONSE_EF_SIZE	guest/hals/ril/reference-ril/reference-ril.c	/^#define RESPONSE_EF_SIZE /;"	d	file:
RESPONSE_SOLICITED	guest/hals/ril/reference-libril/ril_internal.h	/^#define RESPONSE_SOLICITED /;"	d
RESPONSE_SOLICITED_ACK	guest/hals/ril/reference-libril/ril_internal.h	/^#define RESPONSE_SOLICITED_ACK /;"	d
RESPONSE_SOLICITED_ACK_EXP	guest/hals/ril/reference-libril/ril_internal.h	/^#define RESPONSE_SOLICITED_ACK_EXP /;"	d
RESPONSE_UNSOLICITED	guest/hals/ril/reference-libril/ril_internal.h	/^#define RESPONSE_UNSOLICITED /;"	d
RESPONSE_UNSOLICITED_ACK_EXP	guest/hals/ril/reference-libril/ril_internal.h	/^#define RESPONSE_UNSOLICITED_ACK_EXP /;"	d
RETURN_CAPABILITY	common/libs/concurrency/thread_annotations.h	/^#define RETURN_CAPABILITY(/;"	d
RIL	host/commands/modem_simulator/channel_monitor.h	/^  enum ClientType { RIL, REMOTE };$/;"	e	enum:cuttlefish::Client::ClientType
RIL1_SERVICE_NAME	guest/hals/ril/reference-libril/ril_internal.h	/^#define RIL1_SERVICE_NAME /;"	d
RIL2_SERVICE_NAME	guest/hals/ril/reference-libril/ril_internal.h	/^#define RIL2_SERVICE_NAME /;"	d
RIL3_SERVICE_NAME	guest/hals/ril/reference-libril/ril_internal.h	/^#define RIL3_SERVICE_NAME /;"	d
RIL4_SERVICE_NAME	guest/hals/ril/reference-libril/ril_internal.h	/^#define RIL4_SERVICE_NAME /;"	d
RILC_LOG	guest/hals/ril/reference-libril/ril_internal.h	/^#define RILC_LOG /;"	d
RILConfig	common/libs/device_config/device_config.proto	/^  message RILConfig {$/;"	m	message:cuttlefish.DeviceConfig
RIL_APN_TYPE_ALL	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_ALL          = 0xFFFFFFFF    \/\/ All APN types$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_CBS	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_CBS          = 0x80,         \/\/ APN type for CBS$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_DEFAULT	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_DEFAULT      = 0x1,          \/\/ APN type for default data traffic$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_DUN	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_DUN          = 0x8,          \/\/ APN type for DUN traffic$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_EMERGENCY	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_EMERGENCY    = 0x200,        \/\/ APN type for Emergency PDN. This is not an IA/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_FOTA	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_FOTA         = 0x20,         \/\/ APN type for FOTA$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_HIPRI	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_HIPRI        = 0x10,         \/\/ APN type for HiPri traffic$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_IA	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_IA           = 0x100,        \/\/ APN type for IA Initial Attach APN$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_IMS	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_IMS          = 0x40,         \/\/ APN type for IMS$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_MCX	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_MCX          = 0x400,        \/\/ APN type for Mission Critical Service$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_MMS	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_MMS          = 0x2,          \/\/ APN type for MMS traffic$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_SUPL	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_SUPL         = 0x4,          \/\/ APN type for SUPL assisted GPS$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_UNKNOWN      = 0x0,          \/\/ Unknown$/;"	e	enum:__anon0bfbaecfa003
RIL_APN_TYPE_XCAP	guest/hals/ril/reference-libril/ril.h	/^    RIL_APN_TYPE_XCAP         = 0x800,        \/\/ APN type for XCAP$/;"	e	enum:__anon0bfbaecfa003
RIL_APPSTATE_DETECTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_APPSTATE_DETECTED              = 1,$/;"	e	enum:__anon0bfbaecf3403
RIL_APPSTATE_PIN	guest/hals/ril/reference-libril/ril.h	/^    RIL_APPSTATE_PIN                   = 2, \/* If PIN1 or UPin is required *\/$/;"	e	enum:__anon0bfbaecf3403
RIL_APPSTATE_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_APPSTATE_PUK                   = 3, \/* If PUK1 or Puk for UPin is required *\/$/;"	e	enum:__anon0bfbaecf3403
RIL_APPSTATE_READY	guest/hals/ril/reference-libril/ril.h	/^    RIL_APPSTATE_READY                 = 5$/;"	e	enum:__anon0bfbaecf3403
RIL_APPSTATE_SUBSCRIPTION_PERSO	guest/hals/ril/reference-libril/ril.h	/^    RIL_APPSTATE_SUBSCRIPTION_PERSO    = 4, \/* perso_substate should be look at$/;"	e	enum:__anon0bfbaecf3403
RIL_APPSTATE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_APPSTATE_UNKNOWN               = 0,$/;"	e	enum:__anon0bfbaecf3403
RIL_APPTYPE_CSIM	guest/hals/ril/reference-libril/ril.h	/^  RIL_APPTYPE_CSIM    = 4,$/;"	e	enum:__anon0bfbaecf3603
RIL_APPTYPE_ISIM	guest/hals/ril/reference-libril/ril.h	/^  RIL_APPTYPE_ISIM    = 5$/;"	e	enum:__anon0bfbaecf3603
RIL_APPTYPE_RUIM	guest/hals/ril/reference-libril/ril.h	/^  RIL_APPTYPE_RUIM    = 3,$/;"	e	enum:__anon0bfbaecf3603
RIL_APPTYPE_SIM	guest/hals/ril/reference-libril/ril.h	/^  RIL_APPTYPE_SIM     = 1,$/;"	e	enum:__anon0bfbaecf3603
RIL_APPTYPE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^  RIL_APPTYPE_UNKNOWN = 0,$/;"	e	enum:__anon0bfbaecf3603
RIL_APPTYPE_USIM	guest/hals/ril/reference-libril/ril.h	/^  RIL_APPTYPE_USIM    = 2,$/;"	e	enum:__anon0bfbaecf3603
RIL_ActivityStatsInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_ActivityStatsInfo;$/;"	t	typeref:struct:__anon0bfbaecf9f08
RIL_ApnTypes	guest/hals/ril/reference-libril/ril.h	/^} RIL_ApnTypes;$/;"	t	typeref:enum:__anon0bfbaecfa003
RIL_AppState	guest/hals/ril/reference-libril/ril.h	/^} RIL_AppState;$/;"	t	typeref:enum:__anon0bfbaecf3403
RIL_AppStatus	guest/hals/ril/reference-libril/ril.h	/^} RIL_AppStatus;$/;"	t	typeref:struct:__anon0bfbaecf3808
RIL_AppStatusV1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_AppStatusV1_5;$/;"	t	typeref:struct:__anon0bfbaecf3e08
RIL_AppType	guest/hals/ril/reference-libril/ril.h	/^} RIL_AppType;$/;"	t	typeref:enum:__anon0bfbaecf3603
RIL_CALL_ACTIVE	guest/hals/ril/reference-libril/ril.h	/^    RIL_CALL_ACTIVE = 0,$/;"	e	enum:__anon0bfbaecf0303
RIL_CALL_ALERTING	guest/hals/ril/reference-libril/ril.h	/^    RIL_CALL_ALERTING = 3,   \/* MO call only *\/$/;"	e	enum:__anon0bfbaecf0303
RIL_CALL_DIALING	guest/hals/ril/reference-libril/ril.h	/^    RIL_CALL_DIALING = 2,    \/* MO call only *\/$/;"	e	enum:__anon0bfbaecf0303
RIL_CALL_HOLDING	guest/hals/ril/reference-libril/ril.h	/^    RIL_CALL_HOLDING = 1,$/;"	e	enum:__anon0bfbaecf0303
RIL_CALL_INCOMING	guest/hals/ril/reference-libril/ril.h	/^    RIL_CALL_INCOMING = 4,   \/* MT call only *\/$/;"	e	enum:__anon0bfbaecf0303
RIL_CALL_WAITING	guest/hals/ril/reference-libril/ril.h	/^    RIL_CALL_WAITING = 5     \/* MT call only *\/$/;"	e	enum:__anon0bfbaecf0303
RIL_CARDSTATE_ABSENT	guest/hals/ril/reference-libril/ril.h	/^    RIL_CARDSTATE_ABSENT     = 0,$/;"	e	enum:__anon0bfbaecf3203
RIL_CARDSTATE_ERROR	guest/hals/ril/reference-libril/ril.h	/^    RIL_CARDSTATE_ERROR      = 2,$/;"	e	enum:__anon0bfbaecf3203
RIL_CARDSTATE_PRESENT	guest/hals/ril/reference-libril/ril.h	/^    RIL_CARDSTATE_PRESENT    = 1,$/;"	e	enum:__anon0bfbaecf3203
RIL_CARDSTATE_RESTRICTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_CARDSTATE_RESTRICTED = 3  \/* card is present but not usable due to carrier restrictions/;"	e	enum:__anon0bfbaecf3203
RIL_CARD_MAX_APPS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_CARD_MAX_APPS /;"	d
RIL_CDMA_CALLED_PARTY_NUMBER_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_CALLED_PARTY_NUMBER_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_CALLING_PARTY_NUMBER_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_CALLING_PARTY_NUMBER_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_CONNECTED_NUMBER_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_CONNECTED_NUMBER_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_CallWaiting_v5	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_CallWaiting_v5;$/;"	t	typeref:struct:__anon0bfbaecf4208
RIL_CDMA_CallWaiting_v6	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_CallWaiting_v6;$/;"	t	typeref:struct:__anon0bfbaecf4308
RIL_CDMA_DISPLAY_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_DISPLAY_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_DisplayInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_DisplayInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf8208
RIL_CDMA_EXTENDED_DISPLAY_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_EXTENDED_DISPLAY_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_InfoRecName	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_InfoRecName;$/;"	t	typeref:enum:__anon0bfbaecf8103
RIL_CDMA_InformationRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_InformationRecord;$/;"	t	typeref:struct:__anon0bfbaecf8908
RIL_CDMA_InformationRecords	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_InformationRecords;$/;"	t	typeref:struct:__anon0bfbaecf8b08
RIL_CDMA_LINE_CONTROL_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_LINE_CONTROL_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_LineControlInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_LineControlInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf8608
RIL_CDMA_MAX_NUMBER_OF_INFO_RECS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_CDMA_MAX_NUMBER_OF_INFO_RECS /;"	d
RIL_CDMA_NumberInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_NumberInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf8308
RIL_CDMA_OTA_ProvisionStatus	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_OTA_ProvisionStatus;$/;"	t	typeref:enum:__anon0bfbaecf4503
RIL_CDMA_REDIRECTING_NUMBER_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_REDIRECTING_NUMBER_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_RedirectingNumberInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_RedirectingNumberInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf8508
RIL_CDMA_RedirectingReason	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_RedirectingReason;$/;"	t	typeref:enum:__anon0bfbaecf8403
RIL_CDMA_SIGNAL_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_SIGNAL_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_SignalInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_SignalInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf1008
RIL_CDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_SignalStrength;$/;"	t	typeref:struct:__anon0bfbaecf4908
RIL_CDMA_T53_AUDIO_CONTROL_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_T53_AUDIO_CONTROL_INFO_REC$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_T53_AudioControlInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_T53_AudioControlInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf8808
RIL_CDMA_T53_CLIRInfoRecord	guest/hals/ril/reference-libril/ril.h	/^} RIL_CDMA_T53_CLIRInfoRecord;$/;"	t	typeref:struct:__anon0bfbaecf8708
RIL_CDMA_T53_CLIR_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_T53_CLIR_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CDMA_T53_RELEASE_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_T53_RELEASE_INFO_REC,$/;"	e	enum:__anon0bfbaecf8103
RIL_CELL_INFO_TYPE_CDMA	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_CDMA   = 2,$/;"	e	enum:__anon0bfbaecf6b03
RIL_CELL_INFO_TYPE_GSM	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_GSM    = 1,$/;"	e	enum:__anon0bfbaecf6b03
RIL_CELL_INFO_TYPE_LTE	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_LTE    = 3,$/;"	e	enum:__anon0bfbaecf6b03
RIL_CELL_INFO_TYPE_NONE	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_NONE   = 0, \/* indicates no cell information *\/$/;"	e	enum:__anon0bfbaecf6b03
RIL_CELL_INFO_TYPE_NR	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_NR        = 6$/;"	e	enum:__anon0bfbaecf6b03
RIL_CELL_INFO_TYPE_TD_SCDMA	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_TD_SCDMA  = 5,$/;"	e	enum:__anon0bfbaecf6b03
RIL_CELL_INFO_TYPE_WCDMA	guest/hals/ril/reference-libril/ril.h	/^  RIL_CELL_INFO_TYPE_WCDMA  = 4,$/;"	e	enum:__anon0bfbaecf6b03
RIL_Call	guest/hals/ril/reference-libril/ril.h	/^} RIL_Call;$/;"	t	typeref:struct:__anon0bfbaecf1108
RIL_CallForwardInfo	guest/hals/ril/reference-libril/ril.h	/^}RIL_CallForwardInfo;$/;"	t	typeref:struct:__anon0bfbaecf2108
RIL_CallState	guest/hals/ril/reference-libril/ril.h	/^} RIL_CallState;$/;"	t	typeref:enum:__anon0bfbaecf0303
RIL_Cancel	guest/hals/ril/reference-libril/ril.h	/^typedef void (*RIL_Cancel)(RIL_Token t);$/;"	t	typeref:typename:void (*)(RIL_Token t)
RIL_CardState	guest/hals/ril/reference-libril/ril.h	/^} RIL_CardState;$/;"	t	typeref:enum:__anon0bfbaecf3203
RIL_CardStatus_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CardStatus_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf3b08
RIL_CardStatus_v1_4	guest/hals/ril/reference-libril/ril.h	/^} RIL_CardStatus_v1_4;$/;"	t	typeref:struct:__anon0bfbaecf3c08
RIL_CardStatus_v1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_CardStatus_v1_5;  \/\/ 1.5$/;"	t	typeref:struct:__anon0bfbaecf3f08
RIL_CardStatus_v5	guest/hals/ril/reference-libril/ril.h	/^} RIL_CardStatus_v5;$/;"	t	typeref:struct:__anon0bfbaecf3908
RIL_CardStatus_v6	guest/hals/ril/reference-libril/ril.h	/^} RIL_CardStatus_v6;$/;"	t	typeref:struct:__anon0bfbaecf3a08
RIL_Carrier	guest/hals/ril/reference-libril/ril.h	/^} RIL_Carrier;$/;"	t	typeref:struct:__anon0bfbaecf2608
RIL_CarrierInfoForImsiEncryption	guest/hals/ril/reference-libril/ril.h	/^} RIL_CarrierInfoForImsiEncryption;$/;"	t	typeref:struct:__anon0bfbaecf2a08
RIL_CarrierInfoForImsiEncryption_v16	guest/hals/ril/reference-libril/ril.h	/^} RIL_CarrierInfoForImsiEncryption_v16;$/;"	t	typeref:struct:__anon0bfbaecf2c08
RIL_CarrierMatchType	guest/hals/ril/reference-libril/ril.h	/^} RIL_CarrierMatchType;$/;"	t	typeref:enum:__anon0bfbaecf2503
RIL_CarrierRestrictions	guest/hals/ril/reference-libril/ril.h	/^} RIL_CarrierRestrictions;$/;"	t	typeref:struct:__anon0bfbaecf2708
RIL_CarrierRestrictionsWithPriority	guest/hals/ril/reference-libril/ril.h	/^} RIL_CarrierRestrictionsWithPriority;$/;"	t	typeref:struct:__anon0bfbaecf2908
RIL_CdmaSubscriptionSource	guest/hals/ril/reference-libril/ril.h	/^} RIL_CdmaSubscriptionSource;$/;"	t	typeref:enum:__anon0bfbaecf0c03
RIL_CellConnectionStatus	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellConnectionStatus;$/;"	t	typeref:enum:__anon0bfbaecf6d03
RIL_CellIdentityCdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityCdma;$/;"	t	typeref:struct:__anon0bfbaecf5c08
RIL_CellIdentityCdma_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityCdma_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf7c08
RIL_CellIdentityGsm	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityGsm;$/;"	t	typeref:struct:__anon0bfbaecf5808
RIL_CellIdentityGsm_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityGsm_v12;$/;"	t	typeref:struct:__anon0bfbaecf5908
RIL_CellIdentityGsm_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityGsm_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf7808
RIL_CellIdentityLte	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityLte;$/;"	t	typeref:struct:__anon0bfbaecf5d08
RIL_CellIdentityLte_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityLte_v12;$/;"	t	typeref:struct:__anon0bfbaecf5e08
RIL_CellIdentityLte_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityLte_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf7a08
RIL_CellIdentityNr	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityNr;$/;"	t	typeref:struct:__anon0bfbaecf6108
RIL_CellIdentityOperatorNames	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityOperatorNames;$/;"	t	typeref:struct:__anon0bfbaecf6008
RIL_CellIdentityTdscdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityTdscdma;$/;"	t	typeref:struct:__anon0bfbaecf5f08
RIL_CellIdentityTdscdma_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityTdscdma_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf7b08
RIL_CellIdentityWcdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityWcdma;$/;"	t	typeref:struct:__anon0bfbaecf5a08
RIL_CellIdentityWcdma_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityWcdma_v12;$/;"	t	typeref:struct:__anon0bfbaecf5b08
RIL_CellIdentityWcdma_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentityWcdma_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf7908
RIL_CellIdentity_v16	guest/hals/ril/reference-libril/ril.h	/^}RIL_CellIdentity_v16;$/;"	t	typeref:struct:__anon0bfbaecf7408
RIL_CellIdentity_v1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentity_v1_2;$/;"	t	typeref:struct:__anon0bfbaecf7d08
RIL_CellIdentity_v20	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellIdentity_v20;$/;"	t	typeref:struct:__anon0bfbaecf7608
RIL_CellInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfo;$/;"	t	typeref:struct:__anon0bfbaecf6e08
RIL_CellInfoCdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoCdma;$/;"	t	typeref:struct:__anon0bfbaecf6608
RIL_CellInfoGsm	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoGsm;$/;"	t	typeref:struct:__anon0bfbaecf6208
RIL_CellInfoGsm_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoGsm_v12;$/;"	t	typeref:struct:__anon0bfbaecf6308
RIL_CellInfoLte	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoLte;$/;"	t	typeref:struct:__anon0bfbaecf6708
RIL_CellInfoLte_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoLte_v12;$/;"	t	typeref:struct:__anon0bfbaecf6808
RIL_CellInfoNr	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoNr;$/;"	t	typeref:struct:__anon0bfbaecf6a08
RIL_CellInfoTdscdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoTdscdma;$/;"	t	typeref:struct:__anon0bfbaecf6908
RIL_CellInfoType	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoType;$/;"	t	typeref:enum:__anon0bfbaecf6b03
RIL_CellInfoWcdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoWcdma;$/;"	t	typeref:struct:__anon0bfbaecf6408
RIL_CellInfoWcdma_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfoWcdma_v12;$/;"	t	typeref:struct:__anon0bfbaecf6508
RIL_CellInfo_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfo_v12;$/;"	t	typeref:struct:__anon0bfbaecf7008
RIL_CellInfo_v16	guest/hals/ril/reference-libril/ril.h	/^} RIL_CellInfo_v16;$/;"	t	typeref:struct:__anon0bfbaecf7208
RIL_CfData	guest/hals/ril/reference-libril/ril.h	/^} RIL_CfData;$/;"	t	typeref:struct:__anon0bfbaecf9808
RIL_DATA_PROFILE_CBS	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_CBS        = 4,$/;"	e	enum:__anon0bfbaecf3003
RIL_DATA_PROFILE_DEFAULT	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_DEFAULT    = 0,$/;"	e	enum:__anon0bfbaecf3003
RIL_DATA_PROFILE_FOTA	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_FOTA       = 3,$/;"	e	enum:__anon0bfbaecf3003
RIL_DATA_PROFILE_IMS	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_IMS        = 2,$/;"	e	enum:__anon0bfbaecf3003
RIL_DATA_PROFILE_INVALID	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_INVALID    = 0xFFFFFFFF$/;"	e	enum:__anon0bfbaecf3003
RIL_DATA_PROFILE_OEM_BASE	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_OEM_BASE   = 1000,    \/* Start of OEM-specific profiles *\/$/;"	e	enum:__anon0bfbaecf3003
RIL_DATA_PROFILE_TETHERED	guest/hals/ril/reference-libril/ril.h	/^    RIL_DATA_PROFILE_TETHERED   = 1,$/;"	e	enum:__anon0bfbaecf3003
RIL_DC_POWER_STATE_HIGH	guest/hals/ril/reference-libril/ril.h	/^    RIL_DC_POWER_STATE_HIGH     = 3,        \/\/ High power state$/;"	e	enum:__anon0bfbaecf9b03
RIL_DC_POWER_STATE_LOW	guest/hals/ril/reference-libril/ril.h	/^    RIL_DC_POWER_STATE_LOW      = 1,        \/\/ Low power state$/;"	e	enum:__anon0bfbaecf9b03
RIL_DC_POWER_STATE_MEDIUM	guest/hals/ril/reference-libril/ril.h	/^    RIL_DC_POWER_STATE_MEDIUM   = 2,        \/\/ Medium power state$/;"	e	enum:__anon0bfbaecf9b03
RIL_DC_POWER_STATE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_DC_POWER_STATE_UNKNOWN  = INT32_MAX \/\/ Unknown state$/;"	e	enum:__anon0bfbaecf9b03
RIL_DST_CHARGING_STATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_DST_CHARGING_STATE,         \/\/ Device charging state (provided by BatteryManager)$/;"	e	enum:__anon0bfbaecfa103
RIL_DST_LOW_DATA_EXPECTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_DST_LOW_DATA_EXPECTED       \/\/ Low data expected mode. True indicates low data traffic$/;"	e	enum:__anon0bfbaecfa103
RIL_DST_POWER_SAVE_MODE	guest/hals/ril/reference-libril/ril.h	/^    RIL_DST_POWER_SAVE_MODE,        \/\/ Device power save mode (provided by PowerManager)$/;"	e	enum:__anon0bfbaecfa103
RIL_DataCallFailCause	guest/hals/ril/reference-libril/ril.h	/^} RIL_DataCallFailCause;$/;"	t	typeref:enum:__anon0bfbaecf2f03
RIL_DataProfile	guest/hals/ril/reference-libril/ril.h	/^} RIL_DataProfile;$/;"	t	typeref:enum:__anon0bfbaecf3003
RIL_DataProfileInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_DataProfileInfo;$/;"	t	typeref:struct:__anon0bfbaecf9d08
RIL_DataProfileInfo_v15	guest/hals/ril/reference-libril/ril.h	/^} RIL_DataProfileInfo_v15;$/;"	t	typeref:struct:__anon0bfbaecf9e08
RIL_DataRegistrationStateResponse	guest/hals/ril/reference-libril/ril.h	/^}RIL_DataRegistrationStateResponse;$/;"	t	typeref:struct:__anon0bfbaecf8008
RIL_DataRequestReason	guest/hals/ril/reference-libril/ril.h	/^} RIL_DataRequestReason;$/;"	t	typeref:enum:__anon0bfbaecfbe03
RIL_Data_Call_Response_v11	guest/hals/ril/reference-libril/ril.h	/^} RIL_Data_Call_Response_v11;$/;"	t	typeref:struct:__anon0bfbaecf1508
RIL_Data_Call_Response_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_Data_Call_Response_v12;$/;"	t	typeref:struct:__anon0bfbaecf1608
RIL_Data_Call_Response_v4	guest/hals/ril/reference-libril/ril.h	/^} RIL_Data_Call_Response_v4;$/;"	t	typeref:struct:__anon0bfbaecf1208
RIL_Data_Call_Response_v6	guest/hals/ril/reference-libril/ril.h	/^} RIL_Data_Call_Response_v6;$/;"	t	typeref:struct:__anon0bfbaecf1308
RIL_Data_Call_Response_v9	guest/hals/ril/reference-libril/ril.h	/^} RIL_Data_Call_Response_v9;$/;"	t	typeref:struct:__anon0bfbaecf1408
RIL_DcPowerStates	guest/hals/ril/reference-libril/ril.h	/^} RIL_DcPowerStates;$/;"	t	typeref:enum:__anon0bfbaecf9b03
RIL_DcRtInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_DcRtInfo;$/;"	t	typeref:struct:__anon0bfbaecf9c08
RIL_DeviceStateType	guest/hals/ril/reference-libril/ril.h	/^} RIL_DeviceStateType;$/;"	t	typeref:enum:__anon0bfbaecfa103
RIL_Dial	guest/hals/ril/reference-libril/ril.h	/^} RIL_Dial;$/;"	t	typeref:struct:__anon0bfbaecf1c08
RIL_ERRNO_INVALID_RESPONSE	guest/hals/ril/reference-libril/ril.cpp	/^#define RIL_ERRNO_INVALID_RESPONSE /;"	d	file:
RIL_ERRNO_NO_MEMORY	guest/hals/ril/reference-libril/ril.cpp	/^#define RIL_ERRNO_NO_MEMORY /;"	d	file:
RIL_EVDO_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^} RIL_EVDO_SignalStrength;$/;"	t	typeref:struct:__anon0bfbaecf4a08
RIL_EX_H_INCLUDED	guest/hals/ril/reference-libril/ril_ex.h	/^#define RIL_EX_H_INCLUDED$/;"	d
RIL_E_ABORTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_ABORTED = 65,                         \/* Operation aborted *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_CANCELLED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_CANCELLED = 7,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_DEVICE_IN_USE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_DEVICE_IN_USE = 64,                   \/* Operation cannot be performed because the de/;"	e	enum:__anon0bfbaecf0203
RIL_E_DIAL_MODIFIED_TO_DIAL	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_DIAL_MODIFIED_TO_DIAL = 20,           \/* DIAL request modified to DIAL with different$/;"	e	enum:__anon0bfbaecf0203
RIL_E_DIAL_MODIFIED_TO_SS	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_DIAL_MODIFIED_TO_SS = 19,             \/* DIAL request modified to SS *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_DIAL_MODIFIED_TO_USSD	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_DIAL_MODIFIED_TO_USSD = 18,           \/* DIAL request modified to USSD *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_EMPTY_RECORD	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_EMPTY_RECORD = 55,                    \/* The request record is empty *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_ENCODING_ERR	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_ENCODING_ERR = 57,                    \/* Message not encoded properly *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_FDN_CHECK_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_FDN_CHECK_FAILURE = 14,               \/* command failed because recipient is not on F/;"	e	enum:__anon0bfbaecf0203
RIL_E_GENERIC_FAILURE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_GENERIC_FAILURE = 2,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_ILLEGAL_SIM_OR_ME	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_ILLEGAL_SIM_OR_ME = 15,               \/* network selection failed due to$/;"	e	enum:__anon0bfbaecf0203
RIL_E_INTERNAL_ERR	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INTERNAL_ERR = 38,                    \/* Modem hit unexpected error scenario while ha/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_ARGUMENTS	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_ARGUMENTS = 44,               \/* Received invalid arguments in request *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_CALL_ID	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_CALL_ID = 47,                 \/* Received invalid call id in request *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_MODEM_STATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_MODEM_STATE = 46,             \/* Can not process the request in current Modem/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_RESPONSE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_RESPONSE = 66,                \/* Invalid response sent by vendor code *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_SIM_STATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_SIM_STATE = 45,               \/* Can not process the request in current SIM s/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_SMSC_ADDRESS	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_SMSC_ADDRESS = 58,            \/* SMSC address specified is invalid *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_SMS_FORMAT	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_SMS_FORMAT = 56,              \/* Invalid sms format *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_INVALID_STATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_INVALID_STATE = 41,                   \/* Unexpected request for the current state *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_LCE_NOT_SUPPORTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_LCE_NOT_SUPPORTED = 36,               \/* LCE service not supported(36 in RILConstants/;"	e	enum:__anon0bfbaecf0203
RIL_E_MISSING_RESOURCE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_MISSING_RESOURCE = 16,                \/* no logical channel available *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_MODEM_ERR	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_MODEM_ERR = 40,                       \/* Vendor RIL got unexpected or incorrect respo/;"	e	enum:__anon0bfbaecf0203
RIL_E_MODE_NOT_SUPPORTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_MODE_NOT_SUPPORTED = 13,              \/* HW does not support preferred network type */;"	e	enum:__anon0bfbaecf0203
RIL_E_NETWORK_ERR	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NETWORK_ERR = 49,                     \/* Received error from network *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_NETWORK_NOT_READY	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NETWORK_NOT_READY = 60,               \/* Network is not ready to perform the request /;"	e	enum:__anon0bfbaecf0203
RIL_E_NETWORK_REJECT	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NETWORK_REJECT = 53,                  \/* Request is rejected by network *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_NOT_PROVISIONED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NOT_PROVISIONED = 61,                 \/* Device doesnot have this value provisioned */;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_MEMORY	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_MEMORY = 37,                       \/* Not sufficient memory to process the request/;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_NETWORK_FOUND	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_NETWORK_FOUND = 63,                \/* Network cannot be found *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_RESOURCES	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_RESOURCES = 42,                    \/* Not sufficient resource to process the reque/;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_SMS_TO_ACK	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_SMS_TO_ACK = 48,                   \/* ACK received when there is no SMS to ack *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_SUBSCRIPTION	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_SUBSCRIPTION = 62,                 \/* Device doesnot have subscription *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_SUCH_ELEMENT	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_SUCH_ELEMENT = 17,                  \/* application not found on SIM *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_NO_SUCH_ENTRY	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_NO_SUCH_ENTRY = 59,                   \/* No such entry present to perform the request/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_1	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_1 = 501,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_10	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_10 = 510,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_11	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_11 = 511,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_12	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_12 = 512,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_13	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_13 = 513,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_14	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_14 = 514,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_15	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_15 = 515,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_16	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_16 = 516,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_17	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_17 = 517,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_18	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_18 = 518,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_19	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_19 = 519,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_2	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_2 = 502,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_20	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_20 = 520,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_21	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_21 = 521,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_22	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_22 = 522,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_23	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_23 = 523,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_24	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_24 = 524,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_25	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_25 = 525$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_3	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_3 = 503,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_4	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_4 = 504,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_5 = 505,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_6	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_6 = 506,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_7	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_7 = 507,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_8	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_8 = 508,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OEM_ERROR_9	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OEM_ERROR_9 = 509,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OPERATION_NOT_ALLOWED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OPERATION_NOT_ALLOWED = 54,           \/* Not allowed the request now *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OP_NOT_ALLOWED_BEFORE_REG_TO_NW = 9,  \/* data ops are not allowed before device$/;"	e	enum:__anon0bfbaecf0203
RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_OP_NOT_ALLOWED_DURING_VOICE_CALL = 8, \/* data ops are not allowed during voice$/;"	e	enum:__anon0bfbaecf0203
RIL_E_PASSWORD_INCORRECT	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_PASSWORD_INCORRECT = 3,      \/* for PIN\/PIN2 methods only! *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_RADIO_NOT_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_RADIO_NOT_AVAILABLE = 1,     \/* If radio did not start or is resetting *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_REQUEST_NOT_SUPPORTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_REQUEST_NOT_SUPPORTED = 6,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_REQUEST_RATE_LIMITED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_REQUEST_RATE_LIMITED = 50,            \/* Operation denied due to overly-frequent requ/;"	e	enum:__anon0bfbaecf0203
RIL_E_SIM_ABSENT	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SIM_ABSENT = 11,                      \/* fail to set the location where CDMA subscrip/;"	e	enum:__anon0bfbaecf0203
RIL_E_SIM_BUSY	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SIM_BUSY = 51,                        \/* SIM is busy *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SIM_ERR	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SIM_ERR = 43,                         \/* Received error from SIM card *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SIM_FULL	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SIM_FULL = 52,                        \/* The target EF is full *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SIM_PIN2	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SIM_PIN2 = 4,                \/* Operation requires SIM PIN2 to be entered *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SIM_PUK2	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SIM_PUK2 = 5,                \/* Operation requires SIM PIN2 to be entered *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SMS_SEND_FAIL_RETRY	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SMS_SEND_FAIL_RETRY = 10,             \/* fail to send sms and need retry *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SS_MODIFIED_TO_DIAL	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SS_MODIFIED_TO_DIAL = 24,             \/* SS request modified to DIAL *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SS_MODIFIED_TO_SS	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SS_MODIFIED_TO_SS = 27,               \/* SS request modified to different SS request /;"	e	enum:__anon0bfbaecf0203
RIL_E_SS_MODIFIED_TO_USSD	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SS_MODIFIED_TO_USSD = 25,             \/* SS request modified to USSD *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SUBSCRIPTION_NOT_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SUBSCRIPTION_NOT_AVAILABLE = 12,      \/* fail to find CDMA subscription from specifie/;"	e	enum:__anon0bfbaecf0203
RIL_E_SUBSCRIPTION_NOT_SUPPORTED	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SUBSCRIPTION_NOT_SUPPORTED = 26,      \/* Subscription not supported by RIL *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SUCCESS	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SUCCESS = 0,$/;"	e	enum:__anon0bfbaecf0203
RIL_E_SYSTEM_ERR	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_SYSTEM_ERR = 39,                      \/* Hit platform or system error *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_USSD_MODIFIED_TO_DIAL	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_USSD_MODIFIED_TO_DIAL = 21,           \/* USSD request modified to DIAL *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_USSD_MODIFIED_TO_SS	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_USSD_MODIFIED_TO_SS = 22,             \/* USSD request modified to SS *\/$/;"	e	enum:__anon0bfbaecf0203
RIL_E_USSD_MODIFIED_TO_USSD	guest/hals/ril/reference-libril/ril.h	/^    RIL_E_USSD_MODIFIED_TO_USSD = 23,           \/* USSD request modified to different USSD$/;"	e	enum:__anon0bfbaecf0203
RIL_EmergencyCallRouting	guest/hals/ril/reference-libril/ril.h	/^} RIL_EmergencyCallRouting;$/;"	t	typeref:enum:__anon0bfbaecfb603
RIL_EmergencyDial	guest/hals/ril/reference-libril/ril.h	/^} RIL_EmergencyDial;$/;"	t	typeref:struct:__anon0bfbaecfb708
RIL_EmergencyNumberSource	guest/hals/ril/reference-libril/ril.h	/^} RIL_EmergencyNumberSource;$/;"	t	typeref:enum:__anon0bfbaecfb503
RIL_EmergencyServiceCategory	guest/hals/ril/reference-libril/ril.h	/^} RIL_EmergencyServiceCategory;$/;"	t	typeref:enum:__anon0bfbaecfb403
RIL_Env	guest/hals/ril/reference-libril/ril.h	/^struct RIL_Env {$/;"	s
RIL_Errno	guest/hals/ril/reference-libril/ril.h	/^} RIL_Errno;$/;"	t	typeref:enum:__anon0bfbaecf0203
RIL_EutranBands	guest/hals/ril/reference-libril/ril.h	/^} RIL_EutranBands;$/;"	t	typeref:enum:__anon0bfbaecfa903
RIL_GSM_BroadcastSmsConfigInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_GSM_BroadcastSmsConfigInfo;$/;"	t	typeref:struct:__anon0bfbaecf4408
RIL_GSM_SignalStrength_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_GSM_SignalStrength_v12;$/;"	t	typeref:struct:__anon0bfbaecf4708
RIL_GW_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^} RIL_GW_SignalStrength;$/;"	t	typeref:struct:__anon0bfbaecf4608
RIL_GeranBands	guest/hals/ril/reference-libril/ril.h	/^} RIL_GeranBands;$/;"	t	typeref:enum:__anon0bfbaecfa703
RIL_GetVersion	guest/hals/ril/reference-libril/ril.h	/^typedef const char * (*RIL_GetVersion) (void);$/;"	t	typeref:typename:const char * (*)(void)
RIL_HARDWARE_CONFIG_MODEM	guest/hals/ril/reference-libril/ril.h	/^   RIL_HARDWARE_CONFIG_MODEM = 0,$/;"	e	enum:__anon0bfbaecf8f03
RIL_HARDWARE_CONFIG_SIM	guest/hals/ril/reference-libril/ril.h	/^   RIL_HARDWARE_CONFIG_SIM = 1,$/;"	e	enum:__anon0bfbaecf8f03
RIL_HARDWARE_CONFIG_STATE_DISABLED	guest/hals/ril/reference-libril/ril.h	/^   RIL_HARDWARE_CONFIG_STATE_DISABLED = 2,$/;"	e	enum:__anon0bfbaecf9003
RIL_HARDWARE_CONFIG_STATE_ENABLED	guest/hals/ril/reference-libril/ril.h	/^   RIL_HARDWARE_CONFIG_STATE_ENABLED = 0,$/;"	e	enum:__anon0bfbaecf9003
RIL_HARDWARE_CONFIG_STATE_STANDBY	guest/hals/ril/reference-libril/ril.h	/^   RIL_HARDWARE_CONFIG_STATE_STANDBY = 1,$/;"	e	enum:__anon0bfbaecf9003
RIL_HardwareConfig	guest/hals/ril/reference-libril/ril.h	/^} RIL_HardwareConfig;$/;"	t	typeref:struct:__anon0bfbaecf9308
RIL_HardwareConfig_Modem	guest/hals/ril/reference-libril/ril.h	/^} RIL_HardwareConfig_Modem;$/;"	t	typeref:struct:__anon0bfbaecf9108
RIL_HardwareConfig_Sim	guest/hals/ril/reference-libril/ril.h	/^} RIL_HardwareConfig_Sim;$/;"	t	typeref:struct:__anon0bfbaecf9208
RIL_HardwareConfig_State	guest/hals/ril/reference-libril/ril.h	/^} RIL_HardwareConfig_State;$/;"	t	typeref:enum:__anon0bfbaecf9003
RIL_HardwareConfig_Type	guest/hals/ril/reference-libril/ril.h	/^} RIL_HardwareConfig_Type;$/;"	t	typeref:enum:__anon0bfbaecf8f03
RIL_IMS_SMS_Message	guest/hals/ril/reference-libril/ril.h	/^} RIL_IMS_SMS_Message;$/;"	t	typeref:struct:__anon0bfbaecf1808
RIL_Init	guest/hals/ril/reference-ril/reference-ril.c	/^const RIL_RadioFunctions *RIL_Init(const struct RIL_Env *env, int argc, char **argv)$/;"	f	typeref:typename:const RIL_RadioFunctions *
RIL_InitialAttachApn	guest/hals/ril/reference-libril/ril.h	/^} RIL_InitialAttachApn;$/;"	t	typeref:struct:__anon0bfbaecfc008
RIL_InitialAttachApn_v15	guest/hals/ril/reference-libril/ril.h	/^} RIL_InitialAttachApn_v15;$/;"	t	typeref:struct:__anon0bfbaecfc108
RIL_KeepaliveRequest	guest/hals/ril/reference-libril/ril.h	/^} RIL_KeepaliveRequest;$/;"	t	typeref:struct:__anon0bfbaecfc508
RIL_KeepaliveStatus	guest/hals/ril/reference-libril/ril.h	/^} RIL_KeepaliveStatus;$/;"	t	typeref:struct:__anon0bfbaecfc708
RIL_KeepaliveStatusCode	guest/hals/ril/reference-libril/ril.h	/^} RIL_KeepaliveStatusCode;$/;"	t	typeref:enum:__anon0bfbaecfc603
RIL_KeepaliveType	guest/hals/ril/reference-libril/ril.h	/^} RIL_KeepaliveType;$/;"	t	typeref:enum:__anon0bfbaecfc403
RIL_LTE_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^} RIL_LTE_SignalStrength;$/;"	t	typeref:struct:__anon0bfbaecf4b08
RIL_LTE_SignalStrength_v8	guest/hals/ril/reference-libril/ril.h	/^} RIL_LTE_SignalStrength_v8;$/;"	t	typeref:struct:__anon0bfbaecf4c08
RIL_LastCallFailCause	guest/hals/ril/reference-libril/ril.h	/^} RIL_LastCallFailCause;$/;"	t	typeref:enum:__anon0bfbaecf2d03
RIL_LastCallFailCauseInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_LastCallFailCauseInfo;$/;"	t	typeref:struct:__anon0bfbaecf2e08
RIL_LceDataInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_LceDataInfo;$/;"	t	typeref:struct:__anon0bfbaecf2408
RIL_LceStatusInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_LceStatusInfo;$/;"	t	typeref:struct:__anon0bfbaecf2308
RIL_LinkCapacityReportingCriteria	guest/hals/ril/reference-libril/ril.h	/^} RIL_LinkCapacityReportingCriteria;$/;"	t	typeref:struct:__anon0bfbaecf5708
RIL_MATCH_ALL	guest/hals/ril/reference-libril/ril.h	/^    RIL_MATCH_ALL = 0,          \/* Apply to all carriers with the same mcc\/mnc *\/$/;"	e	enum:__anon0bfbaecf2503
RIL_MATCH_GID1	guest/hals/ril/reference-libril/ril.h	/^    RIL_MATCH_GID1 = 3,         \/* Use GID1 and mcc\/mnc to identify the carrier *\/$/;"	e	enum:__anon0bfbaecf2503
RIL_MATCH_GID2	guest/hals/ril/reference-libril/ril.h	/^    RIL_MATCH_GID2 = 4,         \/* Use GID2 and mcc\/mnc to identify the carrier *\/$/;"	e	enum:__anon0bfbaecf2503
RIL_MATCH_IMSI_PREFIX	guest/hals/ril/reference-libril/ril.h	/^    RIL_MATCH_IMSI_PREFIX = 2,  \/* Use IMSI prefix and mcc\/mnc to identify the carrier *\/$/;"	e	enum:__anon0bfbaecf2503
RIL_MATCH_SPN	guest/hals/ril/reference-libril/ril.h	/^    RIL_MATCH_SPN = 1,          \/* Use SPN and mcc\/mnc to identify the carrier *\/$/;"	e	enum:__anon0bfbaecf2503
RIL_ModemConfig	guest/hals/ril/reference-libril/ril.h	/^} RIL_ModemConfig;$/;"	t	typeref:struct:__anon0bfbaecfbd08
RIL_ModemInfo	guest/hals/ril/reference-libril/ril.h	/^} RIL_ModemInfo;$/;"	t	typeref:struct:__anon0bfbaecfbb08
RIL_NOT_REG_AND_EMERGENCY_AVAILABLE_AND_NOT_SEARCHING	guest/hals/ril/reference-libril/ril.h	/^    RIL_NOT_REG_AND_EMERGENCY_AVAILABLE_AND_NOT_SEARCHING = 10,   \/\/ Same as$/;"	e	enum:__anon0bfbaecf3703
RIL_NOT_REG_AND_EMERGENCY_AVAILABLE_AND_SEARCHING	guest/hals/ril/reference-libril/ril.h	/^    RIL_NOT_REG_AND_EMERGENCY_AVAILABLE_AND_SEARCHING = 12,  \/\/ Same as RIL_NOT_REG_AND_SEARCH/;"	e	enum:__anon0bfbaecf3703
RIL_NOT_REG_AND_NOT_SEARCHING	guest/hals/ril/reference-libril/ril.h	/^    RIL_NOT_REG_AND_NOT_SEARCHING = 0,           \/\/ Not registered, MT is not currently search/;"	e	enum:__anon0bfbaecf3703
RIL_NOT_REG_AND_SEARCHING	guest/hals/ril/reference-libril/ril.h	/^    RIL_NOT_REG_AND_SEARCHING = 2,               \/\/ Not registered, but MT is currently search/;"	e	enum:__anon0bfbaecf3703
RIL_NR_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^} RIL_NR_SignalStrength;$/;"	t	typeref:struct:__anon0bfbaecf4e08
RIL_NUM_TX_POWER_LEVELS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_NUM_TX_POWER_LEVELS /;"	d
RIL_NV_ReadItem	guest/hals/ril/reference-libril/ril.h	/^} RIL_NV_ReadItem;$/;"	t	typeref:struct:__anon0bfbaecf8c08
RIL_NV_WriteItem	guest/hals/ril/reference-libril/ril.h	/^} RIL_NV_WriteItem;$/;"	t	typeref:struct:__anon0bfbaecf8d08
RIL_NeighboringCell	guest/hals/ril/reference-libril/ril.h	/^} RIL_NeighboringCell;$/;"	t	typeref:struct:__anon0bfbaecf2208
RIL_NetworkOperator	guest/hals/ril/reference-libril/ril.h	/^} RIL_NetworkOperator;$/;"	t	typeref:struct:__anon0bfbaecfa608
RIL_NetworkScanRequest	guest/hals/ril/reference-libril/ril.h	/^} RIL_NetworkScanRequest;$/;"	t	typeref:struct:__anon0bfbaecfad08
RIL_NetworkScanRequest_v1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_NetworkScanRequest_v1_5;$/;"	t	typeref:struct:__anon0bfbaecfb008
RIL_NetworkScanResult	guest/hals/ril/reference-libril/ril.h	/^} RIL_NetworkScanResult;$/;"	t	typeref:struct:__anon0bfbaecfb308
RIL_NgranBands	guest/hals/ril/reference-libril/ril.h	/^} RIL_NgranBands;$/;"	t	typeref:enum:__anon0bfbaecfaa03
RIL_ONE_SHOT	guest/hals/ril/reference-libril/ril.h	/^    RIL_ONE_SHOT = 0x01, \/\/ Performs the scan only once$/;"	e	enum:__anon0bfbaecfa403
RIL_OpenChannelParams	guest/hals/ril/reference-libril/ril.h	/^} RIL_OpenChannelParams;$/;"	t	typeref:struct:__anon0bfbaecfa308
RIL_PCO_Data	guest/hals/ril/reference-libril/ril.h	/^} RIL_PCO_Data;$/;"	t	typeref:struct:__anon0bfbaecfc308
RIL_PERIODIC	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERIODIC = 0x02  \/\/ Performs the scan periodically until cancelled$/;"	e	enum:__anon0bfbaecfa403
RIL_PERSOSUBSTATE_IN_PROGRESS	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_IN_PROGRESS               = 1, \/* in between each lock transition *\/$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_IN_PROGRESS_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_IN_PROGRESS_1_5               = 1, \/* in between each lock transition *\/$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_READY	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_READY                     = 2, \/* when either SIM or RUIM Perso is finish/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_READY_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_READY_1_5                     = 2, \/* when either SIM or RUIM Perso is fi/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_CORPORATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_CORPORATE            = 16,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_CORPORATE_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_CORPORATE_1_5            = 16,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_CORPORATE_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_CORPORATE_PUK        = 22,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_CORPORATE_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_CORPORATE_PUK_1_5        = 22,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_HRPD	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_HRPD                 = 15,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_HRPD_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_HRPD_1_5                 = 15,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_HRPD_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_HRPD_PUK             = 21,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_HRPD_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_HRPD_PUK_1_5             = 21,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_NETWORK1	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK1             = 13,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_NETWORK1_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK1_1_5             = 13,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_NETWORK1_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK1_PUK         = 19, \/* The corresponding perso lock is blocke/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_NETWORK1_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK1_PUK_1_5         = 19, \/* The corresponding perso lock is bl/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_NETWORK2	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK2             = 14,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_NETWORK2_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK2_1_5             = 14,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_NETWORK2_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK2_PUK         = 20,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_NETWORK2_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_NETWORK2_PUK_1_5         = 20,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_RUIM	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_RUIM                 = 18,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_RUIM_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_RUIM_1_5                 = 18,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_RUIM_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_RUIM_PUK             = 24$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_RUIM_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_RUIM_PUK_1_5             = 24,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER     = 17,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_1_5     = 17,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK = 23,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK_1_5 = 23,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_CORPORATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_CORPORATE             = 5,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_CORPORATE_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_CORPORATE_1_5             = 5,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_CORPORATE_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_CORPORATE_PUK         = 10,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_CORPORATE_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_CORPORATE_PUK_1_5         = 10,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_ICCID	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_ICCID,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_ICCID_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_ICCID_PUK,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_IMPI	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_IMPI,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_IMPI_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_IMPI_PUK,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_NETWORK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK               = 3,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_NETWORK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_1_5               = 3,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_NETWORK_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_PUK           = 8, \/* The corresponding perso lock is blocked/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_NETWORK_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_PUK_1_5           = 8, \/* The corresponding perso lock is blo/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET        = 4,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET_1_5        = 4,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK    = 9,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK_1_5    = 9,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_NS_SP	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NS_SP,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_NS_SP_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_NS_SP_PUK,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER      = 6,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_1_5      = 6,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK  = 11,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK_1_5  = 11,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SIM	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SIM                   = 7,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_SIM_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SIM_1_5                   = 7,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SIM_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SIM_PUK               = 12,$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_SIM_SIM_PUK_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SIM_PUK_1_5               = 12,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SPN	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SPN,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SPN_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SPN_PUK,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SP_EHPLMN	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SP_EHPLMN,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_SIM_SP_EHPLMN_PUK	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_SIM_SP_EHPLMN_PUK,$/;"	e	enum:__anon0bfbaecf3d03
RIL_PERSOSUBSTATE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_UNKNOWN                   = 0, \/* initial state *\/$/;"	e	enum:__anon0bfbaecf3303
RIL_PERSOSUBSTATE_UNKNOWN_1_5	guest/hals/ril/reference-libril/ril.h	/^    RIL_PERSOSUBSTATE_UNKNOWN_1_5                   = 0, \/* initial state *\/$/;"	e	enum:__anon0bfbaecf3d03
RIL_PINSTATE_DISABLED	guest/hals/ril/reference-libril/ril.h	/^    RIL_PINSTATE_DISABLED             = 3,$/;"	e	enum:__anon0bfbaecf3503
RIL_PINSTATE_ENABLED_BLOCKED	guest/hals/ril/reference-libril/ril.h	/^    RIL_PINSTATE_ENABLED_BLOCKED      = 4,$/;"	e	enum:__anon0bfbaecf3503
RIL_PINSTATE_ENABLED_NOT_VERIFIED	guest/hals/ril/reference-libril/ril.h	/^    RIL_PINSTATE_ENABLED_NOT_VERIFIED = 1,$/;"	e	enum:__anon0bfbaecf3503
RIL_PINSTATE_ENABLED_PERM_BLOCKED	guest/hals/ril/reference-libril/ril.h	/^    RIL_PINSTATE_ENABLED_PERM_BLOCKED = 5$/;"	e	enum:__anon0bfbaecf3503
RIL_PINSTATE_ENABLED_VERIFIED	guest/hals/ril/reference-libril/ril.h	/^    RIL_PINSTATE_ENABLED_VERIFIED     = 2,$/;"	e	enum:__anon0bfbaecf3503
RIL_PINSTATE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_PINSTATE_UNKNOWN              = 0,$/;"	e	enum:__anon0bfbaecf3503
RIL_PersoSubstate	guest/hals/ril/reference-libril/ril.h	/^} RIL_PersoSubstate;$/;"	t	typeref:enum:__anon0bfbaecf3303
RIL_PersoSubstateV1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_PersoSubstateV1_5;$/;"	t	typeref:enum:__anon0bfbaecf3d03
RIL_PhoneCapability	guest/hals/ril/reference-libril/ril.h	/^} RIL_PhoneCapability;$/;"	t	typeref:struct:__anon0bfbaecfbc08
RIL_PinState	guest/hals/ril/reference-libril/ril.h	/^} RIL_PinState;$/;"	t	typeref:enum:__anon0bfbaecf3503
RIL_PreferredNetworkType	guest/hals/ril/reference-libril/ril.h	/^} RIL_PreferredNetworkType;$/;"	t	typeref:enum:__anon0bfbaecf0b03
RIL_PublicKeyType	guest/hals/ril/reference-libril/ril.h	/^} RIL_PublicKeyType;$/;"	t	typeref:enum:__anon0bfbaecf2b03
RIL_RADIO_ACCESS_SPECIFIER_MAX_SIZE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RADIO_ACCESS_SPECIFIER_MAX_SIZE /;"	d
RIL_RADIO_CAPABILITY_VERSION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RADIO_CAPABILITY_VERSION /;"	d
RIL_REDIRECTING_REASON_CALLED_DTE_OUT_OF_ORDER	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_CALLED_DTE_OUT_OF_ORDER = 9,$/;"	e	enum:__anon0bfbaecf8403
RIL_REDIRECTING_REASON_CALL_FORWARDING_BUSY	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_CALL_FORWARDING_BUSY = 1,$/;"	e	enum:__anon0bfbaecf8403
RIL_REDIRECTING_REASON_CALL_FORWARDING_BY_THE_CALLED_DTE	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_CALL_FORWARDING_BY_THE_CALLED_DTE = 10,$/;"	e	enum:__anon0bfbaecf8403
RIL_REDIRECTING_REASON_CALL_FORWARDING_NO_REPLY	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_CALL_FORWARDING_NO_REPLY = 2,$/;"	e	enum:__anon0bfbaecf8403
RIL_REDIRECTING_REASON_CALL_FORWARDING_UNCONDITIONAL	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_CALL_FORWARDING_UNCONDITIONAL = 15,$/;"	e	enum:__anon0bfbaecf8403
RIL_REDIRECTING_REASON_RESERVED	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_RESERVED$/;"	e	enum:__anon0bfbaecf8403
RIL_REDIRECTING_REASON_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^  RIL_REDIRECTING_REASON_UNKNOWN = 0,$/;"	e	enum:__anon0bfbaecf8403
RIL_REG_DENIED	guest/hals/ril/reference-libril/ril.h	/^    RIL_REG_DENIED = 3,                          \/\/ Registration denied$/;"	e	enum:__anon0bfbaecf3703
RIL_REG_DENIED_AND_EMERGENCY_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    RIL_REG_DENIED_AND_EMERGENCY_AVAILABLE = 13, \/\/ Same as REG_DENIED but indicates that$/;"	e	enum:__anon0bfbaecf3703
RIL_REG_HOME	guest/hals/ril/reference-libril/ril.h	/^    RIL_REG_HOME = 1,                            \/\/ Registered, home network$/;"	e	enum:__anon0bfbaecf3703
RIL_REG_ROAMING	guest/hals/ril/reference-libril/ril.h	/^    RIL_REG_ROAMING = 5,                         \/\/ Registered, roaming$/;"	e	enum:__anon0bfbaecf3703
RIL_REQUEST_ACKNOWLEDGE_INCOMING_GSM_SMS_WITH_PDU	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ACKNOWLEDGE_INCOMING_GSM_SMS_WITH_PDU /;"	d
RIL_REQUEST_ALLOCATE_PDU_SESSION_ID	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ALLOCATE_PDU_SESSION_ID /;"	d
RIL_REQUEST_ALLOW_DATA	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ALLOW_DATA /;"	d
RIL_REQUEST_ANSWER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ANSWER /;"	d
RIL_REQUEST_ARE_UICC_APPLICATIONS_ENABLED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ARE_UICC_APPLICATIONS_ENABLED /;"	d
RIL_REQUEST_BASEBAND_VERSION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_BASEBAND_VERSION /;"	d
RIL_REQUEST_CANCEL_HANDOVER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CANCEL_HANDOVER /;"	d
RIL_REQUEST_CANCEL_USSD	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CANCEL_USSD /;"	d
RIL_REQUEST_CDMA_BURST_DTMF	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_BURST_DTMF /;"	d
RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_DELETE_SMS_ON_RUIM /;"	d
RIL_REQUEST_CDMA_FLASH	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_FLASH /;"	d
RIL_REQUEST_CDMA_GET_BROADCAST_SMS_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_GET_BROADCAST_SMS_CONFIG /;"	d
RIL_REQUEST_CDMA_GET_SUBSCRIPTION_SOURCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_GET_SUBSCRIPTION_SOURCE /;"	d
RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_QUERY_PREFERRED_VOICE_PRIVACY_MODE /;"	d
RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_QUERY_ROAMING_PREFERENCE /;"	d
RIL_REQUEST_CDMA_SEND_SMS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SEND_SMS /;"	d
RIL_REQUEST_CDMA_SEND_SMS_EXPECT_MORE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SEND_SMS_EXPECT_MORE /;"	d
RIL_REQUEST_CDMA_SET_BROADCAST_SMS_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SET_BROADCAST_SMS_CONFIG /;"	d
RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SET_PREFERRED_VOICE_PRIVACY_MODE /;"	d
RIL_REQUEST_CDMA_SET_ROAMING_PREFERENCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SET_ROAMING_PREFERENCE /;"	d
RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SET_SUBSCRIPTION_SOURCE /;"	d
RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SMS_ACKNOWLEDGE /;"	d
RIL_REQUEST_CDMA_SMS_BROADCAST_ACTIVATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SMS_BROADCAST_ACTIVATION /;"	d
RIL_REQUEST_CDMA_SUBSCRIPTION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_SUBSCRIPTION /;"	d
RIL_REQUEST_CDMA_VALIDATE_AND_WRITE_AKEY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_VALIDATE_AND_WRITE_AKEY /;"	d
RIL_REQUEST_CDMA_WRITE_SMS_TO_RUIM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CDMA_WRITE_SMS_TO_RUIM /;"	d
RIL_REQUEST_CHANGE_BARRING_PASSWORD	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CHANGE_BARRING_PASSWORD /;"	d
RIL_REQUEST_CHANGE_SIM_PIN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CHANGE_SIM_PIN /;"	d
RIL_REQUEST_CHANGE_SIM_PIN2	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CHANGE_SIM_PIN2 /;"	d
RIL_REQUEST_CONFERENCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFERENCE /;"	d
RIL_REQUEST_CONFIG_GET_HAL_DEVICE_CAPABILITIES	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_GET_HAL_DEVICE_CAPABILITIES /;"	d
RIL_REQUEST_CONFIG_GET_MODEM_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_GET_MODEM_CONFIG /;"	d
RIL_REQUEST_CONFIG_GET_PHONE_CAPABILITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_GET_PHONE_CAPABILITY /;"	d
RIL_REQUEST_CONFIG_GET_SLOT_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_GET_SLOT_STATUS /;"	d
RIL_REQUEST_CONFIG_SET_MODEM_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_SET_MODEM_CONFIG /;"	d
RIL_REQUEST_CONFIG_SET_PREFER_DATA_MODEM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_SET_PREFER_DATA_MODEM /;"	d
RIL_REQUEST_CONFIG_SET_SLOT_MAPPING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_CONFIG_SET_SLOT_MAPPING /;"	d
RIL_REQUEST_DATA_CALL_LIST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DATA_CALL_LIST /;"	d
RIL_REQUEST_DATA_REGISTRATION_STATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DATA_REGISTRATION_STATE /;"	d
RIL_REQUEST_DEACTIVATE_DATA_CALL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DEACTIVATE_DATA_CALL /;"	d
RIL_REQUEST_DELETE_SMS_ON_SIM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DELETE_SMS_ON_SIM /;"	d
RIL_REQUEST_DEVICE_IDENTITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DEVICE_IDENTITY /;"	d
RIL_REQUEST_DIAL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DIAL /;"	d
RIL_REQUEST_DTMF	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DTMF /;"	d
RIL_REQUEST_DTMF_START	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DTMF_START /;"	d
RIL_REQUEST_DTMF_STOP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_DTMF_STOP /;"	d
RIL_REQUEST_EMERGENCY_DIAL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_EMERGENCY_DIAL /;"	d
RIL_REQUEST_ENABLE_MODEM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENABLE_MODEM /;"	d
RIL_REQUEST_ENABLE_NR_DUAL_CONNECTIVITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENABLE_NR_DUAL_CONNECTIVITY /;"	d
RIL_REQUEST_ENABLE_UICC_APPLICATIONS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENABLE_UICC_APPLICATIONS /;"	d
RIL_REQUEST_ENTER_NETWORK_DEPERSONALIZATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENTER_NETWORK_DEPERSONALIZATION /;"	d
RIL_REQUEST_ENTER_SIM_DEPERSONALIZATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENTER_SIM_DEPERSONALIZATION /;"	d
RIL_REQUEST_ENTER_SIM_PIN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENTER_SIM_PIN /;"	d
RIL_REQUEST_ENTER_SIM_PIN2	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENTER_SIM_PIN2 /;"	d
RIL_REQUEST_ENTER_SIM_PUK	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENTER_SIM_PUK /;"	d
RIL_REQUEST_ENTER_SIM_PUK2	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ENTER_SIM_PUK2 /;"	d
RIL_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_EXIT_EMERGENCY_CALLBACK_MODE /;"	d
RIL_REQUEST_EXPLICIT_CALL_TRANSFER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_EXPLICIT_CALL_TRANSFER /;"	d
RIL_REQUEST_GET_ACTIVITY_INFO	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_ACTIVITY_INFO /;"	d
RIL_REQUEST_GET_ALLOWED_NETWORK_TYPES_BITMAP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_ALLOWED_NETWORK_TYPES_BITMAP /;"	d
RIL_REQUEST_GET_BARRING_INFO	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_BARRING_INFO /;"	d
RIL_REQUEST_GET_CARRIER_RESTRICTIONS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_CARRIER_RESTRICTIONS /;"	d
RIL_REQUEST_GET_CELL_INFO_LIST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_CELL_INFO_LIST /;"	d
RIL_REQUEST_GET_CLIR	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_CLIR /;"	d
RIL_REQUEST_GET_CURRENT_CALLS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_CURRENT_CALLS /;"	d
RIL_REQUEST_GET_DC_RT_INFO	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_DC_RT_INFO /;"	d
RIL_REQUEST_GET_HARDWARE_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_HARDWARE_CONFIG /;"	d
RIL_REQUEST_GET_IMEI	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_IMEI /;"	d
RIL_REQUEST_GET_IMEISV	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_IMEISV /;"	d
RIL_REQUEST_GET_IMSI	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_IMSI /;"	d
RIL_REQUEST_GET_MODEM_STACK_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_MODEM_STACK_STATUS /;"	d
RIL_REQUEST_GET_MUTE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_MUTE /;"	d
RIL_REQUEST_GET_NEIGHBORING_CELL_IDS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_NEIGHBORING_CELL_IDS /;"	d
RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE /;"	d
RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE_BITMAP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_PREFERRED_NETWORK_TYPE_BITMAP /;"	d
RIL_REQUEST_GET_RADIO_CAPABILITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_RADIO_CAPABILITY /;"	d
RIL_REQUEST_GET_SIM_PHONEBOOK_CAPACITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_SIM_PHONEBOOK_CAPACITY /;"	d
RIL_REQUEST_GET_SIM_PHONEBOOK_RECORDS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_SIM_PHONEBOOK_RECORDS /;"	d
RIL_REQUEST_GET_SIM_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_SIM_STATUS /;"	d
RIL_REQUEST_GET_SLICING_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_SLICING_CONFIG /;"	d
RIL_REQUEST_GET_SMSC_ADDRESS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_SMSC_ADDRESS /;"	d
RIL_REQUEST_GET_SYSTEM_SELECTION_CHANNELS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GET_SYSTEM_SELECTION_CHANNELS /;"	d
RIL_REQUEST_GSM_GET_BROADCAST_SMS_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GSM_GET_BROADCAST_SMS_CONFIG /;"	d
RIL_REQUEST_GSM_SET_BROADCAST_SMS_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GSM_SET_BROADCAST_SMS_CONFIG /;"	d
RIL_REQUEST_GSM_SMS_BROADCAST_ACTIVATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_GSM_SMS_BROADCAST_ACTIVATION /;"	d
RIL_REQUEST_HANGUP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_HANGUP /;"	d
RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_HANGUP_FOREGROUND_RESUME_BACKGROUND /;"	d
RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND /;"	d
RIL_REQUEST_IMS_REGISTRATION_STATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_IMS_REGISTRATION_STATE /;"	d
RIL_REQUEST_IMS_SEND_SMS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_IMS_SEND_SMS /;"	d
RIL_REQUEST_ISIM_AUTHENTICATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_ISIM_AUTHENTICATION /;"	d
RIL_REQUEST_IS_NR_DUAL_CONNECTIVITY_ENABLED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_IS_NR_DUAL_CONNECTIVITY_ENABLED /;"	d
RIL_REQUEST_LAST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_LAST /;"	d
RIL_REQUEST_LAST_CALL_FAIL_CAUSE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_LAST_CALL_FAIL_CAUSE /;"	d
RIL_REQUEST_LAST_DATA_CALL_FAIL_CAUSE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_LAST_DATA_CALL_FAIL_CAUSE /;"	d
RIL_REQUEST_NV_READ_ITEM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_NV_READ_ITEM /;"	d
RIL_REQUEST_NV_RESET_CONFIG	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_NV_RESET_CONFIG /;"	d
RIL_REQUEST_NV_WRITE_CDMA_PRL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_NV_WRITE_CDMA_PRL /;"	d
RIL_REQUEST_NV_WRITE_ITEM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_NV_WRITE_ITEM /;"	d
RIL_REQUEST_OEM_HOOK_RAW	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_OEM_HOOK_RAW /;"	d
RIL_REQUEST_OEM_HOOK_STRINGS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_OEM_HOOK_STRINGS /;"	d
RIL_REQUEST_OPERATOR	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_OPERATOR /;"	d
RIL_REQUEST_PULL_LCEDATA	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_PULL_LCEDATA /;"	d
RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_AVAILABLE_BAND_MODE /;"	d
RIL_REQUEST_QUERY_AVAILABLE_NETWORKS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_AVAILABLE_NETWORKS /;"	d
RIL_REQUEST_QUERY_CALL_FORWARD_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_CALL_FORWARD_STATUS /;"	d
RIL_REQUEST_QUERY_CALL_WAITING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_CALL_WAITING /;"	d
RIL_REQUEST_QUERY_CLIP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_CLIP /;"	d
RIL_REQUEST_QUERY_FACILITY_LOCK	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_FACILITY_LOCK /;"	d
RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_NETWORK_SELECTION_MODE /;"	d
RIL_REQUEST_QUERY_TTY_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_QUERY_TTY_MODE /;"	d
RIL_REQUEST_RADIO_CONFIG_BASE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_RADIO_CONFIG_BASE /;"	d
RIL_REQUEST_RADIO_CONFIG_LAST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_RADIO_CONFIG_LAST /;"	d
RIL_REQUEST_RADIO_POWER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_RADIO_POWER /;"	d
RIL_REQUEST_RELEASE_PDU_SESSION_ID	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_RELEASE_PDU_SESSION_ID /;"	d
RIL_REQUEST_REPORT_SMS_MEMORY_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_REPORT_SMS_MEMORY_STATUS /;"	d
RIL_REQUEST_REPORT_STK_SERVICE_IS_RUNNING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_REPORT_STK_SERVICE_IS_RUNNING /;"	d
RIL_REQUEST_RESET_RADIO	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_RESET_RADIO /;"	d
RIL_REQUEST_SCREEN_STATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SCREEN_STATE /;"	d
RIL_REQUEST_SEND_DEVICE_STATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SEND_DEVICE_STATE /;"	d
RIL_REQUEST_SEND_SMS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SEND_SMS /;"	d
RIL_REQUEST_SEND_SMS_EXPECT_MORE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SEND_SMS_EXPECT_MORE /;"	d
RIL_REQUEST_SEND_USSD	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SEND_USSD /;"	d
RIL_REQUEST_SEPARATE_CONNECTION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SEPARATE_CONNECTION /;"	d
RIL_REQUEST_SETUP_DATA_CALL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SETUP_DATA_CALL /;"	d
RIL_REQUEST_SET_ALLOWED_NETWORK_TYPES_BITMAP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_ALLOWED_NETWORK_TYPES_BITMAP /;"	d
RIL_REQUEST_SET_BAND_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_BAND_MODE /;"	d
RIL_REQUEST_SET_CALL_FORWARD	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_CALL_FORWARD /;"	d
RIL_REQUEST_SET_CALL_WAITING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_CALL_WAITING /;"	d
RIL_REQUEST_SET_CARRIER_INFO_IMSI_ENCRYPTION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_CARRIER_INFO_IMSI_ENCRYPTION /;"	d
RIL_REQUEST_SET_CARRIER_RESTRICTIONS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_CARRIER_RESTRICTIONS /;"	d
RIL_REQUEST_SET_CLIR	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_CLIR /;"	d
RIL_REQUEST_SET_DATA_PROFILE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_DATA_PROFILE /;"	d
RIL_REQUEST_SET_DATA_THROTTLING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_DATA_THROTTLING /;"	d
RIL_REQUEST_SET_DC_RT_INFO_RATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_DC_RT_INFO_RATE /;"	d
RIL_REQUEST_SET_FACILITY_LOCK	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_FACILITY_LOCK /;"	d
RIL_REQUEST_SET_INITIAL_ATTACH_APN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_INITIAL_ATTACH_APN /;"	d
RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_LINK_CAPACITY_REPORTING_CRITERIA /;"	d
RIL_REQUEST_SET_LOCATION_UPDATES	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_LOCATION_UPDATES /;"	d
RIL_REQUEST_SET_MUTE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_MUTE /;"	d
RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_NETWORK_SELECTION_AUTOMATIC /;"	d
RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_NETWORK_SELECTION_MANUAL /;"	d
RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE /;"	d
RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE_BITMAP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_PREFERRED_NETWORK_TYPE_BITMAP /;"	d
RIL_REQUEST_SET_RADIO_CAPABILITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_RADIO_CAPABILITY /;"	d
RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_SIGNAL_STRENGTH_REPORTING_CRITERIA /;"	d
RIL_REQUEST_SET_SIM_CARD_POWER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_SIM_CARD_POWER /;"	d
RIL_REQUEST_SET_SMSC_ADDRESS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_SMSC_ADDRESS /;"	d
RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_SUPP_SVC_NOTIFICATION /;"	d
RIL_REQUEST_SET_SYSTEM_SELECTION_CHANNELS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_SYSTEM_SELECTION_CHANNELS /;"	d
RIL_REQUEST_SET_TTY_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_TTY_MODE /;"	d
RIL_REQUEST_SET_UICC_SUBSCRIPTION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_UICC_SUBSCRIPTION /;"	d
RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_UNSOLICITED_RESPONSE_FILTER /;"	d
RIL_REQUEST_SET_UNSOL_CELL_INFO_LIST_RATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SET_UNSOL_CELL_INFO_LIST_RATE /;"	d
RIL_REQUEST_SHUTDOWN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SHUTDOWN /;"	d
RIL_REQUEST_SIGNAL_STRENGTH	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIGNAL_STRENGTH /;"	d
RIL_REQUEST_SIM_AUTHENTICATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIM_AUTHENTICATION /;"	d
RIL_REQUEST_SIM_CLOSE_CHANNEL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIM_CLOSE_CHANNEL /;"	d
RIL_REQUEST_SIM_IO	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIM_IO /;"	d
RIL_REQUEST_SIM_OPEN_CHANNEL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIM_OPEN_CHANNEL /;"	d
RIL_REQUEST_SIM_TRANSMIT_APDU_BASIC	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIM_TRANSMIT_APDU_BASIC /;"	d
RIL_REQUEST_SIM_TRANSMIT_APDU_CHANNEL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SIM_TRANSMIT_APDU_CHANNEL /;"	d
RIL_REQUEST_SMS_ACKNOWLEDGE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SMS_ACKNOWLEDGE /;"	d
RIL_REQUEST_START_HANDOVER	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_START_HANDOVER /;"	d
RIL_REQUEST_START_KEEPALIVE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_START_KEEPALIVE /;"	d
RIL_REQUEST_START_LCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_START_LCE /;"	d
RIL_REQUEST_START_NETWORK_SCAN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_START_NETWORK_SCAN /;"	d
RIL_REQUEST_STK_GET_PROFILE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STK_GET_PROFILE /;"	d
RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STK_HANDLE_CALL_SETUP_REQUESTED_FROM_SIM /;"	d
RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STK_SEND_ENVELOPE_COMMAND /;"	d
RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STK_SEND_ENVELOPE_WITH_STATUS /;"	d
RIL_REQUEST_STK_SEND_TERMINAL_RESPONSE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STK_SEND_TERMINAL_RESPONSE /;"	d
RIL_REQUEST_STK_SET_PROFILE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STK_SET_PROFILE /;"	d
RIL_REQUEST_STOP_KEEPALIVE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STOP_KEEPALIVE /;"	d
RIL_REQUEST_STOP_LCE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STOP_LCE /;"	d
RIL_REQUEST_STOP_NETWORK_SCAN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_STOP_NETWORK_SCAN /;"	d
RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SWITCH_HOLDING_AND_ACTIVE /;"	d
RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_SWITCH_WAITING_OR_HOLDING_AND_ACTIVE /;"	d
RIL_REQUEST_UDUB	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_UDUB /;"	d
RIL_REQUEST_UPDATE_SIM_PHONEBOOK_RECORDS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_UPDATE_SIM_PHONEBOOK_RECORDS /;"	d
RIL_REQUEST_VOICE_RADIO_TECH	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_VOICE_RADIO_TECH /;"	d
RIL_REQUEST_VOICE_REGISTRATION_STATE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_VOICE_REGISTRATION_STATE /;"	d
RIL_REQUEST_WRITE_SMS_TO_SIM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_REQUEST_WRITE_SMS_TO_SIM /;"	d
RIL_RESPONSE_ACKNOWLEDGEMENT	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RESPONSE_ACKNOWLEDGEMENT /;"	d
RIL_RESTRICTED_STATE_CS_ALL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RESTRICTED_STATE_CS_ALL /;"	d
RIL_RESTRICTED_STATE_CS_EMERGENCY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RESTRICTED_STATE_CS_EMERGENCY /;"	d
RIL_RESTRICTED_STATE_CS_NORMAL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RESTRICTED_STATE_CS_NORMAL /;"	d
RIL_RESTRICTED_STATE_NONE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RESTRICTED_STATE_NONE /;"	d
RIL_RESTRICTED_STATE_PS_ALL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_RESTRICTED_STATE_PS_ALL /;"	d
RIL_RadioAccessFamily	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioAccessFamily;$/;"	t	typeref:enum:__anon0bfbaecf0603
RIL_RadioAccessNetworks	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioAccessNetworks;$/;"	t	typeref:enum:__anon0bfbaecfa503
RIL_RadioAccessNetworks_v1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioAccessNetworks_v1_5;$/;"	t	typeref:enum:__anon0bfbaecf5503
RIL_RadioAccessSpecifier	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioAccessSpecifier;$/;"	t	typeref:struct:__anon0bfbaecfab08
RIL_RadioAccessSpecifier_v1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioAccessSpecifier_v1_5;$/;"	t	typeref:struct:__anon0bfbaecfae08
RIL_RadioBandMode	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioBandMode;$/;"	t	typeref:enum:__anon0bfbaecf0703
RIL_RadioCapability	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioCapability;$/;"	t	typeref:struct:__anon0bfbaecf0a08
RIL_RadioFunctions	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioFunctions;$/;"	t	typeref:struct:__anon0bfbaecfbf08
RIL_RadioState	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioState;$/;"	t	typeref:enum:__anon0bfbaecf0403
RIL_RadioStateRequest	guest/hals/ril/reference-libril/ril.h	/^typedef RIL_RadioState (*RIL_RadioStateRequest)();$/;"	t	typeref:typename:RIL_RadioState (*)()
RIL_RadioStateRequest	guest/hals/ril/reference-libril/ril.h	/^typedef RIL_RadioState (*RIL_RadioStateRequest)(RIL_SOCKET_ID socket_id);$/;"	t	typeref:typename:RIL_RadioState (*)(RIL_SOCKET_ID socket_id)
RIL_RadioTechnology	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioTechnology;$/;"	t	typeref:enum:__anon0bfbaecf0503
RIL_RadioTechnologyFamily	guest/hals/ril/reference-libril/ril.h	/^} RIL_RadioTechnologyFamily;$/;"	t	typeref:enum:__anon0bfbaecf1703
RIL_RegState	guest/hals/ril/reference-libril/ril.h	/^} RIL_RegState;$/;"	t	typeref:enum:__anon0bfbaecf3703
RIL_RequestFunc	guest/hals/ril/reference-libril/ril.h	/^typedef void (*RIL_RequestFunc) (int request, void *data,$/;"	t	typeref:typename:void (*)(int request,void * data,size_t datalen,RIL_Token t)
RIL_RequestFunc	guest/hals/ril/reference-libril/ril.h	/^typedef void (*RIL_RequestFunc) (int request, void *data,$/;"	t	typeref:typename:void (*)(int request,void * data,size_t datalen,RIL_Token t,RIL_SOCKET_ID socket_id)
RIL_SAP_SOCKET	guest/hals/ril/reference-libril/ril_ex.h	/^    RIL_SAP_SOCKET$/;"	e	enum:__anon316d80cb0103
RIL_SERVICE_H	guest/hals/ril/reference-libril/ril_service.h	/^#define RIL_SERVICE_H$/;"	d
RIL_SERVICE_NAME_BASE	guest/hals/ril/reference-libril/ril_internal.h	/^#define RIL_SERVICE_NAME_BASE /;"	d
RIL_SHLIB	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^#define RIL_SHLIB$/;"	d	file:
RIL_SHLIB	guest/hals/ril/reference-libril/RilSapSocket.h	/^#define RIL_SHLIB$/;"	d
RIL_SIM_APDU	guest/hals/ril/reference-libril/ril.h	/^} RIL_SIM_APDU;$/;"	t	typeref:struct:__anon0bfbaecf1f08
RIL_SIM_IO_Response	guest/hals/ril/reference-libril/ril.h	/^} RIL_SIM_IO_Response;$/;"	t	typeref:struct:__anon0bfbaecf2008
RIL_SIM_IO_v5	guest/hals/ril/reference-libril/ril.h	/^} RIL_SIM_IO_v5;$/;"	t	typeref:struct:__anon0bfbaecf1d08
RIL_SIM_IO_v6	guest/hals/ril/reference-libril/ril.h	/^} RIL_SIM_IO_v6;$/;"	t	typeref:struct:__anon0bfbaecf1e08
RIL_SMS_Response	guest/hals/ril/reference-libril/ril.h	/^} RIL_SMS_Response;$/;"	t	typeref:struct:__anon0bfbaecf1a08
RIL_SMS_WriteArgs	guest/hals/ril/reference-libril/ril.h	/^} RIL_SMS_WriteArgs;$/;"	t	typeref:struct:__anon0bfbaecf1b08
RIL_SOCKET_1	guest/hals/ril/reference-libril/ril.h	/^    RIL_SOCKET_1,$/;"	e	enum:__anon0bfbaecf0103
RIL_SOCKET_2	guest/hals/ril/reference-libril/ril.h	/^    RIL_SOCKET_2,$/;"	e	enum:__anon0bfbaecf0103
RIL_SOCKET_3	guest/hals/ril/reference-libril/ril.h	/^    RIL_SOCKET_3,$/;"	e	enum:__anon0bfbaecf0103
RIL_SOCKET_4	guest/hals/ril/reference-libril/ril.h	/^    RIL_SOCKET_4,$/;"	e	enum:__anon0bfbaecf0103
RIL_SOCKET_H_INCLUDED	guest/hals/ril/reference-libril/RilSocket.h	/^#define RIL_SOCKET_H_INCLUDED$/;"	d
RIL_SOCKET_ID	guest/hals/ril/reference-libril/ril.h	/^} RIL_SOCKET_ID;$/;"	t	typeref:enum:__anon0bfbaecf0103
RIL_SOCKET_NUM	guest/hals/ril/reference-libril/ril.h	/^    RIL_SOCKET_NUM$/;"	e	enum:__anon0bfbaecf0103
RIL_SOCKET_TYPE	guest/hals/ril/reference-libril/ril_ex.h	/^} RIL_SOCKET_TYPE;$/;"	t	typeref:enum:__anon316d80cb0103
RIL_ScanStatus	guest/hals/ril/reference-libril/ril.h	/^} RIL_ScanStatus;$/;"	t	typeref:enum:__anon0bfbaecfb203
RIL_ScanType	guest/hals/ril/reference-libril/ril.h	/^} RIL_ScanType;$/;"	t	typeref:enum:__anon0bfbaecfa403
RIL_SignalStrengthReportingCriteria_v1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrengthReportingCriteria_v1_5;$/;"	t	typeref:struct:__anon0bfbaecf5608
RIL_SignalStrengthWcdma	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrengthWcdma;$/;"	t	typeref:struct:__anon0bfbaecf4808
RIL_SignalStrength_v10	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrength_v10;$/;"	t	typeref:struct:__anon0bfbaecf5208
RIL_SignalStrength_v12	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrength_v12;$/;"	t	typeref:struct:__anon0bfbaecf5308
RIL_SignalStrength_v5	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrength_v5;$/;"	t	typeref:struct:__anon0bfbaecf4f08
RIL_SignalStrength_v6	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrength_v6;$/;"	t	typeref:struct:__anon0bfbaecf5008
RIL_SignalStrength_v8	guest/hals/ril/reference-libril/ril.h	/^} RIL_SignalStrength_v8;$/;"	t	typeref:struct:__anon0bfbaecf5108
RIL_SimAuthentication	guest/hals/ril/reference-libril/ril.h	/^} RIL_SimAuthentication;$/;"	t	typeref:struct:__anon0bfbaecfc208
RIL_SimLockMultiSimPolicy	guest/hals/ril/reference-libril/ril.h	/^} RIL_SimLockMultiSimPolicy;$/;"	t	typeref:enum:__anon0bfbaecf2803
RIL_SimRefreshResponse_v7	guest/hals/ril/reference-libril/ril.h	/^} RIL_SimRefreshResponse_v7;$/;"	t	typeref:struct:__anon0bfbaecf4108
RIL_SimRefreshResult	guest/hals/ril/reference-libril/ril.h	/^} RIL_SimRefreshResult;$/;"	t	typeref:enum:__anon0bfbaecf4003
RIL_SimSlotStatus	guest/hals/ril/reference-libril/ril.h	/^} RIL_SimSlotStatus;$/;"	t	typeref:struct:__anon0bfbaecfb908
RIL_SimSlotStatus_V1_2	guest/hals/ril/reference-libril/ril.h	/^} RIL_SimSlotStatus_V1_2;$/;"	t	typeref:struct:__anon0bfbaecfba08
RIL_SlotState	guest/hals/ril/reference-libril/ril.h	/^} RIL_SlotState;$/;"	t	typeref:enum:__anon0bfbaecfb803
RIL_SrvccState	guest/hals/ril/reference-libril/ril.h	/^} RIL_SrvccState;$/;"	t	typeref:enum:__anon0bfbaecf8e03
RIL_SsRequestType	guest/hals/ril/reference-libril/ril.h	/^} RIL_SsRequestType;$/;"	t	typeref:enum:__anon0bfbaecf9603
RIL_SsServiceType	guest/hals/ril/reference-libril/ril.h	/^} RIL_SsServiceType;$/;"	t	typeref:enum:__anon0bfbaecf9503
RIL_SsTeleserviceType	guest/hals/ril/reference-libril/ril.h	/^} RIL_SsTeleserviceType;$/;"	t	typeref:enum:__anon0bfbaecf9703
RIL_StkCcUnsolSsResponse	guest/hals/ril/reference-libril/ril.h	/^} RIL_StkCcUnsolSsResponse;$/;"	t	typeref:struct:__anon0bfbaecf9908
RIL_SuppSvcNotification	guest/hals/ril/reference-libril/ril.h	/^} RIL_SuppSvcNotification;$/;"	t	typeref:struct:__anon0bfbaecf3108
RIL_Supports	guest/hals/ril/reference-libril/ril.h	/^typedef int (*RIL_Supports)(int requestCode);$/;"	t	typeref:typename:int (*)(int requestCode)
RIL_SystemSelectionChannels_v1_5	guest/hals/ril/reference-libril/ril.h	/^} RIL_SystemSelectionChannels_v1_5;$/;"	t	typeref:struct:__anon0bfbaecfb108
RIL_TD_SCDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^} RIL_TD_SCDMA_SignalStrength;$/;"	t	typeref:struct:__anon0bfbaecf4d08
RIL_TELEPHONY_SOCKET	guest/hals/ril/reference-libril/ril_ex.h	/^    RIL_TELEPHONY_SOCKET,$/;"	e	enum:__anon316d80cb0103
RIL_TIMESTAMP_TYPE_ANTENNA	guest/hals/ril/reference-libril/ril.h	/^    RIL_TIMESTAMP_TYPE_ANTENNA = 1,$/;"	e	enum:__anon0bfbaecf6c03
RIL_TIMESTAMP_TYPE_JAVA_RIL	guest/hals/ril/reference-libril/ril.h	/^    RIL_TIMESTAMP_TYPE_JAVA_RIL = 4,$/;"	e	enum:__anon0bfbaecf6c03
RIL_TIMESTAMP_TYPE_MODEM	guest/hals/ril/reference-libril/ril.h	/^    RIL_TIMESTAMP_TYPE_MODEM = 2,$/;"	e	enum:__anon0bfbaecf6c03
RIL_TIMESTAMP_TYPE_OEM_RIL	guest/hals/ril/reference-libril/ril.h	/^    RIL_TIMESTAMP_TYPE_OEM_RIL = 3,$/;"	e	enum:__anon0bfbaecf6c03
RIL_TIMESTAMP_TYPE_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_TIMESTAMP_TYPE_UNKNOWN = 0,$/;"	e	enum:__anon0bfbaecf6c03
RIL_TimeStampType	guest/hals/ril/reference-libril/ril.h	/^} RIL_TimeStampType;$/;"	t	typeref:enum:__anon0bfbaecf6c03
RIL_TimedCallback	guest/hals/ril/reference-libril/ril.h	/^typedef void (*RIL_TimedCallback) (void *param);$/;"	t	typeref:typename:void (*)(void * param)
RIL_Token	guest/hals/ril/reference-libril/ril.h	/^typedef void * RIL_Token;$/;"	t	typeref:typename:void *
RIL_UIM_SOCKET_H_INCLUDED	guest/hals/ril/reference-libril/RilSapSocket.h	/^#define RIL_UIM_SOCKET_H_INCLUDED$/;"	d
RIL_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    RIL_UNKNOWN = 4,                             \/\/ Unknown$/;"	e	enum:__anon0bfbaecf3703
RIL_UNKNOWN_AND_EMERGENCY_AVAILABLE	guest/hals/ril/reference-libril/ril.h	/^    RIL_UNKNOWN_AND_EMERGENCY_AVAILABLE = 14,    \/\/ Same as UNKNOWN but indicates that$/;"	e	enum:__anon0bfbaecf3703
RIL_UNSOL_CALL_RING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CALL_RING /;"	d
RIL_UNSOL_CARRIER_INFO_IMSI_ENCRYPTION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CARRIER_INFO_IMSI_ENCRYPTION /;"	d
RIL_UNSOL_CDMA_CALL_WAITING	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CDMA_CALL_WAITING /;"	d
RIL_UNSOL_CDMA_INFO_REC	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CDMA_INFO_REC /;"	d
RIL_UNSOL_CDMA_OTA_PROVISION_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CDMA_OTA_PROVISION_STATUS /;"	d
RIL_UNSOL_CDMA_PRL_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CDMA_PRL_CHANGED /;"	d
RIL_UNSOL_CDMA_RUIM_SMS_STORAGE_FULL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CDMA_RUIM_SMS_STORAGE_FULL /;"	d
RIL_UNSOL_CDMA_SUBSCRIPTION_SOURCE_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CDMA_SUBSCRIPTION_SOURCE_CHANGED /;"	d
RIL_UNSOL_CELL_INFO_LIST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CELL_INFO_LIST /;"	d
RIL_UNSOL_CONFIG_ICC_SLOT_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_CONFIG_ICC_SLOT_STATUS /;"	d
RIL_UNSOL_DATA_CALL_LIST_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_DATA_CALL_LIST_CHANGED /;"	d
RIL_UNSOL_DC_RT_INFO_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_DC_RT_INFO_CHANGED /;"	d
RIL_UNSOL_ENTER_EMERGENCY_CALLBACK_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_ENTER_EMERGENCY_CALLBACK_MODE /;"	d
RIL_UNSOL_EXIT_EMERGENCY_CALLBACK_MODE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_EXIT_EMERGENCY_CALLBACK_MODE /;"	d
RIL_UNSOL_HARDWARE_CONFIG_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_HARDWARE_CONFIG_CHANGED /;"	d
RIL_UNSOL_KEEPALIVE_STATUS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_KEEPALIVE_STATUS /;"	d
RIL_UNSOL_LCEDATA_RECV	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_LCEDATA_RECV /;"	d
RIL_UNSOL_MODEM_RESTART	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_MODEM_RESTART /;"	d
RIL_UNSOL_NETWORK_SCAN_RESULT	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_NETWORK_SCAN_RESULT /;"	d
RIL_UNSOL_NITZ_TIME_RECEIVED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_NITZ_TIME_RECEIVED /;"	d
RIL_UNSOL_OEM_HOOK_RAW	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_OEM_HOOK_RAW /;"	d
RIL_UNSOL_ON_SS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_ON_SS /;"	d
RIL_UNSOL_ON_USSD	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_ON_USSD /;"	d
RIL_UNSOL_ON_USSD_REQUEST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_ON_USSD_REQUEST /;"	d
RIL_UNSOL_PCO_DATA	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_PCO_DATA /;"	d
RIL_UNSOL_PHYSICAL_CHANNEL_CONFIGS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_PHYSICAL_CHANNEL_CONFIGS /;"	d
RIL_UNSOL_RADIO_CAPABILITY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RADIO_CAPABILITY /;"	d
RIL_UNSOL_RESEND_INCALL_MUTE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESEND_INCALL_MUTE /;"	d
RIL_UNSOL_RESPONSE	guest/hals/ril/reference-libril/ril.cpp	/^#define RIL_UNSOL_RESPONSE(/;"	d	file:
RIL_UNSOL_RESPONSE	guest/hals/ril/reference-libril/ril_config.cpp	/^#define RIL_UNSOL_RESPONSE(/;"	d	file:
RIL_UNSOL_RESPONSE_BASE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_BASE /;"	d
RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED /;"	d
RIL_UNSOL_RESPONSE_CDMA_NEW_SMS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_CDMA_NEW_SMS /;"	d
RIL_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_IMS_NETWORK_STATE_CHANGED /;"	d
RIL_UNSOL_RESPONSE_LAST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_LAST /;"	d
RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS /;"	d
RIL_UNSOL_RESPONSE_NEW_SMS	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_NEW_SMS /;"	d
RIL_UNSOL_RESPONSE_NEW_SMS_ON_SIM	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_NEW_SMS_ON_SIM /;"	d
RIL_UNSOL_RESPONSE_NEW_SMS_STATUS_REPORT	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_NEW_SMS_STATUS_REPORT /;"	d
RIL_UNSOL_RESPONSE_RADIO_CONFIG_BASE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_RADIO_CONFIG_BASE /;"	d
RIL_UNSOL_RESPONSE_RADIO_CONFIG_LAST	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_RADIO_CONFIG_LAST /;"	d
RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED /;"	d
RIL_UNSOL_RESPONSE_SIM_STATUS_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_SIM_STATUS_CHANGED /;"	d
RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED /;"	d
RIL_UNSOL_RESTRICTED_STATE_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RESTRICTED_STATE_CHANGED /;"	d
RIL_UNSOL_RIL_CONNECTED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RIL_CONNECTED /;"	d
RIL_UNSOL_RINGBACK_TONE	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_RINGBACK_TONE /;"	d
RIL_UNSOL_SIGNAL_STRENGTH	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_SIGNAL_STRENGTH /;"	d
RIL_UNSOL_SIM_REFRESH	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_SIM_REFRESH /;"	d
RIL_UNSOL_SIM_SMS_STORAGE_FULL	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_SIM_SMS_STORAGE_FULL /;"	d
RIL_UNSOL_SRVCC_STATE_NOTIFY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_SRVCC_STATE_NOTIFY /;"	d
RIL_UNSOL_STK_CALL_SETUP	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_STK_CALL_SETUP /;"	d
RIL_UNSOL_STK_CC_ALPHA_NOTIFY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_STK_CC_ALPHA_NOTIFY /;"	d
RIL_UNSOL_STK_EVENT_NOTIFY	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_STK_EVENT_NOTIFY /;"	d
RIL_UNSOL_STK_PROACTIVE_COMMAND	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_STK_PROACTIVE_COMMAND /;"	d
RIL_UNSOL_STK_SESSION_END	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_STK_SESSION_END /;"	d
RIL_UNSOL_SUPP_SVC_NOTIFICATION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_SUPP_SVC_NOTIFICATION /;"	d
RIL_UNSOL_UICC_SUBSCRIPTION_STATUS_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_UICC_SUBSCRIPTION_STATUS_CHANGED /;"	d
RIL_UNSOL_VOICE_RADIO_TECH_CHANGED	guest/hals/ril/reference-libril/ril.h	/^#define RIL_UNSOL_VOICE_RADIO_TECH_CHANGED /;"	d
RIL_UNUSED_PARM	guest/hals/ril/reference-ril/reference-ril.c	/^#define RIL_UNUSED_PARM(/;"	d	file:
RIL_UR_DATA_CALL_DORMANCY_CHANGED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UR_DATA_CALL_DORMANCY_CHANGED = 0x04  \/\/ When this bit is set, modem should send the d/;"	e	enum:__anon0bfbaecfa203
RIL_UR_FULL_NETWORK_STATE	guest/hals/ril/reference-libril/ril.h	/^    RIL_UR_FULL_NETWORK_STATE         = 0x02, \/\/ When this bit is set, modem should always sen/;"	e	enum:__anon0bfbaecfa203
RIL_UR_SIGNAL_STRENGTH	guest/hals/ril/reference-libril/ril.h	/^    RIL_UR_SIGNAL_STRENGTH            = 0x01, \/\/ When this bit is set, modem should always sen/;"	e	enum:__anon0bfbaecfa203
RIL_UUS_DCS	guest/hals/ril/reference-libril/ril.h	/^} RIL_UUS_DCS;$/;"	t	typeref:enum:__anon0bfbaecf0e03
RIL_UUS_DCS_IA5c	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_DCS_IA5c = 4          \/* IA5 characters *\/$/;"	e	enum:__anon0bfbaecf0e03
RIL_UUS_DCS_OSIHLP	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_DCS_OSIHLP = 1,       \/* OSI higher layer protocol *\/$/;"	e	enum:__anon0bfbaecf0e03
RIL_UUS_DCS_RMCF	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_DCS_RMCF = 3,         \/* Reserved for system mangement$/;"	e	enum:__anon0bfbaecf0e03
RIL_UUS_DCS_USP	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_DCS_USP = 0,          \/* User specified protocol *\/$/;"	e	enum:__anon0bfbaecf0e03
RIL_UUS_DCS_X244	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_DCS_X244 = 2,         \/* X.244 *\/$/;"	e	enum:__anon0bfbaecf0e03
RIL_UUS_Info	guest/hals/ril/reference-libril/ril.h	/^} RIL_UUS_Info;$/;"	t	typeref:struct:__anon0bfbaecf0f08
RIL_UUS_TYPE1_IMPLICIT	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE1_IMPLICIT = 0,$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_TYPE1_NOT_REQUIRED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE1_NOT_REQUIRED = 2,$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_TYPE1_REQUIRED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE1_REQUIRED = 1,$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_TYPE2_NOT_REQUIRED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE2_NOT_REQUIRED = 4,$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_TYPE2_REQUIRED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE2_REQUIRED = 3,$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_TYPE3_NOT_REQUIRED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE3_NOT_REQUIRED = 6$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_TYPE3_REQUIRED	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_TYPE3_REQUIRED = 5,$/;"	e	enum:__anon0bfbaecf0d03
RIL_UUS_Type	guest/hals/ril/reference-libril/ril.h	/^} RIL_UUS_Type;$/;"	t	typeref:enum:__anon0bfbaecf0d03
RIL_UnsolicitedResponseFilter	guest/hals/ril/reference-libril/ril.h	/^} RIL_UnsolicitedResponseFilter;$/;"	t	typeref:enum:__anon0bfbaecfa203
RIL_UtranBands	guest/hals/ril/reference-libril/ril.h	/^} RIL_UtranBands;$/;"	t	typeref:enum:__anon0bfbaecfa803
RIL_VERSION	guest/hals/ril/reference-libril/ril.h	/^#define RIL_VERSION /;"	d
RIL_VERSION_MIN	guest/hals/ril/reference-libril/ril.h	/^#define RIL_VERSION_MIN /;"	d
RIL_VoiceRegistrationStateResponse	guest/hals/ril/reference-libril/ril.h	/^}RIL_VoiceRegistrationStateResponse;$/;"	t	typeref:struct:__anon0bfbaecf7f08
RIL_getServiceName	guest/hals/ril/reference-libril/ril.cpp	/^char * RIL_getServiceName() {$/;"	f	namespace:android	typeref:typename:char *
RIL_onRequestAck	guest/hals/ril/reference-libril/ril.cpp	/^RIL_onRequestAck(RIL_Token t) {$/;"	f	namespace:android	typeref:typename:void
RIL_onRequestComplete	guest/hals/ril/reference-libril/ril.cpp	/^RIL_onRequestComplete(RIL_Token t, RIL_Errno e, void *response, size_t responselen) {$/;"	f	namespace:android	typeref:typename:void
RIL_onRequestComplete	guest/hals/ril/reference-ril/reference-ril.c	/^#define RIL_onRequestComplete(/;"	d	file:
RIL_onUnsolicitedResponse	guest/hals/ril/reference-libril/ril.cpp	/^void RIL_onUnsolicitedResponse(int unsolResponse, const void *data,$/;"	f	namespace:android	typeref:typename:void
RIL_onUnsolicitedResponse	guest/hals/ril/reference-ril/reference-ril.c	/^#define RIL_onUnsolicitedResponse(/;"	d	file:
RIL_register	guest/hals/ril/reference-libril/ril.cpp	/^RIL_register (const RIL_RadioFunctions *callbacks) {$/;"	f	namespace:android	typeref:typename:void
RIL_register_socket	guest/hals/ril/reference-libril/ril.cpp	/^RIL_register_socket (const RIL_RadioFunctions *(*Init)(const struct RIL_Env *, int, char **),$/;"	f	namespace:android	typeref:typename:void
RIL_requestTimedCallback	guest/hals/ril/reference-libril/ril.cpp	/^RIL_requestTimedCallback (RIL_TimedCallback callback, void *param,$/;"	f	namespace:android	typeref:typename:void
RIL_requestTimedCallback	guest/hals/ril/reference-ril/reference-ril.c	/^#define RIL_requestTimedCallback(/;"	d	file:
RIL_setcallbacks	guest/hals/ril/reference-libril/ril.cpp	/^extern "C" void RIL_setcallbacks (const RIL_RadioFunctions *callbacks) {$/;"	f	namespace:android	typeref:typename:void
RIL_startEventLoop	guest/hals/ril/reference-libril/ril.cpp	/^RIL_startEventLoop(void) {$/;"	f	namespace:android	typeref:typename:void
ROUTING_MERGENCY	guest/hals/ril/reference-libril/ril.h	/^    ROUTING_MERGENCY   = 1,  \/* Indicates the implementation must handle the call through emerg/;"	e	enum:__anon0bfbaecfb603
ROUTING_NORMAL	guest/hals/ril/reference-libril/ril.h	/^    ROUTING_NORMAL     = 2,  \/* Indicates the implementation must handle the call through norma/;"	e	enum:__anon0bfbaecfb603
ROUTING_UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    ROUTING_UNKNOWN    = 0,  \/* Indicates Android does not require how to handle$/;"	e	enum:__anon0bfbaecfb603
RSCP	guest/hals/ril/reference-libril/ril.h	/^    RSCP = 2,$/;"	e	enum:__anon0bfbaecf5403
RSRP	guest/hals/ril/reference-libril/ril.h	/^    RSRP = 3,$/;"	e	enum:__anon0bfbaecf5403
RSRQ	guest/hals/ril/reference-libril/ril.h	/^    RSRQ = 4,$/;"	e	enum:__anon0bfbaecf5403
RSSI	guest/hals/ril/reference-libril/ril.h	/^    RSSI = 1,$/;"	e	enum:__anon0bfbaecf5403
RSSNR	guest/hals/ril/reference-libril/ril.h	/^    RSSNR = 5,$/;"	e	enum:__anon0bfbaecf5403
RUIM_ABSENT	guest/hals/ril/reference-ril/reference-ril.c	/^    RUIM_ABSENT = 6,$/;"	e	enum:__anon70d7df6f0303	file:
RUIM_NETWORK_PERSONALIZATION	guest/hals/ril/reference-ril/reference-ril.c	/^    RUIM_NETWORK_PERSONALIZATION = 11,$/;"	e	enum:__anon70d7df6f0303	file:
RUIM_NOT_READY	guest/hals/ril/reference-ril/reference-ril.c	/^    RUIM_NOT_READY = 7,$/;"	e	enum:__anon70d7df6f0303	file:
RUIM_PIN	guest/hals/ril/reference-ril/reference-ril.c	/^    RUIM_PIN = 9,$/;"	e	enum:__anon70d7df6f0303	file:
RUIM_PUK	guest/hals/ril/reference-ril/reference-ril.c	/^    RUIM_PUK = 10,$/;"	e	enum:__anon70d7df6f0303	file:
RUIM_READY	guest/hals/ril/reference-ril/reference-ril.c	/^    RUIM_READY = 8,$/;"	e	enum:__anon70d7df6f0303	file:
RUN_AT	host/commands/modem_simulator/stk_service.h	/^    RUN_AT              = 0x34,$/;"	e	enum:cuttlefish::StkService::CommandType
RadioCapabilityPhase	guest/hals/ril/reference-libril/ril.h	/^} RadioCapabilityPhase;$/;"	t	typeref:enum:__anon0bfbaecf0803
RadioCapabilityStatus	guest/hals/ril/reference-libril/ril.h	/^} RadioCapabilityStatus;$/;"	t	typeref:enum:__anon0bfbaecf0903
RadioConfigImpl	guest/hals/ril/reference-libril/ril_config.cpp	/^struct RadioConfigImpl : public V1_3::IRadioConfig {$/;"	s	file:
RadioImpl_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^struct RadioImpl_1_6 : public V1_6::IRadio {$/;"	s	file:
RadioState	host/commands/modem_simulator/network_service.h	/^  enum RadioState : int32_t {$/;"	g	class:cuttlefish::NetworkService	typeref:typename:int32_t
RadioTechnologyV1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^using RadioTechnologyV1_4 = android::hardware::radio::V1_4::RadioTechnology;$/;"	t	typeref:typename:android::hardware::radio::V1_4::RadioTechnology	file:
RandomClientSecret	host/frontend/webrtc_operator/client_handler.cpp	/^std::string RandomClientSecret(size_t len) {$/;"	f	namespace:cuttlefish::__anon9f2993ef0111	typeref:typename:std::string
RandomSerialNumber	host/libs/config/cuttlefish_config.cpp	/^std::string RandomSerialNumber(const std::string& prefix) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
Raw	common/libs/utils/unix_sockets.cpp	/^cmsghdr* ControlMessage::Raw() {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:cmsghdr *
Raw	common/libs/utils/unix_sockets.cpp	/^const cmsghdr* ControlMessage::Raw() const {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:const cmsghdr *
ReExecSelf	host/commands/secure_env/secure_env.cpp	/^[[noreturn]] void ReExecSelf() {$/;"	f	namespace:cuttlefish::__anon0a6d9b510111	typeref:typename:void
Read	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::Read(void* buf, size_t count) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
Read	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::Read(std::vector<char>& data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
Read	common/libs/utils/vsock_connection.cpp	/^int32_t VsockConnection::Read() {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:int32_t
Read	common/libs/utils/vsock_connection.cpp	/^std::vector<char> VsockConnection::Read(size_t size) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:std::vector<char>
Read	host/commands/secure_env/fragile_tpm_storage.cpp	/^std::unique_ptr<TPM2B_MAX_NV_BUFFER> FragileTpmStorage::Read($/;"	f	class:cuttlefish::FragileTpmStorage	typeref:typename:std::unique_ptr<TPM2B_MAX_NV_BUFFER>
Read	host/commands/secure_env/insecure_fallback_storage.cpp	/^std::unique_ptr<TPM2B_MAX_NV_BUFFER> InsecureFallbackStorage::Read($/;"	f	class:cuttlefish::InsecureFallbackStorage	typeref:typename:std::unique_ptr<TPM2B_MAX_NV_BUFFER>
ReadAll	common/libs/fs/shared_buf.cc	/^ssize_t ReadAll(SharedFD fd, std::string* buf) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
ReadAllFDData	common/libs/utils/unix_sockets_test.cpp	/^std::string ReadAllFDData(SharedFD fd) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
ReadAsync	common/libs/utils/vsock_connection.cpp	/^std::future<std::vector<char>> VsockConnection::ReadAsync(size_t size) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:std::future<std::vector<char>>
ReadCommand	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::ReadCommand(Client& client) {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
ReadCommandResponse	host/commands/modem_simulator/unittest/service_test.cpp	/^  void ReadCommandResponse(std::vector<std::string>& response) {$/;"	f	class:ModemServiceTest	typeref:typename:void	file:
ReadConfig	host/libs/config/config_flag.cpp	/^  std::optional<Json::Value> ReadConfig(const std::string& name) const {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:std::optional<Json::Value>	file:
ReadEvent	host/commands/kernel_log_monitor/utils.cc	/^std::optional<ReadEventResult> ReadEvent(cuttlefish::SharedFD fd) {$/;"	f	namespace:monitor	typeref:typename:std::optional<ReadEventResult>
ReadEventResult	host/commands/kernel_log_monitor/utils.h	/^struct ReadEventResult {$/;"	s	namespace:monitor
ReadExact	common/libs/fs/shared_buf.cc	/^ssize_t ReadExact(SharedFD fd, char* buf, size_t size) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
ReadExact	common/libs/fs/shared_buf.cc	/^ssize_t ReadExact(SharedFD fd, std::string* buf) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
ReadExact	common/libs/fs/shared_buf.cc	/^ssize_t ReadExact(SharedFD fd, std::vector<char>* buf) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
ReadExactBinary	common/libs/fs/shared_buf.h	/^ssize_t ReadExactBinary(SharedFD fd, T* binary_data) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
ReadFile	common/libs/utils/files.cpp	/^std::string ReadFile(const std::string& file) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
ReadGnssRawMeasurement	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void ReadGnssRawMeasurement() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
ReadJsonMessage	common/libs/utils/vsock_connection.cpp	/^Json::Value VsockConnection::ReadJsonMessage() {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:Json::Value
ReadJsonMessageAsync	common/libs/utils/vsock_connection.cpp	/^std::future<Json::Value> VsockConnection::ReadJsonMessageAsync() {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:std::future<Json::Value>
ReadKernelConfig	host/commands/assemble_cvd/flags.cc	/^void ReadKernelConfig(KernelConfig* kernel_config) {$/;"	f	namespace:cuttlefish::__anon145bfaab0111	typeref:typename:void
ReadLoop	host/commands/console_forwarder/main.cpp	/^  [[noreturn]] void ReadLoop() {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:void	file:
ReadLoop	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    [[noreturn]] void ReadLoop() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
ReadLoop	host/frontend/webrtc/adb_handler.cpp	/^void AdbHandler::ReadLoop() {$/;"	f	class:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:void
ReadLoop	host/frontend/webrtc/bluetooth_handler.cpp	/^void BluetoothHandler::ReadLoop() {$/;"	f	class:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:void
ReadLoop	host/frontend/webrtc/kernel_log_events_handler.cpp	/^void KernelLogEventsHandler::ReadLoop() {$/;"	f	class:cuttlefish::KernelLogEventsHandler	typeref:typename:void
ReadMessage	common/libs/utils/unix_sockets.cpp	/^Result<UnixSocketMessage> UnixMessageSocket::ReadMessage() {$/;"	f	class:cuttlefish::UnixMessageSocket	typeref:typename:Result<UnixSocketMessage>
ReadMessage	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::ReadMessage(std::vector<char>& data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
ReadMessage	common/libs/utils/vsock_connection.cpp	/^std::vector<char> VsockConnection::ReadMessage() {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:std::vector<char>
ReadMessageAsync	common/libs/utils/vsock_connection.cpp	/^std::future<std::vector<char>> VsockConnection::ReadMessageAsync() {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:std::future<std::vector<char>>
ReadNmeaFromLocalFile	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void ReadNmeaFromLocalFile() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
ReadPayload	common/libs/confui/packet.cpp	/^std::optional<ParsedPacket> ReadPayload(SharedFD s) {$/;"	f	namespace:cuttlefish::confui::packet	typeref:typename:std::optional<ParsedPacket>
ReadProtectedJsonFromFile	host/commands/secure_env/json_serializable.cpp	/^Json::Value ReadProtectedJsonFromFile($/;"	f	namespace:cuttlefish	typeref:typename:Json::Value
ReadRawData	common/libs/confui/packet.cpp	/^static std::optional<std::vector<std::uint8_t>> ReadRawData(SharedFD s) {$/;"	f	namespace:cuttlefish::confui::packet	typeref:typename:std::optional<std::vector<std::uint8_t>>	file:
ReadVsockRequest	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  struct ReadVsockRequest {$/;"	s	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession
ReadWriteCapability	host/libs/image_aggregator/cdisk_spec.proto	/^enum ReadWriteCapability {$/;"	g
Reason	host/commands/modem_simulator/sup_service.h	/^    enum Reason {$/;"	g	struct:cuttlefish::SupService::CallForwardInfo
RebootRecoveryTest	tests/recovery/src/com/android/cuttlefish/tests/RebootRecoveryTest.java	/^public class RebootRecoveryTest extends BaseHostJUnit4Test {$/;"	c
RebuildSuperImage	host/commands/assemble_cvd/super_image_mixer.cc	/^bool RebuildSuperImage(const FetcherConfig& fetcher_config,$/;"	f	namespace:cuttlefish	typeref:typename:bool
Receive	host/commands/secure_env/in_process_tpm.cpp	/^  static TSS2_RC Receive($/;"	f	class:cuttlefish::InProcessTpm::Impl	typeref:typename:TSS2_RC	file:
Receive	host/libs/msg_queue/msg_queue.cc	/^ssize_t SysVMessageQueue::Receive(void* data, size_t size, long msgtyp,$/;"	f	class:cuttlefish::SysVMessageQueue	typeref:typename:ssize_t
ReceiveCapture	host/libs/audio_connector/server.cpp	/^bool AudioClientConnection::ReceiveCapture(AudioServerExecutor& executor) {$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:bool
ReceiveCommands	host/libs/audio_connector/server.cpp	/^bool AudioClientConnection::ReceiveCommands(AudioServerExecutor& executor) {$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:bool
ReceiveMessage	common/libs/security/gatekeeper_channel.cpp	/^ManagedGatekeeperMessage GatekeeperChannel::ReceiveMessage() {$/;"	f	class:cuttlefish::GatekeeperChannel	typeref:typename:ManagedGatekeeperMessage
ReceiveMessage	common/libs/security/keymaster_channel.cpp	/^ManagedKeymasterMessage KeymasterChannel::ReceiveMessage() {$/;"	f	class:cuttlefish::KeymasterChannel	typeref:typename:ManagedKeymasterMessage
ReceiveMsg	host/libs/audio_connector/server.cpp	/^ssize_t AudioClientConnection::ReceiveMsg(SharedFD socket, void* buffer,$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:ssize_t
ReceivePlayback	host/libs/audio_connector/server.cpp	/^bool AudioClientConnection::ReceivePlayback(AudioServerExecutor& executor) {$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:bool
RecordDisplays	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::RecordDisplays(LocalRecorder& recorder) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
RecordFlags	host/libs/config/fetcher_config.cpp	/^void FetcherConfig::RecordFlags() {$/;"	f	class:cuttlefish::FetcherConfig	typeref:typename:void
RecordToNvBuffer	host/commands/secure_env/tpm_gatekeeper.cpp	/^static std::unique_ptr<TPM2B_MAX_NV_BUFFER> RecordToNvBuffer($/;"	f	namespace:cuttlefish	typeref:typename:std::unique_ptr<TPM2B_MAX_NV_BUFFER>	file:
Recording	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::Recording() const { return recording_; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
RecordingDeviceName	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::RecordingDeviceName($/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
RecordingDevices	host/frontend/webrtc/lib/audio_device.cpp	/^int16_t CfAudioDeviceModule::RecordingDevices() { return 1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int16_t
RecordingIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::RecordingIsAvailable(bool* available) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
RecordingIsInitialized	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::RecordingIsInitialized() const { return true; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
RecursivelyRemoveDirectory	common/libs/utils/files.cpp	/^bool RecursivelyRemoveDirectory(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
Recv	common/frontend/socket_vsock_proxy/main.cpp	/^  ssize_t Recv(char* packet, ssize_t length) {$/;"	f	class:__anon913036200111::SocketReceiver	typeref:typename:ssize_t	file:
Recv	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::Recv(void* buf, size_t len, int flags) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
Recv	common/libs/utils/tcp_socket.cpp	/^Message ClientSocket::Recv(std::size_t length) {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:Message
RecvAdbResponse	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string RecvAdbResponse(cuttlefish::SharedFD sock) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
RecvAll	common/libs/fs/shared_buf.cc	/^std::string RecvAll(SharedFD sock, const size_t count) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
RecvAll	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^std::string RecvAll(cuttlefish::SharedFD sock, const size_t count) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:std::string
RecvAny	common/libs/utils/tcp_socket.cpp	/^Message ClientSocket::RecvAny(std::size_t length) {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:Message
RecvConfUiMsg	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> RecvConfUiMsg(SharedFD fd) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::unique_ptr<ConfUiMessage>
RecvConfUiMsg	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> RecvConfUiMsg(const std::string& session_id,$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::unique_ptr<ConfUiMessage>
RecvJsonMsg	host/libs/allocd/utils.cpp	/^std::optional<Json::Value> RecvJsonMsg(SharedFD client_socket) {$/;"	f	namespace:cuttlefish	typeref:typename:std::optional<Json::Value>
RecvMsg	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::RecvMsg(struct msghdr* msg, int flags) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
RecvUptimeResult	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^int RecvUptimeResult(cuttlefish::SharedFD sock) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:int
RedirectStdIO	common/libs/utils/subprocess.cpp	/^void Command::RedirectStdIO(Subprocess::StdIOChannel channel,$/;"	f	class:cuttlefish::Command	typeref:typename:void
RedirectStdIO	common/libs/utils/subprocess.cpp	/^void Command::RedirectStdIO(Subprocess::StdIOChannel subprocess_channel,$/;"	f	class:cuttlefish::Command	typeref:typename:void
RefreshCredential	host/commands/fetcher/credential_source.cc	/^void GceMetadataCredentialSource::RefreshCredential() {$/;"	f	class:cuttlefish::GceMetadataCredentialSource	typeref:typename:void
RegStateResultV1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^using RegStateResultV1_5 = android::hardware::radio::V1_5::RegStateResult;$/;"	t	typeref:typename:android::hardware::radio::V1_5::RegStateResult	file:
RegStateResultV1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^using RegStateResultV1_6 = android::hardware::radio::V1_6::RegStateResult;$/;"	t	typeref:typename:android::hardware::radio::V1_6::RegStateResult	file:
Region	host/libs/wayland/wayland_surface.h	/^  struct Region {$/;"	s	class:wayland::Surface
Register	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Register(std::weak_ptr<OperatorObserver> observer) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
RegisterAudioCallback	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::RegisterAudioCallback($/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
RegisterAudioObserver	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::RegisterAudioObserver(AudioObserver* observer) {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
RegisterClient	host/frontend/webrtc_operator/device_handler.cpp	/^size_t DeviceHandler::RegisterClient($/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:size_t
RegisterDevice	host/frontend/webrtc_operator/device_registry.cpp	/^bool DeviceRegistry::RegisterDevice($/;"	f	class:cuttlefish::DeviceRegistry	typeref:typename:bool
RegisterDynHandlerFactory	host/libs/websocket/websocket_server.cpp	/^void WebSocketServer::RegisterDynHandlerFactory($/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:void
RegisterHandlerFactory	host/libs/websocket/websocket_server.cpp	/^void WebSocketServer::RegisterHandlerFactory($/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:void
RegisterModemService	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::RegisterModemService() {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
RegisterObserver	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::RegisterObserver($/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
RegisterQueue	common/libs/concurrency/multiplexer.h	/^  int RegisterQueue(QueuePtr&& queue) {$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:int
RegistrationState	host/commands/modem_simulator/network_service.h	/^  enum RegistrationState {$/;"	g	class:cuttlefish::NetworkService
RegistrationUnsolMode	host/commands/modem_simulator/network_service.h	/^    enum RegistrationUnsolMode {$/;"	g	struct:cuttlefish::NetworkService::NetworkRegistrationStatus
ReleaseAllResources	host/libs/allocd/resource_manager.h	/^  bool ReleaseAllResources() {$/;"	f	class:cuttlefish::Session	typeref:typename:bool
ReleaseAllocdResources	host/commands/stop/main.cc	/^void ReleaseAllocdResources(SharedFD allocd_sock, uint32_t session_id) {$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:void
ReleaseDhcp4	common/libs/utils/network.cpp	/^bool ReleaseDhcp4(SharedFD tap, const std::uint8_t mac_address[6],$/;"	f	namespace:cuttlefish	typeref:typename:bool
ReleaseDhcpLeases	common/libs/utils/network.cpp	/^bool ReleaseDhcpLeases(const std::string& lease_path, SharedFD tap_fd,$/;"	f	namespace:cuttlefish	typeref:typename:bool
ReleaseFence	guest/hals/camera/cached_stream_buffer.cpp	/^ReleaseFence::ReleaseFence(int fence_fd) : handle_(nullptr) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::ReleaseFence
ReleaseFence	guest/hals/camera/cached_stream_buffer.h	/^class ReleaseFence {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
ReleaseResource	host/libs/allocd/resource.cpp	/^bool EthernetIface::ReleaseResource() {$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:bool
ReleaseResource	host/libs/allocd/resource.cpp	/^bool MobileIface::ReleaseResource() {$/;"	f	class:cuttlefish::MobileIface	typeref:typename:bool
ReleaseResource	host/libs/allocd/resource_manager.h	/^  bool ReleaseResource(uint32_t resource_id) {$/;"	f	class:cuttlefish::Session	typeref:typename:bool
ReleaseStream	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::ReleaseStream(StreamControlCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
ReloadConfig	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^bool WmediumdController::ReloadConfig(const std::string& configPath) {$/;"	f	class:cuttlefish::WmediumdController	typeref:typename:bool
ReloadCurrentConfig	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^bool WmediumdController::ReloadCurrentConfig(void) {$/;"	f	class:cuttlefish::WmediumdController	typeref:typename:bool
RememberConnection	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionContextImpl::RememberConnection($/;"	f	class:WsConnectionContextImpl	typeref:typename:void
RemoteGateKeeperDevice	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^RemoteGateKeeperDevice::RemoteGateKeeperDevice(cuttlefish::GatekeeperChannel* channel)$/;"	f	class:gatekeeper::RemoteGateKeeperDevice
RemoteGateKeeperDevice	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^class RemoteGateKeeperDevice : public ::android::hardware::gatekeeper::V1_0::IGatekeeper {$/;"	c	namespace:gatekeeper
RemoteKeyMintDevice	guest/hals/keymint/remote/remote_keymint_device.cpp	/^RemoteKeyMintDevice::RemoteKeyMintDevice(::keymaster::RemoteKeymaster& impl,$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice
RemoteKeyMintDevice	guest/hals/keymint/remote/remote_keymint_device.h	/^class RemoteKeyMintDevice : public BnKeyMintDevice {$/;"	c	namespace:aidl::android::hardware::security::keymint
RemoteKeyMintOperation	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^RemoteKeyMintOperation::RemoteKeyMintOperation($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation
RemoteKeyMintOperation	guest/hals/keymint/remote/remote_keymint_operation.h	/^class RemoteKeyMintOperation : public BnKeyMintOperation {$/;"	c	namespace:aidl::android::hardware::security::keymint
RemoteKeymaster	guest/hals/keymaster/remote/remote_keymaster.cpp	/^RemoteKeymaster::RemoteKeymaster(cuttlefish::KeymasterChannel* channel)$/;"	f	class:keymaster::RemoteKeymaster
RemoteKeymaster	guest/hals/keymaster/remote/remote_keymaster.h	/^class RemoteKeymaster {$/;"	c	namespace:keymaster
RemoteKeymaster	guest/hals/keymint/remote/remote_keymaster.cpp	/^RemoteKeymaster::RemoteKeymaster(cuttlefish::KeymasterChannel* channel,$/;"	f	class:keymaster::RemoteKeymaster
RemoteKeymaster	guest/hals/keymint/remote/remote_keymaster.h	/^class RemoteKeymaster {$/;"	c	namespace:keymaster
RemoteKeymaster4Device	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^RemoteKeymaster4Device::RemoteKeymaster4Device(RemoteKeymaster* impl) : impl_(impl) {}$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device
RemoteKeymaster4Device	guest/hals/keymaster/remote/remote_keymaster4_device.h	/^class RemoteKeymaster4Device : public IKeymasterDevice {$/;"	c	namespace:keymaster::V4_1
RemoteRemotelyProvisionedComponent	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^RemoteRemotelyProvisionedComponent::RemoteRemotelyProvisionedComponent($/;"	f	class:aidl::android::hardware::security::keymint::RemoteRemotelyProvisionedComponent
RemoteRemotelyProvisionedComponent	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^class RemoteRemotelyProvisionedComponent$/;"	c	namespace:aidl::android::hardware::security::keymint
RemoteSecureClock	guest/hals/keymint/remote/remote_secure_clock.cpp	/^RemoteSecureClock::RemoteSecureClock(keymaster::RemoteKeymaster& impl)$/;"	f	class:aidl::android::hardware::security::secureclock::RemoteSecureClock
RemoteSecureClock	guest/hals/keymint/remote/remote_secure_clock.h	/^class RemoteSecureClock : public BnSecureClock {$/;"	c	namespace:aidl::android::hardware::security::secureclock
RemoteSharedSecret	guest/hals/keymint/remote/remote_shared_secret.cpp	/^RemoteSharedSecret::RemoteSharedSecret(::keymaster::RemoteKeymaster& keymint)$/;"	f	class:aidl::android::hardware::security::sharedsecret::RemoteSharedSecret
RemoteSharedSecret	guest/hals/keymint/remote/remote_shared_secret.h	/^class RemoteSharedSecret : public BnSharedSecret {$/;"	c	namespace:aidl::android::hardware::security::sharedsecret
RemoveEncodedSink	host/frontend/webrtc/lib/video_track_source_impl.h	/^  void RemoveEncodedSink($/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:void
RemoveFile	common/libs/utils/files.cpp	/^bool RemoveFile(const std::string& file) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
RemoveInterface	host/libs/allocd/resource_manager.cpp	/^bool ResourceManager::RemoveInterface(const std::string& iface, IfaceType ty) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:bool
RemoveSink	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::RemoveSink(webrtc::AudioTrackSinkInterface* sink) {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
RenameFile	common/libs/utils/files.cpp	/^bool RenameFile(const std::string& old_name, const std::string& new_name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
RenameNetwork	guest/commands/setup_wifi/main.cpp	/^int RenameNetwork(const std::string& name, const std::string& new_name) {$/;"	f	typeref:typename:int
RenderConfirmationUi	host/libs/screen_connector/screen_connector.h	/^  bool RenderConfirmationUi(std::uint32_t display_number,$/;"	f	class:cuttlefish::ScreenConnector	typeref:typename:bool
RenderDialog	host/libs/confui/session.cc	/^bool Session::RenderDialog() {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
RenderRawFrame	host/libs/confui/host_renderer.cc	/^std::shared_ptr<TeeUiFrameWrapper> ConfUiRenderer::RenderRawFrame() {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::shared_ptr<TeeUiFrameWrapper>
RepackBootImage	host/commands/assemble_cvd/boot_image_utils.cc	/^bool RepackBootImage(const std::string& new_kernel_path,$/;"	f	namespace:cuttlefish	typeref:typename:bool
RepackVendorBootImage	host/commands/assemble_cvd/boot_image_utils.cc	/^bool RepackVendorBootImage(const std::string& new_ramdisk,$/;"	f	namespace:cuttlefish	typeref:typename:bool
RepackVendorBootImageWithEmptyRamdisk	host/commands/assemble_cvd/boot_image_utils.cc	/^bool RepackVendorBootImageWithEmptyRamdisk($/;"	f	namespace:cuttlefish	typeref:typename:bool
RepackVendorRamdisk	host/commands/assemble_cvd/boot_image_utils.cc	/^void RepackVendorRamdisk(const std::string& kernel_modules_ramdisk_path,$/;"	f	namespace:cuttlefish::__anonbfa95aa40111	typeref:typename:void
RepaintRawFrame	host/libs/confui/host_renderer.cc	/^std::unique_ptr<TeeUiFrameWrapper> ConfUiRenderer::RepaintRawFrame($/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::unique_ptr<TeeUiFrameWrapper>
Reply	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientDynHandler::Reply(const Json::Value& json) {$/;"	f	class:cuttlefish::ClientDynHandler	typeref:typename:void
Reply	host/frontend/webrtc_operator/signal_handler.cpp	/^void SignalHandler::Reply(const Json::Value& json) {$/;"	f	class:cuttlefish::SignalHandler	typeref:typename:void
Reply	host/libs/audio_connector/commands.cpp	/^void ChmapInfoCommand::Reply(AudioStatus status,$/;"	f	class:cuttlefish::ChmapInfoCommand	typeref:typename:void
Reply	host/libs/audio_connector/commands.cpp	/^void JackInfoCommand::Reply(AudioStatus status,$/;"	f	class:cuttlefish::JackInfoCommand	typeref:typename:void
Reply	host/libs/audio_connector/commands.cpp	/^void StreamControlCommand::Reply(AudioStatus status) {$/;"	f	class:cuttlefish::StreamControlCommand	typeref:typename:void
Reply	host/libs/audio_connector/commands.cpp	/^void StreamInfoCommand::Reply(AudioStatus status,$/;"	f	class:cuttlefish::StreamInfoCommand	typeref:typename:void
ReplyError	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientDynHandler::ReplyError(const std::string& message) {$/;"	f	class:cuttlefish::ClientDynHandler	typeref:typename:void
ReportErrorToHal	host/libs/confui/session.cc	/^bool Session::ReportErrorToHal(SharedFD hal_cli, const std::string& msg) {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:bool
ReqStatusToStrMap	host/libs/allocd/utils.cpp	/^const std::map<RequestStatus, std::string> ReqStatusToStrMap = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<RequestStatus,std::string>
ReqTyToStr	host/libs/allocd/utils.cpp	/^std::string ReqTyToStr(RequestType req_ty) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
RequestData	common/libs/net/netlink_request.cpp	/^void* NetlinkRequest::RequestData() const {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void *
RequestHeader	host/libs/allocd/request.h	/^struct RequestHeader {$/;"	s	namespace:cuttlefish
RequestInfo	guest/hals/ril/reference-libril/ril_internal.h	/^typedef struct RequestInfo {$/;"	s	namespace:android
RequestInfo	guest/hals/ril/reference-libril/ril_internal.h	/^} RequestInfo;$/;"	t	namespace:android	typeref:struct:android::RequestInfo
RequestLength	common/libs/net/netlink_request.cpp	/^size_t NetlinkRequest::RequestLength() const {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:size_t
RequestStatus	host/libs/allocd/request.h	/^enum class RequestStatus : uint16_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint16_t
RequestTimedCallback	guest/hals/ril/reference-libril/ril.h	/^    void (*RequestTimedCallback) (RIL_TimedCallback callback,$/;"	m	struct:RIL_Env	typeref:typename:void (*)(RIL_TimedCallback callback,void * param,const struct timeval * relativeTime)
RequestTyToStrMap	host/libs/allocd/utils.cpp	/^const std::map<RequestType, const char*> RequestTyToStrMap = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<RequestType,const char * >
RequestType	host/libs/allocd/request.h	/^enum class RequestType : uint16_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint16_t
Reserve	common/libs/net/netlink_request.h	/^  template <typename T> T* Reserve() {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:T *
ReserveRaw	common/libs/net/netlink_request.cpp	/^void* NetlinkRequest::ReserveRaw(size_t length) {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:void *
ReserveSlot	host/commands/secure_env/tpm_resource_manager.cpp	/^TpmObjectSlot TpmResourceManager::ReserveSlot() {$/;"	f	class:cuttlefish::TpmResourceManager	typeref:typename:TpmObjectSlot
Reset	host/commands/modem_simulator/network_service.h	/^    void Reset() {$/;"	f	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:void
Reset	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::HoldingBuffer::Reset(size_t size) {$/;"	f	class:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:void
ResizeImage	host/libs/config/data_image.cpp	/^bool ResizeImage(const CuttlefishConfig& config, const std::string& data_image,$/;"	f	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:bool
Resolution	host/frontend/webrtc/lib/camera_streamer.h	/^  using Resolution = struct {$/;"	t	class:cuttlefish::webrtc_streaming::CameraStreamer
ResolveInstanceFiles	host/commands/assemble_cvd/disk_flags.cc	/^bool ResolveInstanceFiles() {$/;"	f	namespace:cuttlefish	typeref:typename:bool
ResourceManager	host/libs/allocd/resource_manager.h	/^struct ResourceManager {$/;"	s	namespace:cuttlefish
ResourceType	host/libs/allocd/resource.h	/^enum class ResourceType {$/;"	g	namespace:cuttlefish
RestartCvdMain	host/commands/restart_cvd/restart_cvd.cc	/^int RestartCvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish::__anon63a091d80111	typeref:typename:int
RestartRunCvd	host/commands/run_cvd/server_loop.cpp	/^  void RestartRunCvd(int notification_fd) {$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:void	file:
ResultTriple	guest/hals/confirmationui/guest_session.h	/^    using ResultTriple =$/;"	t	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::tuple<ResponseCode,teeui::MsgVector<uint8_t>,teeui::MsgVector<uint8_t>>
RetryImpl	host/commands/fetcher/curl_wrapper.cc	/^  CurlResponse<T> RetryImpl(std::function<CurlResponse<T>()> attempt_fn) {$/;"	f	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:CurlResponse<T>	file:
Revision	host/commands/fetcher/build_api.h	/^  const std::string& Revision() const { return revision; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:const std::string &
RilE2eTests	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^public class RilE2eTests {$/;"	c
RilSapSocket	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^RilSapSocket::RilSapSocket(const char *socketName,$/;"	f	class:RilSapSocket
RilSapSocket	guest/hals/ril/reference-libril/RilSapSocket.h	/^class RilSapSocket : public RilSocket {$/;"	c
RilSapSocketList	guest/hals/ril/reference-libril/RilSapSocket.h	/^        typedef struct RilSapSocketList {$/;"	s	class:RilSapSocket
RilSapSocketList	guest/hals/ril/reference-libril/RilSapSocket.h	/^        } RilSapSocketList;$/;"	t	class:RilSapSocket	typeref:struct:RilSapSocket::RilSapSocketList
RilSocket	guest/hals/ril/reference-libril/RilSocket.h	/^        RilSocket(const char* socketName, RIL_SOCKET_ID socketId) {$/;"	f	class:RilSocket
RilSocket	guest/hals/ril/reference-libril/RilSocket.h	/^class RilSocket {$/;"	c
Ril_queue	guest/hals/ril/reference-libril/rilSocketQueue.h	/^Ril_queue<T>::Ril_queue(void) {$/;"	f	class:Ril_queue
Ril_queue	guest/hals/ril/reference-libril/rilSocketQueue.h	/^class Ril_queue {$/;"	c
RootCanal	host/commands/run_cvd/launch.cc	/^class RootCanal : public CommandSource {$/;"	c	namespace:cuttlefish	file:
RootCanalBinary	host/libs/config/known_paths.cpp	/^std::string RootCanalBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
RoundUpToBlockSize	host/commands/secure_env/encrypted_serializable.cpp	/^static uint32_t RoundUpToBlockSize(uint32_t num) {$/;"	f	namespace:cuttlefish	typeref:typename:uint32_t	file:
Run	host/commands/run_cvd/server_loop.cpp	/^  void Run(ProcessMonitor& process_monitor) override {$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:void	file:
RunConnector	host/libs/config/adb/data.cpp	/^  bool RunConnector() const override { return run_connector_; }$/;"	f	class:cuttlefish::AdbConfigImpl	typeref:typename:bool	file:
RunCvdMain	host/commands/run_cvd/main.cc	/^int RunCvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
RunExternalCommand	host/libs/allocd/alloc_utils.cpp	/^int RunExternalCommand(const std::string& command) {$/;"	f	namespace:cuttlefish	typeref:typename:int
RunServer	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^void RunServer() {$/;"	f	typeref:typename:void
RunSession	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^void TrustyConfirmationUI::RunSession(sp<IConfirmationResultCallback> resultCB,$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:void
RunSetup	host/libs/config/feature.cpp	/^\/* static *\/ bool Feature::RunSetup(const std::vector<Feature*>& features) {$/;"	f	class:cuttlefish::Feature	typeref:typename:bool
RunThread	host/libs/confui/host_utils.h	/^  std::thread RunThread(const std::string& name, F&& f, Args&&... args) {$/;"	f	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:std::thread
RunThread	host/libs/confui/host_utils.h	/^std::thread RunThread(const std::string& name, F&& f, Args&&... args) {$/;"	f	namespace:cuttlefish::confui::thread	typeref:typename:std::thread
RunWithManagedStdio	common/libs/utils/subprocess.cpp	/^int RunWithManagedStdio(Command&& cmd_tmp, const std::string* stdin_str,$/;"	f	namespace:cuttlefish	typeref:typename:int
RunnerExitCodes	host/commands/run_cvd/runner_defs.h	/^enum RunnerExitCodes : int {$/;"	g	namespace:cuttlefish	typeref:typename:int
RxBuffer	host/libs/audio_connector/buffers.h	/^  RxBuffer(const virtio_snd_pcm_xfer& header, volatile uint8_t* buffer,$/;"	f	class:cuttlefish::RxBuffer
RxBuffer	host/libs/audio_connector/buffers.h	/^class RxBuffer : public ShmBuffer {$/;"	c	namespace:cuttlefish
RxBufferAt	host/libs/audio_connector/server.cpp	/^volatile uint8_t* AudioClientConnection::RxBufferAt(size_t offset,$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:volatile uint8_t *
SANITIZE_TARGET	vsoc_arm64/phone/aosp_cf_hwasan.mk	/^  SANITIZE_TARGET := $(strip $(SANITIZE_TARGET) hwaddress)$/;"	m
SANITIZE_TARGET	vsoc_arm64_only/phone/aosp_cf_hwasan.mk	/^  SANITIZE_TARGET := $(strip $(SANITIZE_TARGET) hwaddress)$/;"	m
SAP_SERVICE_H	guest/hals/ril/reference-libril/sap_service.h	/^#define SAP_SERVICE_H$/;"	d
SC	host/commands/modem_simulator/sim_service.h	/^      SC = 9,  \/\/ PIN enable\/disable$/;"	e	enum:cuttlefish::SimService::FacilityLock::LockType
SCOPED_CAPABILITY	common/libs/concurrency/thread_annotations.h	/^#define SCOPED_CAPABILITY /;"	d
SECTOR_SIZE	host/libs/config/mbr.h	/^constexpr int SECTOR_SIZE = 1 << SECTOR_SIZE_SHIFT;$/;"	v	typeref:typename:int
SECTOR_SIZE_SHIFT	host/libs/config/mbr.h	/^constexpr int SECTOR_SIZE_SHIFT = 9;$/;"	v	typeref:typename:int
SELECT_ITEM	host/commands/modem_simulator/stk_service.h	/^    SELECT_ITEM         = 0x24,$/;"	e	enum:cuttlefish::StkService::CommandType
SEND_DATA	host/commands/modem_simulator/stk_service.h	/^    SEND_DATA           = 0x43,$/;"	e	enum:cuttlefish::StkService::CommandType
SEND_DTMF	host/commands/modem_simulator/stk_service.h	/^    SEND_DTMF           = 0x14,$/;"	e	enum:cuttlefish::StkService::CommandType
SEND_SMS	host/commands/modem_simulator/stk_service.h	/^    SEND_SMS            = 0x13,$/;"	e	enum:cuttlefish::StkService::CommandType
SEND_SS	host/commands/modem_simulator/stk_service.h	/^    SEND_SS             = 0x11,$/;"	e	enum:cuttlefish::StkService::CommandType
SEND_USSD	host/commands/modem_simulator/stk_service.h	/^    SEND_USSD           = 0x12,$/;"	e	enum:cuttlefish::StkService::CommandType
SESSION_ANY	common/libs/confui/protocol.h	/^constexpr auto SESSION_ANY = "";$/;"	v	namespace:cuttlefish::confui	typeref:typename:auto
SET_U16	host/frontend/webrtc_operator/utils.cpp	/^void SET_U16(void *_dst, uint16_t x) {$/;"	f	typeref:typename:void
SET_U32	host/frontend/webrtc_operator/utils.cpp	/^void SET_U32(void *_dst, uint32_t x) {$/;"	f	typeref:typename:void
SET_UP_CALL	host/commands/modem_simulator/stk_service.h	/^    SET_UP_CALL         = 0x10,$/;"	e	enum:cuttlefish::StkService::CommandType
SET_UP_EVENT_LIST	host/commands/modem_simulator/stk_service.h	/^    SET_UP_EVENT_LIST   = 0x05,$/;"	e	enum:cuttlefish::StkService::CommandType
SET_UP_IDLE_MODE_TEXT	host/commands/modem_simulator/stk_service.h	/^    SET_UP_IDLE_MODE_TEXT = 0x28,$/;"	e	enum:cuttlefish::StkService::CommandType
SET_UP_MENU	host/commands/modem_simulator/stk_service.h	/^    SET_UP_MENU         = 0x25,$/;"	e	enum:cuttlefish::StkService::CommandType
SIGNATURE_LENGTH_BYTES	host/commands/secure_env/soft_gatekeeper.h	/^    static const uint32_t SIGNATURE_LENGTH_BYTES = 32;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:const uint32_t
SIM_ABSENT	guest/hals/ril/reference-ril/reference-ril.c	/^    SIM_ABSENT = 0,$/;"	e	enum:__anon70d7df6f0303	file:
SIM_AUTH_RESPONSE_SUCCESS	guest/hals/ril/reference-ril/reference-ril.c	/^#define SIM_AUTH_RESPONSE_SUCCESS /;"	d	file:
SIM_AUTH_RESPONSE_SYNC_FAILURE	guest/hals/ril/reference-ril/reference-ril.c	/^#define SIM_AUTH_RESPONSE_SYNC_FAILURE /;"	d	file:
SIM_COUNT	guest/hals/ril/reference-libril/ril.h	/^#define SIM_COUNT /;"	d
SIM_FILE_UPDATE	guest/hals/ril/reference-libril/ril.h	/^    SIM_FILE_UPDATE = 0,$/;"	e	enum:__anon0bfbaecf4003
SIM_INIT	guest/hals/ril/reference-libril/ril.h	/^    SIM_INIT = 1,$/;"	e	enum:__anon0bfbaecf4003
SIM_NETWORK_PERSONALIZATION	guest/hals/ril/reference-ril/reference-ril.c	/^    SIM_NETWORK_PERSONALIZATION = 5,$/;"	e	enum:__anon70d7df6f0303	file:
SIM_NOT_READY	guest/hals/ril/reference-ril/reference-ril.c	/^    SIM_NOT_READY = 1,$/;"	e	enum:__anon70d7df6f0303	file:
SIM_PIN	guest/hals/ril/reference-ril/reference-ril.c	/^    SIM_PIN = 3,$/;"	e	enum:__anon70d7df6f0303	file:
SIM_PUK	guest/hals/ril/reference-ril/reference-ril.c	/^    SIM_PUK = 4,$/;"	e	enum:__anon70d7df6f0303	file:
SIM_READY	guest/hals/ril/reference-ril/reference-ril.c	/^    SIM_READY = 2,$/;"	e	enum:__anon70d7df6f0303	file:
SIM_RESET	guest/hals/ril/reference-libril/ril.h	/^    SIM_RESET = 2$/;"	e	enum:__anon0bfbaecf4003
SIM_STATUS_ABSENT	host/commands/modem_simulator/sim_service.h	/^    SIM_STATUS_ABSENT = 0,$/;"	e	enum:cuttlefish::SimService::SimStatus
SIM_STATUS_NOT_READY	host/commands/modem_simulator/sim_service.h	/^    SIM_STATUS_NOT_READY,$/;"	e	enum:cuttlefish::SimService::SimStatus
SIM_STATUS_PIN	host/commands/modem_simulator/sim_service.h	/^    SIM_STATUS_PIN,$/;"	e	enum:cuttlefish::SimService::SimStatus
SIM_STATUS_PUK	host/commands/modem_simulator/sim_service.h	/^    SIM_STATUS_PUK,$/;"	e	enum:cuttlefish::SimService::SimStatus
SIM_STATUS_READY	host/commands/modem_simulator/sim_service.h	/^    SIM_STATUS_READY,$/;"	e	enum:cuttlefish::SimService::SimStatus
SIM_Status	guest/hals/ril/reference-ril/reference-ril.c	/^} SIM_Status;$/;"	t	typeref:enum:__anon70d7df6f0303	file:
SINGLELINE	guest/hals/ril/reference-ril/atchannel.h	/^    SINGLELINE,  \/* a single intermediate response starting with a prefix *\/$/;"	e	enum:__anon512a2c1f0103
SIZE_OF_VIRTIO_NET_HDR_V1	common/libs/utils/network.cpp	/^static constexpr int SIZE_OF_VIRTIO_NET_HDR_V1 = 12;$/;"	v	namespace:cuttlefish::__anoncaae79910111	typeref:typename:int	file:
SLOT_STATE_ACTIVE	guest/hals/ril/reference-libril/ril.h	/^    SLOT_STATE_ACTIVE    = 0x01,$/;"	e	enum:__anon0bfbaecfb803
SLOT_STATE_INACTIVE	guest/hals/ril/reference-libril/ril.h	/^    SLOT_STATE_INACTIVE  = 0x00,$/;"	e	enum:__anon0bfbaecfb803
SMS	host/commands/modem_simulator/sim_service.h	/^      SMS = 1 << 3,     \/\/ short message services$/;"	e	enum:cuttlefish::SimService::FacilityLock::Class
SOCKET	host/commands/secure_env/in_process_tpm.cpp	/^typedef int SOCKET;$/;"	t	typeref:typename:int	file:
SOURCE_DEFAULT	guest/hals/ril/reference-libril/ril.h	/^    SOURCE_DEFAULT             = 1 << 3,   \/* Indicates the number is available as default.$/;"	e	enum:__anon0bfbaecfb503
SOURCE_MODEM_CONFIG	guest/hals/ril/reference-libril/ril.h	/^    SOURCE_MODEM_CONFIG        = 1 << 2,   \/* Indicates the number is from the modem config. *\/$/;"	e	enum:__anon0bfbaecfb503
SOURCE_NETWORK_SIGNALING	guest/hals/ril/reference-libril/ril.h	/^    SOURCE_NETWORK_SIGNALING   = 1 << 0,   \/* Indicates the number is from the network signal. /;"	e	enum:__anon0bfbaecfb503
SOURCE_SIM	guest/hals/ril/reference-libril/ril.h	/^    SOURCE_SIM                 = 1 << 1,   \/* Indicates the number is from the sim card. *\/$/;"	e	enum:__anon0bfbaecfb503
SO_VM_SOCKETS_BUFFER_MAX_SIZE	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_BUFFER_MAX_SIZE /;"	d
SO_VM_SOCKETS_BUFFER_MIN_SIZE	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_BUFFER_MIN_SIZE /;"	d
SO_VM_SOCKETS_BUFFER_SIZE	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_BUFFER_SIZE /;"	d
SO_VM_SOCKETS_CONNECT_TIMEOUT	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_CONNECT_TIMEOUT /;"	d
SO_VM_SOCKETS_NONBLOCK_TXRX	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_NONBLOCK_TXRX /;"	d
SO_VM_SOCKETS_PEER_HOST_VM_ID	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_PEER_HOST_VM_ID /;"	d
SO_VM_SOCKETS_TRUSTED	common/libs/fs/vm_sockets.h	/^#define SO_VM_SOCKETS_TRUSTED /;"	d
SSH_FLAGS	tools/create_base_image.go	/^var SSH_FLAGS string$/;"	v	package:main	typeref:typename:string
SSOURCE	guest/hals/ril/reference-ril/reference-ril.c	/^#define SSOURCE(/;"	d	file:
SSRSRP	guest/hals/ril/reference-libril/ril.h	/^    SSRSRP = 6,$/;"	e	enum:__anon0bfbaecf5403
SSRSRQ	guest/hals/ril/reference-libril/ril.h	/^    SSRSRQ = 7,$/;"	e	enum:__anon0bfbaecf5403
SSSINR	guest/hals/ril/reference-libril/ril.h	/^    SSSINR = 8,$/;"	e	enum:__anon0bfbaecf5403
SS_ACTIVATION	guest/hals/ril/reference-libril/ril.h	/^  SS_ACTIVATION,$/;"	e	enum:__anon0bfbaecf9603
SS_ALL_BARRING	guest/hals/ril/reference-libril/ril.h	/^  SS_ALL_BARRING,$/;"	e	enum:__anon0bfbaecf9503
SS_ALL_DATA_TELESERVICES	guest/hals/ril/reference-libril/ril.h	/^  SS_ALL_DATA_TELESERVICES,$/;"	e	enum:__anon0bfbaecf9703
SS_ALL_TELESERVICES_EXCEPT_SMS	guest/hals/ril/reference-libril/ril.h	/^  SS_ALL_TELESERVICES_EXCEPT_SMS$/;"	e	enum:__anon0bfbaecf9703
SS_ALL_TELESEVICES	guest/hals/ril/reference-libril/ril.h	/^  SS_ALL_TELESEVICES,$/;"	e	enum:__anon0bfbaecf9703
SS_ALL_TELE_AND_BEARER_SERVICES	guest/hals/ril/reference-libril/ril.h	/^  SS_ALL_TELE_AND_BEARER_SERVICES,$/;"	e	enum:__anon0bfbaecf9703
SS_BAIC	guest/hals/ril/reference-libril/ril.h	/^  SS_BAIC,$/;"	e	enum:__anon0bfbaecf9503
SS_BAIC_ROAMING	guest/hals/ril/reference-libril/ril.h	/^  SS_BAIC_ROAMING,$/;"	e	enum:__anon0bfbaecf9503
SS_BAOC	guest/hals/ril/reference-libril/ril.h	/^  SS_BAOC,$/;"	e	enum:__anon0bfbaecf9503
SS_BAOIC	guest/hals/ril/reference-libril/ril.h	/^  SS_BAOIC,$/;"	e	enum:__anon0bfbaecf9503
SS_BAOIC_EXC_HOME	guest/hals/ril/reference-libril/ril.h	/^  SS_BAOIC_EXC_HOME,$/;"	e	enum:__anon0bfbaecf9503
SS_CFU	guest/hals/ril/reference-libril/ril.h	/^  SS_CFU,$/;"	e	enum:__anon0bfbaecf9503
SS_CF_ALL	guest/hals/ril/reference-libril/ril.h	/^  SS_CF_ALL,$/;"	e	enum:__anon0bfbaecf9503
SS_CF_ALL_CONDITIONAL	guest/hals/ril/reference-libril/ril.h	/^  SS_CF_ALL_CONDITIONAL,$/;"	e	enum:__anon0bfbaecf9503
SS_CF_BUSY	guest/hals/ril/reference-libril/ril.h	/^  SS_CF_BUSY,$/;"	e	enum:__anon0bfbaecf9503
SS_CF_NOT_REACHABLE	guest/hals/ril/reference-libril/ril.h	/^  SS_CF_NOT_REACHABLE,$/;"	e	enum:__anon0bfbaecf9503
SS_CF_NO_REPLY	guest/hals/ril/reference-libril/ril.h	/^  SS_CF_NO_REPLY,$/;"	e	enum:__anon0bfbaecf9503
SS_CLIP	guest/hals/ril/reference-libril/ril.h	/^  SS_CLIP,$/;"	e	enum:__anon0bfbaecf9503
SS_CLIR	guest/hals/ril/reference-libril/ril.h	/^  SS_CLIR,$/;"	e	enum:__anon0bfbaecf9503
SS_COLP	guest/hals/ril/reference-libril/ril.h	/^  SS_COLP,$/;"	e	enum:__anon0bfbaecf9503
SS_COLR	guest/hals/ril/reference-libril/ril.h	/^  SS_COLR,$/;"	e	enum:__anon0bfbaecf9503
SS_DEACTIVATION	guest/hals/ril/reference-libril/ril.h	/^  SS_DEACTIVATION,$/;"	e	enum:__anon0bfbaecf9603
SS_ERASURE	guest/hals/ril/reference-libril/ril.h	/^  SS_ERASURE$/;"	e	enum:__anon0bfbaecf9603
SS_INCOMING_BARRING	guest/hals/ril/reference-libril/ril.h	/^  SS_INCOMING_BARRING$/;"	e	enum:__anon0bfbaecf9503
SS_INFO_MAX	guest/hals/ril/reference-libril/ril.h	/^#define SS_INFO_MAX /;"	d
SS_INTERROGATION	guest/hals/ril/reference-libril/ril.h	/^  SS_INTERROGATION,$/;"	e	enum:__anon0bfbaecf9603
SS_OUTGOING_BARRING	guest/hals/ril/reference-libril/ril.h	/^  SS_OUTGOING_BARRING,$/;"	e	enum:__anon0bfbaecf9503
SS_REGISTRATION	guest/hals/ril/reference-libril/ril.h	/^  SS_REGISTRATION,$/;"	e	enum:__anon0bfbaecf9603
SS_SMS_SERVICES	guest/hals/ril/reference-libril/ril.h	/^  SS_SMS_SERVICES,$/;"	e	enum:__anon0bfbaecf9703
SS_TELEPHONY	guest/hals/ril/reference-libril/ril.h	/^  SS_TELEPHONY,$/;"	e	enum:__anon0bfbaecf9703
SS_WAIT	guest/hals/ril/reference-libril/ril.h	/^  SS_WAIT,$/;"	e	enum:__anon0bfbaecf9503
STAGEFRIGHT_AVCENC_CFLAGS	shared/BoardConfig.mk	/^STAGEFRIGHT_AVCENC_CFLAGS := -DANDROID_GCE$/;"	m
STK_CLOSE_CHANNEL	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_CLOSE_CHANNEL = 0x41,$/;"	e	enum:__anon70d7df6f0503	file:
STK_GET_CHANNEL_STATUS	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_GET_CHANNEL_STATUS = 0x44,$/;"	e	enum:__anon70d7df6f0503	file:
STK_OPEN_CHANNEL	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_OPEN_CHANNEL  = 0x40,$/;"	e	enum:__anon70d7df6f0503	file:
STK_PLAY_TONE	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_PLAY_TONE     = 0x20,$/;"	e	enum:__anon70d7df6f0503	file:
STK_RECEIVE_DATA	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_RECEIVE_DATA  = 0x42,$/;"	e	enum:__anon70d7df6f0503	file:
STK_REFRESH	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_REFRESH       = 0x01,$/;"	e	enum:__anon70d7df6f0503	file:
STK_RUN_AT	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_RUN_AT        = 0x34,$/;"	e	enum:__anon70d7df6f0503	file:
STK_SEND_DATA	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_SEND_DATA     = 0x43,$/;"	e	enum:__anon70d7df6f0503	file:
STK_SEND_DTMF	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_SEND_DTMF     = 0x14,$/;"	e	enum:__anon70d7df6f0503	file:
STK_SEND_SMS	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_SEND_SMS      = 0x13,$/;"	e	enum:__anon70d7df6f0503	file:
STK_SEND_SS	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_SEND_SS       = 0x11,$/;"	e	enum:__anon70d7df6f0503	file:
STK_SEND_USSD	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_SEND_USSD     = 0x12,$/;"	e	enum:__anon70d7df6f0503	file:
STK_UNSOL_EVENT_NOTIFY	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_UNSOL_EVENT_NOTIFY,$/;"	e	enum:__anon70d7df6f0403	file:
STK_UNSOL_EVENT_UNKNOWN	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_UNSOL_EVENT_UNKNOWN,$/;"	e	enum:__anon70d7df6f0403	file:
STK_UNSOL_PROACTIVE_CMD	guest/hals/ril/reference-ril/reference-ril.c	/^    STK_UNSOL_PROACTIVE_CMD,$/;"	e	enum:__anon70d7df6f0403	file:
STREAMS	host/frontend/webrtc/audio_handler.cpp	/^const virtio_snd_pcm_info STREAMS[] = {{$/;"	v	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:const virtio_snd_pcm_info[]
STRIPPED_RD	host/commands/assemble_cvd/boot_image_utils.cc	/^const char STRIPPED_RD[] = "stripped_ramdisk";$/;"	v	typeref:typename:const char[]
SYSTEM_BUILD	host/libs/config/fetcher_config.h	/^  SYSTEM_BUILD,$/;"	e	enum:cuttlefish::FileSource
SampleRate	host/frontend/webrtc/audio_handler.cpp	/^int SampleRate(uint8_t virtio_rate) {$/;"	f	namespace:cuttlefish::__anon2a3d92f70111	typeref:typename:int
SapImpl	guest/hals/ril/reference-libril/sap_service.cpp	/^struct SapImpl : public android::hardware::radio::V1_1::ISap {$/;"	s	file:
SapSocketRequest	guest/hals/ril/reference-libril/RilSapSocket.h	/^    typedef struct SapSocketRequest {$/;"	s	class:RilSapSocket
SapSocketRequest	guest/hals/ril/reference-libril/RilSapSocket.h	/^    } SapSocketRequest;$/;"	t	class:RilSapSocket	typeref:struct:RilSapSocket::SapSocketRequest
SaveConfig	host/commands/assemble_cvd/assemble_cvd.cc	/^bool SaveConfig(const CuttlefishConfig& tmp_config_obj) {$/;"	f	namespace:cuttlefish::__anon1e335d460111	typeref:typename:bool
SaveFacilityLockToIccProfile	host/commands/modem_simulator/sim_service.cpp	/^void SimService::SaveFacilityLockToIccProfile() {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
SaveFile	host/commands/host_bugreport/main.cc	/^void SaveFile(ZipWriter& writer, const std::string& zip_path,$/;"	f	namespace:cuttlefish::__anond3364bd20111	typeref:typename:void
SaveFragment	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::SaveFragment(const ConfigFragment& fragment) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
SaveModemState	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::SaveModemState() {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
SavePinStateToIccProfile	host/commands/modem_simulator/sim_service.cpp	/^void SimService::SavePinStateToIccProfile() {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
SaveToFile	host/commands/modem_simulator/nvram_config.cpp	/^bool NvramConfig::SaveToFile(const std::string& file) const {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:bool
SaveToFile	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::SaveToFile() {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:void
SaveToFile	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::SaveToFile(const std::string& file) const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
SaveToFile	host/libs/config/fetcher_config.cpp	/^bool FetcherConfig::SaveToFile(const std::string& file) const {$/;"	f	class:cuttlefish::FetcherConfig	typeref:typename:bool
ScheduleToTerminate	host/libs/confui/session.cc	/^void Session::ScheduleToTerminate() {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:void
ScopedMMap	common/libs/fs/shared_fd.cpp	/^ScopedMMap::ScopedMMap() : ptr_(MAP_FAILED), len_(0) {}$/;"	f	class:cuttlefish::ScopedMMap
ScopedMMap	common/libs/fs/shared_fd.cpp	/^ScopedMMap::ScopedMMap(ScopedMMap&& other)$/;"	f	class:cuttlefish::ScopedMMap
ScopedMMap	common/libs/fs/shared_fd.cpp	/^ScopedMMap::ScopedMMap(void* ptr, size_t len) : ptr_(ptr), len_(len) {}$/;"	f	class:cuttlefish::ScopedMMap
ScopedMMap	common/libs/fs/shared_fd.h	/^class ScopedMMap {$/;"	c	namespace:cuttlefish
ScreenChanged	host/commands/kernel_log_monitor/kernel_log_server.h	/^  ScreenChanged = 6,$/;"	e	enum:monitor::Event
ScreenConnector	host/frontend/webrtc/display_handler.h	/^  using ScreenConnector = cuttlefish::ScreenConnector<WebRtcScProcessedFrame>;$/;"	t	class:cuttlefish::DisplayHandler	typeref:typename:cuttlefish::ScreenConnector<WebRtcScProcessedFrame>
ScreenConnector	host/libs/screen_connector/screen_connector.h	/^  ScreenConnector(std::unique_ptr<WaylandScreenConnector>&& impl,$/;"	f	class:cuttlefish::ScreenConnector
ScreenConnector	host/libs/screen_connector/screen_connector.h	/^class ScreenConnector : public ScreenConnectorInfo,$/;"	c	namespace:cuttlefish
ScreenConnectorCtrl	host/libs/screen_connector/screen_connector_ctrl.h	/^  ScreenConnectorCtrl() : atomic_mode_(ModeType::kAndroidMode) {}$/;"	f	class:cuttlefish::ScreenConnectorCtrl
ScreenConnectorCtrl	host/libs/screen_connector/screen_connector_ctrl.h	/^class ScreenConnectorCtrl {$/;"	c	namespace:cuttlefish
ScreenConnectorFrameInfo	host/libs/screen_connector/screen_connector_common.h	/^struct ScreenConnectorFrameInfo {$/;"	s	namespace:cuttlefish
ScreenConnectorFrameRenderer	host/libs/screen_connector/screen_connector_common.h	/^struct ScreenConnectorFrameRenderer {$/;"	s	namespace:cuttlefish
ScreenConnectorInfo	host/libs/screen_connector/screen_connector_common.h	/^struct ScreenConnectorInfo {$/;"	s	namespace:cuttlefish
ScreenConnectorInputMultiplexer	host/libs/screen_connector/screen_connector_multiplexer.h	/^  ScreenConnectorInputMultiplexer(HostModeCtrl& host_mode_ctrl)$/;"	f	class:cuttlefish::ScreenConnectorInputMultiplexer
ScreenConnectorInputMultiplexer	host/libs/screen_connector/screen_connector_multiplexer.h	/^class ScreenConnectorInputMultiplexer {$/;"	c	namespace:cuttlefish
ScreenConnectorQueue	host/libs/screen_connector/screen_connector_queue.h	/^  ScreenConnectorQueue(const int q_max_size = 2)$/;"	f	class:cuttlefish::ScreenConnectorQueue
ScreenConnectorQueue	host/libs/screen_connector/screen_connector_queue.h	/^class ScreenConnectorQueue {$/;"	c	namespace:cuttlefish
ScreenCount	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ScreenCount() {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
ScreenHeight	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ScreenHeight(std::uint32_t display_number) {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
ScreenSizeInBytes	host/libs/confui/host_renderer.h	/^  static std::uint32_t ScreenSizeInBytes(const int w, const int h) {$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:std::uint32_t
ScreenSizeInBytes	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ScreenSizeInBytes(const std::uint32_t display_number) {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
ScreenStrideBytes	host/libs/confui/host_renderer.h	/^  std::uint32_t ScreenStrideBytes() const {$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:std::uint32_t
ScreenStrideBytes	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ScreenStrideBytes(const std::uint32_t display_number) {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
ScreenWidth	host/libs/screen_connector/screen_connector_common.h	/^  static std::uint32_t ScreenWidth(std::uint32_t display_number) {$/;"	f	struct:cuttlefish::ScreenConnectorInfo	typeref:typename:std::uint32_t
SecureEnvComponent	host/commands/secure_env/secure_env.cpp	/^fruit::Component<Tpm> SecureEnvComponent() {$/;"	f	namespace:cuttlefish::__anon0a6d9b510111	typeref:typename:fruit::Component<Tpm>
SecureEnvMain	host/commands/secure_env/secure_env.cpp	/^int SecureEnvMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
SecureEnvironment	host/commands/run_cvd/launch.cc	/^class SecureEnvironment : public CommandSource {$/;"	c	namespace:cuttlefish	file:
SecureHal	host/libs/config/cuttlefish_config.h	/^enum class SecureHal {$/;"	g	namespace:cuttlefish
Security	host/frontend/webrtc/lib/ws_connection.h	/^  enum class Security {$/;"	g	class:WsConnection
SecurityLevel	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^keymaster_security_level_t TpmKeymasterEnforcement::SecurityLevel() const {$/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:keymaster_security_level_t
SegmentedHmac	host/commands/secure_env/tpm_hmac.cpp	/^static UniqueEsysPtr<TPM2B_DIGEST> SegmentedHmac($/;"	f	namespace:cuttlefish	typeref:typename:UniqueEsysPtr<TPM2B_DIGEST>	file:
Select	common/libs/fs/shared_fd.cpp	/^int Select(SharedFDSet* read_set, SharedFDSet* write_set,$/;"	f	namespace:cuttlefish	typeref:typename:int
SemPost	common/libs/concurrency/semaphore.h	/^  void SemPost() {$/;"	f	class:cuttlefish::Semaphore	typeref:typename:void
SemPost	host/libs/screen_connector/screen_connector_ctrl.h	/^  void SemPost() { sem_.SemPost(); }$/;"	f	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:void
SemWait	common/libs/concurrency/multiplexer.h	/^  void SemWait() { sem_items_.SemWait(); }$/;"	f	class:cuttlefish::Multiplexer	typeref:typename:void
SemWait	common/libs/concurrency/semaphore.h	/^  void SemWait() {$/;"	f	class:cuttlefish::Semaphore	typeref:typename:void
SemWait	host/libs/screen_connector/screen_connector_ctrl.h	/^  void SemWait() { sem_.SemWait(); }$/;"	f	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:void
Semaphore	common/libs/concurrency/semaphore.h	/^  Semaphore(const unsigned int init_val = 0, const unsigned int cap = 30000)$/;"	f	class:cuttlefish::Semaphore
Semaphore	common/libs/concurrency/semaphore.h	/^class Semaphore {$/;"	c	namespace:cuttlefish
Send	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::Send(const void* buf, size_t len, int flags) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
Send	common/libs/net/netlink_client.cpp	/^bool NetlinkClientImpl::Send(const NetlinkRequest& message) {$/;"	f	class:cuttlefish::__anon61381e100111::NetlinkClientImpl	typeref:typename:bool
Send	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^gatekeeper_error_t RemoteGateKeeperDevice::Send(uint32_t command, const GateKeeperMessage& reque/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:gatekeeper_error_t
Send	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^    gatekeeper_error_t Send(const EnrollRequest& request, EnrollResponse *response) {$/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:gatekeeper_error_t
Send	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^    gatekeeper_error_t Send(const VerifyRequest& request, VerifyResponse *response) {$/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:gatekeeper_error_t
Send	host/frontend/webrtc/lib/client_handler.cpp	/^void ControlChannelHandler::Send(const Json::Value& message) {$/;"	f	class:cuttlefish::webrtc_streaming::ControlChannelHandler	typeref:typename:void
Send	host/frontend/webrtc/lib/client_handler.cpp	/^void ControlChannelHandler::Send(const uint8_t *msg, size_t size, bool binary) {$/;"	f	class:cuttlefish::webrtc_streaming::ControlChannelHandler	typeref:typename:void
Send	host/frontend/webrtc/lib/ws_connection.cpp	/^bool WsConnectionImpl::Send(const uint8_t* data, size_t len, bool binary) {$/;"	f	class:WsConnectionImpl	typeref:typename:bool
Send	host/libs/msg_queue/msg_queue.cc	/^int SysVMessageQueue::Send(void* data, size_t size, bool block) {$/;"	f	class:cuttlefish::SysVMessageQueue	typeref:typename:int
SendAbortCmd	common/libs/confui/protocol.cpp	/^bool SendAbortCmd(SharedFD fd, const std::string& session_id) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
SendAck	common/libs/confui/protocol.cpp	/^bool SendAck(SharedFD fd, const std::string& session_id, const bool is_success,$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
SendAll	common/frontend/socket_vsock_proxy/main.cpp	/^  ssize_t SendAll(const char* packet, ssize_t length) {$/;"	f	class:__anon913036200111::SocketSender	typeref:typename:ssize_t	file:
SendAll	common/libs/fs/shared_buf.cc	/^bool SendAll(SharedFD sock, const std::string& msg) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
SendAll	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^bool SendAll(cuttlefish::SharedFD sock, const std::string& msg) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:bool
SendCallStatusToRemote	host/commands/modem_simulator/call_service.cpp	/^void CallService::SendCallStatusToRemote(CallStatus& call,$/;"	f	class:cuttlefish::CallService	typeref:typename:void
SendClientDisconnectMessage	host/frontend/webrtc_operator/device_handler.cpp	/^void DeviceHandler::SendClientDisconnectMessage(size_t client_id) {$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:void
SendClientMessage	host/frontend/webrtc_operator/device_handler.cpp	/^void DeviceHandler::SendClientMessage(size_t client_id,$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:void
SendCommand	host/commands/modem_simulator/unittest/service_test.cpp	/^  void SendCommand(std::string command, std::string prefix = "") {$/;"	f	class:ModemServiceTest	typeref:typename:void	file:
SendCommandResponse	host/commands/modem_simulator/channel_monitor.cpp	/^void Client::SendCommandResponse($/;"	f	class:cuttlefish::Client	typeref:typename:void
SendCommandResponse	host/commands/modem_simulator/channel_monitor.cpp	/^void Client::SendCommandResponse(std::string response) const {$/;"	f	class:cuttlefish::Client	typeref:typename:void
SendCommandToRemote	host/commands/modem_simulator/modem_service.cpp	/^void ModemService::SendCommandToRemote(cuttlefish::SharedFD remote_client, std::string response)/;"	f	class:cuttlefish::ModemService	typeref:typename:void
SendDeviceConfig	common/libs/device_config/device_config.cpp	/^bool DeviceConfigHelper::SendDeviceConfig(SharedFD fd) {$/;"	f	class:cuttlefish::DeviceConfigHelper	typeref:typename:bool
SendDeviceMessage	host/frontend/webrtc_operator/client_handler.cpp	/^  void SendDeviceMessage(const Json::Value& message) override {$/;"	f	class:cuttlefish::PollConnectionHandler	typeref:typename:void	file:
SendDeviceMessage	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientWSHandler::SendDeviceMessage(const Json::Value& device_message) {$/;"	f	class:cuttlefish::ClientWSHandler	typeref:typename:void
SendEvent	host/libs/audio_connector/server.cpp	/^bool AudioClientConnection::SendEvent(\/*TODO*\/) { return false; }$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:bool
SendExitCode	host/commands/run_cvd/boot_state_machine.cc	/^  void SendExitCode(RunnerExitCodes exit_code, SharedFD fd) {$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:void	file:
SendFileDescriptors	common/libs/fs/shared_fd.h	/^  ssize_t SendFileDescriptors(const void* buf, size_t len, Args&&... sent_fds) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
SendJson	host/frontend/webrtc/lib/streamer.cpp	/^void SendJson(WsConnection* ws_conn, const Json::Value& data) {$/;"	f	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:void
SendJsonMsg	host/libs/allocd/utils.cpp	/^bool SendJsonMsg(SharedFD client_socket, const Json::Value& resp) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
SendLastFrame	host/frontend/webrtc/display_handler.cpp	/^void DisplayHandler::SendLastFrame() {$/;"	f	class:cuttlefish::DisplayHandler	typeref:typename:void
SendMessage	common/libs/security/gatekeeper_channel.cpp	/^bool GatekeeperChannel::SendMessage($/;"	f	class:cuttlefish::GatekeeperChannel	typeref:typename:bool
SendMessage	common/libs/security/keymaster_channel.cpp	/^bool KeymasterChannel::SendMessage($/;"	f	class:cuttlefish::KeymasterChannel	typeref:typename:bool
SendMessage	host/frontend/webrtc/lib/camera_controller.h	/^  virtual void SendMessage(const Json::Value& msg) {$/;"	f	class:cuttlefish::CameraController	typeref:typename:void
SendMessage	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^bool WmediumdController::SendMessage(const WmediumdMessage& message) {$/;"	f	class:cuttlefish::WmediumdController	typeref:typename:bool
SendMessageToClient	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::SendMessageToClient(int client_id,$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
SendMsg	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::SendMsg(const struct msghdr* msg, int flags) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
SendNmea	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    Status SendNmea(ServerContext* context, const SendNmeaRequest* request,$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:Status	file:
SendNmea	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^  rpc SendNmea (SendNmeaRequest) returns (SendNmeaReply) {}$/;"	r	service:gnss_grpc_proxy.GnssGrpcProxy	typeref:typename:SendNmeaReply
SendNmeaReply	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^message SendNmeaReply {$/;"	m	package:gnss_grpc_proxy
SendNmeaRequest	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^message SendNmeaRequest {$/;"	m	package:gnss_grpc_proxy
SendNoSignal	common/libs/utils/tcp_socket.cpp	/^ssize_t ClientSocket::SendNoSignal(const Message& message) {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:ssize_t
SendNoSignal	common/libs/utils/tcp_socket.cpp	/^ssize_t ClientSocket::SendNoSignal(const uint8_t* data, std::size_t size) {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:ssize_t
SendNoSignal	common/libs/utils/tcp_socket.h	/^  ssize_t SendNoSignal(const std::uint8_t (&data)[N]) {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:ssize_t
SendOver	common/libs/confui/protocol_types.cpp	/^bool ConfUiAckMessage::SendOver(SharedFD fd) {$/;"	f	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:bool
SendOver	common/libs/confui/protocol_types.cpp	/^bool ConfUiCliResponseMessage::SendOver(SharedFD fd) {$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:bool
SendOver	common/libs/confui/protocol_types.cpp	/^bool ConfUiStartMessage::SendOver(SharedFD fd) {$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:bool
SendOver	common/libs/confui/protocol_types.cpp	/^bool ConfUiUserSelectionMessage::SendOver(SharedFD fd) {$/;"	f	class:cuttlefish::confui::ConfUiUserSelectionMessage	typeref:typename:bool
SendOver	common/libs/confui/protocol_types.cpp	/^bool ConfUiUserTouchMessage::SendOver(SharedFD fd) {$/;"	f	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:bool
SendOver	common/libs/confui/protocol_types.h	/^  bool SendOver(SharedFD fd) override {$/;"	f	class:cuttlefish::confui::ConfUiGenericMessage	typeref:typename:bool
SendRemoteCommand	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::SendRemoteCommand(cuttlefish::SharedFD client, std::string& response) {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
SendRequest	common/libs/security/gatekeeper_channel.cpp	/^bool GatekeeperChannel::SendRequest($/;"	f	class:cuttlefish::GatekeeperChannel	typeref:typename:bool
SendRequest	common/libs/security/keymaster_channel.cpp	/^bool KeymasterChannel::SendRequest($/;"	f	class:cuttlefish::KeymasterChannel	typeref:typename:bool
SendResponse	common/libs/confui/protocol.cpp	/^bool SendResponse(SharedFD fd, const std::string& session_id,$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
SendResponse	common/libs/security/gatekeeper_channel.cpp	/^bool GatekeeperChannel::SendResponse($/;"	f	class:cuttlefish::GatekeeperChannel	typeref:typename:bool
SendResponse	common/libs/security/keymaster_channel.cpp	/^bool KeymasterChannel::SendResponse($/;"	f	class:cuttlefish::KeymasterChannel	typeref:typename:bool
SendServerConfig	host/frontend/webrtc_operator/signal_handler.cpp	/^void SignalHandler::SendServerConfig() {$/;"	f	class:cuttlefish::SignalHandler	typeref:typename:void
SendSmsToRemote	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::SendSmsToRemote(std::string remote_port, PDUParser& sms_pdu) {$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
SendStartCmd	common/libs/confui/protocol.cpp	/^bool SendStartCmd(SharedFD fd, const std::string& session_id,$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
SendStatus	host/libs/audio_connector/buffers.cpp	/^void ShmBuffer::SendStatus(AudioStatus status, uint32_t latency_bytes,$/;"	f	class:cuttlefish::ShmBuffer	typeref:typename:void
SendStatusCallback	host/libs/audio_connector/server.cpp	/^std::function<void(AudioStatus, uint32_t, uint32_t)> SendStatusCallback($/;"	f	namespace:cuttlefish::__anon8078843e0111	typeref:typename:std::function<void (AudioStatus,uint32_t,uint32_t)>
SendStopCmd	common/libs/confui/protocol.cpp	/^bool SendStopCmd(SharedFD fd, const std::string& session_id) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
SendUnsolicitedCommand	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::SendUnsolicitedCommand(std::string& response) {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
SendUnsolicitedCommand	host/commands/modem_simulator/modem_service.cpp	/^void ModemService::SendUnsolicitedCommand(std::string unsol_command) {$/;"	f	class:cuttlefish::ModemService	typeref:typename:void
SendUserSelection	common/libs/confui/protocol.cpp	/^bool SendUserSelection(SharedFD fd, const std::string& session_id,$/;"	f	namespace:cuttlefish::confui	typeref:typename:bool
SendUserSelection	host/libs/confui/host_server.cc	/^void HostServer::SendUserSelection(std::unique_ptr<ConfUiMessage>& input) {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
Send_	common/libs/confui/protocol_types.h	/^  static bool Send_(SharedFD fd, const ConfUiCmd cmd,$/;"	f	class:cuttlefish::confui::ConfUiMessage	typeref:typename:bool
SeqNo	common/libs/net/netlink_request.cpp	/^uint32_t NetlinkRequest::SeqNo() const {$/;"	f	class:cuttlefish::NetlinkRequest	typeref:typename:uint32_t
Serial	host/commands/modem_simulator/thread_looper.h	/^  typedef int32_t Serial;$/;"	t	class:cuttlefish::ThreadLooper	typeref:typename:int32_t
SerializableToKeyBlob	host/commands/secure_env/tpm_key_blob_maker.cpp	/^static KeymasterKeyBlob SerializableToKeyBlob($/;"	f	namespace:cuttlefish	typeref:typename:KeymasterKeyBlob	file:
Serialize	host/commands/secure_env/composite_serialization.cpp	/^uint8_t* CompositeSerializable::Serialize($/;"	f	class:cuttlefish::CompositeSerializable	typeref:typename:uint8_t *
Serialize	host/commands/secure_env/encrypted_serializable.cpp	/^uint8_t* EncryptedSerializable::Serialize($/;"	f	class:cuttlefish::EncryptedSerializable	typeref:typename:uint8_t *
Serialize	host/commands/secure_env/hmac_serializable.cpp	/^uint8_t* HmacSerializable::Serialize(uint8_t* buf, const uint8_t* end) const {$/;"	f	class:cuttlefish::HmacSerializable	typeref:typename:uint8_t *
Serialize	host/commands/secure_env/json_serializable.cpp	/^uint8_t* JsonSerializable::Serialize(uint8_t* buf, const uint8_t* end) const {$/;"	f	class:cuttlefish::JsonSerializable	typeref:typename:uint8_t *
Serialize	host/commands/secure_env/tpm_serialize.cpp	/^uint8_t* TpmSerializable<T>::Serialize(uint8_t* buf, const uint8_t* end) const {$/;"	f	class:cuttlefish::TpmSerializable	typeref:typename:uint8_t *
Serialize	host/libs/config/adb/config.cpp	/^  Json::Value Serialize() const override {$/;"	f	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	typeref:typename:Json::Value	file:
Serialize	host/libs/config/custom_actions.cpp	/^  Json::Value Serialize() const override {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:Json::Value	file:
Serialize	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^std::string WmediumdMessage::Serialize(void) const {$/;"	f	class:cuttlefish::WmediumdMessage	typeref:typename:std::string
SerializeBody	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^void WmediumdMessageReloadConfig::SerializeBody(std::string& buf) const {$/;"	f	class:cuttlefish::WmediumdMessageReloadConfig	typeref:typename:void
SerializeBody	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^void WmediumdMessageSetControl::SerializeBody(std::string& buf) const {$/;"	f	class:cuttlefish::WmediumdMessageSetControl	typeref:typename:void
SerializeBody	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^void WmediumdMessageSetSnr::SerializeBody(std::string& buf) const {$/;"	f	class:cuttlefish::WmediumdMessageSetSnr	typeref:typename:void
SerializeBody	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  virtual void SerializeBody(std::string&) const {};$/;"	f	class:cuttlefish::WmediumdMessage	typeref:typename:void
SerializeTpmKeyPrivate	host/commands/secure_env/tpm_serialize.h	/^using SerializeTpmKeyPrivate = TpmSerializable<TPM2B_PRIVATE>;$/;"	t	namespace:cuttlefish	typeref:typename:TpmSerializable<TPM2B_PRIVATE>
SerializeTpmKeyPublic	host/commands/secure_env/tpm_serialize.h	/^using SerializeTpmKeyPublic = TpmSerializable<TPM2B_PUBLIC>;$/;"	t	namespace:cuttlefish	typeref:typename:TpmSerializable<TPM2B_PUBLIC>
SerializedSend	guest/hals/confirmationui/guest_session.h	/^    bool SerializedSend(F&& f, cuttlefish::SharedFD fd, Args&&... args) {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:bool
SerializedSize	host/commands/secure_env/composite_serialization.cpp	/^size_t CompositeSerializable::SerializedSize() const {$/;"	f	class:cuttlefish::CompositeSerializable	typeref:typename:size_t
SerializedSize	host/commands/secure_env/encrypted_serializable.cpp	/^size_t EncryptedSerializable::SerializedSize() const {$/;"	f	class:cuttlefish::EncryptedSerializable	typeref:typename:size_t
SerializedSize	host/commands/secure_env/hmac_serializable.cpp	/^size_t HmacSerializable::SerializedSize() const {$/;"	f	class:cuttlefish::HmacSerializable	typeref:typename:size_t
SerializedSize	host/commands/secure_env/json_serializable.cpp	/^size_t JsonSerializable::SerializedSize() const {$/;"	f	class:cuttlefish::JsonSerializable	typeref:typename:size_t
SerializedSize	host/commands/secure_env/tpm_serialize.cpp	/^size_t TpmSerializable<T>::SerializedSize() const {$/;"	f	class:cuttlefish::TpmSerializable	typeref:typename:size_t
Serve	host/libs/websocket/websocket_server.cpp	/^void WebSocketServer::Serve() {$/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:void
ServerCallback	host/libs/websocket/websocket_server.cpp	/^int WebSocketServer::ServerCallback(struct lws* wsi,$/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:int
ServerConfig	host/frontend/webrtc_operator/server_config.cpp	/^ServerConfig::ServerConfig(const std::vector<std::string>& stuns)$/;"	f	class:cuttlefish::ServerConfig
ServerConfig	host/frontend/webrtc_operator/server_config.h	/^class ServerConfig {$/;"	c	namespace:cuttlefish
ServerFdsFromCmdline	host/commands/modem_simulator/main.cpp	/^std::vector<cuttlefish::SharedFD> ServerFdsFromCmdline() {$/;"	f	typeref:typename:std::vector<cuttlefish::SharedFD>
ServerLoop	host/commands/run_cvd/server_loop.h	/^class ServerLoop {$/;"	c	namespace:cuttlefish
ServerLoop	host/libs/wayland/wayland_server.cpp	/^void WaylandServer::ServerLoop(int fd) {$/;"	f	class:wayland::WaylandServer	typeref:typename:void
ServerLoopImpl	host/commands/run_cvd/server_loop.cpp	/^class ServerLoopImpl : public ServerLoop, public Feature {$/;"	c	namespace:cuttlefish::__anon527e8bd40111	file:
ServerShutdown	common/libs/utils/vsock_connection.cpp	/^void VsockServerConnection::ServerShutdown() {$/;"	f	class:cuttlefish::VsockServerConnection	typeref:typename:void
ServerSocket	common/libs/utils/tcp_socket.cpp	/^ServerSocket::ServerSocket(int port)$/;"	f	class:cuttlefish::ServerSocket
ServerSocket	common/libs/utils/tcp_socket.h	/^class ServerSocket {$/;"	c	namespace:cuttlefish
Session	host/libs/allocd/resource_manager.h	/^  explicit Session(uint32_t session_id, uid_t uid)$/;"	f	class:cuttlefish::Session
Session	host/libs/allocd/resource_manager.h	/^class Session {$/;"	c	namespace:cuttlefish
Session	host/libs/confui/session.cc	/^Session::Session(const std::string& session_name,$/;"	f	class:cuttlefish::confui::Session
Session	host/libs/confui/session.h	/^class Session {$/;"	c	namespace:cuttlefish::confui
Set	common/libs/fs/shared_fd.cpp	/^void FileInstance::Set(fd_set* dest, int* max_index) const {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:void
Set	common/libs/fs/shared_select.h	/^  void Set(const SharedFD& in) {$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:void
Set	common/libs/utils/shared_fd_flag.cpp	/^static bool Set(const FlagMatch& match, SharedFD& out) {$/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
Set	host/libs/confui/host_utils.cc	/^void Set(const std::string& name, const std::thread::id tid) {$/;"	f	namespace:cuttlefish::confui::thread	typeref:typename:void
Set	host/libs/confui/host_utils.cc	/^void ThreadTracer::Set(const std::string& name, const std::thread::id tid) {$/;"	f	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:void
SetAddress	common/libs/net/network_interface.h	/^  NetworkInterface& SetAddress(const std::string& address) {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:NetworkInterface &
SetBinary	host/libs/vm_manager/crosvm_builder.cpp	/^void CrosvmBuilder::SetBinary(const std::string& binary) {$/;"	f	class:cuttlefish::CrosvmBuilder	typeref:typename:void
SetBootPatchlevel	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t SetBootPatchlevel(uint32_t boot_patchlevel) override {$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
SetBootPatchlevel	host/commands/secure_env/tpm_key_blob_maker.cpp	/^keymaster_error_t TpmKeyBlobMaker::SetBootPatchlevel(uint32_t boot_patchlevel) {$/;"	f	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:keymaster_error_t
SetBootPatchlevel	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::SetBootPatchlevel($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
SetBroadcastAddress	common/libs/net/network_interface.h	/^  NetworkInterface& SetBroadcastAddress(const std::string& address) {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:NetworkInterface &
SetCallActive	host/commands/modem_simulator/call_service.h	/^    bool SetCallActive() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
SetCallBackground	host/commands/modem_simulator/call_service.h	/^    bool SetCallBackground() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
SetCallback	host/libs/screen_connector/screen_connector.h	/^  void SetCallback(GenerateProcessedFrameCallback&& frame_callback) {$/;"	f	class:cuttlefish::ScreenConnector	typeref:typename:void
SetCameraHandler	host/frontend/webrtc/connection_observer.cpp	/^void CfConnectionObserverFactory::SetCameraHandler($/;"	f	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:void
SetClientId	host/frontend/webrtc_operator/client_handler.cpp	/^  void SetClientId(size_t client_id) { client_id_ = client_id; }$/;"	f	class:cuttlefish::PollConnectionHandler	typeref:typename:void	file:
SetControl	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^bool WmediumdController::SetControl(const uint32_t flags) {$/;"	f	class:cuttlefish::WmediumdController	typeref:typename:bool
SetDefaultFlagsForCrosvm	host/commands/assemble_cvd/flags.cc	/^void SetDefaultFlagsForCrosvm() {$/;"	f	namespace:cuttlefish	typeref:typename:void
SetDefaultFlagsForQemu	host/commands/assemble_cvd/flags.cc	/^void SetDefaultFlagsForQemu(Arch target_arch) {$/;"	f	namespace:cuttlefish	typeref:typename:void
SetDeviceContext	host/libs/confui/host_renderer.cc	/^void ConfUiRenderer::SetDeviceContext(const unsigned long long w,$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:void
SetDeviceHandler	host/frontend/webrtc_operator/client_handler.cpp	/^  void SetDeviceHandler(std::weak_ptr<DeviceHandler> device_handler) {$/;"	f	class:cuttlefish::PollConnectionHandler	typeref:typename:void	file:
SetDisconnectCallback	common/libs/utils/vsock_connection.cpp	/^void VsockConnection::SetDisconnectCallback(std::function<void()> callback) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:void
SetDisplayHandler	host/frontend/webrtc/connection_observer.cpp	/^void CfConnectionObserverFactory::SetDisplayHandler($/;"	f	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:void
SetEnvironment	common/libs/utils/subprocess.h	/^  void SetEnvironment(const std::vector<std::string>& env) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
SetExecutable	common/libs/utils/subprocess.h	/^  void SetExecutable(const std::string& executable) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
SetFrameCallback	host/libs/screen_connector/wayland_screen_connector.cpp	/^void WaylandScreenConnector::SetFrameCallback($/;"	f	class:cuttlefish::WaylandScreenConnector	typeref:typename:void
SetFrameCallback	host/libs/wayland/wayland_server.cpp	/^void WaylandServer::SetFrameCallback(Surfaces::FrameCallback callback) {$/;"	f	class:wayland::WaylandServer	typeref:typename:void
SetFrameCallback	host/libs/wayland/wayland_surfaces.cpp	/^void Surfaces::SetFrameCallback(FrameCallback callback) {$/;"	f	class:wayland::Surfaces	typeref:typename:void
SetHardwareSpec	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::SetHardwareSpec(std::string key, std::string value) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
SetHardwareSpec	host/frontend/webrtc/lib/streamer.h	/^  void SetHardwareSpec(std::string key, V value) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
SetHasIpv4	host/libs/allocd/resource.h	/^  void SetHasIpv4(bool ipv4) { has_ipv4_ = ipv4; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:void
SetHasIpv6	host/libs/allocd/resource.h	/^  void SetHasIpv6(bool ipv6) { has_ipv6_ = ipv6; }$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:void
SetMessageSender	host/frontend/webrtc/lib/camera_controller.h	/^  virtual void SetMessageSender($/;"	f	class:cuttlefish::CameraController	typeref:typename:void
SetMicrophoneMute	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetMicrophoneMute(bool enable) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetMicrophoneVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetMicrophoneVolume(uint32_t volume) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetMode	host/libs/confui/host_mode_ctrl.h	/^  void SetMode(const ModeType mode) {$/;"	f	class:cuttlefish::HostModeCtrl	typeref:typename:void
SetMode	host/libs/screen_connector/screen_connector_ctrl.h	/^  void SetMode(const ModeType mode) {$/;"	f	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:void
SetModes	host/libs/config/adb/data.cpp	/^  bool SetModes(const std::set<AdbMode>& modes) override {$/;"	f	class:cuttlefish::AdbConfigImpl	typeref:typename:bool	file:
SetModes	host/libs/config/adb/data.cpp	/^  bool SetModes(std::set<AdbMode>&& modes) override {$/;"	f	class:cuttlefish::AdbConfigImpl	typeref:typename:bool	file:
SetName	common/libs/net/network_interface.h	/^  NetworkInterface& SetName(const std::string& new_name) {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:NetworkInterface &
SetOperational	common/libs/net/network_interface.h	/^  NetworkInterface& SetOperational(bool is_operational) {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:NetworkInterface &
SetPath	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::SetPath(const std::string& key,$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
SetPeerConnection	host/frontend/webrtc/lib/client_handler.cpp	/^bool ClientHandler::SetPeerConnection($/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:bool
SetPlayoutDevice	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetPlayoutDevice(WindowsDeviceType device) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetPlayoutDevice	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetPlayoutDevice(uint16_t index) { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetPrefixLength	common/libs/net/network_interface.h	/^  NetworkInterface& SetPrefixLength(int len) {$/;"	f	class:cuttlefish::NetworkInterface	typeref:typename:NetworkInterface &
SetRecordingDevice	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetRecordingDevice(WindowsDeviceType device) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetRecordingDevice	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetRecordingDevice(uint16_t index) { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetRegion	host/libs/wayland/wayland_surface.cpp	/^void Surface::SetRegion(const Region& region) {$/;"	f	class:wayland::Surface	typeref:typename:void
SetRemoteClient	host/commands/modem_simulator/channel_monitor.cpp	/^void ChannelMonitor::SetRemoteClient(cuttlefish::SharedFD client, bool is_accepted) {$/;"	f	class:cuttlefish::ChannelMonitor	typeref:typename:void
SetRemoteClient	host/commands/modem_simulator/modem_simulator.h	/^  void SetRemoteClient(cuttlefish::SharedFD client, bool is_accepted) {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
SetRunConnector	host/libs/config/adb/data.cpp	/^  bool SetRunConnector(bool run) override {$/;"	f	class:cuttlefish::AdbConfigImpl	typeref:typename:bool	file:
SetSessionId	common/libs/confui/protocol_types.h	/^  void SetSessionId(const std::string session_id) { session_id_ = session_id; }$/;"	f	class:cuttlefish::confui::ConfUiMessage	typeref:typename:void
SetSignalStrengthValue	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::SetSignalStrengthValue(int& value,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
SetSnr	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^bool WmediumdController::SetSnr(const std::string& node1,$/;"	f	class:cuttlefish::WmediumdController	typeref:typename:bool
SetSockOpt	common/libs/fs/shared_fd.cpp	/^int FileInstance::SetSockOpt(int level, int optname, const void* optval,$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
SetSocketLocation	host/libs/allocd/resource_manager.cpp	/^void ResourceManager::SetSocketLocation(const std::string& sock_name) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:void
SetSpeakerMute	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetSpeakerMute(bool enable) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetSpeakerVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetSpeakerVolume(uint32_t volume) { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetStereoPlayout	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetStereoPlayout(bool enable) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetStereoRecording	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SetStereoRecording(bool enable) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SetStopper	common/libs/utils/subprocess.h	/^  void SetStopper(SubprocessStopper stopper) { subprocess_stopper_ = stopper; }$/;"	f	class:cuttlefish::Command	typeref:typename:void
SetStreamParameters	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::SetStreamParameters(StreamSetParamsCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
SetSuperPartitionComponents	host/commands/assemble_cvd/misc_info.cc	/^bool SetSuperPartitionComponents(const std::vector<std::string>& components,$/;"	f	namespace:cuttlefish	typeref:typename:bool
SetSystemVersion	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t SetSystemVersion(uint32_t os_version,$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
SetSystemVersion	host/commands/secure_env/tpm_key_blob_maker.cpp	/^keymaster_error_t TpmKeyBlobMaker::SetSystemVersion($/;"	f	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:keymaster_error_t
SetSystemVersion	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::SetSystemVersion($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
SetTerminalRaw	common/libs/fs/shared_fd.cpp	/^int FileInstance::SetTerminalRaw() {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
SetTerminalRaw	guest/hals/bt/remote/remote_bluetooth.cpp	/^int SetTerminalRaw(int fd) {$/;"	f	namespace:__anonb7fa39a50111	typeref:typename:int
SetText	host/libs/confui/host_renderer.h	/^  auto SetText(const std::string& text) {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:auto
SetTimeZone	host/commands/modem_simulator/misc_service.cpp	/^void MiscService::SetTimeZone(std::string timezone) {$/;"	f	class:cuttlefish::MiscService	typeref:typename:void
SetTimeZone	host/commands/modem_simulator/modem_simulator.cpp	/^void ModemSimulator::SetTimeZone(std::string timezone) {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:void
SetUp	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^bool VirtualDeviceBase::SetUp() {$/;"	f	class:VirtualDeviceBase	typeref:typename:bool
SetUpDevices	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^bool VSoCInputService::SetUpDevices() {$/;"	f	class:VSoCInputService	typeref:typename:bool
SetUpTestSuite	host/commands/modem_simulator/unittest/service_test.cpp	/^  static void SetUpTestSuite() {$/;"	f	class:ModemServiceTest	typeref:typename:void	file:
SetUseEbtablesLegacy	host/libs/allocd/resource.h	/^  void SetUseEbtablesLegacy(bool use_legacy) {$/;"	f	class:cuttlefish::EthernetIface	typeref:typename:void
SetUseEbtablesLegacy	host/libs/allocd/resource_manager.cpp	/^void ResourceManager::SetUseEbtablesLegacy(bool use_legacy) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:void
SetUseIpv4Bridge	host/libs/allocd/resource_manager.h	/^  void SetUseIpv4Bridge(bool ipv4) { use_ipv4_bridge_ = ipv4; }$/;"	f	struct:cuttlefish::ResourceManager	typeref:typename:void
SetUseIpv6Bridge	host/libs/allocd/resource_manager.h	/^  void SetUseIpv6Bridge(bool ipv6) { use_ipv6_bridge_ = ipv6; }$/;"	f	struct:cuttlefish::ResourceManager	typeref:typename:void
SetVendorPatchlevel	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t SetVendorPatchlevel(uint32_t vendor_patchlevel) override {$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
SetVendorPatchlevel	host/commands/secure_env/tpm_key_blob_maker.cpp	/^keymaster_error_t TpmKeyBlobMaker::SetVendorPatchlevel(uint32_t patchlevel) {$/;"	f	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:keymaster_error_t
SetVendorPatchlevel	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::SetVendorPatchlevel($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
SetVideoTrack	host/frontend/webrtc/lib/client_handler.cpp	/^  void SetVideoTrack(webrtc::VideoTrackInterface *track) {$/;"	f	class:cuttlefish::webrtc_streaming::ClientVideoTrackImpl	typeref:typename:void	file:
SetVirtioGpuScanoutId	host/libs/wayland/wayland_surface.cpp	/^void Surface::SetVirtioGpuScanoutId(uint32_t scanout_id) {$/;"	f	class:wayland::Surface	typeref:typename:void
SetVolume	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::SetVolume(double volume) {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
Setter	common/libs/utils/flag_parser.cpp	/^Flag Flag::Setter(std::function<bool(const FlagMatch&)> fn) && {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag
Setter	common/libs/utils/flag_parser.cpp	/^Flag& Flag::Setter(std::function<bool(const FlagMatch&)> fn) & {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag &
Settings	guest/hals/camera/vsock_camera_device_3_4.h	/^  using Settings = struct {$/;"	t	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice
Setup	host/commands/assemble_cvd/disk_flags.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::BootImageRepacker	typeref:typename:bool	file:
Setup	host/commands/assemble_cvd/disk_flags.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::InitializeMetadataImage	typeref:typename:bool	file:
Setup	host/commands/assemble_cvd/disk_flags.cc	/^  bool Setup() {$/;"	f	class:cuttlefish::InitializeAccessKregistryImage	typeref:typename:bool	file:
Setup	host/commands/run_cvd/boot_state_machine.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:bool	file:
Setup	host/commands/run_cvd/boot_state_machine.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override { return true; }$/;"	f	class:cuttlefish::MetricsService	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override { return true; }$/;"	f	class:cuttlefish::OpenWrt	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override { return true; }$/;"	f	class:cuttlefish::RootCanal	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override { return true; }$/;"	f	class:cuttlefish::VehicleHalServer	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override { return true; }$/;"	f	class:cuttlefish::VmmCommands	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::BluetoothConnector	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::ConfigServer	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::KernelLogMonitor	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::LogcatReceiver	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::SecureEnvironment	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::TombstoneReceiver	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::WmediumdServer	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch_modem.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::ModemSimulator	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch_streamer.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:bool	file:
Setup	host/commands/run_cvd/launch_streamer.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:bool	file:
Setup	host/commands/run_cvd/main.cc	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:bool	file:
Setup	host/commands/run_cvd/server_loop.cpp	/^  bool Setup() {$/;"	f	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:bool	file:
Setup	host/commands/run_cvd/validate.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateHostConfigurationFeature	typeref:typename:bool	file:
Setup	host/commands/run_cvd/validate.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anon8d12954e0111::ValidateTapDevices	typeref:typename:bool	file:
Setup	host/libs/config/adb/launch.cpp	/^  bool Setup() override { return true; }$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbConnector	typeref:typename:bool	file:
Setup	host/libs/config/adb/launch.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:bool	file:
Setup	host/libs/config/data_image.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::InitializeDataImageImpl	typeref:typename:bool	file:
Setup	host/libs/config/data_image.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::InitializeEspImageImpl	typeref:typename:bool	file:
Setup	host/libs/config/data_image.cpp	/^  bool Setup() override {$/;"	f	class:cuttlefish::InitializeMiscImageImpl	typeref:typename:bool	file:
SetupAdbSocket	host/frontend/webrtc/adb_handler.cpp	/^SharedFD SetupAdbSocket(const std::string &adb_host_and_port) {$/;"	f	namespace:cuttlefish::webrtc_streaming::__anonbb773a0c0111	typeref:typename:SharedFD
SetupBridgeGateway	host/libs/allocd/alloc_utils.cpp	/^bool SetupBridgeGateway(const std::string& bridge_name,$/;"	f	namespace:cuttlefish	typeref:typename:bool
SetupCameraForClient	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Impl::SetupCameraForClient(int client_id) {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:void
SetupDependency	host/commands/modem_simulator/call_service.cpp	/^void CallService::SetupDependency(SimService* sim, NetworkService* net) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
SetupDependency	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::SetupDependency(MiscService* misc, SimService* sim,$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
SetupDependency	host/commands/modem_simulator/sim_service.cpp	/^void SimService::SetupDependency(NetworkService* net) {$/;"	f	class:cuttlefish::SimService	typeref:typename:void
SetupDependency	host/commands/modem_simulator/sms_service.cpp	/^void SmsService::SetupDependency(SimService* sim) { sim_service_ = sim; }$/;"	f	class:cuttlefish::SmsService	typeref:typename:void
SetupDependency	host/commands/modem_simulator/stk_service.cpp	/^void StkService::SetupDependency(SimService* sim) { sim_service_ = sim; }$/;"	f	class:cuttlefish::StkService	typeref:typename:void
SetupDone	guest/hals/confirmationui/guest_session.h	/^        SetupDone = 2,$/;"	e	enum:android::hardware::confirmationui::V1_0::implementation::GuestSession::ListenerState
SeverityTarget	common/libs/utils/tee_logging.h	/^struct SeverityTarget {$/;"	s	namespace:cuttlefish
SeverityTargetsForFiles	common/libs/utils/tee_logging.cpp	/^static std::vector<SeverityTarget> SeverityTargetsForFiles($/;"	f	namespace:cuttlefish	typeref:typename:std::vector<SeverityTarget>	file:
SharedFD	common/libs/fs/shared_fd.h	/^  SharedFD(const std::shared_ptr<FileInstance>& in) : value_(in) {}$/;"	f	class:cuttlefish::SharedFD
SharedFD	common/libs/fs/shared_fd.h	/^class SharedFD {$/;"	c	namespace:cuttlefish
SharedFD	common/libs/fs/shared_fd.h	/^inline SharedFD::SharedFD() : value_(FileInstance::ClosedInstance()) {}$/;"	f	class:cuttlefish::SharedFD
SharedFDFlag	common/libs/utils/shared_fd_flag.cpp	/^Flag SharedFDFlag(SharedFD& out) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
SharedFDFlag	common/libs/utils/shared_fd_flag.cpp	/^Flag SharedFDFlag(const std::string& name, SharedFD& out) {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
SharedFDIstream	common/libs/fs/shared_fd_stream.cpp	/^SharedFDIstream::SharedFDIstream(SharedFD shared_fd)$/;"	f	class:cuttlefish::SharedFDIstream
SharedFDIstream	common/libs/fs/shared_fd_stream.h	/^class SharedFDIstream : public std::istream {$/;"	c	namespace:cuttlefish
SharedFDOstream	common/libs/fs/shared_fd_stream.cpp	/^SharedFDOstream::SharedFDOstream(SharedFD shared_fd)$/;"	f	class:cuttlefish::SharedFDOstream
SharedFDOstream	common/libs/fs/shared_fd_stream.h	/^class SharedFDOstream : public std::ostream {$/;"	c	namespace:cuttlefish
SharedFDSet	common/libs/fs/shared_select.h	/^class SharedFDSet {$/;"	c	namespace:cuttlefish
SharedFDStreambuf	common/libs/fs/shared_fd_stream.cpp	/^SharedFDStreambuf::SharedFDStreambuf(SharedFD shared_fd)$/;"	f	class:cuttlefish::SharedFDStreambuf
SharedFDStreambuf	common/libs/fs/shared_fd_stream.h	/^class SharedFDStreambuf : public std::streambuf {$/;"	c	namespace:cuttlefish
ShmBuffer	host/libs/audio_connector/buffers.cpp	/^ShmBuffer::ShmBuffer(ShmBuffer&& other)$/;"	f	class:cuttlefish::ShmBuffer
ShmBuffer	host/libs/audio_connector/buffers.h	/^  ShmBuffer(const virtio_snd_pcm_xfer& header, uint32_t len,$/;"	f	class:cuttlefish::ShmBuffer
ShmBuffer	host/libs/audio_connector/buffers.h	/^class ShmBuffer {$/;"	c	namespace:cuttlefish
ShouldCreateCompositeDisk	host/commands/assemble_cvd/disk_flags.cc	/^bool ShouldCreateCompositeDisk(const std::string& composite_disk_path,$/;"	f	namespace:cuttlefish	typeref:typename:bool
ShouldCreateOsCompositeDisk	host/commands/assemble_cvd/disk_flags.cc	/^bool ShouldCreateOsCompositeDisk(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
ShouldEnableAcceleratedRendering	host/libs/graphics_detector/graphics_detector.cpp	/^bool ShouldEnableAcceleratedRendering($/;"	f	namespace:cuttlefish	typeref:typename:bool
ShowNewDeviceList	host/frontend/webrtc_operator/assets/js/index.js	/^  #ShowNewDeviceList(device_ids) {$/;"	m	class:DeviceListApp
Shutdown	common/libs/fs/shared_fd.cpp	/^int FileInstance::Shutdown(int how) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
Shutdown	host/libs/allocd/request.h	/^  Shutdown,          \/\/ request allocd to shutdown and clean up all resources$/;"	e	enum:cuttlefish::RequestType
ShutdownIface	host/libs/allocd/alloc_utils.cpp	/^bool ShutdownIface(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
SignalHandler	host/frontend/webrtc_operator/signal_handler.cpp	/^SignalHandler::SignalHandler(struct lws* wsi, DeviceRegistry* registry,$/;"	f	class:cuttlefish::SignalHandler
SignalHandler	host/frontend/webrtc_operator/signal_handler.h	/^class SignalHandler : public WebSocketHandler {$/;"	c	namespace:cuttlefish
SignalMeasurementType	guest/hals/ril/reference-libril/ril.h	/^} SignalMeasurementType;$/;"	t	typeref:enum:__anon0bfbaecf5403
SignalStrength	host/commands/modem_simulator/network_service.h	/^    SignalStrength():$/;"	f	struct:cuttlefish::NetworkService::SignalStrength
SignalStrength	host/commands/modem_simulator/network_service.h	/^  struct SignalStrength {$/;"	s	class:cuttlefish::NetworkService
SigningKey	host/commands/secure_env/primary_key_builder.cpp	/^void PrimaryKeyBuilder::SigningKey() {$/;"	f	class:cuttlefish::PrimaryKeyBuilder	typeref:typename:void
SigningKeyCreator	host/commands/secure_env/primary_key_builder.cpp	/^SigningKeyCreator(const std::string& unique) {$/;"	f	namespace:cuttlefish	typeref:typename:std::function<TpmObjectSlot (TpmResourceManager &)>
SimFileSystem	host/commands/modem_simulator/sim_service.h	/^  struct SimFileSystem {$/;"	s	class:cuttlefish::SimService
SimService	host/commands/modem_simulator/sim_service.cpp	/^SimService::SimService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::SimService
SimService	host/commands/modem_simulator/sim_service.h	/^class SimService : public ModemService, public std::enable_shared_from_this<SimService> {$/;"	c	namespace:cuttlefish
SimStatus	host/commands/modem_simulator/sim_service.h	/^  enum SimStatus {$/;"	g	class:cuttlefish::SimService
SimulatePendingCallsAnswered	host/commands/modem_simulator/call_service.cpp	/^void CallService::SimulatePendingCallsAnswered() {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
Size	host/commands/fetcher/build_api.h	/^  size_t Size() const { return size; }$/;"	f	class:cuttlefish::Artifact	typeref:typename:size_t
Size	host/libs/confui/host_renderer.h	/^  auto Size() const { return teeui_frame_.size(); }$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:auto
Size	host/libs/screen_connector/screen_connector_queue.h	/^  auto Size() const {$/;"	f	class:cuttlefish::ScreenConnectorQueue	typeref:typename:auto
SkipComma	host/commands/modem_simulator/command_parser.h	/^inline void CommandParser::SkipComma() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:void
SkipPrefix	host/commands/modem_simulator/command_parser.h	/^inline void CommandParser::SkipPrefix() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:void
SkipPrefixAT	host/commands/modem_simulator/command_parser.h	/^inline void CommandParser::SkipPrefixAT() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:void
SkipWhiteSpace	host/commands/modem_simulator/command_parser.h	/^inline void CommandParser::SkipWhiteSpace() {$/;"	f	class:cuttlefish::CommandParser	typeref:typename:void
Slack	shared/config/task_profiles.json	/^            "Slack": "40000000"$/;"	s	object:Profiles.24.Actions.0.Params
Slack	shared/config/task_profiles.json	/^            "Slack": "50000"$/;"	s	object:Profiles.25.Actions.0.Params
SleepForever	common/frontend/socket_vsock_proxy/main.cpp	/^[[noreturn]] static void SleepForever() {$/;"	f	namespace:__anon913036200111	typeref:typename:void	file:
SleepForever	host/frontend/adb_connector/main.cpp	/^[[noreturn]] void SleepForever() {$/;"	f	namespace:__anona4a84cd70111	typeref:typename:void
SmsMessage	host/commands/modem_simulator/sms_service.h	/^  struct SmsMessage {$/;"	s	class:cuttlefish::SmsService
SmsService	host/commands/modem_simulator/sms_service.cpp	/^SmsService::SmsService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::SmsService
SmsService	host/commands/modem_simulator/sms_service.h	/^class SmsService : public ModemService , public std::enable_shared_from_this<SmsService> {$/;"	c	namespace:cuttlefish
SmsServiceCenterAddress	host/commands/modem_simulator/sms_service.h	/^  struct SmsServiceCenterAddress {$/;"	s	class:cuttlefish::SmsService
SmsStatus	host/commands/modem_simulator/sms_service.h	/^    enum SmsStatus { kUnread = 0, kRead = 1, kUnsent = 2, kSent = 3 };$/;"	g	struct:cuttlefish::SmsService::SmsMessage
Socket	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::Socket(int domain, int socket_type, int protocol) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
SocketExists	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^bool RilSapSocket::SocketExists(const char *socketName) {$/;"	f	class:RilSapSocket	typeref:typename:bool
SocketListenParam	guest/hals/ril/reference-libril/ril_ex.h	/^typedef struct SocketListenParam {$/;"	s
SocketListenParam	guest/hals/ril/reference-libril/ril_ex.h	/^} SocketListenParam;$/;"	t	typeref:struct:SocketListenParam
SocketLocalClient	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::SocketLocalClient(const std::string& name, bool abstract,$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
SocketLocalClient	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::SocketLocalClient(int port, int type) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
SocketLocalServer	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::SocketLocalServer(const std::string& name, bool abstract,$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
SocketLocalServer	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::SocketLocalServer(int port, int type) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
SocketPair	common/libs/fs/shared_fd.cpp	/^bool SharedFD::SocketPair(int domain, int type, int protocol,$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
SocketReceiver	common/frontend/socket_vsock_proxy/main.cpp	/^  explicit SocketReceiver(cuttlefish::SharedFD socket) : socket_{socket} {}$/;"	f	class:__anon913036200111::SocketReceiver	file:
SocketReceiver	common/frontend/socket_vsock_proxy/main.cpp	/^class SocketReceiver {$/;"	c	namespace:__anon913036200111	file:
SocketSender	common/frontend/socket_vsock_proxy/main.cpp	/^  explicit SocketSender(cuttlefish::SharedFD socket) : socket_{socket} {}$/;"	f	class:__anon913036200111::SocketSender	file:
SocketSender	common/frontend/socket_vsock_proxy/main.cpp	/^class SocketSender {$/;"	c	namespace:__anon913036200111	file:
SocketToVsock	common/frontend/socket_vsock_proxy/main.cpp	/^void SocketToVsock(SocketReceiver socket_receiver,$/;"	f	namespace:__anon913036200111	typeref:typename:void
SocketVsockProxy	host/libs/config/adb/launch.cpp	/^class SocketVsockProxy : public CommandSource {$/;"	c	namespace:cuttlefish::__anon7ea6a0320111	file:
SocketVsockProxyBinary	host/libs/config/known_paths.cpp	/^std::string SocketVsockProxyBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
SocketWakeType	guest/hals/ril/reference-libril/ril_ex.h	/^enum SocketWakeType {DONT_WAKE, WAKE_PARTIAL};$/;"	g
SoftGateKeeper	host/commands/secure_env/soft_gatekeeper.h	/^    SoftGateKeeper() {$/;"	f	class:gatekeeper::SoftGateKeeper
SoftGateKeeper	host/commands/secure_env/soft_gatekeeper.h	/^class SoftGateKeeper : public GateKeeper {$/;"	c	namespace:gatekeeper
SourceEnumToString	host/libs/config/fetcher_config.cpp	/^std::string SourceEnumToString(const FileSource& source) {$/;"	f	namespace:cuttlefish::__anonf7286d770111	typeref:typename:std::string
SourceStringToEnum	host/libs/config/fetcher_config.cpp	/^FileSource SourceStringToEnum(std::string source) {$/;"	f	namespace:cuttlefish::__anonf7286d770111	typeref:typename:FileSource
SparseFileSizes	common/libs/utils/files.cpp	/^FileSizes SparseFileSizes(const std::string& path) {$/;"	f	namespace:cuttlefish	typeref:typename:FileSizes
SpeakerIsInitialized	host/frontend/webrtc/lib/audio_device.cpp	/^bool CfAudioDeviceModule::SpeakerIsInitialized() const { return false; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
SpeakerMute	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SpeakerMute(bool* enabled) const { return -1; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SpeakerMuteIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SpeakerMuteIsAvailable(bool* available) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SpeakerVolume	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SpeakerVolume(uint32_t* volume) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SpeakerVolumeIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::SpeakerVolumeIsAvailable(bool* available) {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
SplitByLines	common/libs/utils/tee_logging.cpp	/^static void SplitByLines(const char* msg, const F& log_function, Args&&... args) {$/;"	f	namespace:cuttlefish	typeref:typename:void	file:
SplitEnforcedProperties	host/commands/secure_env/tpm_key_blob_maker.cpp	/^static keymaster_error_t SplitEnforcedProperties($/;"	f	namespace:cuttlefish	typeref:typename:keymaster_error_t	file:
SplitString	host/frontend/webrtc_operator/utils.cpp	/^std::vector<std::string> SplitString($/;"	f	typeref:typename:std::vector<std::string>
SplitString	host/frontend/webrtc_operator/utils.cpp	/^std::vector<std::string> SplitString(const std::string &s, char c) {$/;"	f	typeref:typename:std::vector<std::string>
Start	common/libs/utils/subprocess.cpp	/^Subprocess Command::Start(SubprocessOptions options) const {$/;"	f	class:cuttlefish::Command	typeref:typename:Subprocess
Start	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::Start() {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
Start	host/frontend/webrtc/lib/ws_connection.cpp	/^void WsConnectionContextImpl::Start() {$/;"	f	class:WsConnectionContextImpl	typeref:typename:void
Start	host/libs/confui/host_server.cc	/^void HostServer::Start() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
StartAndMonitorProcesses	host/commands/run_cvd/process_monitor.cc	/^bool ProcessMonitor::StartAndMonitorProcesses() {$/;"	f	class:cuttlefish::ProcessMonitor	typeref:typename:bool
StartAssembler	host/commands/start/main.cc	/^cuttlefish::Subprocess StartAssembler(cuttlefish::SharedFD assembler_stdin,$/;"	f	namespace:__anon8e1e78490111	typeref:typename:cuttlefish::Subprocess
StartCommands	host/libs/vm_manager/crosvm_manager.cpp	/^std::vector<Command> CrosvmManager::StartCommands($/;"	f	class:cuttlefish::vm_manager::CrosvmManager	typeref:typename:std::vector<Command>
StartCommands	host/libs/vm_manager/qemu_manager.cpp	/^std::vector<Command> QemuManager::StartCommands($/;"	f	class:cuttlefish::vm_manager::QemuManager	typeref:typename:std::vector<Command>
StartDnsmasq	host/libs/allocd/alloc_utils.cpp	/^bool StartDnsmasq(const std::string& bridge_name, const std::string& gateway,$/;"	f	namespace:cuttlefish	typeref:typename:bool
StartKernelEventMonitor	host/commands/secure_env/secure_env.cpp	/^std::thread StartKernelEventMonitor(SharedFD kernel_events_fd) {$/;"	f	namespace:cuttlefish::__anon0a6d9b510111	typeref:typename:std::thread
StartPlayout	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StartPlayout() {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StartReadGnssRawMeasurementFileThread	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void StartReadGnssRawMeasurementFileThread() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
StartReadLoop	host/frontend/webrtc/lib/camera_streamer.cpp	/^void CameraStreamer::StartReadLoop() {$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:void
StartReadNmeaFileThread	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void StartReadNmeaFileThread() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
StartRecording	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StartRecording() {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StartRunner	host/commands/start/main.cc	/^cuttlefish::Subprocess StartRunner(cuttlefish::SharedFD runner_stdin,$/;"	f	namespace:__anon8e1e78490111	typeref:typename:cuttlefish::Subprocess
StartServer	host/commands/console_forwarder/main.cpp	/^  [[noreturn]] void StartServer() {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:void	file:
StartServer	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void StartServer() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
StartStream	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::StartStream(StreamControlCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
Started	common/libs/utils/subprocess.h	/^  bool Started() const { return started_; }$/;"	f	class:cuttlefish::Subprocess	typeref:typename:bool
Starting	guest/hals/confirmationui/guest_session.h	/^        Starting = 1,$/;"	e	enum:android::hardware::confirmationui::V1_0::implementation::GuestSession::ListenerState
StartsWith	host/frontend/webrtc_operator/utils.cpp	/^bool StartsWith(const std::string &s, const std::string &prefix) {$/;"	f	typeref:typename:bool
State	host/frontend/webrtc/lib/client_handler.h	/^  enum class State {$/;"	g	class:cuttlefish::webrtc_streaming::ClientHandler
State	host/libs/wayland/wayland_surface.h	/^  struct State {$/;"	s	class:wayland::Surface
StaticResource	host/libs/allocd/resource.h	/^  StaticResource(const std::string& name, uid_t uid, ResourceType ty,$/;"	f	class:cuttlefish::StaticResource
StaticResource	host/libs/allocd/resource.h	/^class StaticResource {$/;"	c	namespace:cuttlefish
Status	host/libs/audio_connector/buffers.h	/^enum class Status : uint32_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint32_t
Status	host/libs/config/feature.h	/^  enum class Status { UNVISITED, VISITING, VISITED };$/;"	g	function:cuttlefish::FeatureSuperclass::TopologicalVisit
StatusIsTerminal	host/commands/fetcher/build_api.cc	/^bool StatusIsTerminal(const std::string& status) {$/;"	f	namespace:cuttlefish::__anon948178400111	typeref:typename:bool
StatusToStr	host/libs/allocd/utils.cpp	/^std::string StatusToStr(RequestStatus st) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
StdIOChannel	common/libs/utils/subprocess.h	/^  enum class StdIOChannel {$/;"	g	class:cuttlefish::Subprocess
StderrOutputGenerator	common/libs/utils/tee_logging.cpp	/^static std::string StderrOutputGenerator(const struct tm& now, int pid, uint64_t tid,$/;"	f	namespace:cuttlefish	typeref:typename:std::string	file:
StereoPlayout	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StereoPlayout(bool* enabled) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StereoPlayoutIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StereoPlayoutIsAvailable(bool* available) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StereoRecording	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StereoRecording(bool* enabled) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StereoRecordingIsAvailable	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StereoRecordingIsAvailable(bool* available) const {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StkCmdType	guest/hals/ril/reference-ril/reference-ril.c	/^} StkCmdType;$/;"	t	typeref:enum:__anon70d7df6f0503	file:
StkService	host/commands/modem_simulator/stk_service.cpp	/^StkService::StkService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::StkService
StkService	host/commands/modem_simulator/stk_service.h	/^class StkService : public ModemService, public std::enable_shared_from_this<StkService> {$/;"	c	namespace:cuttlefish
StkUnsolEvent	guest/hals/ril/reference-ril/reference-ril.c	/^} StkUnsolEvent;$/;"	t	typeref:enum:__anon70d7df6f0403	file:
Stop	common/libs/utils/subprocess.h	/^  StopperResult Stop() { return stopper_(this); }$/;"	f	class:cuttlefish::Subprocess	typeref:typename:StopperResult
Stop	host/commands/modem_simulator/thread_looper.cpp	/^void ThreadLooper::Stop() {$/;"	f	class:cuttlefish::ThreadLooper	typeref:typename:void
Stop	host/frontend/webrtc/lib/local_recorder.cpp	/^void LocalRecorder::Display::Stop() {$/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:void
Stop	host/frontend/webrtc/lib/local_recorder.cpp	/^void LocalRecorder::Stop() {$/;"	f	class:cuttlefish::webrtc_streaming::LocalRecorder	typeref:typename:void
Stop	host/libs/vm_manager/qemu_manager.cpp	/^bool Stop() {$/;"	f	namespace:cuttlefish::vm_manager::__anonb2b4da3a0111	typeref:typename:bool
StopCvdMain	host/commands/stop/main.cc	/^int StopCvdMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:int
StopDnsmasq	host/libs/allocd/alloc_utils.cpp	/^bool StopDnsmasq(const std::string& name) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
StopInstance	host/commands/stop/main.cc	/^int StopInstance(const CuttlefishConfig& config,$/;"	f	namespace:cuttlefish::__anon65a808010111	typeref:typename:int
StopModemSimulator	host/commands/run_cvd/launch_modem.cpp	/^static bool StopModemSimulator(int id) {$/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
StopMonitoredProcesses	host/commands/run_cvd/process_monitor.cc	/^bool ProcessMonitor::StopMonitoredProcesses() {$/;"	f	class:cuttlefish::ProcessMonitor	typeref:typename:bool
StopPlayout	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StopPlayout() {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StopRecording	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::StopRecording() {$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
StopSession	host/libs/allocd/request.h	/^  StopSession,       \/\/ Request all resources within a session be released$/;"	e	enum:cuttlefish::RequestType
StopStream	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::StopStream(StreamControlCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
StopperResult	common/libs/utils/subprocess.h	/^enum class StopperResult {$/;"	g	namespace:cuttlefish
Storage	guest/hals/health/storage/Storage.h	/^class Storage : public BnStorage {$/;"	c	namespace:aidl::android::hardware::health::storage
StrError	common/libs/fs/shared_fd.cpp	/^std::string FileInstance::StrError() const {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:std::string
StrForInstance	host/commands/assemble_cvd/alloc.cc	/^static std::string StrForInstance(const std::string& prefix, int num) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string	file:
StrForInstance	host/commands/assemble_cvd/flags.cc	/^std::string StrForInstance(const std::string& prefix, int num) {$/;"	f	namespace:cuttlefish::__anon145bfaab0111	typeref:typename:std::string
StrToIfaceTy	host/libs/allocd/utils.cpp	/^IfaceType StrToIfaceTy(const std::string& iface) {$/;"	f	namespace:cuttlefish	typeref:typename:IfaceType
StrToIfaceTyMap	host/libs/allocd/utils.cpp	/^const std::map<std::string, IfaceType> StrToIfaceTyMap = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<std::string,IfaceType>
StrToReqStatusMap	host/libs/allocd/utils.cpp	/^const std::map<std::string, RequestStatus> StrToReqStatusMap = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<std::string,RequestStatus>
StrToReqTy	host/libs/allocd/utils.cpp	/^RequestType StrToReqTy(const std::string& req) {$/;"	f	namespace:cuttlefish	typeref:typename:RequestType
StrToRequestTyMap	host/libs/allocd/utils.cpp	/^const std::map<std::string, RequestType> StrToRequestTyMap = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<std::string,RequestType>
StrToStatus	host/libs/allocd/utils.cpp	/^RequestStatus StrToStatus(const std::string& st) {$/;"	f	namespace:cuttlefish	typeref:typename:RequestStatus
StreamBufferCache	guest/hals/camera/stream_buffer_cache.h	/^class StreamBufferCache {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
StreamControlCommand	host/libs/audio_connector/commands.cpp	/^StreamControlCommand::StreamControlCommand(AudioCommandType type,$/;"	f	class:cuttlefish::StreamControlCommand
StreamControlCommand	host/libs/audio_connector/commands.h	/^struct StreamControlCommand : public AudioCommand {$/;"	s	namespace:cuttlefish
StreamDesc	host/frontend/webrtc/audio_handler.h	/^  struct StreamDesc {$/;"	s	class:cuttlefish::AudioHandler
StreamInfoCommand	host/libs/audio_connector/commands.cpp	/^StreamInfoCommand::StreamInfoCommand(uint32_t start_id, size_t count,$/;"	f	class:cuttlefish::StreamInfoCommand
StreamInfoCommand	host/libs/audio_connector/commands.h	/^class StreamInfoCommand : public InfoCommand<virtio_snd_pcm_info> {$/;"	c	namespace:cuttlefish
StreamSetParamsCommand	host/libs/audio_connector/commands.cpp	/^StreamSetParamsCommand::StreamSetParamsCommand($/;"	f	class:cuttlefish::StreamSetParamsCommand
StreamSetParamsCommand	host/libs/audio_connector/commands.h	/^struct StreamSetParamsCommand : public StreamControlCommand {$/;"	s	namespace:cuttlefish
Streamer	host/frontend/webrtc/lib/streamer.cpp	/^Streamer::Streamer(std::unique_ptr<Streamer::Impl> impl)$/;"	f	class:cuttlefish::webrtc_streaming::Streamer
Streamer	host/frontend/webrtc/lib/streamer.h	/^class Streamer {$/;"	c	namespace:cuttlefish::webrtc_streaming
StreamerConfig	host/frontend/webrtc/lib/streamer.h	/^struct StreamerConfig {$/;"	s	namespace:cuttlefish::webrtc_streaming
StreamerSockets	host/commands/run_cvd/launch_streamer.cpp	/^class StreamerSockets : public virtual Feature {$/;"	c	namespace:cuttlefish::__anon6b0274e10111	file:
StreamsInfo	host/frontend/webrtc/audio_handler.cpp	/^void AudioHandler::StreamsInfo(StreamInfoCommand& cmd) {$/;"	f	class:cuttlefish::AudioHandler	typeref:typename:void
StrideU	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^int CvdVideoFrameBuffer::StrideU() const {$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:int
StrideU	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  int StrideU() const override { return frame_buffer_->StrideU(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:int	file:
StrideV	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^int CvdVideoFrameBuffer::StrideV() const {$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:int
StrideV	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  int StrideV() const override { return frame_buffer_->StrideV(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:int	file:
StrideY	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^int CvdVideoFrameBuffer::StrideY() const { return AlignStride(width_); }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:int
StrideY	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  int StrideY() const override { return frame_buffer_->StrideY(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:int	file:
StringFromEnv	common/libs/utils/environment.cpp	/^std::string StringFromEnv(const std::string& varname,$/;"	f	namespace:cuttlefish	typeref:typename:std::string
StringPrintf	host/frontend/webrtc_operator/utils.cpp	/^std::string StringPrintf(const char *format, ...) {$/;"	f	typeref:typename:std::string
StringToAdbMode	host/libs/config/adb/strings.cpp	/^AdbMode StringToAdbMode(const std::string& mode_cased) {$/;"	f	namespace:cuttlefish	typeref:typename:AdbMode
StringToSecureHal	host/libs/config/cuttlefish_config.cpp	/^static SecureHal StringToSecureHal(std::string mode) {$/;"	f	namespace:cuttlefish	typeref:typename:SecureHal	file:
StripColorCodes	common/libs/utils/tee_logging.cpp	/^static std::string StripColorCodes(const std::string& str) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string	file:
Subprocess	common/libs/utils/subprocess.cpp	/^Subprocess::Subprocess(Subprocess&& subprocess)$/;"	f	class:cuttlefish::Subprocess
Subprocess	common/libs/utils/subprocess.h	/^  Subprocess(pid_t pid, SubprocessStopper stopper = KillSubprocess)$/;"	f	class:cuttlefish::Subprocess
Subprocess	common/libs/utils/subprocess.h	/^class Subprocess {$/;"	c	namespace:cuttlefish
Subprocess	host/commands/start/flag_forwarder.cc	/^  const std::string& Subprocess() const { return subprocess_; }$/;"	f	class:SubprocessFlag	typeref:typename:const std::string &	file:
SubprocessFlag	host/commands/start/flag_forwarder.cc	/^  SubprocessFlag(const std::string& subprocess, const std::string& name)$/;"	f	class:SubprocessFlag	file:
SubprocessFlag	host/commands/start/flag_forwarder.cc	/^class SubprocessFlag {$/;"	c	file:
SubprocessOptions	common/libs/utils/subprocess.h	/^  SubprocessOptions() : verbose_(true), exit_with_parent_(true) {}$/;"	f	class:cuttlefish::SubprocessOptions
SubprocessOptions	common/libs/utils/subprocess.h	/^class SubprocessOptions {$/;"	c	namespace:cuttlefish
SubprocessStopper	common/libs/utils/subprocess.h	/^using SubprocessStopper = std::function<StopperResult(Subprocess*)>;$/;"	t	namespace:cuttlefish
SubscribeToEvents	host/commands/kernel_log_monitor/kernel_log_server.cc	/^void KernelLogServer::SubscribeToEvents(monitor::EventCallback callback) {$/;"	f	class:monitor::KernelLogServer	typeref:typename:void
SubscribersFromCmdline	host/commands/kernel_log_monitor/main.cc	/^std::vector<cuttlefish::SharedFD> SubscribersFromCmdline() {$/;"	f	typeref:typename:std::vector<cuttlefish::SharedFD>
SubscriptionAction	host/commands/kernel_log_monitor/kernel_log_server.h	/^enum class SubscriptionAction {$/;"	g	namespace:monitor
Success	host/libs/allocd/request.h	/^  Success,      \/\/ Request was satisfied$/;"	e	enum:cuttlefish::RequestStatus
SupService	host/commands/modem_simulator/sup_service.cpp	/^SupService::SupService(int32_t service_id, ChannelMonitor* channel_monitor,$/;"	f	class:cuttlefish::SupService
SupService	host/commands/modem_simulator/sup_service.h	/^class SupService : public ModemService, public std::enable_shared_from_this<SupService> {$/;"	c	namespace:cuttlefish
SuperImageNeedsRebuilding	host/commands/assemble_cvd/super_image_mixer.cc	/^bool SuperImageNeedsRebuilding(const FetcherConfig& fetcher_config,$/;"	f	namespace:cuttlefish	typeref:typename:bool
SuperPartitionComponents	host/commands/assemble_cvd/misc_info.cc	/^std::vector<std::string> SuperPartitionComponents(const MiscInfo& info) {$/;"	f	namespace:cuttlefish	typeref:typename:std::vector<std::string>
SupportedAlgorithms	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedAlgorithms(const SupportedAlgorithmsRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedAlgorithms	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedAlgorithms($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedBlockModes	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedBlockModes(const SupportedBlockModesRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedBlockModes	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedBlockModes($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedDigests	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedDigests(const SupportedDigestsRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedDigests	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedDigests(const SupportedDigestsRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedExportFormats	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedExportFormats(const SupportedExportFormatsRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedExportFormats	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedExportFormats($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedImportFormats	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedImportFormats(const SupportedImportFormatsRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedImportFormats	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedImportFormats($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedPaddingModes	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedPaddingModes(const SupportedPaddingModesRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportedPaddingModes	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::SupportedPaddingModes($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
SupportsEncodedOutput	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^bool VideoTrackSourceImpl::SupportsEncodedOutput() const { return false; }$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:bool
Surface	host/libs/wayland/wayland_surface.cpp	/^Surface::Surface(Surfaces& surfaces) : surfaces_(surfaces) {}$/;"	f	class:wayland::Surface
Surface	host/libs/wayland/wayland_surface.h	/^class Surface {$/;"	c	namespace:wayland
Surfaces	host/libs/wayland/wayland_surfaces.h	/^class Surfaces {$/;"	c	namespace:wayland
SysVMessageQueue	host/libs/msg_queue/msg_queue.cc	/^SysVMessageQueue::SysVMessageQueue(int id) { msgid = id; }$/;"	f	class:cuttlefish::SysVMessageQueue
SysVMessageQueue	host/libs/msg_queue/msg_queue.h	/^class SysVMessageQueue {$/;"	c	namespace:cuttlefish
SystemImageDirFlag	host/libs/config/config_flag.h	/^class SystemImageDirFlag : public FlagFeature {$/;"	c	namespace:cuttlefish
SystemImageDirFlagImpl	host/libs/config/config_flag.cpp	/^class SystemImageDirFlagImpl : public SystemImageDirFlag {$/;"	c	namespace:cuttlefish::__anon2e549bd00111	file:
TAG	host/libs/confui/cbor.h	/^    TAG = 6,$/;"	e	enum:cuttlefish::confui::Cbor::Type
TAG	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private static final String TAG = "RilE2eTests";$/;"	f	class:RilE2eTests	file:
TAG	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private static final String TAG = "WifiE2eTests";$/;"	f	class:WifiE2eTests	file:
TARGET_2ND_ARCH	vsoc_arm64/BoardConfig.mk	/^TARGET_2ND_ARCH := arm$/;"	m
TARGET_2ND_ARCH	vsoc_x86_64/BoardConfig.mk	/^TARGET_2ND_ARCH := x86$/;"	m
TARGET_2ND_ARCH_VARIANT	vsoc_arm64/BoardConfig.mk	/^TARGET_2ND_ARCH_VARIANT := armv8-a$/;"	m
TARGET_2ND_ARCH_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_2ND_ARCH_VARIANT := silvermont$/;"	m
TARGET_2ND_CPU_ABI	vsoc_arm64/BoardConfig.mk	/^TARGET_2ND_CPU_ABI := armeabi-v7a$/;"	m
TARGET_2ND_CPU_ABI	vsoc_x86_64/BoardConfig.mk	/^TARGET_2ND_CPU_ABI := x86$/;"	m
TARGET_2ND_CPU_ABI2	vsoc_arm64/BoardConfig.mk	/^TARGET_2ND_CPU_ABI2 := armeabi$/;"	m
TARGET_2ND_CPU_VARIANT	vsoc_arm64/BoardConfig.mk	/^TARGET_2ND_CPU_VARIANT := cortex-a53$/;"	m
TARGET_2ND_CPU_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_2ND_CPU_VARIANT := silvermont$/;"	m
TARGET_ARCH	vsoc_arm64/BoardConfig.mk	/^TARGET_ARCH := arm64$/;"	m
TARGET_ARCH	vsoc_arm64_only/BoardConfig.mk	/^TARGET_ARCH := arm64$/;"	m
TARGET_ARCH	vsoc_arm_only/BoardConfig.mk	/^TARGET_ARCH := arm$/;"	m
TARGET_ARCH	vsoc_x86/BoardConfig.mk	/^TARGET_ARCH := x86$/;"	m
TARGET_ARCH	vsoc_x86_64/BoardConfig.mk	/^TARGET_ARCH := x86_64$/;"	m
TARGET_ARCH	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_ARCH := x86_64$/;"	m
TARGET_ARCH	vsoc_x86_only/BoardConfig.mk	/^TARGET_ARCH := x86$/;"	m
TARGET_ARCH_VARIANT	vsoc_arm64/BoardConfig.mk	/^TARGET_ARCH_VARIANT := armv8-a$/;"	m
TARGET_ARCH_VARIANT	vsoc_arm64_only/BoardConfig.mk	/^TARGET_ARCH_VARIANT := armv8-a$/;"	m
TARGET_ARCH_VARIANT	vsoc_arm_only/BoardConfig.mk	/^TARGET_ARCH_VARIANT := armv7-a-neon$/;"	m
TARGET_ARCH_VARIANT	vsoc_x86/BoardConfig.mk	/^TARGET_ARCH_VARIANT := x86$/;"	m
TARGET_ARCH_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_ARCH_VARIANT := silvermont$/;"	m
TARGET_ARCH_VARIANT	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_ARCH_VARIANT := silvermont$/;"	m
TARGET_ARCH_VARIANT	vsoc_x86_only/BoardConfig.mk	/^TARGET_ARCH_VARIANT := x86$/;"	m
TARGET_AVB_PRODUCT_HASHTREE_ALGORITHM	shared/BoardConfig.mk	/^TARGET_AVB_PRODUCT_HASHTREE_ALGORITHM ?= sha256$/;"	m
TARGET_AVB_SYSTEM_EXT_HASHTREE_ALGORITHM	shared/BoardConfig.mk	/^TARGET_AVB_SYSTEM_EXT_HASHTREE_ALGORITHM ?= blake2b-256$/;"	m
TARGET_AVB_SYSTEM_HASHTREE_ALGORITHM	shared/BoardConfig.mk	/^TARGET_AVB_SYSTEM_HASHTREE_ALGORITHM ?= sha256$/;"	m
TARGET_AVB_SYSTEM_OTHER_HASHTREE_ALGORITHM	shared/BoardConfig.mk	/^TARGET_AVB_SYSTEM_OTHER_HASHTREE_ALGORITHM ?= sha256$/;"	m
TARGET_BOARD_INFO_FILE	shared/auto/device.mk	/^TARGET_BOARD_INFO_FILE ?= device\/google\/cuttlefish\/shared\/auto\/android-info.txt$/;"	m
TARGET_BOARD_INFO_FILE	shared/phone/device_vendor.mk	/^TARGET_BOARD_INFO_FILE ?= device\/google\/cuttlefish\/shared\/phone\/android-info.txt$/;"	m
TARGET_BOARD_INFO_FILE	shared/tv/device.mk	/^TARGET_BOARD_INFO_FILE ?= device\/google\/cuttlefish\/shared\/tv\/android-info.txt$/;"	m
TARGET_BOARD_INFO_FILE	vsoc_x86_64/phone/aosp_cf_foldable.mk	/^TARGET_BOARD_INFO_FILE := device\/google\/cuttlefish\/shared\/foldable\/android-info.txt$/;"	m
TARGET_BOARD_PLATFORM	vsoc_arm64/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_arm64$/;"	m
TARGET_BOARD_PLATFORM	vsoc_arm64_only/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_arm64$/;"	m
TARGET_BOARD_PLATFORM	vsoc_arm_only/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_arm$/;"	m
TARGET_BOARD_PLATFORM	vsoc_x86/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_x86$/;"	m
TARGET_BOARD_PLATFORM	vsoc_x86_64/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_x86_64$/;"	m
TARGET_BOARD_PLATFORM	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_x86_64$/;"	m
TARGET_BOARD_PLATFORM	vsoc_x86_only/BoardConfig.mk	/^TARGET_BOARD_PLATFORM := vsoc_x86$/;"	m
TARGET_BOOTLOADER_BOARD_NAME	shared/BoardConfig.mk	/^TARGET_BOOTLOADER_BOARD_NAME := cutf$/;"	m
TARGET_COPY_OUT_ODM	shared/BoardConfig.mk	/^TARGET_COPY_OUT_ODM := odm$/;"	m
TARGET_COPY_OUT_ODM_DLKM	shared/BoardConfig.mk	/^TARGET_COPY_OUT_ODM_DLKM := odm_dlkm$/;"	m
TARGET_COPY_OUT_SYSTEM_EXT	shared/BoardConfig.mk	/^TARGET_COPY_OUT_SYSTEM_EXT := system_ext$/;"	m
TARGET_COPY_OUT_VENDOR_DLKM	shared/BoardConfig.mk	/^TARGET_COPY_OUT_VENDOR_DLKM := vendor_dlkm$/;"	m
TARGET_CPU_ABI	vsoc_arm64/BoardConfig.mk	/^TARGET_CPU_ABI := arm64-v8a$/;"	m
TARGET_CPU_ABI	vsoc_arm64_only/BoardConfig.mk	/^TARGET_CPU_ABI := arm64-v8a$/;"	m
TARGET_CPU_ABI	vsoc_arm_only/BoardConfig.mk	/^TARGET_CPU_ABI := armeabi-v7a$/;"	m
TARGET_CPU_ABI	vsoc_x86/BoardConfig.mk	/^TARGET_CPU_ABI := x86$/;"	m
TARGET_CPU_ABI	vsoc_x86_64/BoardConfig.mk	/^TARGET_CPU_ABI := x86_64$/;"	m
TARGET_CPU_ABI	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_CPU_ABI := x86_64$/;"	m
TARGET_CPU_ABI	vsoc_x86_only/BoardConfig.mk	/^TARGET_CPU_ABI := x86$/;"	m
TARGET_CPU_ABI2	vsoc_arm_only/BoardConfig.mk	/^TARGET_CPU_ABI2 := armeabi$/;"	m
TARGET_CPU_VARIANT	vsoc_arm64/BoardConfig.mk	/^TARGET_CPU_VARIANT := cortex-a53$/;"	m
TARGET_CPU_VARIANT	vsoc_arm64_only/BoardConfig.mk	/^TARGET_CPU_VARIANT := cortex-a53$/;"	m
TARGET_CPU_VARIANT	vsoc_arm_only/BoardConfig.mk	/^TARGET_CPU_VARIANT := cortex-a15$/;"	m
TARGET_ENABLE_HOST_BLUETOOTH_EMULATION	shared/device.mk	/^TARGET_ENABLE_HOST_BLUETOOTH_EMULATION ?= true$/;"	m
TARGET_FLATTEN_APEX	vsoc_x86_noapex/BoardConfig.mk	/^TARGET_FLATTEN_APEX := true$/;"	m
TARGET_KERNEL_USE	vsoc_arm64/kernel.mk	/^TARGET_KERNEL_USE ?= 5.10$/;"	m
TARGET_KERNEL_USE	vsoc_arm_only/kernel.mk	/^TARGET_KERNEL_USE ?= mainline$/;"	m
TARGET_KERNEL_USE	vsoc_x86_64/kernel.mk	/^TARGET_KERNEL_USE ?= 5.10$/;"	m
TARGET_KERNEL_USE	vsoc_x86_only/kernel.mk	/^TARGET_KERNEL_USE ?= 5.10$/;"	m
TARGET_NATIVE_BRIDGE_2ND_ABI	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_2ND_ABI := armeabi-v7a armeabi$/;"	m
TARGET_NATIVE_BRIDGE_2ND_ARCH	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_2ND_ARCH := arm$/;"	m
TARGET_NATIVE_BRIDGE_2ND_ARCH_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_2ND_ARCH_VARIANT := armv7-a-neon$/;"	m
TARGET_NATIVE_BRIDGE_2ND_CPU_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_2ND_CPU_VARIANT := generic$/;"	m
TARGET_NATIVE_BRIDGE_ABI	vsoc_x86/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ABI := armeabi-v7a armeabi$/;"	m
TARGET_NATIVE_BRIDGE_ABI	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ABI := arm64-v8a$/;"	m
TARGET_NATIVE_BRIDGE_ABI	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ABI := arm64-v8a$/;"	m
TARGET_NATIVE_BRIDGE_ARCH	vsoc_x86/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ARCH := arm$/;"	m
TARGET_NATIVE_BRIDGE_ARCH	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ARCH := arm64$/;"	m
TARGET_NATIVE_BRIDGE_ARCH	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ARCH := arm64$/;"	m
TARGET_NATIVE_BRIDGE_ARCH_VARIANT	vsoc_x86/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ARCH_VARIANT := armv7-a-neon$/;"	m
TARGET_NATIVE_BRIDGE_ARCH_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ARCH_VARIANT := armv8-a$/;"	m
TARGET_NATIVE_BRIDGE_ARCH_VARIANT	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_ARCH_VARIANT := armv8-a$/;"	m
TARGET_NATIVE_BRIDGE_CPU_VARIANT	vsoc_x86/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_CPU_VARIANT := generic$/;"	m
TARGET_NATIVE_BRIDGE_CPU_VARIANT	vsoc_x86_64/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_CPU_VARIANT := generic$/;"	m
TARGET_NATIVE_BRIDGE_CPU_VARIANT	vsoc_x86_64_only/BoardConfig.mk	/^TARGET_NATIVE_BRIDGE_CPU_VARIANT := generic$/;"	m
TARGET_NO_BOOTLOADER	shared/BoardConfig.mk	/^TARGET_NO_BOOTLOADER := $(__TARGET_NO_BOOTLOADER)$/;"	m
TARGET_NO_BOOTLOADER	vsoc_arm64/bootloader.mk	/^TARGET_NO_BOOTLOADER := false$/;"	m
TARGET_NO_BOOTLOADER	vsoc_arm_only/bootloader.mk	/^TARGET_NO_BOOTLOADER := false$/;"	m
TARGET_NO_BOOTLOADER	vsoc_x86_64/bootloader.mk	/^TARGET_NO_BOOTLOADER := false$/;"	m
TARGET_NO_TELEPHONY	shared/auto/device.mk	/^TARGET_NO_TELEPHONY := true$/;"	m
TARGET_RECOVERY_FSTAB	shared/BoardConfig.mk	/^TARGET_RECOVERY_FSTAB ?= device\/google\/cuttlefish\/shared\/config\/fstab.f2fs$/;"	m
TARGET_RECOVERY_PIXEL_FORMAT	shared/BoardConfig.mk	/^TARGET_RECOVERY_PIXEL_FORMAT := ABGR_8888$/;"	m
TARGET_RECOVERY_UI_LIB	shared/BoardConfig.mk	/^TARGET_RECOVERY_UI_LIB := librecovery_ui_cuttlefish$/;"	m
TARGET_RELEASETOOLS_EXTENSIONS	shared/BoardConfig.mk	/^TARGET_RELEASETOOLS_EXTENSIONS := device\/google\/cuttlefish\/shared$/;"	m
TARGET_RO_FILE_SYSTEM_TYPE	shared/device.mk	/^TARGET_RO_FILE_SYSTEM_TYPE ?= ext4$/;"	m
TARGET_TRANSLATE_2ND_ARCH	vsoc_arm64/BoardConfig.mk	/^TARGET_TRANSLATE_2ND_ARCH := false$/;"	m
TARGET_USERDATAIMAGE_FILE_SYSTEM_TYPE	shared/device.mk	/^TARGET_USERDATAIMAGE_FILE_SYSTEM_TYPE ?= f2fs$/;"	m
TARGET_USERDATAIMAGE_PARTITION_SIZE	shared/device.mk	/^TARGET_USERDATAIMAGE_PARTITION_SIZE ?= 6442450944$/;"	m
TARGET_USERIMAGES_SPARSE_EROFS_DISABLED	shared/BoardConfig.mk	/^TARGET_USERIMAGES_SPARSE_EROFS_DISABLED := true$/;"	m
TARGET_USERIMAGES_SPARSE_EXT_DISABLED	shared/BoardConfig.mk	/^TARGET_USERIMAGES_SPARSE_EXT_DISABLED := true$/;"	m
TARGET_USERIMAGES_SPARSE_F2FS_DISABLED	shared/BoardConfig.mk	/^TARGET_USERIMAGES_SPARSE_F2FS_DISABLED := true$/;"	m
TARGET_USERIMAGES_USE_F2FS	shared/BoardConfig.mk	/^TARGET_USERIMAGES_USE_F2FS := true$/;"	m
TARGET_USES_CF_RILD	shared/auto/device.mk	/^TARGET_USES_CF_RILD ?= true$/;"	m
TARGET_USES_CF_RILD	shared/phone/device.mk	/^TARGET_USES_CF_RILD ?= true$/;"	m
TARGET_USES_CF_RILD	shared/phone/device_vendor.mk	/^TARGET_USES_CF_RILD ?= true$/;"	m
TARGET_USES_HWC2	shared/BoardConfig.mk	/^TARGET_USES_HWC2 := true$/;"	m
TARGET_USE_BTLINUX_HAL_IMPL	shared/device.mk	/^TARGET_USE_BTLINUX_HAL_IMPL ?= true$/;"	m
TARGET_VULKAN_SUPPORT	shared/device.mk	/^TARGET_VULKAN_SUPPORT ?= true$/;"	m
TD_SCDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_TD_SCDMA_SignalStrength TD_SCDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5208	typeref:typename:RIL_TD_SCDMA_SignalStrength
TD_SCDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_TD_SCDMA_SignalStrength TD_SCDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_TD_SCDMA_SignalStrength
TECH	guest/hals/ril/reference-ril/reference-ril.c	/^#define TECH(/;"	d	file:
TECH_BIT	guest/hals/ril/reference-ril/reference-ril.c	/^#define TECH_BIT(/;"	d	file:
TECH_SUPPORTED	guest/hals/ril/reference-ril/reference-ril.c	/^#define TECH_SUPPORTED(/;"	d	file:
TEST	common/libs/fs/shared_fd_test.cpp	/^TEST(SendFD, Basic) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, AllIntegerTypes) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, BasicIntNode) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, BasicStringNode) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, ComplexList) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, ListSequence) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, NestedList) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, SimpleNetlinkCreateHeader) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, SimpleNetlinkUpdateHeader) {$/;"	f	namespace:cuttlefish
TEST	common/libs/net/netlink_request_test.cpp	/^TEST(NetlinkClientTest, SingleList) {$/;"	f	namespace:cuttlefish
TEST	common/libs/security/keymaster_channel_test.cpp	/^TEST(KeymasterChannel, SendAndReceiveRequest) {$/;"	f	namespace:cuttlefish
TEST	common/libs/security/keymaster_channel_test.cpp	/^TEST(KeymasterChannel, SendAndReceiveResponse) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, BoolFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, BoolFlagXml) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, ConflictingAlias) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, DuplicateAlias) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, FlagRemoval) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, GflagsIncompatibleFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, IntFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, IntFlagXml) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, InvalidFlagGuard) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, InvalidIntFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, InvalidStringFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, RepeatedListFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, RepeatedStringFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, StringFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, StringFlagXml) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, StringIntFlag) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/flag_parser_test.cpp	/^TEST(FlagParser, UnexpectedArgumentGuard) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixMessageSocket, AutoCredentials) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixMessageSocket, BadCredentialsBlocked) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixMessageSocket, SendCredentials) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixMessageSocket, SendFileDescriptor) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixMessageSocket, SendPlainMessage) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixMessageSocket, SendTwoFileDescriptors) {$/;"	f	namespace:cuttlefish
TEST	common/libs/utils/unix_sockets_test.cpp	/^TEST(UnixSocketMessage, ExtractFileDescriptors) {$/;"	f	namespace:cuttlefish
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, GetNextHexInt) {  \/\/ Hexadecimal string to decimal value$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, GetNextInt) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, GetNextStrDeciToHex) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, GetNextStr_default) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, GetNextStr_withparam) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, SkipComma) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, SkipPrefix) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, SkipPrefixAT) {$/;"	f
TEST	host/commands/modem_simulator/unittest/command_parser_test.cpp	/^TEST(CommandParserUnitTest, SkipWhiteSpace) {$/;"	f
TEST	host/commands/modem_simulator/unittest/pdu_parser_test.cpp	/^TEST(PDUParserTest, BCDToString) {$/;"	f
TEST	host/commands/modem_simulator/unittest/pdu_parser_test.cpp	/^TEST(PDUParserTest, CreatePDU) {$/;"	f
TEST	host/commands/modem_simulator/unittest/pdu_parser_test.cpp	/^TEST(PDUParserTest, GetPhoneNumberFromAddress) {$/;"	f
TEST	host/commands/modem_simulator/unittest/pdu_parser_test.cpp	/^TEST(PDUParserTest, IsValidPDU_false) {$/;"	f
TEST	host/commands/modem_simulator/unittest/pdu_parser_test.cpp	/^TEST(PDUParserTest, IsValidPDU_true) {$/;"	f
TEST	host/commands/secure_env/encrypted_serializable_test.cpp	/^TEST(TpmEncryptedSerializable, BinaryData) {$/;"	f	namespace:cuttlefish
TEST	host/libs/config/adb/test.cpp	/^TEST(AdbConfigTest, SerializeDeserialize) {$/;"	f	namespace:cuttlefish
TEST	host/libs/config/adb/test.cpp	/^TEST(AdbConfigTest, SetFromFlags) {$/;"	f	namespace:cuttlefish
TEST	tests/hal/hal_implementation_test.cpp	/^TEST(Hal, AidlInterfacesImplemented) {$/;"	f
TEST	tests/hal/hal_implementation_test.cpp	/^TEST(Hal, AllAidlInterfacesAreInAosp) {$/;"	f
TEST	tests/hal/hal_implementation_test.cpp	/^TEST(Hal, AllHidlInterfacesAreInAosp) {$/;"	f
TEST	tests/hal/hal_implementation_test.cpp	/^TEST(Hal, HidlInterfacesImplemented) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, ActivateDataCall) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, ChangeOrEnterPIN) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, CloseLogicalChannel) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, DeleteSmsOnSimFalse) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, DeleteSmsOnSimTure) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, EnterDataState) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, FacilityLock) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetBroadcastConfig) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetIMEI) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetIMSI) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetIccCardStatus) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetIccId) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetSendTerminalResponseToSim) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, GetSmscAddress) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, OpenLogicalChannel) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, QueryDataCallList) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, QueryPDPContextList) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, ReadDynamicParamFalse) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, ReadDynamicParamTrue) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, ReportStkServiceIsRunning) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SIM_IO) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SMSAcknowledge) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SendEnvelope) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SendSMS) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SetBroadcastConfig) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SetPDPContext) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, SetSmscAddress) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, TransmitLogicalChannel) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, WriteSMSToSim) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testCLIP) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testCLIR) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testCallForward) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testCallWaiting) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testCurrentCalls) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testDataNetworkRegistration) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testDataNetworkRegistrationWithLte2) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testExitEmergencyMode) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testGetPreferredNetworkType) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testHangup) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testMute) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testQueryCLIR) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testQueryNetworkSelectionMode) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testQuerySupportedTechs) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testRadioPowerReq) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testRequestOperator) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testSendDtmf) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testSetPreferredNetworkType) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testSetRadioPower) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testSignalStrength) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testUSSD) {$/;"	f
TEST_F	host/commands/modem_simulator/unittest/service_test.cpp	/^TEST_F(ModemServiceTest, testVoiceNetworkRegistration) {$/;"	f
TEXT_STRING	host/libs/confui/cbor.h	/^    TEXT_STRING = 3,$/;"	e	enum:cuttlefish::confui::Cbor::Type
THREAD_ANNOTATION_ATTRIBUTE__	common/libs/concurrency/thread_annotations.h	/^#define THREAD_ANNOTATION_ATTRIBUTE__(/;"	d
THREAD_POOL_SIZE	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    private static final int THREAD_POOL_SIZE = 8;$/;"	f	class:JobExecutor	file:
TIMEVAL_0	guest/hals/ril/reference-ril/reference-ril.c	/^static const struct timeval TIMEVAL_0 = {0,0};$/;"	v	typeref:typename:const struct timeval	file:
TIMEVAL_CALLSTATEPOLL	guest/hals/ril/reference-ril/reference-ril.c	/^static const struct timeval TIMEVAL_CALLSTATEPOLL = {0,500000};$/;"	v	typeref:typename:const struct timeval	file:
TIMEVAL_SIMPOLL	guest/hals/ril/reference-ril/reference-ril.c	/^static const struct timeval TIMEVAL_SIMPOLL = {1,0};$/;"	v	typeref:typename:const struct timeval	file:
TIMEVAL_WAKE_TIMEOUT	guest/hals/ril/reference-libril/ril.cpp	/^static const struct timeval TIMEVAL_WAKE_TIMEOUT = {ANDROID_WAKE_LOCK_SECS,ANDROID_WAKE_LOCK_USE/;"	v	namespace:android	typeref:typename:const struct timeval	file:
TMP_EXTENSION	host/commands/assemble_cvd/boot_image_utils.cc	/^const char TMP_EXTENSION[] = ".tmp";$/;"	v	typeref:typename:const char[]
TMP_RD_DIR	host/commands/assemble_cvd/boot_image_utils.cc	/^const char TMP_RD_DIR[] = "stripped_ramdisk_dir";$/;"	v	typeref:typename:const char[]
TOMBSTONE_BUFFER_SIZE	guest/monitoring/tombstone_transmit/tombstone_transmit.cpp	/^#define TOMBSTONE_BUFFER_SIZE /;"	d	file:
TOMBSTONE_DIR	guest/monitoring/tombstone_transmit/tombstone_transmit.cpp	/^static const char TOMBSTONE_DIR[] = "\/data\/tombstones\/";$/;"	v	typeref:typename:const char[]	file:
TOMBSTONE_PATH	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private static final String TOMBSTONE_PATH = "\/data\/tombstones\/";$/;"	f	class:TombstoneTransmitTest	file:
TOMBSTONE_PRODUCER	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private static final String TOMBSTONE_PRODUCER = "tombstone_producer";$/;"	f	class:TombstoneTransmitTest	file:
TRUSTY_GATEKEEPER_H	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^#define TRUSTY_GATEKEEPER_H$/;"	d
TRY_ACQUIRE	common/libs/concurrency/thread_annotations.h	/^#define TRY_ACQUIRE(/;"	d
TRY_ACQUIRE_SHARED	common/libs/concurrency/thread_annotations.h	/^#define TRY_ACQUIRE_SHARED(/;"	d
TYPE_EF	guest/hals/ril/reference-ril/reference-ril.c	/^#define TYPE_EF /;"	d	file:
TYPE_FILE_DES_LEN	guest/hals/ril/reference-ril/reference-ril.c	/^#define TYPE_FILE_DES_LEN /;"	d	file:
Tag3	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^typedef ::android::hardware::keymaster::V3_0::Tag Tag3;$/;"	t	typeref:typename:::android::hardware::keymaster::V3_0::Tag	file:
TapInterfacesInUse	common/libs/utils/network.cpp	/^std::set<std::string> TapInterfacesInUse() {$/;"	f	namespace:cuttlefish	typeref:typename:std::set<std::string>
TargetBuildZipFromArtifacts	host/commands/fetcher/fetch_cvd.cc	/^std::string TargetBuildZipFromArtifacts($/;"	f	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:std::string
TargetFilesZip	host/commands/assemble_cvd/super_image_mixer.cc	/^std::string TargetFilesZip(const FetcherConfig& fetcher_config,$/;"	f	namespace:cuttlefish::__anonae6530d30111	typeref:typename:std::string
TcpConnectorEnabled	host/libs/config/adb/launch.cpp	/^  bool TcpConnectorEnabled() const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:bool	file:
TcpServer	common/frontend/socket_vsock_proxy/main.cpp	/^[[noreturn]] void TcpServer() {$/;"	f	namespace:__anon913036200111	typeref:typename:void
TctiContext	host/commands/secure_env/device_tpm.cpp	/^TSS2_TCTI_CONTEXT* DeviceTpm::TctiContext() {$/;"	f	class:cuttlefish::DeviceTpm	typeref:typename:TSS2_TCTI_CONTEXT *
TctiContext	host/commands/secure_env/in_process_tpm.cpp	/^  TSS2_TCTI_CONTEXT* TctiContext() {$/;"	f	class:cuttlefish::InProcessTpm::Impl	typeref:typename:TSS2_TCTI_CONTEXT *	file:
TctiContext	host/commands/secure_env/in_process_tpm.cpp	/^TSS2_TCTI_CONTEXT* InProcessTpm::TctiContext() { return impl_->TctiContext(); }$/;"	f	class:cuttlefish::InProcessTpm	typeref:typename:TSS2_TCTI_CONTEXT *
TearDownTestSuite	host/commands/modem_simulator/unittest/service_test.cpp	/^  static void TearDownTestSuite() {$/;"	f	class:ModemServiceTest	typeref:typename:void	file:
TeeLogger	common/libs/utils/tee_logging.cpp	/^TeeLogger::TeeLogger(const std::vector<SeverityTarget>& destinations)$/;"	f	class:cuttlefish::TeeLogger
TeeLogger	common/libs/utils/tee_logging.h	/^class TeeLogger {$/;"	c	namespace:cuttlefish
TeeUiFrame	host/libs/confui/server_common.h	/^using TeeUiFrame = std::vector<std::uint32_t>;$/;"	t	namespace:cuttlefish::confui	typeref:typename:std::vector<std::uint32_t>
TeeUiFrameWrapper	host/libs/confui/host_renderer.h	/^  TeeUiFrameWrapper(const int w, const int h, const teeui::Color color)$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper
TeeUiFrameWrapper	host/libs/confui/host_renderer.h	/^class TeeUiFrameWrapper {$/;"	c	namespace:cuttlefish::confui
TeeuiRc	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^using TeeuiRc = ::teeui::ResponseCode;$/;"	t	namespace:android::hardware::confirmationui::V1_0::implementation	typeref:typename:::teeui::ResponseCode	file:
TeeuiRc	guest/hals/confirmationui/guest_session.cpp	/^using TeeuiRc = teeui::ResponseCode;$/;"	t	namespace:android::hardware::confirmationui::V1_0::implementation	typeref:typename:teeui::ResponseCode	file:
Terminate	host/frontend/webrtc/lib/audio_device.cpp	/^int32_t CfAudioDeviceModule::Terminate() { return 0; }$/;"	f	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:int32_t
Terminating	guest/hals/confirmationui/guest_session.h	/^        Terminating = 4,$/;"	e	enum:android::hardware::confirmationui::V1_0::implementation::GuestSession::ListenerState
TestComponent	host/libs/config/adb/test.cpp	/^fruit::Component<TestData> TestComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<TestData>
TestData	host/libs/config/adb/test.cpp	/^struct TestData {$/;"	s	namespace:cuttlefish	file:
TestKeyBits	host/libs/confui/sign.cc	/^enum class TestKeyBits : uint8_t {$/;"	g	namespace:cuttlefish::confui	typeref:typename:uint8_t	file:
TestTpm	host/commands/secure_env/test_tpm.cpp	/^TestTpm::TestTpm() {$/;"	f	class:cuttlefish::TestTpm
TestTpm	host/commands/secure_env/test_tpm.h	/^class TestTpm {$/;"	c	namespace:cuttlefish
ThreadJoiner	common/libs/utils/subprocess.cpp	/^  ThreadJoiner(const std::vector<std::thread*> threads) : threads_(threads) {}$/;"	f	class:cuttlefish::ThreadJoiner	file:
ThreadJoiner	common/libs/utils/subprocess.cpp	/^class ThreadJoiner {$/;"	c	namespace:cuttlefish	file:
ThreadLoop	host/commands/modem_simulator/thread_looper.cpp	/^void ThreadLooper::ThreadLoop() {$/;"	f	class:cuttlefish::ThreadLooper	typeref:typename:void
ThreadLoop	host/commands/run_cvd/boot_state_machine.cc	/^  void ThreadLoop(SharedFD boot_events_pipe) {$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:void	file:
ThreadLooper	host/commands/modem_simulator/thread_looper.cpp	/^ThreadLooper::ThreadLooper()$/;"	f	class:cuttlefish::ThreadLooper
ThreadLooper	host/commands/modem_simulator/thread_looper.h	/^class ThreadLooper {$/;"	c	namespace:cuttlefish
ThreadSafeQueue	common/libs/concurrency/thread_safe_queue.h	/^  explicit ThreadSafeQueue(std::size_t max_elements,$/;"	f	class:cuttlefish::ThreadSafeQueue
ThreadSafeQueue	common/libs/concurrency/thread_safe_queue.h	/^class ThreadSafeQueue {$/;"	c	namespace:cuttlefish
ThreadTracer	host/libs/confui/host_utils.h	/^class ThreadTracer {$/;"	c	namespace:cuttlefish::confui::thread
TimePoint	host/libs/confui/session.h	/^  using TimePoint = std::chrono::time_point<Clock>;$/;"	t	class:cuttlefish::confui::Session	typeref:typename:std::chrono::time_point<Clock>
TimeUpdate	host/commands/modem_simulator/misc_service.cpp	/^void MiscService::TimeUpdate() {$/;"	f	class:cuttlefish::MiscService	typeref:typename:void
TimeZoneOffset	host/commands/modem_simulator/misc_service.cpp	/^long MiscService::TimeZoneOffset(time_t* utctime)$/;"	f	class:cuttlefish::MiscService	typeref:typename:long
TimerWaitingRemoteCallResponse	host/commands/modem_simulator/call_service.cpp	/^void CallService::TimerWaitingRemoteCallResponse(CallToken call_token) {$/;"	f	class:cuttlefish::CallService	typeref:typename:void
Timestamp	host/commands/metrics/proto/common.proto	/^message Timestamp {$/;"	m
ToCharPointers	common/libs/utils/subprocess.cpp	/^std::vector<const char*> ToCharPointers(const std::vector<std::string>& vect) {$/;"	f	namespace:cuttlefish::__anon39e8abf00111	typeref:typename:std::vector<const char * >
ToCmd	common/libs/confui/protocol_types.cpp	/^ConfUiCmd ToCmd(const std::string& cmd_str) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:ConfUiCmd
ToCmd	common/libs/confui/protocol_types.cpp	/^ConfUiCmd ToCmd(std::uint32_t i) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:ConfUiCmd
ToConfUiMessage	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> ToConfUiMessage($/;"	f	namespace:cuttlefish::confui::__anon7b80148c0111	typeref:typename:std::unique_ptr<ConfUiMessage>
ToConfUiMessage	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> ToConfUiMessage<ConfUiCmd::kCliAck>($/;"	f	namespace:cuttlefish::confui::__anon7b80148c0211	typeref:typename:std::unique_ptr<ConfUiMessage>
ToConfUiMessage	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> ToConfUiMessage<ConfUiCmd::kCliRespond>($/;"	f	namespace:cuttlefish::confui::__anon7b80148c0211	typeref:typename:std::unique_ptr<ConfUiMessage>
ToConfUiMessage	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> ToConfUiMessage<ConfUiCmd::kStart>($/;"	f	namespace:cuttlefish::confui::__anon7b80148c0211	typeref:typename:std::unique_ptr<ConfUiMessage>
ToConfUiMessage	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> ToConfUiMessage<ConfUiCmd::kUserInputEvent>($/;"	f	namespace:cuttlefish::confui::__anon7b80148c0211	typeref:typename:std::unique_ptr<ConfUiMessage>
ToConfUiMessage	common/libs/confui/protocol.cpp	/^std::unique_ptr<ConfUiMessage> ToConfUiMessage<ConfUiCmd::kUserTouchEvent>($/;"	f	namespace:cuttlefish::confui::__anon7b80148c0211	typeref:typename:std::unique_ptr<ConfUiMessage>
ToDebugString	common/libs/confui/protocol_types.cpp	/^std::string ToDebugString(const ConfUiCmd& cmd, const bool is_verbose) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ToFsmInput	host/libs/confui/server_common.cc	/^FsmInput ToFsmInput(const ConfUiMessage& msg) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:FsmInput
ToJson	host/frontend/webrtc_operator/server_config.cpp	/^Json::Value ServerConfig::ToJson() const {$/;"	f	class:cuttlefish::ServerConfig	typeref:typename:Json::Value
ToJson	host/libs/config/custom_actions.cpp	/^Json::Value ToJson(const CustomActionConfig& custom_action) {$/;"	f	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:Json::Value
ToLower	host/libs/graphics_detector/graphics_detector.cpp	/^std::string ToLower(const std::string& v) {$/;"	f	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:std::string
ToMultipleImagePartition	host/libs/image_aggregator/image_aggregator.cc	/^MultipleImagePartition ToMultipleImagePartition(ImagePartition source) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:MultipleImagePartition
ToPayload	common/libs/confui/packet.h	/^Payload ToPayload(const std::string& cmd_str, const std::string& session_id,$/;"	f	namespace:cuttlefish::confui::packet::impl	typeref:typename:Payload
ToString	common/libs/confui/packet_types.cpp	/^std::string ToString(const ParsedPacket& packet) {$/;"	f	namespace:cuttlefish::confui::packet	typeref:typename:std::string
ToString	common/libs/confui/protocol.cpp	/^std::string ToString(const ConfUiMessage& msg) { return msg.ToString(); }$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ConfUiAckMessage::ToString() const {$/;"	f	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ConfUiCliResponseMessage::ToString() const {$/;"	f	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ConfUiStartMessage::ToString() const {$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ConfUiUserSelectionMessage::ToString() const {$/;"	f	class:cuttlefish::confui::ConfUiUserSelectionMessage	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ConfUiUserTouchMessage::ToString() const {$/;"	f	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ToString(const ConfUiCmd& cmd) { return ToDebugString(cmd, false); }$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.cpp	/^std::string ToString(const teeui::UIOption ui_opt) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ToString	common/libs/confui/protocol_types.h	/^  std::string ToString() const override {$/;"	f	class:cuttlefish::confui::ConfUiGenericMessage	typeref:typename:std::string
ToString	host/libs/confui/server_common.cc	/^std::string ToString(FsmInput input) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ToString	host/libs/confui/server_common.cc	/^std::string ToString(const MainLoopState& state) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::string
ToUiOption	common/libs/confui/protocol_types.cpp	/^std::optional<teeui::UIOption> ToUiOption(const std::string& src) {$/;"	f	namespace:cuttlefish::confui	typeref:typename:std::optional<teeui::UIOption>
TombstoneReceiver	host/commands/run_cvd/launch.cc	/^class TombstoneReceiver : public CommandSource {$/;"	c	namespace:cuttlefish	file:
TombstoneReceiverBinary	host/libs/config/known_paths.cpp	/^std::string TombstoneReceiverBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
TombstoneReceiverMain	host/commands/tombstone_receiver/main.cpp	/^int TombstoneReceiverMain(int argc, char** argv) {$/;"	f	namespace:cuttlefish	typeref:typename:int
TombstoneTransmitTest	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^public class TombstoneTransmitTest extends BaseHostJUnit4Test {$/;"	c
TopologicalVisit	host/libs/config/feature.h	/^bool FeatureSuperclass<Subclass>::TopologicalVisit($/;"	f	class:cuttlefish::FeatureSuperclass	typeref:typename:bool
TouchEvent	host/libs/confui/host_server.cc	/^void HostServer::TouchEvent(const int x, const int y, const bool is_down) {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
Tpm	host/commands/secure_env/tpm.h	/^class Tpm {$/;"	c	namespace:cuttlefish
TpmAttestationRecordContext	host/commands/secure_env/tpm_attestation_record.cpp	/^TpmAttestationRecordContext::TpmAttestationRecordContext()$/;"	f	class:cuttlefish::TpmAttestationRecordContext
TpmAttestationRecordContext	host/commands/secure_env/tpm_attestation_record.h	/^class TpmAttestationRecordContext : public keymaster::AttestationContext {$/;"	c	namespace:cuttlefish
TpmAuth	host/commands/secure_env/tpm_auth.cpp	/^TpmAuth::TpmAuth(ESYS_TR auth): TpmAuth(auth, ESYS_TR_NONE, ESYS_TR_NONE) {}$/;"	f	class:cuttlefish::TpmAuth
TpmAuth	host/commands/secure_env/tpm_auth.cpp	/^TpmAuth::TpmAuth(ESYS_TR auth1, ESYS_TR auth2)$/;"	f	class:cuttlefish::TpmAuth
TpmAuth	host/commands/secure_env/tpm_auth.cpp	/^TpmAuth::TpmAuth(ESYS_TR auth1, ESYS_TR auth2, ESYS_TR auth3) {$/;"	f	class:cuttlefish::TpmAuth
TpmAuth	host/commands/secure_env/tpm_auth.h	/^class TpmAuth {$/;"	c	namespace:cuttlefish
TpmCommandName	host/commands/secure_env/tpm_commands.cpp	/^std::string TpmCommandName(std::uint32_t command_num) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
TpmDecrypt	host/commands/secure_env/tpm_encrypt_decrypt.cpp	/^bool TpmDecrypt(ESYS_CONTEXT* esys, ESYS_TR key_handle, TpmAuth auth,$/;"	f	namespace:cuttlefish	typeref:typename:bool
TpmEncrypt	host/commands/secure_env/tpm_encrypt_decrypt.cpp	/^bool TpmEncrypt(ESYS_CONTEXT* esys, ESYS_TR key_handle, TpmAuth auth,$/;"	f	namespace:cuttlefish	typeref:typename:bool
TpmEncryptDecrypt	host/commands/secure_env/tpm_encrypt_decrypt.cpp	/^static bool TpmEncryptDecrypt(  \/\/$/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
TpmGatekeeper	host/commands/secure_env/tpm_gatekeeper.cpp	/^TpmGatekeeper::TpmGatekeeper($/;"	f	class:cuttlefish::TpmGatekeeper
TpmGatekeeper	host/commands/secure_env/tpm_gatekeeper.h	/^class TpmGatekeeper : public gatekeeper::GateKeeper {$/;"	c	namespace:cuttlefish
TpmHmac	host/commands/secure_env/tpm_hmac.cpp	/^UniqueEsysPtr<TPM2B_DIGEST> TpmHmac($/;"	f	namespace:cuttlefish	typeref:typename:UniqueEsysPtr<TPM2B_DIGEST>
TpmKeyBlobMaker	host/commands/secure_env/tpm_key_blob_maker.cpp	/^TpmKeyBlobMaker::TpmKeyBlobMaker(TpmResourceManager& resource_manager)$/;"	f	class:cuttlefish::TpmKeyBlobMaker
TpmKeyBlobMaker	host/commands/secure_env/tpm_key_blob_maker.h	/^class TpmKeyBlobMaker : public keymaster::SoftwareKeyBlobMaker {$/;"	c	namespace:cuttlefish
TpmKeymasterContext	host/commands/secure_env/tpm_keymaster_context.cpp	/^TpmKeymasterContext::TpmKeymasterContext($/;"	f	class:cuttlefish::TpmKeymasterContext
TpmKeymasterContext	host/commands/secure_env/tpm_keymaster_context.h	/^class TpmKeymasterContext : public keymaster::KeymasterContext {$/;"	c	namespace:cuttlefish
TpmKeymasterEnforcement	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^TpmKeymasterEnforcement::TpmKeymasterEnforcement($/;"	f	class:cuttlefish::TpmKeymasterEnforcement
TpmKeymasterEnforcement	host/commands/secure_env/tpm_keymaster_enforcement.h	/^class TpmKeymasterEnforcement : public keymaster::KeymasterEnforcement {$/;"	c	namespace:cuttlefish
TpmObjectSlot	host/commands/secure_env/tpm_resource_manager.h	/^using TpmObjectSlot = std::shared_ptr<TpmResourceManager::ObjectSlot>;$/;"	t	namespace:cuttlefish	typeref:typename:std::shared_ptr<TpmResourceManager::ObjectSlot>
TpmRandomSource	host/commands/secure_env/tpm_random_source.cpp	/^TpmRandomSource::TpmRandomSource(ESYS_CONTEXT* esys) : esys_(esys) {$/;"	f	class:cuttlefish::TpmRandomSource
TpmRandomSource	host/commands/secure_env/tpm_random_source.h	/^class TpmRandomSource : public keymaster::RandomSource {$/;"	c	namespace:cuttlefish
TpmRemoteProvisioningContext	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^TpmRemoteProvisioningContext::TpmRemoteProvisioningContext($/;"	f	class:cuttlefish::TpmRemoteProvisioningContext
TpmRemoteProvisioningContext	host/commands/secure_env/tpm_remote_provisioning_context.h	/^class TpmRemoteProvisioningContext$/;"	c	namespace:cuttlefish
TpmResourceManager	host/commands/secure_env/tpm_resource_manager.cpp	/^TpmResourceManager::TpmResourceManager(ESYS_CONTEXT* esys)$/;"	f	class:cuttlefish::TpmResourceManager
TpmResourceManager	host/commands/secure_env/tpm_resource_manager.h	/^class TpmResourceManager {$/;"	c	namespace:cuttlefish
TpmSerializable	host/commands/secure_env/tpm_serialize.cpp	/^TpmSerializable<T>::TpmSerializable(T* instance) : instance_(instance) {}$/;"	f	class:cuttlefish::TpmSerializable
TpmSerializable	host/commands/secure_env/tpm_serialize.cpp	/^template class TpmSerializable<TPM2B_PRIVATE>;$/;"	v	namespace:cuttlefish	typeref:meta:class
TpmSerializable	host/commands/secure_env/tpm_serialize.cpp	/^template class TpmSerializable<TPM2B_PUBLIC>;$/;"	v	namespace:cuttlefish	typeref:meta:class
TpmSerializable	host/commands/secure_env/tpm_serialize.h	/^class TpmSerializable : public keymaster::Serializable {$/;"	c	namespace:cuttlefish
Transition	host/libs/confui/host_server.cc	/^void HostServer::Transition(std::unique_ptr<ConfUiMessage>& input_ptr) {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
Transition	host/libs/confui/session.cc	/^MainLoopState Session::Transition(SharedFD& hal_cli, const FsmInput fsm_input,$/;"	f	class:cuttlefish::confui::Session	typeref:typename:MainLoopState
Transmit	host/commands/secure_env/in_process_tpm.cpp	/^  static TSS2_RC Transmit($/;"	f	class:cuttlefish::InProcessTpm::Impl	typeref:typename:TSS2_RC	file:
Truncate	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::Truncate(off_t length) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
TrustyConfirmationUI	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^TrustyConfirmationUI::TrustyConfirmationUI()$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI
TrustyConfirmationUI	guest/hals/confirmationui/TrustyConfirmationUI.h	/^class TrustyConfirmationUI : public IConfirmationUI {$/;"	c	namespace:android::hardware::confirmationui::V1_0::implementation
Try Cuttlefish	README.md	/^## Try Cuttlefish$/;"	s	chapter:Cuttlefish Getting Started
TxBuffer	host/libs/audio_connector/buffers.h	/^  TxBuffer(const virtio_snd_pcm_xfer& header, const volatile uint8_t* buffer,$/;"	f	class:cuttlefish::TxBuffer
TxBuffer	host/libs/audio_connector/buffers.h	/^class TxBuffer : public ShmBuffer {$/;"	c	namespace:cuttlefish
TxBufferAt	host/libs/audio_connector/server.cpp	/^const volatile uint8_t* AudioClientConnection::TxBufferAt(size_t offset,$/;"	f	class:cuttlefish::AudioClientConnection	typeref:typename:const volatile uint8_t *
Type	host/libs/confui/cbor.h	/^  enum class Type : uint8_t {$/;"	g	class:cuttlefish::confui::Cbor	typeref:typename:uint8_t
Type	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  WmediumdMessageType Type() const override {$/;"	f	class:cuttlefish::WmediumdMessageReloadConfig	typeref:typename:WmediumdMessageType
Type	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  WmediumdMessageType Type() const override {$/;"	f	class:cuttlefish::WmediumdMessageReloadCurrentConfig	typeref:typename:WmediumdMessageType
Type	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  WmediumdMessageType Type() const override {$/;"	f	class:cuttlefish::WmediumdMessageSetControl	typeref:typename:WmediumdMessageType
Type	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  WmediumdMessageType Type() const override {$/;"	f	class:cuttlefish::WmediumdMessageSetSnr	typeref:typename:WmediumdMessageType
UID	shared/config/cgroups.json	/^      "UID": "system",$/;"	s	object:Cgroups.0
UNKNOWN	guest/hals/ril/reference-libril/ril.h	/^    UNKNOWN = 0x00,     \/\/ Unknown Radio Access Network$/;"	e	enum:__anon0bfbaecfa503
UNKNOWN	host/commands/modem_simulator/sup_service.h	/^      UNKNOWN                       = 2,$/;"	e	enum:cuttlefish::SupService::ClirStatusInfo::ClirStatus
UNKNOWN_PURPOSE	host/libs/config/fetcher_config.h	/^  UNKNOWN_PURPOSE = 0,$/;"	e	enum:cuttlefish::FileSource
UNLOCK	host/commands/modem_simulator/sim_service.h	/^      UNLOCK = 0,$/;"	e	enum:cuttlefish::SimService::FacilityLock::Mode
UNMANAGED_Dup	common/libs/fs/shared_fd.cpp	/^int FileInstance::UNMANAGED_Dup() {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
UNMANAGED_Dup2	common/libs/fs/shared_fd.cpp	/^int FileInstance::UNMANAGED_Dup2(int newfd) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:int
UNVISITED	host/libs/config/feature.h	/^  enum class Status { UNVISITED, VISITING, VISITED };$/;"	e	enum:cuttlefish::FeatureSuperclass::TopologicalVisit::Status
USAGE_MESSAGE	host/commands/fetcher/fetch_cvd.cc	/^std::string USAGE_MESSAGE =$/;"	v	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:std::string
USAGE_MESSAGE	host/commands/health/health.cpp	/^std::string USAGE_MESSAGE =$/;"	v	typeref:typename:std::string
USERIMAGE_PARTITIONS	shared/releasetools.py	/^USERIMAGE_PARTITIONS = [$/;"	v
USE_CAMERA_STUB	shared/BoardConfig.mk	/^USE_CAMERA_STUB := true$/;"	m
USE_OPENGL_RENDERER	shared/BoardConfig.mk	/^USE_OPENGL_RENDERER := true$/;"	m
USIM_DATA_OFFSET_2	guest/hals/ril/reference-ril/reference-ril.c	/^#define USIM_DATA_OFFSET_2 /;"	d	file:
USIM_DATA_OFFSET_3	guest/hals/ril/reference-ril/reference-ril.c	/^#define USIM_DATA_OFFSET_3 /;"	d	file:
USIM_FILE_DES_TAG	guest/hals/ril/reference-ril/reference-ril.c	/^#define USIM_FILE_DES_TAG /;"	d	file:
USIM_FILE_SIZE_TAG	guest/hals/ril/reference-ril/reference-ril.c	/^#define USIM_FILE_SIZE_TAG /;"	d	file:
UTRAN	guest/hals/ril/reference-libril/ril.h	/^    UTRAN = 0x02,       \/\/ Universal Terrestrial Radio Access Network$/;"	e	enum:__anon0bfbaecfa503
UTRAN_BAND_1	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_1 = 1,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_10	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_10 = 10,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_11	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_11 = 11,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_12	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_12 = 12,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_13	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_13 = 13,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_14	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_14 = 14,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_19	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_19 = 19,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_2	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_2 = 2,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_20	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_20 = 20,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_21	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_21 = 21,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_22	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_22 = 22,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_25	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_25 = 25,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_26	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_26 = 26,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_3	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_3 = 3,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_4	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_4 = 4,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_5	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_5 = 5,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_6	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_6 = 6,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_7	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_7 = 7,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_8	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_8 = 8,$/;"	e	enum:__anon0bfbaecfa803
UTRAN_BAND_9	guest/hals/ril/reference-libril/ril.h	/^    UTRAN_BAND_9 = 9,$/;"	e	enum:__anon0bfbaecfa803
UiOptsToString	common/libs/confui/protocol_types.cpp	/^std::string ConfUiStartMessage::UiOptsToString() const {$/;"	f	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::string
UnRegisterDevice	host/frontend/webrtc_operator/device_registry.cpp	/^void DeviceRegistry::UnRegisterDevice(const std::string& device_id) {$/;"	f	class:cuttlefish::DeviceRegistry	typeref:typename:void
Unauthorized	host/libs/websocket/websocket_handler.h	/^  Unauthorized = 401,$/;"	e	enum:cuttlefish::HttpStatusCode
UnexpectedArgumentGuard	common/libs/utils/flag_parser.cpp	/^Flag UnexpectedArgumentGuard() {$/;"	f	namespace:cuttlefish	typeref:typename:Flag
UniqueData	host/commands/secure_env/primary_key_builder.cpp	/^void PrimaryKeyBuilder::UniqueData(const std::string& data) {$/;"	f	class:cuttlefish::PrimaryKeyBuilder	typeref:typename:void
UniqueDir	host/commands/fetcher/build_api.cc	/^using UniqueDir = std::unique_ptr<DIR, CloseDir>;$/;"	t	namespace:cuttlefish	typeref:typename:std::unique_ptr<DIR,CloseDir>	file:
UniqueEsysPtr	host/commands/secure_env/tpm_hmac.h	/^using UniqueEsysPtr = std::unique_ptr<T, EsysDeleter>;$/;"	t	namespace:cuttlefish	typeref:typename:std::unique_ptr<T,EsysDeleter>
UnixMessageSocket	common/libs/utils/unix_sockets.cpp	/^UnixMessageSocket::UnixMessageSocket(SharedFD socket) : socket_(socket) {$/;"	f	class:cuttlefish::UnixMessageSocket
UnixMessageSocket	common/libs/utils/unix_sockets.h	/^class UnixMessageSocket {$/;"	c	namespace:cuttlefish
UnixMessageSocketPair	common/libs/utils/unix_sockets_test.cpp	/^std::pair<UnixMessageSocket, UnixMessageSocket> UnixMessageSocketPair() {$/;"	f	namespace:cuttlefish	typeref:typename:std::pair<UnixMessageSocket,UnixMessageSocket>
UnixSocketMessage	common/libs/utils/unix_sockets.h	/^struct UnixSocketMessage {$/;"	s	namespace:cuttlefish
Unknown	host/libs/config/adb/adb.h	/^  Unknown,$/;"	e	enum:cuttlefish::AdbMode
Unknown	host/libs/config/cuttlefish_config.h	/^  Unknown,$/;"	e	enum:cuttlefish::SecureHal
UnmarshalFn	host/commands/secure_env/tpm_serialize.cpp	/^int UnmarshalFn = 0; \/\/ Break code without an explicit specialization.$/;"	v	namespace:cuttlefish	typeref:typename:int
UnpackBootImage	host/commands/assemble_cvd/boot_image_utils.cc	/^bool UnpackBootImage(const std::string& boot_image_path,$/;"	f	namespace:cuttlefish::__anonbfa95aa40111	typeref:typename:bool
UnpackVendorBootImageIfNotUnpacked	host/commands/assemble_cvd/boot_image_utils.cc	/^bool UnpackVendorBootImageIfNotUnpacked($/;"	f	namespace:cuttlefish::__anonbfa95aa40111	typeref:typename:bool
Unregister	host/frontend/webrtc/lib/streamer.cpp	/^void Streamer::Unregister() {$/;"	f	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:void
UnregisterAudioObserver	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::UnregisterAudioObserver(AudioObserver* observer) {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
UnregisterObserver	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^void AudioTrackSourceImpl::UnregisterObserver($/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:void
UnsetEnvironment	common/libs/utils/subprocess.cpp	/^void UnsetEnvironment(const std::unordered_set<std::string>& unenv) {$/;"	f	namespace:cuttlefish::__anon39e8abf00111	typeref:typename:void
UnsetFromEnvironment	common/libs/utils/subprocess.h	/^  void UnsetFromEnvironment(const std::vector<std::string>& env) {$/;"	f	class:cuttlefish::Command	typeref:typename:void
UnsetVideoTrack	host/frontend/webrtc/lib/client_handler.cpp	/^  void UnsetVideoTrack(webrtc::VideoTrackInterface *track) {$/;"	f	class:cuttlefish::webrtc_streaming::ClientVideoTrackImpl	typeref:typename:void	file:
UnsolResponseInfo	guest/hals/ril/reference-libril/ril.cpp	/^} UnsolResponseInfo;$/;"	t	namespace:android	typeref:struct:android::__anonf9a2982a0108	file:
Unsubscribe	host/frontend/webrtc/kernel_log_events_handler.cpp	/^void KernelLogEventsHandler::Unsubscribe(int subscriber_id) {$/;"	f	class:cuttlefish::KernelLogEventsHandler	typeref:typename:void
UnvalidatedAlias	common/libs/utils/flag_parser.cpp	/^Flag Flag::UnvalidatedAlias(const FlagAlias& alias) && {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag
UnvalidatedAlias	common/libs/utils/flag_parser.cpp	/^Flag& Flag::UnvalidatedAlias(const FlagAlias& alias) & {$/;"	f	class:cuttlefish::Flag	typeref:typename:Flag &
UnvalidatedCreateKeyBlob	host/commands/secure_env/tpm_key_blob_maker.cpp	/^keymaster_error_t TpmKeyBlobMaker::UnvalidatedCreateKeyBlob($/;"	f	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:keymaster_error_t
UnwrapKey	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t UnwrapKey($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
UnwrapKey	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::UnwrapKey($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
UnwrapKeyBlob	host/commands/secure_env/tpm_key_blob_maker.cpp	/^keymaster_error_t TpmKeyBlobMaker::UnwrapKeyBlob($/;"	f	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:keymaster_error_t
UpdateColorScheme	host/libs/confui/host_renderer.cc	/^void ConfUiRenderer::UpdateColorScheme(const bool is_inverted) {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:void
UpdateDeviceList	host/frontend/webrtc_operator/assets/js/index.js	/^  async #UpdateDeviceList() {$/;"	m	class:DeviceListApp
UpdateFlagDefaults	host/commands/start/flag_forwarder.cc	/^void FlagForwarder::UpdateFlagDefaults() const {$/;"	f	class:FlagForwarder	typeref:typename:void
UpdateHealthInfo	guest/hals/health/health.cpp	/^void HealthImpl::UpdateHealthInfo(HealthInfo* health_info) {$/;"	f	class:android::hardware::health::V2_1::implementation::HealthImpl	typeref:typename:void
UpdateLocale	host/libs/confui/host_renderer.cc	/^teeui::Error ConfUiRenderer::UpdateLocale() {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Error
UpdateOperation	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::UpdateOperation(const UpdateOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
UpdateOperation	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::UpdateOperation(const UpdateOperationRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
UpdatePixels	host/libs/confui/host_renderer.cc	/^teeui::Error ConfUiRenderer::UpdatePixels(TeeUiFrameWrapper& raw_frame,$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Error
UpdateRegisterState	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::UpdateRegisterState(RegistrationState state ) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
UpdateString	host/libs/confui/host_renderer.cc	/^teeui::Error ConfUiRenderer::UpdateString() {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Error
UpdateTranslations	host/libs/confui/host_renderer.cc	/^teeui::Error ConfUiRenderer::UpdateTranslations() {$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Error
UpgradeIntegerTag	host/commands/secure_env/tpm_keymaster_context.cpp	/^static bool UpgradeIntegerTag($/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
UpgradeKey	guest/hals/keymaster/remote/remote_keymaster.cpp	/^void RemoteKeymaster::UpgradeKey(const UpgradeKeyRequest& request, UpgradeKeyResponse* response)/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
UpgradeKey	guest/hals/keymint/remote/remote_keymaster.cpp	/^void RemoteKeymaster::UpgradeKey(const UpgradeKeyRequest& request,$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:void
UpgradeKeyBlob	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster_error_t UpgradeKeyBlob($/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster_error_t
UpgradeKeyBlob	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster_error_t TpmKeymasterContext::UpgradeKeyBlob($/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster_error_t
UserAbort	host/libs/confui/session.cc	/^void Session::UserAbort(SharedFD hal_cli) {$/;"	f	class:cuttlefish::confui::Session	typeref:typename:void
UserAbortEvent	host/libs/confui/host_server.cc	/^void HostServer::UserAbortEvent() {$/;"	f	class:cuttlefish::confui::HostServer	typeref:typename:void
UserCallbackInfo	guest/hals/ril/reference-libril/ril.cpp	/^typedef struct UserCallbackInfo {$/;"	s	namespace:android	file:
UserCallbackInfo	guest/hals/ril/reference-libril/ril.cpp	/^} UserCallbackInfo;$/;"	t	namespace:android	typeref:struct:android::UserCallbackInfo	file:
UserInGroup	host/libs/vm_manager/host_configuration.cpp	/^bool UserInGroup(const std::string& group,$/;"	f	namespace:cuttlefish::vm_manager::__anon1edaaabd0111	typeref:typename:bool
UserResponse	common/libs/confui/protocol_types.h	/^struct UserResponse {$/;"	s	namespace:cuttlefish::confui
UserType	host/commands/metrics/proto/common.proto	/^enum UserType {$/;"	g
V1_0	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^namespace V1_0 {$/;"	n	namespace:android::hardware::confirmationui	file:
V1_0	guest/hals/confirmationui/TrustyConfirmationUI.h	/^namespace V1_0 {$/;"	n	namespace:android::hardware::confirmationui
V1_0	guest/hals/confirmationui/guest_session.cpp	/^namespace V1_0 {$/;"	n	namespace:android::hardware::confirmationui	file:
V1_0	guest/hals/confirmationui/guest_session.h	/^namespace V1_0 {$/;"	n	namespace:android::hardware::confirmationui
V1_0	guest/hals/confirmationui/include/TrustyConfirmationuiHal.h	/^namespace V1_0 {$/;"	n	namespace:android::hardware::confirmationui
V1_1	guest/hals/bt/remote/remote_bluetooth.cpp	/^namespace V1_1 {$/;"	n	namespace:android::hardware::bluetooth	file:
V1_1	guest/hals/bt/remote/remote_bluetooth.h	/^namespace V1_1 {$/;"	n	namespace:android::hardware::bluetooth
V2_1	guest/hals/health/health.cpp	/^namespace V2_1 {$/;"	n	namespace:android::hardware::health	file:
V2_7	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider	file:
V2_7	guest/hals/camera/vsock_camera_provider_2_7.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider
V2_7	guest/hals/camera/vsock_camera_server.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider	file:
V2_7	guest/hals/camera/vsock_camera_server.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider
V3_4	guest/hals/camera/cached_stream_buffer.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device	file:
V3_4	guest/hals/camera/cached_stream_buffer.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device
V3_4	guest/hals/camera/stream_buffer_cache.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device	file:
V3_4	guest/hals/camera/stream_buffer_cache.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device
V3_4	guest/hals/camera/vsock_camera_device_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device	file:
V3_4	guest/hals/camera/vsock_camera_device_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device
V3_4	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device	file:
V3_4	guest/hals/camera/vsock_camera_device_session_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device
V3_4	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device	file:
V3_4	guest/hals/camera/vsock_camera_metadata.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device
V4_1	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^namespace V4_1 {$/;"	n	namespace:keymaster	file:
V4_1	guest/hals/keymaster/remote/remote_keymaster4_device.h	/^namespace V4_1 {$/;"	n	namespace:keymaster
VBMETA_MAX_SIZE	host/commands/assemble_cvd/disk_flags.cc	/^#define VBMETA_MAX_SIZE /;"	d	file:
VDBG	guest/hals/ril/reference-libril/ril_internal.h	/^#define VDBG /;"	d
VENDOR_SECURITY_PATCH	shared/device.mk	/^VENDOR_SECURITY_PATCH = $(PLATFORM_SECURITY_PATCH)$/;"	m
VIOS_VERSION	host/libs/audio_connector/shm_layout.h	/^const uint32_t VIOS_VERSION = 2;$/;"	v	namespace:cuttlefish	typeref:typename:const uint32_t
VIRTIO_SND_CHMAP_BC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_BC,        \/* bottom center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_BLC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_BLC,       \/* bottom left center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_BRC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_BRC        \/* bottom right center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FC,        \/* front center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FCH	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FCH,       \/* front center high *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FL	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FL,        \/* front left *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FLC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FLC,       \/* front left center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FLH	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FLH,       \/* front left high *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FLW	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FLW,       \/* front left wide *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FR,        \/* front right *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FRC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FRC,       \/* front right center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FRH	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FRH,       \/* front right high *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_FRW	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_FRW,       \/* front right wide *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_LFE	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_LFE,       \/* low frequency (LFE) *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_LLFE	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_LLFE,      \/* left LFE *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_MAX_SIZE	host/libs/audio_connector/shm_layout.h	/^constexpr uint8_t VIRTIO_SND_CHMAP_MAX_SIZE = 18;$/;"	v	namespace:cuttlefish	typeref:typename:uint8_t
VIRTIO_SND_CHMAP_MONO	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_MONO,      \/* mono stream *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_NA	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_NA,        \/* silent *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_NONE	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_NONE = 0,  \/* undefined *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_RC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_RC,        \/* rear center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_RL	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_RL,        \/* rear left *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_RLC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_RLC,       \/* rear left center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_RLFE	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_RLFE,      \/* right LFE *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_RR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_RR,        \/* rear right *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_RRC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_RRC,       \/* rear right center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_SL	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_SL,        \/* side left *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_SR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_SR,        \/* side right *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TC,        \/* top center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TFC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TFC,       \/* top front center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TFL	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TFL,       \/* top front left *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TFLC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TFLC,      \/* top front left center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TFR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TFR,       \/* top front right *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TFRC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TFRC,      \/* top front right center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TRC	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TRC,       \/* top rear center *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TRL	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TRL,       \/* top rear left *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TRR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TRR,       \/* top rear right *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TSL	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TSL,       \/* top side left *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_CHMAP_TSR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_CHMAP_TSR,       \/* top side right *\/$/;"	e	enum:cuttlefish::AudioChannelMap
VIRTIO_SND_D_INPUT	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_D_INPUT$/;"	e	enum:cuttlefish::AudioStreamDirection
VIRTIO_SND_D_OUTPUT	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_D_OUTPUT = 0,$/;"	e	enum:cuttlefish::AudioStreamDirection
VIRTIO_SND_JACK_F_REMAP	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_JACK_F_REMAP = 0$/;"	e	enum:cuttlefish::AudioJackFeatures
VIRTIO_SND_PCM_FMT_A_LAW	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_A_LAW,         \/*  8 \/  8 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_DSD_U16	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_DSD_U16,        \/* 16 \/ 16 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_DSD_U32	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_DSD_U32,        \/* 32 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_DSD_U8	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_DSD_U8,         \/*  8 \/  8 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_FLOAT	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_FLOAT,         \/* 32 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_FLOAT64	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_FLOAT64,       \/* 64 \/ 64 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_IEC958_SUBFRAME	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_IEC958_SUBFRAME \/* 32 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_IMA_ADPCM	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_IMA_ADPCM = 0, \/*  4 \/  4 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_MU_LAW	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_MU_LAW,        \/*  8 \/  8 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S16	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S16,           \/* 16 \/ 16 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S18_3	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S18_3,         \/* 18 \/ 24 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S20	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S20,           \/* 20 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S20_3	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S20_3,         \/* 20 \/ 24 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S24	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S24,           \/* 24 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S24_3	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S24_3,         \/* 24 \/ 24 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S32	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S32,           \/* 32 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_S8	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_S8,            \/*  8 \/  8 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U16	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U16,           \/* 16 \/ 16 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U18_3	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U18_3,         \/* 18 \/ 24 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U20	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U20,           \/* 20 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U20_3	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U20_3,         \/* 20 \/ 24 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U24	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U24,           \/* 24 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U24_3	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U24_3,         \/* 24 \/ 24 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U32	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U32,           \/* 32 \/ 32 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_FMT_U8	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_FMT_U8,            \/*  8 \/  8 bits *\/$/;"	e	enum:cuttlefish::AudioStreamFormat
VIRTIO_SND_PCM_RATE_11025	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_11025,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_16000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_16000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_176400	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_176400,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_192000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_192000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_22050	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_22050,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_32000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_32000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_384000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_384000$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_44100	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_44100,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_48000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_48000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_5512	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_5512 = 0,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_64000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_64000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_8000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_8000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_88200	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_88200,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_PCM_RATE_96000	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_PCM_RATE_96000,$/;"	e	enum:cuttlefish::AudioStreamRate
VIRTIO_SND_R_CHMAP_INFO	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_CHMAP_INFO = 0x0200,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_JACK_INFO	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_JACK_INFO = 1,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_JACK_REMAP	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_JACK_REMAP,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_PCM_INFO	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_PCM_INFO = 0x0100,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_PCM_PREPARE	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_PCM_PREPARE,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_PCM_RELEASE	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_PCM_RELEASE,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_PCM_SET_PARAMS	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_PCM_SET_PARAMS,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_PCM_START	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_PCM_START,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_R_PCM_STOP	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_R_PCM_STOP,$/;"	e	enum:cuttlefish::AudioCommandType
VIRTIO_SND_S_BAD_MSG	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_S_BAD_MSG,$/;"	e	enum:cuttlefish::AudioStatus
VIRTIO_SND_S_IO_ERR	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_S_IO_ERR,$/;"	e	enum:cuttlefish::AudioStatus
VIRTIO_SND_S_NOT_SUPP	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_S_NOT_SUPP,$/;"	e	enum:cuttlefish::AudioStatus
VIRTIO_SND_S_OK	host/libs/audio_connector/shm_layout.h	/^  VIRTIO_SND_S_OK = 0x8000,$/;"	e	enum:cuttlefish::AudioStatus
VIRTUAL_DEVICE_BOOT_COMPLETED	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String VIRTUAL_DEVICE_BOOT_COMPLETED = "VIRTUAL_DEVICE_BOOT_COMPLETED";$/;"	f	class:EventReporter	file:
VIRTUAL_DEVICE_BOOT_FAILED	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String VIRTUAL_DEVICE_BOOT_FAILED = "VIRTUAL_DEVICE_BOOT_FAILED";$/;"	f	class:EventReporter	file:
VIRTUAL_DEVICE_BOOT_PENDING	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String VIRTUAL_DEVICE_BOOT_PENDING = "VIRTUAL_DEVICE_BOOT_PENDING";$/;"	f	class:EventReporter	file:
VIRTUAL_DEVICE_BOOT_STARTED	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String VIRTUAL_DEVICE_BOOT_STARTED = "VIRTUAL_DEVICE_BOOT_STARTED";$/;"	f	class:EventReporter	file:
VIRTUAL_DEVICE_SCREEN_CHANGED	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private static final String VIRTUAL_DEVICE_SCREEN_CHANGED = "VIRTUAL_DEVICE_SCREEN_CHANGED";$/;"	f	class:EventReporter	file:
VISITED	host/libs/config/feature.h	/^  enum class Status { UNVISITED, VISITING, VISITED };$/;"	e	enum:cuttlefish::FeatureSuperclass::TopologicalVisit::Status
VISITING	host/libs/config/feature.h	/^  enum class Status { UNVISITED, VISITING, VISITED };$/;"	e	enum:cuttlefish::FeatureSuperclass::TopologicalVisit::Status
VMADDR_CID_ANY	common/libs/fs/vm_sockets.h	/^#define VMADDR_CID_ANY /;"	d
VMADDR_CID_HOST	common/libs/fs/vm_sockets.h	/^#define VMADDR_CID_HOST /;"	d
VMADDR_CID_HYPERVISOR	common/libs/fs/vm_sockets.h	/^#define VMADDR_CID_HYPERVISOR /;"	d
VMADDR_CID_RESERVED	common/libs/fs/vm_sockets.h	/^#define VMADDR_CID_RESERVED /;"	d
VMADDR_PORT_ANY	common/libs/fs/vm_sockets.h	/^#define VMADDR_PORT_ANY /;"	d
VM_SOCKETS_INVALID_VERSION	common/libs/fs/vm_sockets.h	/^#define VM_SOCKETS_INVALID_VERSION /;"	d
VM_SOCKETS_VERSION_EPOCH	common/libs/fs/vm_sockets.h	/^#define VM_SOCKETS_VERSION_EPOCH(/;"	d
VM_SOCKETS_VERSION_MAJOR	common/libs/fs/vm_sockets.h	/^#define VM_SOCKETS_VERSION_MAJOR(/;"	d
VM_SOCKETS_VERSION_MINOR	common/libs/fs/vm_sockets.h	/^#define VM_SOCKETS_VERSION_MINOR(/;"	d
VOICE	host/commands/modem_simulator/sim_service.h	/^      VOICE = 1 << 0,   \/\/ telephony$/;"	e	enum:cuttlefish::SimService::FacilityLock::Class
VP8OnlyEncoderFactory	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^VP8OnlyEncoderFactory::VP8OnlyEncoderFactory($/;"	f	class:cuttlefish::webrtc_streaming::VP8OnlyEncoderFactory
VP8OnlyEncoderFactory	host/frontend/webrtc/lib/vp8only_encoder_factory.h	/^class VP8OnlyEncoderFactory : public webrtc::VideoEncoderFactory {$/;"	c	namespace:cuttlefish::webrtc_streaming
VSOC_WPA_SUPPLICANT_DEBUG	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^#define VSOC_WPA_SUPPLICANT_DEBUG /;"	d
VSoCInputService	guest/commands/vsoc_input_service/vsoc_input_service.h	/^class VSoCInputService {$/;"	c	namespace:cuttlefish_input_service
ValidMacAddr	host/commands/wmediumd_control/main.cpp	/^bool ValidMacAddr(const std::string& macAddr) {$/;"	f	typeref:typename:bool
ValidateAlias	common/libs/utils/flag_parser.cpp	/^void Flag::ValidateAlias(const FlagAlias& alias) {$/;"	f	class:cuttlefish::Flag	typeref:typename:void
ValidateConfigRequest	host/libs/allocd/resource_manager.cpp	/^bool ResourceManager::ValidateConfigRequest(const Json::Value& config) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:bool
ValidateField	host/frontend/webrtc/lib/utils.cpp	/^std::string ValidateField(const Json::Value &obj, const std::string &type,$/;"	f	namespace:cuttlefish::webrtc_streaming::__anon2c505fdf0111	typeref:typename:std::string
ValidateHostConfiguration	host/libs/vm_manager/host_configuration.cpp	/^bool ValidateHostConfiguration(std::vector<std::string>* config_commands) {$/;"	f	namespace:cuttlefish::vm_manager	typeref:typename:bool
ValidateHostConfigurationFeature	host/commands/run_cvd/validate.cpp	/^class ValidateHostConfigurationFeature : public Feature {$/;"	c	namespace:cuttlefish::__anon8d12954e0111	file:
ValidateJsonObject	host/frontend/webrtc/lib/utils.cpp	/^ValidationResult ValidationResult::ValidateJsonObject($/;"	f	class:cuttlefish::webrtc_streaming::ValidationResult	typeref:typename:ValidationResult
ValidateMetricsConfirmation	host/commands/start/main.cc	/^std::string ValidateMetricsConfirmation(std::string use_metrics) {$/;"	f	namespace:__anon8e1e78490111	typeref:typename:std::string
ValidateRequest	host/libs/allocd/resource_manager.cpp	/^bool ResourceManager::ValidateRequest(const Json::Value& request) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:bool
ValidateRequestList	host/libs/allocd/resource_manager.cpp	/^bool ResourceManager::ValidateRequestList(const Json::Value& config) {$/;"	f	class:cuttlefish::ResourceManager	typeref:typename:bool
ValidateTapDevices	host/commands/run_cvd/validate.cpp	/^class ValidateTapDevices : public Feature {$/;"	c	namespace:cuttlefish::__anon8d12954e0111	file:
ValidateTokenSignature	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^bool TpmKeymasterEnforcement::ValidateTokenSignature($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:bool
ValidationResult	host/frontend/webrtc/lib/utils.h	/^  ValidationResult(const std::string &error) : error_(error) {}$/;"	f	class:cuttlefish::webrtc_streaming::ValidationResult
ValidationResult	host/frontend/webrtc/lib/utils.h	/^class ValidationResult {$/;"	c	namespace:cuttlefish::webrtc_streaming
Value	shared/config/task_profiles.json	/^            "Value": "100"$/;"	s	object:Profiles.29.Actions.1.Params
Value	shared/config/task_profiles.json	/^            "Value": "150"$/;"	s	object:Profiles.28.Actions.1.Params
Value	shared/config/task_profiles.json	/^            "Value": "16MB"$/;"	s	object:Profiles.28.Actions.0.Params
Value	shared/config/task_profiles.json	/^            "Value": "512MB"$/;"	s	object:Profiles.29.Actions.0.Params
VehicleHalGrpcServerBinary	host/libs/config/known_paths.cpp	/^std::string VehicleHalGrpcServerBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
VehicleHalServer	host/commands/run_cvd/launch.cc	/^class VehicleHalServer : public CommandSource {$/;"	c	namespace:cuttlefish	file:
Verbose	common/libs/utils/subprocess.h	/^  bool Verbose() const { return verbose_; }$/;"	f	class:cuttlefish::SubprocessOptions	typeref:typename:bool
Verbose	common/libs/utils/subprocess.h	/^  void Verbose(bool verbose) {$/;"	f	class:cuttlefish::SubprocessOptions	typeref:typename:void
VerificationData	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^  struct VerificationData {$/;"	s	function:cuttlefish::TpmKeymasterEnforcement::VerifyAuthorization	file:
VerifiedBootParams	host/commands/secure_env/tpm_attestation_record.cpp	/^using VerifiedBootParams = keymaster::AttestationContext::VerifiedBootParams;$/;"	t	namespace:cuttlefish::__anon03bde2800111	typeref:typename:keymaster::AttestationContext::VerifiedBootParams	file:
VerifyAndCopyDeviceIds	host/commands/secure_env/tpm_attestation_record.cpp	/^keymaster_error_t TpmAttestationRecordContext::VerifyAndCopyDeviceIds($/;"	f	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:keymaster_error_t
VerifyAuthorization	guest/hals/keymaster/remote/remote_keymaster.cpp	/^VerifyAuthorizationResponse RemoteKeymaster::VerifyAuthorization($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:VerifyAuthorizationResponse
VerifyAuthorization	guest/hals/keymint/remote/remote_keymaster.cpp	/^VerifyAuthorizationResponse RemoteKeymaster::VerifyAuthorization($/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:VerifyAuthorizationResponse
VerifyAuthorization	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^VerifyAuthorizationResponse TpmKeymasterEnforcement::VerifyAuthorization($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:VerifyAuthorizationResponse
VerifyFast	host/commands/secure_env/soft_gatekeeper.h	/^    bool VerifyFast(const fast_hash_t& fast_hash, const SizedBuffer& password) {$/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
VerifyPIN	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::PinStatus::VerifyPIN(const std::string_view pin) {$/;"	f	class:cuttlefish::SimService::PinStatus	typeref:typename:bool
VerifyPUK	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::PinStatus::VerifyPUK(const std::string_view puk) {$/;"	f	class:cuttlefish::SimService::PinStatus	typeref:typename:bool
VersionedAidlPackage	tests/hal/hal_implementation_test.cpp	/^struct VersionedAidlPackage {$/;"	s	file:
VideoFrameBuffer	host/frontend/webrtc/lib/video_frame_buffer.h	/^class VideoFrameBuffer {$/;"	c	namespace:cuttlefish::webrtc_streaming
VideoFrameWrapper	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  VideoFrameWrapper($/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	file:
VideoFrameWrapper	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^class VideoFrameWrapper : public webrtc::I420BufferInterface {$/;"	c	namespace:cuttlefish::webrtc_streaming::__anone9f9f83a0111	file:
VideoSink	host/frontend/webrtc/lib/video_sink.h	/^class VideoSink {$/;"	c	namespace:cuttlefish::webrtc_streaming
VideoTrackSourceImpl	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^VideoTrackSourceImpl::VideoTrackSourceImpl(int width, int height)$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl
VideoTrackSourceImpl	host/frontend/webrtc/lib/video_track_source_impl.h	/^class VideoTrackSourceImpl : public webrtc::VideoTrackSource {$/;"	c	namespace:cuttlefish::webrtc_streaming
VideoTrackSourceImplSinkWrapper	host/frontend/webrtc/lib/video_track_source_impl.h	/^  VideoTrackSourceImplSinkWrapper(rtc::scoped_refptr<VideoTrackSourceImpl> obj)$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImplSinkWrapper
VideoTrackSourceImplSinkWrapper	host/frontend/webrtc/lib/video_track_source_impl.h	/^class VideoTrackSourceImplSinkWrapper : public VideoSink {$/;"	c	namespace:cuttlefish::webrtc_streaming
VioSConfig	host/libs/audio_connector/shm_layout.h	/^struct VioSConfig {$/;"	s	namespace:cuttlefish
VirtioGpuMetadata	host/libs/wayland/wayland_surface.h	/^  struct VirtioGpuMetadata {$/;"	s	class:wayland::Surface
VirtualDeviceBase	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^VirtualDeviceBase::VirtualDeviceBase(const char* device_name,$/;"	f	class:VirtualDeviceBase
VirtualDeviceBase	guest/commands/vsoc_input_service/virtual_device_base.h	/^class VirtualDeviceBase {$/;"	c	namespace:cuttlefish_input_service
VirtualKeyboard	guest/commands/vsoc_input_service/virtual_keyboard.cpp	/^VirtualKeyboard::VirtualKeyboard()$/;"	f	class:cuttlefish_input_service::VirtualKeyboard
VirtualKeyboard	guest/commands/vsoc_input_service/virtual_keyboard.h	/^class VirtualKeyboard : public VirtualDeviceBase {$/;"	c	namespace:cuttlefish_input_service
VirtualPowerButton	guest/commands/vsoc_input_service/virtual_power_button.cpp	/^VirtualPowerButton::VirtualPowerButton()$/;"	f	class:cuttlefish_input_service::VirtualPowerButton
VirtualPowerButton	guest/commands/vsoc_input_service/virtual_power_button.h	/^class VirtualPowerButton : public VirtualDeviceBase {$/;"	c	namespace:cuttlefish_input_service
VirtualTouchScreen	guest/commands/vsoc_input_service/virtual_touchscreen.cpp	/^VirtualTouchScreen::VirtualTouchScreen(uint32_t width, uint32_t height)$/;"	f	class:cuttlefish_input_service::VirtualTouchScreen
VirtualTouchScreen	guest/commands/vsoc_input_service/virtual_touchscreen.h	/^class VirtualTouchScreen : public VirtualDeviceBase {$/;"	c	namespace:cuttlefish_input_service
VmManager	host/libs/vm_manager/vm_manager.h	/^class VmManager {$/;"	c	namespace:cuttlefish::vm_manager
VmManagerBootconfig	host/libs/config/bootconfig_args.cpp	/^std::vector<std::string> VmManagerBootconfig(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish::__anond90bdb570111	typeref:typename:std::vector<std::string>
VmManagerComponent	host/libs/vm_manager/vm_manager.cpp	/^VmManagerComponent() {$/;"	f	namespace:cuttlefish::vm_manager	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig>,VmManager>
VmManagerKernelCmdline	host/libs/config/kernel_args.cpp	/^std::vector<std::string> VmManagerKernelCmdline(const CuttlefishConfig& config) {$/;"	f	namespace:cuttlefish::__anonfb53392e0111	typeref:typename:std::vector<std::string>
VmmCommands	host/commands/run_cvd/launch.cc	/^class VmmCommands : public CommandSource {$/;"	c	namespace:cuttlefish	file:
VmmType	host/commands/metrics/proto/cf_metrics_event.proto	/^  enum VmmType {$/;"	g	message:cuttlefish.MetricsEvent
VsockCameraDevice	guest/hals/camera/vsock_camera_device_3_4.cpp	/^VsockCameraDevice::VsockCameraDevice($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice
VsockCameraDevice	guest/hals/camera/vsock_camera_device_3_4.h	/^class VsockCameraDevice : public ICameraDevice {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
VsockCameraDeviceSession	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^VsockCameraDeviceSession::VsockCameraDeviceSession($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession
VsockCameraDeviceSession	guest/hals/camera/vsock_camera_device_session_3_4.h	/^class VsockCameraDeviceSession : public ICameraDeviceSession {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
VsockCameraMetadata	guest/hals/camera/vsock_camera_metadata.cpp	/^VsockCameraMetadata::VsockCameraMetadata(int32_t width, int32_t height,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata
VsockCameraMetadata	guest/hals/camera/vsock_camera_metadata.h	/^class VsockCameraMetadata : public CameraMetadata {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
VsockCameraProvider	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^VsockCameraProvider::VsockCameraProvider(VsockCameraServer* server) {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider
VsockCameraProvider	guest/hals/camera/vsock_camera_provider_2_7.h	/^class VsockCameraProvider : public ICameraProvider {$/;"	c	namespace:android::hardware::camera::provider::V2_7::implementation
VsockCameraRequestMetadata	guest/hals/camera/vsock_camera_metadata.cpp	/^VsockCameraRequestMetadata::VsockCameraRequestMetadata(int32_t fps,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraRequestMetadata
VsockCameraRequestMetadata	guest/hals/camera/vsock_camera_metadata.h	/^class VsockCameraRequestMetadata : public CameraMetadata {$/;"	c	namespace:android::hardware::camera::device::V3_4::implementation
VsockCameraServer	guest/hals/camera/vsock_camera_server.cpp	/^VsockCameraServer::VsockCameraServer() {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer
VsockCameraServer	guest/hals/camera/vsock_camera_server.h	/^class VsockCameraServer {$/;"	c	namespace:android::hardware::camera::provider::V2_7::implementation
VsockClient	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::VsockClient(unsigned int cid, unsigned int port, int type) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
VsockClientConnection	common/libs/utils/vsock_connection.h	/^class VsockClientConnection : public VsockConnection {$/;"	c	namespace:cuttlefish
VsockConnection	common/libs/utils/vsock_connection.h	/^class VsockConnection {$/;"	c	namespace:cuttlefish
VsockConnectorEnabled	host/libs/config/adb/launch.cpp	/^  bool VsockConnectorEnabled() const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:bool	file:
VsockFrameProvider	guest/hals/camera/vsock_frame_provider.h	/^class VsockFrameProvider {$/;"	c	namespace:cuttlefish
VsockHalfTunnel	host/libs/config/adb/adb.h	/^  VsockHalfTunnel,$/;"	e	enum:cuttlefish::AdbMode
VsockHalfTunnelEnabled	host/libs/config/adb/launch.cpp	/^  bool VsockHalfTunnelEnabled() const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:bool	file:
VsockReadLoop	guest/hals/camera/vsock_frame_provider.cpp	/^void VsockFrameProvider::VsockReadLoop(uint32_t width, uint32_t height) {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:void
VsockRequestComparator	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  struct VsockRequestComparator {$/;"	s	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession
VsockSendYUVFrame	host/frontend/webrtc/lib/camera_streamer.cpp	/^bool CameraStreamer::VsockSendYUVFrame($/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:bool
VsockServer	common/frontend/socket_vsock_proxy/main.cpp	/^[[noreturn]] void VsockServer() {$/;"	f	namespace:__anon913036200111	typeref:typename:void
VsockServer	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::VsockServer(int type) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
VsockServer	common/libs/fs/shared_fd.cpp	/^SharedFD SharedFD::VsockServer(unsigned int port, int type, unsigned int cid) {$/;"	f	class:cuttlefish::SharedFD	typeref:typename:SharedFD
VsockServerConnection	common/libs/utils/vsock_connection.h	/^class VsockServerConnection : public VsockConnection {$/;"	c	namespace:cuttlefish
VsockServerPort	common/libs/fs/shared_fd.cpp	/^unsigned int FileInstance::VsockServerPort() {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:unsigned int
VsockToSocket	common/frontend/socket_vsock_proxy/main.cpp	/^void VsockToSocket(SocketSender socket_sender,$/;"	f	namespace:__anon913036200111	typeref:typename:void
VsockTunnel	host/libs/config/adb/adb.h	/^  VsockTunnel,$/;"	e	enum:cuttlefish::AdbMode
VsockTunnelEnabled	host/libs/config/adb/launch.cpp	/^  bool VsockTunnelEnabled() const {$/;"	f	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:bool	file:
WAKE_PARTIAL	guest/hals/ril/reference-libril/ril.cpp	/^enum WakeType {DONT_WAKE, WAKE_PARTIAL};$/;"	e	enum:android::WakeType	file:
WAKE_PARTIAL	guest/hals/ril/reference-libril/ril_ex.h	/^enum SocketWakeType {DONT_WAKE, WAKE_PARTIAL};$/;"	e	enum:SocketWakeType
WCDMA	guest/hals/ril/reference-ril/reference-ril.c	/^#define WCDMA /;"	d	file:
WCDMA_SignalStrength	guest/hals/ril/reference-libril/ril.h	/^    RIL_SignalStrengthWcdma     WCDMA_SignalStrength;$/;"	m	struct:__anon0bfbaecf5308	typeref:typename:RIL_SignalStrengthWcdma
WIFI_CONNECTED_MESSAGE	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private static final String WIFI_CONNECTED_MESSAGE =$/;"	f	class:GceWifiManager	file:
WIFI_DRIVER_FW_PATH_AP	shared/BoardConfig.mk	/^WIFI_DRIVER_FW_PATH_AP      := "\/dev\/null"$/;"	m
WIFI_DRIVER_FW_PATH_PARAM	shared/BoardConfig.mk	/^WIFI_DRIVER_FW_PATH_PARAM   := "\/dev\/null"$/;"	m
WIFI_DRIVER_FW_PATH_STA	shared/BoardConfig.mk	/^WIFI_DRIVER_FW_PATH_STA     := "\/dev\/null"$/;"	m
WIFI_HIDL_FEATURE_DUAL_INTERFACE	shared/BoardConfig.mk	/^WIFI_HIDL_FEATURE_DUAL_INTERFACE := true$/;"	m
WIFI_RECONNECTION_TIMEOUT_S	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private static final int WIFI_RECONNECTION_TIMEOUT_S = 5;$/;"	f	class:GceWifiManager	file:
WIN32_LEAN_AND_MEAN	host/libs/graphics_detector/include/EGL/eglplatform.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WITH_PIN	host/commands/modem_simulator/sim_service.h	/^    enum ChangeMode {WITH_PIN, WITH_PUK};$/;"	e	enum:cuttlefish::SimService::PinStatus::ChangeMode
WITH_PUK	host/commands/modem_simulator/sim_service.h	/^    enum ChangeMode {WITH_PIN, WITH_PUK};$/;"	e	enum:cuttlefish::SimService::PinStatus::ChangeMode
WLAN	guest/hals/ril/reference-libril/ril.h	/^    WLAN = 2, \/* Key type to be used for WLAN *\/$/;"	e	enum:__anon0bfbaecf2b03
WORKAROUND_ERRONEOUS_ANSWER	guest/hals/ril/reference-ril/reference-ril.c	/^#define WORKAROUND_ERRONEOUS_ANSWER /;"	d	file:
WORKAROUND_FAKE_CGEV	guest/hals/ril/reference-ril/reference-ril.c	/^#define WORKAROUND_FAKE_CGEV /;"	d	file:
WPA_SRC_FILE	guest/libs/wpa_supplicant_8_lib/Android.mk	/^WPA_SRC_FILE :=$/;"	m
WPA_SUPPLICANT_VERSION	shared/BoardConfig.mk	/^WPA_SUPPLICANT_VERSION      := VER_0_8_X$/;"	m
WPA_SUPPL_DIR	guest/libs/wpa_supplicant_8_lib/Android.mk	/^WPA_SUPPL_DIR = external\/wpa_supplicant_8$/;"	m
WPA_SUPPL_DIR_INCLUDE	guest/libs/wpa_supplicant_8_lib/Android.mk	/^WPA_SUPPL_DIR_INCLUDE = $(WPA_SUPPL_DIR)\/src \\$/;"	m
Wait	common/libs/utils/subprocess.cpp	/^int Subprocess::Wait() {$/;"	f	class:cuttlefish::Subprocess	typeref:typename:int
Wait	common/libs/utils/subprocess.cpp	/^pid_t Subprocess::Wait(int* wstatus, int options) {$/;"	f	class:cuttlefish::Subprocess	typeref:typename:pid_t
WaitAndroidMode	host/libs/confui/host_mode_ctrl.h	/^  void WaitAndroidMode() {$/;"	f	class:cuttlefish::HostModeCtrl	typeref:typename:void
WaitAndroidMode	host/libs/screen_connector/screen_connector_ctrl.h	/^  void WaitAndroidMode() {$/;"	f	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:void
WaitEmpty	host/libs/screen_connector/screen_connector_queue.h	/^  void WaitEmpty() {$/;"	f	class:cuttlefish::ScreenConnectorQueue	typeref:typename:void
WaitForAdbDisconnection	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^void WaitForAdbDisconnection(const std::string& address) {$/;"	f	namespace:__anon734383cf0111	typeref:typename:void
WaitForAdbdToBeStarted	common/frontend/socket_vsock_proxy/main.cpp	/^void WaitForAdbdToBeStarted(int events_fd) {$/;"	f	namespace:__anon913036200111	typeref:typename:void
WakeType	guest/hals/ril/reference-libril/ril.cpp	/^enum WakeType {DONT_WAKE, WAKE_PARTIAL};$/;"	g	namespace:android	file:
WakeupFromSleep	host/commands/modem_simulator/network_service.cpp	/^bool NetworkService::WakeupFromSleep() {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:bool
WarnOnFail	tools/create_base_image.go	/^    WarnOnFail$/;"	c	package:main
WaylandScreenConnector	host/libs/screen_connector/wayland_screen_connector.cpp	/^WaylandScreenConnector::WaylandScreenConnector(int frames_fd) {$/;"	f	class:cuttlefish::WaylandScreenConnector
WaylandScreenConnector	host/libs/screen_connector/wayland_screen_connector.h	/^class WaylandScreenConnector {$/;"	c	namespace:cuttlefish
WaylandServer	host/libs/wayland/wayland_server.cpp	/^WaylandServer::WaylandServer(int wayland_socket_fd) {$/;"	f	class:wayland::WaylandServer
WaylandServer	host/libs/wayland/wayland_server.h	/^class WaylandServer {$/;"	c	namespace:wayland
WaylandServerState	host/libs/wayland/wayland_server.cpp	/^struct WaylandServerState {$/;"	s	namespace:wayland::internal	file:
WeakFD	common/libs/fs/shared_fd.h	/^  WeakFD(SharedFD shared_fd) : value_(shared_fd.value_) {}$/;"	f	class:cuttlefish::WeakFD
WeakFD	common/libs/fs/shared_fd.h	/^class WeakFD {$/;"	c	namespace:cuttlefish
WebRtcBinary	host/libs/config/known_paths.cpp	/^std::string WebRtcBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
WebRtcComponent	host/frontend/webrtc/main.cpp	/^fruit::Component<cuttlefish::CustomActionConfigProvider> WebRtcComponent() {$/;"	f	typeref:typename:fruit::Component<cuttlefish::CustomActionConfigProvider>
WebRtcScProcessedFrame	host/frontend/webrtc/display_handler.h	/^struct WebRtcScProcessedFrame : public ScreenConnectorFrameInfo {$/;"	s	namespace:cuttlefish
WebRtcServer	host/commands/run_cvd/launch_streamer.cpp	/^class WebRtcServer : public virtual CommandSource,$/;"	c	namespace:cuttlefish::__anon6b0274e10111	file:
WebRtcSigServerBinary	host/libs/config/known_paths.cpp	/^std::string WebRtcSigServerBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
WebSocketHandler	host/libs/websocket/websocket_handler.cpp	/^WebSocketHandler::WebSocketHandler(struct lws* wsi) : wsi_(wsi) {}$/;"	f	class:cuttlefish::WebSocketHandler
WebSocketHandler	host/libs/websocket/websocket_handler.h	/^class WebSocketHandler {$/;"	c	namespace:cuttlefish
WebSocketHandlerFactory	host/libs/websocket/websocket_handler.h	/^class WebSocketHandlerFactory {$/;"	c	namespace:cuttlefish
WebSocketServer	host/libs/websocket/websocket_server.cpp	/^WebSocketServer::WebSocketServer(const char* protocol_name,$/;"	f	class:cuttlefish::WebSocketServer
WebSocketServer	host/libs/websocket/websocket_server.h	/^class WebSocketServer {$/;"	c	namespace:cuttlefish
WebsocketCallback	host/libs/websocket/websocket_server.cpp	/^int WebSocketServer::WebsocketCallback(struct lws* wsi,$/;"	f	class:cuttlefish::WebSocketServer	typeref:typename:int
WebsocketConnector	host/frontend/webrtc_operator/assets/js/server_connector.js	/^class WebsocketConnector extends Connector {$/;"	c
Width	host/libs/confui/host_renderer.h	/^  int Width() const { return w_; }$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:int
WifiE2eTests	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^public class WifiE2eTests {$/;"	c
WifiNetworkConnected	host/commands/kernel_log_monitor/kernel_log_server.h	/^  WifiNetworkConnected = 3,$/;"	e	enum:monitor::Event
WithServerErrorRetry	host/commands/fetcher/curl_wrapper.cc	/^\/* static *\/ std::unique_ptr<CurlWrapper> CurlWrapper::WithServerErrorRetry($/;"	f	class:cuttlefish::CurlWrapper	typeref:typename:std::unique_ptr<CurlWrapper>
WmediumdBinary	host/libs/config/known_paths.cpp	/^std::string WmediumdBinary() { return HostBinaryPath("wmediumd"); }$/;"	f	namespace:cuttlefish	typeref:typename:std::string
WmediumdController	host/libs/wmediumd_controller/wmediumd_controller.h	/^  WmediumdController() {}$/;"	f	class:cuttlefish::WmediumdController
WmediumdController	host/libs/wmediumd_controller/wmediumd_controller.h	/^class WmediumdController {$/;"	c	namespace:cuttlefish
WmediumdGenConfigBinary	host/libs/config/known_paths.cpp	/^std::string WmediumdGenConfigBinary() {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
WmediumdMessage	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^class WmediumdMessage {$/;"	c	namespace:cuttlefish
WmediumdMessageReloadConfig	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  WmediumdMessageReloadConfig(const std::string& configPath)$/;"	f	class:cuttlefish::WmediumdMessageReloadConfig
WmediumdMessageReloadConfig	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^class WmediumdMessageReloadConfig : public WmediumdMessage {$/;"	c	namespace:cuttlefish
WmediumdMessageReloadCurrentConfig	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^class WmediumdMessageReloadCurrentConfig : public WmediumdMessage {$/;"	c	namespace:cuttlefish
WmediumdMessageSetControl	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  WmediumdMessageSetControl(uint32_t flags) : flags_(flags) {}$/;"	f	class:cuttlefish::WmediumdMessageSetControl
WmediumdMessageSetControl	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^class WmediumdMessageSetControl : public WmediumdMessage {$/;"	c	namespace:cuttlefish
WmediumdMessageSetSnr	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^WmediumdMessageSetSnr::WmediumdMessageSetSnr(const std::string& node1,$/;"	f	class:cuttlefish::WmediumdMessageSetSnr
WmediumdMessageSetSnr	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^class WmediumdMessageSetSnr : public WmediumdMessage {$/;"	c	namespace:cuttlefish
WmediumdMessageType	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^enum class WmediumdMessageType : uint32_t {$/;"	g	namespace:cuttlefish	typeref:typename:uint32_t
WmediumdServer	host/commands/run_cvd/launch.cc	/^class WmediumdServer : public CommandSource {$/;"	c	namespace:cuttlefish	file:
Write	common/libs/fs/shared_fd.cpp	/^ssize_t FileInstance::Write(const void* buf, size_t count) {$/;"	f	class:cuttlefish::FileInstance	typeref:typename:ssize_t
Write	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::Write(const char* data, unsigned int size) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
Write	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::Write(const std::vector<char>& data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
Write	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::Write(int32_t data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
Write	host/commands/secure_env/fragile_tpm_storage.cpp	/^bool FragileTpmStorage::Write($/;"	f	class:cuttlefish::FragileTpmStorage	typeref:typename:bool
Write	host/commands/secure_env/insecure_fallback_storage.cpp	/^bool InsecureFallbackStorage::Write($/;"	f	class:cuttlefish::InsecureFallbackStorage	typeref:typename:bool
WriteAll	common/libs/fs/shared_buf.cc	/^ssize_t WriteAll(SharedFD fd, const char* buf, size_t size) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
WriteAll	common/libs/fs/shared_buf.cc	/^ssize_t WriteAll(SharedFD fd, const std::string& buf) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
WriteAll	common/libs/fs/shared_buf.cc	/^ssize_t WriteAll(SharedFD fd, const std::vector<char>& buf) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
WriteAllBinary	common/libs/fs/shared_buf.h	/^ssize_t WriteAllBinary(SharedFD fd, const T* binary_data) {$/;"	f	namespace:cuttlefish	typeref:typename:ssize_t
WriteBeginning	host/libs/image_aggregator/image_aggregator.cc	/^bool WriteBeginning(SharedFD out, const GptBeginning& beginning) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:bool
WriteBytes	host/libs/confui/cbor.cc	/^bool Cbor::WriteBytes(uint64_t value, uint8_t size) {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
WriteBytesToBuffer	host/libs/confui/cbor.cc	/^bool Cbor::WriteBytesToBuffer(const std::vector<std::uint8_t>& bytes) {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
WriteCommonHttpHeaders	host/libs/websocket/websocket_server.cpp	/^bool WriteCommonHttpHeaders(int status, const char* mime_type,$/;"	f	namespace:cuttlefish::__anon8185be2f0111	typeref:typename:bool
WriteEnd	host/libs/image_aggregator/image_aggregator.cc	/^bool WriteEnd(SharedFD out, const GptEnd& end) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:bool
WriteEnvironment	host/commands/assemble_cvd/boot_config.cc	/^size_t WriteEnvironment(const CuttlefishConfig& config,$/;"	f	namespace:cuttlefish::__anon0f90c2e70111	typeref:typename:size_t
WriteEvent	host/commands/kernel_log_monitor/utils.cc	/^bool WriteEvent(cuttlefish::SharedFD fd, const Json::Value& event_message) {$/;"	f	namespace:monitor	typeref:typename:bool
WriteFailureRecord	host/commands/secure_env/soft_gatekeeper.h	/^    virtual bool WriteFailureRecord(uint32_t uid, failure_record_t* record, bool \/* secure *\/)/;"	f	class:gatekeeper::SoftGateKeeper	typeref:typename:bool
WriteFailureRecord	host/commands/secure_env/tpm_gatekeeper.cpp	/^bool TpmGatekeeper::WriteFailureRecord($/;"	f	class:cuttlefish::TpmGatekeeper	typeref:typename:bool
WriteFailureRecordImpl	host/commands/secure_env/tpm_gatekeeper.cpp	/^static bool WriteFailureRecordImpl($/;"	f	namespace:cuttlefish	typeref:typename:bool	file:
WriteFiles	host/commands/start/main.cc	/^void WriteFiles(cuttlefish::FetcherConfig fetcher_config, cuttlefish::SharedFD out) {$/;"	f	namespace:__anon8e1e78490111	typeref:typename:void
WriteGflagsCompatHelpXml	host/commands/assemble_cvd/flag_feature.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream& out) const override {$/;"	f	class:cuttlefish::ParseGflagsImpl	typeref:typename:bool	file:
WriteGflagsCompatHelpXml	host/libs/config/adb/flags.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream& out) const override {$/;"	f	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:bool	file:
WriteGflagsCompatHelpXml	host/libs/config/config_flag.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream& out) const override {$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:bool	file:
WriteGflagsCompatHelpXml	host/libs/config/config_flag.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream&) const override { return true; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigFlagPlaceholderImpl	typeref:typename:bool	file:
WriteGflagsCompatHelpXml	host/libs/config/config_flag.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream&) const override { return true; }$/;"	f	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:bool	file:
WriteGflagsCompatHelpXml	host/libs/config/config_flag.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream&) const override {$/;"	f	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:bool	file:
WriteGflagsCompatHelpXml	host/libs/config/custom_actions.cpp	/^  bool WriteGflagsCompatHelpXml(std::ostream& out) const override {$/;"	f	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:bool	file:
WriteGflagsCompatXml	common/libs/utils/flag_parser.cpp	/^bool Flag::WriteGflagsCompatXml(std::ostream& out) const {$/;"	f	class:cuttlefish::Flag	typeref:typename:bool
WriteGflagsCompatXml	common/libs/utils/flag_parser.cpp	/^bool WriteGflagsCompatXml(const std::vector<Flag>& flags, std::ostream& out) {$/;"	f	namespace:cuttlefish	typeref:typename:bool
WriteGflagsHelpXml	host/libs/config/feature.cpp	/^bool FlagFeature::WriteGflagsHelpXml(const std::vector<FlagFeature*>& features,$/;"	f	class:cuttlefish::FlagFeature	typeref:typename:bool
WriteHeader	host/libs/confui/cbor.cc	/^bool Cbor::WriteHeader(const Cbor::Type type, const std::uint64_t value) {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
WriteLoop	host/commands/console_forwarder/main.cpp	/^  [[noreturn]] void WriteLoop() {$/;"	f	class:cuttlefish::ConsoleForwarder	typeref:typename:void	file:
WriteMessage	common/libs/utils/unix_sockets.cpp	/^Result<void> UnixMessageSocket::WriteMessage(const UnixSocketMessage& message) {$/;"	f	class:cuttlefish::UnixMessageSocket	typeref:typename:Result<void>
WriteMessage	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::WriteMessage(const Json::Value& data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
WriteMessage	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::WriteMessage(const std::string& data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
WriteMessage	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::WriteMessage(const std::vector<char>& data) {$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
WriteMiscInfo	host/commands/assemble_cvd/misc_info.cc	/^std::string WriteMiscInfo(const MiscInfo& misc_info) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
WritePayload	common/libs/confui/packet.h	/^bool WritePayload(SharedFD d, const std::string& cmd_str,$/;"	f	namespace:cuttlefish::confui::packet	typeref:typename:bool
WriteProtectedJsonToFile	host/commands/secure_env/json_serializable.cpp	/^bool WriteProtectedJsonToFile($/;"	f	namespace:cuttlefish	typeref:typename:bool
WriteStrides	common/libs/utils/vsock_connection.cpp	/^bool VsockConnection::WriteStrides(const char* data, unsigned int size,$/;"	f	class:cuttlefish::VsockConnection	typeref:typename:bool
WriteTextToBuffer	host/libs/confui/cbor.cc	/^bool Cbor::WriteTextToBuffer(const std::string& text) {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:bool
WriteWsBuffer	host/libs/websocket/websocket_handler.cpp	/^void WebSocketHandler::WriteWsBuffer(WebSocketHandler::WsBuffer& ws_buffer) {$/;"	f	class:cuttlefish::WebSocketHandler	typeref:typename:void
WsBuffer	host/frontend/webrtc/lib/ws_connection.cpp	/^    WsBuffer(const uint8_t* data, size_t len, bool binary)$/;"	f	struct:WsConnectionImpl::WsBuffer	file:
WsBuffer	host/frontend/webrtc/lib/ws_connection.cpp	/^  struct WsBuffer {$/;"	s	class:WsConnectionImpl	file:
WsBuffer	host/libs/websocket/websocket_handler.h	/^    WsBuffer(std::vector<uint8_t> data, bool binary)$/;"	f	struct:cuttlefish::WebSocketHandler::WsBuffer
WsBuffer	host/libs/websocket/websocket_handler.h	/^  struct WsBuffer {$/;"	s	class:cuttlefish::WebSocketHandler
WsConnection	host/frontend/webrtc/lib/ws_connection.h	/^class WsConnection {$/;"	c
WsConnectionContext	host/frontend/webrtc/lib/ws_connection.h	/^class WsConnectionContext {$/;"	c
WsConnectionContextImpl	host/frontend/webrtc/lib/ws_connection.cpp	/^WsConnectionContextImpl::WsConnectionContextImpl(struct lws_context* lws_ctx)$/;"	f	class:WsConnectionContextImpl
WsConnectionContextImpl	host/frontend/webrtc/lib/ws_connection.cpp	/^class WsConnectionContextImpl$/;"	c	file:
WsConnectionImpl	host/frontend/webrtc/lib/ws_connection.cpp	/^WsConnectionImpl::WsConnectionImpl($/;"	f	class:WsConnectionImpl
WsConnectionImpl	host/frontend/webrtc/lib/ws_connection.cpp	/^class WsConnectionImpl : public WsConnection,$/;"	c	file:
WsConnectionObserver	host/frontend/webrtc/lib/ws_connection.h	/^class WsConnectionObserver {$/;"	c
X86	common/libs/utils/environment.h	/^  X86,$/;"	e	enum:cuttlefish::Arch
X86_64	common/libs/utils/environment.h	/^  X86_64,$/;"	e	enum:cuttlefish::Arch
XmlEscape	common/libs/utils/flag_parser.cpp	/^static std::string XmlEscape(const std::string& s) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string	file:
XmlEscape	host/commands/assemble_cvd/flag_feature.cpp	/^static std::string XmlEscape(const std::string& s) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string	file:
Zero	common/libs/fs/shared_select.h	/^  void Zero() {$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:void
_UAPI_VM_SOCKETS_H	common/libs/fs/vm_sockets.h	/^#define _UAPI_VM_SOCKETS_H$/;"	d
__NR_memfd_create	common/libs/fs/shared_fd.cpp	/^#  define __NR_memfd_create /;"	d	file:
__STDC_LIMIT_MACROS	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^#define __STDC_LIMIT_MACROS$/;"	d	file:
__TARGET_NO_BOOTLOADER	shared/BoardConfig.mk	/^__TARGET_NO_BOOTLOADER := $(TARGET_NO_BOOTLOADER)$/;"	m
__anon027348120111	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^namespace {$/;"	n	namespace:wayland	file:
__anon02806fd80111	host/libs/image_aggregator/image_aggregator.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon0281e17c0111	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon0281e17c0211	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon03bde2800111	host/commands/secure_env/tpm_attestation_record.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon050238300102	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300202	host/commands/modem_simulator/call_service.cpp	/^          [this](const Client& client) { this->HandleAcceptCall(client); }),$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300302	host/commands/modem_simulator/call_service.cpp	/^          [this](const Client& client) { this->HandleRejectCall(client); }),$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300402	host/commands/modem_simulator/call_service.cpp	/^          [this](const Client& client) { this->HandleCurrentCalls(client); }),$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300502	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300602	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300702	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300802	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300902	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300a02	host/commands/modem_simulator/call_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::CallService::InitializeCommandHandlers	file:
__anon050238300b02	host/commands/modem_simulator/call_service.cpp	/^        makeSafeCallback<CallService>(this, [call_token](CallService* me) {$/;"	f	function:cuttlefish::CallService::HandleDial	file:
__anon068c5ffd0102	host/commands/modem_simulator/sim_service.cpp	/^          [this](const Client& client) { this->HandleSIMStatusReq(client); }),$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0202	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0302	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0402	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0502	host/commands/modem_simulator/sim_service.cpp	/^          [this](const Client& client) { this->HandleGetIMSI(client); }),$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0602	host/commands/modem_simulator/sim_service.cpp	/^          [this](const Client& client) { this->HandleGetIccId(client); }),$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0702	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0802	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0902	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0a02	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0b02	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0c02	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0d02	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0e02	host/commands/modem_simulator/sim_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon068c5ffd0f02	host/commands/modem_simulator/sim_service.cpp	/^                    [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SimService::InitializeCommandHandlers	file:
__anon087586ca0111	guest/hals/keymint/remote/remote_keymint_device.cpp	/^namespace {$/;"	n	namespace:aidl::android::hardware::security::keymint	file:
__anon08fbc66c0102	guest/commands/bt_vhci_forwarder/main.cpp	/^      [](const std::vector<uint8_t>& \/* raw_command *\/) {$/;"	f	function:main	file:
__anon08fbc66c0202	guest/commands/bt_vhci_forwarder/main.cpp	/^      [vhci_fd](const std::vector<uint8_t>& raw_event) {$/;"	f	function:main	file:
__anon08fbc66c0302	guest/commands/bt_vhci_forwarder/main.cpp	/^      [vhci_fd](const std::vector<uint8_t>& raw_acl) {$/;"	f	function:main	file:
__anon08fbc66c0402	guest/commands/bt_vhci_forwarder/main.cpp	/^      [vhci_fd](const std::vector<uint8_t>& raw_sco) {$/;"	f	function:main	file:
__anon08fbc66c0502	guest/commands/bt_vhci_forwarder/main.cpp	/^      [vhci_fd](const std::vector<uint8_t>& raw_iso) {$/;"	f	function:main	file:
__anon08fbc66c0602	guest/commands/bt_vhci_forwarder/main.cpp	/^      []() { LOG(INFO) << "HCI socket device disconnected"; });$/;"	f	function:main	file:
__anon0a6d9b510111	host/commands/secure_env/secure_env.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon0a6d9b510202	host/commands/secure_env/secure_env.cpp	/^  return std::thread([kernel_events_fd]() {$/;"	f	function:cuttlefish::__anon0a6d9b510111::StartKernelEventMonitor	file:
__anon0a6d9b510302	host/commands/secure_env/secure_env.cpp	/^      []() -> Tpm* {  \/\/ fruit will take ownership$/;"	f	function:cuttlefish::__anon0a6d9b510111::SecureEnvComponent	typeref:typename:Tpm *	file:
__anon0a6d9b510402	host/commands/secure_env/secure_env.cpp	/^      nullptr, [](ESYS_CONTEXT* esys) { Esys_Finalize(&esys); });$/;"	f	function:cuttlefish::SecureEnvMain	file:
__anon0a6d9b510502	host/commands/secure_env/secure_env.cpp	/^  threads.emplace_back([keymaster_in, keymaster_out, &keymaster]() {$/;"	f	function:cuttlefish::SecureEnvMain	file:
__anon0a6d9b510602	host/commands/secure_env/secure_env.cpp	/^  threads.emplace_back([gatekeeper_in, gatekeeper_out, &gatekeeper]() {$/;"	f	function:cuttlefish::SecureEnvMain	file:
__anon0bfbaecf0103	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0203	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0303	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0603	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0703	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0803	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0903	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf0b03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0c03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0d03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0e03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf0f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1408	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1508	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1703	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf1808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf190a	guest/hals/ril/reference-libril/ril.h	/^    union {$/;"	u	struct:__anon0bfbaecf1808
__anon0bfbaecf1a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1b08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1d08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf1f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2408	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf2608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2803	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf2908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2b03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf2c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2d03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf2e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf2f03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3003	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf3203	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3303	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3603	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3703	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3808	guest/hals/ril/reference-libril/ril.h	/^{$/;"	s
__anon0bfbaecf3908	guest/hals/ril/reference-libril/ril.h	/^{$/;"	s
__anon0bfbaecf3a08	guest/hals/ril/reference-libril/ril.h	/^{$/;"	s
__anon0bfbaecf3b08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf3c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf3d03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf3e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf3f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4003	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf4108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4408	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf4608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4b08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4d08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf4f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf5503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf5608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5b08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5d08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf5f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6008	guest/hals/ril/reference-libril/ril.h	/^typedef struct  {$/;"	s
__anon0bfbaecf6108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6408	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6508	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6b03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf6c03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf6d03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf6e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf6f0a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf6e08
__anon0bfbaecf7008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf710a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf7008
__anon0bfbaecf7208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf730a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf7208
__anon0bfbaecf7408	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf750a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf7408
__anon0bfbaecf7608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf770a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf7608
__anon0bfbaecf7808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf7908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf7a08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf7b08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf7c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf7d08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf7e0a	guest/hals/ril/reference-libril/ril.h	/^    union {$/;"	u	struct:__anon0bfbaecf7d08
__anon0bfbaecf7f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8103	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf8208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf8508	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8a0a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf8908
__anon0bfbaecf8b08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8d08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf8e03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf8f03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf9003	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf9108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf940a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf9308
__anon0bfbaecf9503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf9603	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf9703	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf9808	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9a0a	guest/hals/ril/reference-libril/ril.h	/^  union {$/;"	u	struct:__anon0bfbaecf9908
__anon0bfbaecf9b03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecf9c08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9d08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9e08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecf9f08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfa003	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa103	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa203	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfa403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa608	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfa703	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa803	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfa903	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfaa03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfab08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfac0a	guest/hals/ril/reference-libril/ril.h	/^    union {$/;"	u	struct:__anon0bfbaecfab08
__anon0bfbaecfad08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfae08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfaf0a	guest/hals/ril/reference-libril/ril.h	/^    union {$/;"	u	struct:__anon0bfbaecfae08
__anon0bfbaecfb008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfb108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfb203	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfb308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfb403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfb503	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfb603	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfb708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfb803	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfb908	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfba08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfbb08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfbc08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfbd08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfbe03	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfbf08	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfc008	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfc108	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfc208	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfc308	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfc403	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfc508	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0bfbaecfc603	guest/hals/ril/reference-libril/ril.h	/^typedef enum {$/;"	g
__anon0bfbaecfc708	guest/hals/ril/reference-libril/ril.h	/^typedef struct {$/;"	s
__anon0f90c2e70111	host/commands/assemble_cvd/boot_config.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon1055ca380111	guest/hals/camera/cached_stream_buffer.cpp	/^namespace {$/;"	n	namespace:android::hardware::camera::device::V3_4::implementation	file:
__anon12e4c76c0111	host/libs/config/custom_actions.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon12e4c76c0202	host/libs/config/custom_actions.cpp	/^        [this]() { return custom_action_config_; });$/;"	f	function:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl::INJECT	file:
__anon12e4c76c0302	host/libs/config/custom_actions.cpp	/^    custom_action_config_flag_.Setter([this](const FlagMatch& match) {$/;"	f	function:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl::INJECT	file:
__anon12e4c76c0402	host/libs/config/custom_actions.cpp	/^    custom_actions_flag_.Setter([this](const FlagMatch& match) {$/;"	f	function:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl::INJECT	file:
__anon145bfaab0111	host/commands/assemble_cvd/flags.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon145bfaab0202	host/commands/assemble_cvd/flags.cc	/^    auto calc_vsock_port = [vsock_guest_cid](const int base_port) {$/;"	f	function:cuttlefish::InitializeCuttlefishConfiguration	file:
__anon14ee93270111	host/frontend/webrtc/lib/ws_connection.cpp	/^namespace {$/;"	n	file:
__anon14ee93270202	host/frontend/webrtc/lib/ws_connection.cpp	/^  message_loop_ = std::thread([this]() {$/;"	f	function:WsConnectionContextImpl::Start	file:
__anon14ee93270302	host/frontend/webrtc/lib/ws_connection.cpp	/^      [wsi, user](std::function<void(std::shared_ptr<WsConnectionImpl>)> cb) {$/;"	f	function:LwsCallback	file:
__anon14ee93270402	host/frontend/webrtc/lib/ws_connection.cpp	/^          [in](std::shared_ptr<WsConnectionImpl> connection) {$/;"	f	function:LwsCallback	file:
__anon14ee93270502	host/frontend/webrtc/lib/ws_connection.cpp	/^          [in, len, wsi](std::shared_ptr<WsConnectionImpl> connection) {$/;"	f	function:LwsCallback	file:
__anon14ee93270602	host/frontend/webrtc/lib/ws_connection.cpp	/^      return with_connection([](std::shared_ptr<WsConnectionImpl> connection) {$/;"	f	function:LwsCallback	file:
__anon14ee93270702	host/frontend/webrtc/lib/ws_connection.cpp	/^      return with_connection([](std::shared_ptr<WsConnectionImpl> connection) {$/;"	f	function:LwsCallback	file:
__anon14ee93270802	host/frontend/webrtc/lib/ws_connection.cpp	/^      return with_connection([](std::shared_ptr<WsConnectionImpl> connection) {$/;"	f	function:LwsCallback	file:
__anon14ee93270902	host/frontend/webrtc/lib/ws_connection.cpp	/^          [in, len](std::shared_ptr<WsConnectionImpl> connection) {$/;"	f	function:LwsCallback	file:
__anon177786ea0102	common/libs/concurrency/semaphore.h	/^    resoure_cv_.wait(lock, [this]() -> bool { return count_ > 0; });$/;"	f	function:cuttlefish::Semaphore::SemWait	typeref:typename:bool	file:
__anon177786ea0202	common/libs/concurrency/semaphore.h	/^    room_cv_.wait(lock, [this]() -> bool { return count_ <= capacity_; });$/;"	f	function:cuttlefish::Semaphore::SemPost	typeref:typename:bool	file:
__anon1a1358000102	common/libs/utils/shared_fd_flag.cpp	/^  return Flag().Setter([&](const FlagMatch& mat) { return Set(mat, out); });$/;"	f	function:cuttlefish::SharedFDFlag	file:
__anon1a1358000202	common/libs/utils/shared_fd_flag.cpp	/^      [&out](const FlagMatch& mat) { return Set(mat, out); });$/;"	f	function:cuttlefish::SharedFDFlag	file:
__anon1e335d460111	host/commands/assemble_cvd/assemble_cvd.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon1edaaabd0111	host/libs/vm_manager/host_configuration.cpp	/^namespace {$/;"	n	namespace:cuttlefish::vm_manager	file:
__anon1ff2f3d90111	common/libs/net/netlink_request_test.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon1ff2f3d90208	common/libs/net/netlink_request_test.cpp	/^  struct {$/;"	s	function:cuttlefish::TEST	file:
__anon1ff2f3d90308	common/libs/net/netlink_request_test.cpp	/^  struct {$/;"	s	function:cuttlefish::TEST	file:
__anon1ff2f3d90408	common/libs/net/netlink_request_test.cpp	/^  constexpr struct __attribute__((__packed__)) {$/;"	s	function:cuttlefish::TEST	file:
__anon1ff2f3d90508	common/libs/net/netlink_request_test.cpp	/^  struct {$/;"	s	function:cuttlefish::TEST	file:
__anon1ff2f3d90608	common/libs/net/netlink_request_test.cpp	/^  struct {$/;"	s	function:cuttlefish::TEST	file:
__anon1ff2f3d90708	common/libs/net/netlink_request_test.cpp	/^  struct {$/;"	s	function:cuttlefish::TEST	file:
__anon1ff2f3d90808	common/libs/net/netlink_request_test.cpp	/^  struct {$/;"	s	function:cuttlefish::TEST	file:
__anon20b0d9c80102	host/libs/vm_manager/crosvm_builder.cpp	/^  command_.SetStopper([crosvm, control_socket](Subprocess* proc) {$/;"	f	function:cuttlefish::CrosvmBuilder::AddControlSocket	file:
__anon2184467c0111	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^namespace {$/;"	n	namespace:android::hardware::confirmationui::V1_0::implementation	file:
__anon2184467c0202	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^    auto fetching_cmd = [this]() { HostMessageFetcherLoop(); };$/;"	f	function:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI::TrustyConfirmationUI	file:
__anon2184467c0302	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^                         const hidl_string& locale, const hidl_vec<UIOption>& uiOptions) {$/;"	f	function:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI::promptUserConfirmation	file:
__anon2184467c0402	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^    listener_state_condv_.wait(stateLock, [this] {$/;"	f	function:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI::promptUserConfirmation	file:
__anon227079aa0102	guest/hals/confirmationui/guest_session.h	/^              20, [this](GuestSession::QueueImpl* impl) { return QueueFullHandler(impl); }) {}$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	file:
__anon2390a3680102	host/libs/screen_connector/screen_connector_queue.h	/^    auto is_empty = [this](void) { return buffer_.empty(); };$/;"	f	function:cuttlefish::ScreenConnectorQueue::WaitEmpty	file:
__anon2390a3680202	host/libs/screen_connector/screen_connector_queue.h	/^          [this](void){ return buffer_.empty(); };$/;"	f	function:cuttlefish::ScreenConnectorQueue::Push	file:
__anon2426deb60111	guest/hals/camera/vsock_frame_provider.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon2426deb60202	guest/hals/camera/vsock_frame_provider.cpp	/^      std::thread([this, width, height] { VsockReadLoop(width, height); });$/;"	f	function:cuttlefish::VsockFrameProvider::start	file:
__anon2426deb60302	guest/hals/camera/vsock_frame_provider.cpp	/^      lock, timeout, [this, now] { return timestamp_.load() > now; });$/;"	f	function:cuttlefish::VsockFrameProvider::waitYUVFrame	file:
__anon27bf4bcd0102	common/libs/utils/flag_parser.cpp	/^  auto setter = [&](FlagMatch) {$/;"	f	function:cuttlefish::HelpFlag	file:
__anon27bf4bcd0202	common/libs/utils/flag_parser.cpp	/^      .Setter([](const FlagMatch& match) {$/;"	f	function:cuttlefish::InvalidFlagGuard	file:
__anon27bf4bcd0302	common/libs/utils/flag_parser.cpp	/^      .Setter([](const FlagMatch& match) {$/;"	f	function:cuttlefish::UnexpectedArgumentGuard	file:
__anon27bf4bcd0402	common/libs/utils/flag_parser.cpp	/^      .Getter([&value]() { return value; })$/;"	f	function:cuttlefish::GflagsCompatFlag	file:
__anon27bf4bcd0502	common/libs/utils/flag_parser.cpp	/^      .Setter([&value](const FlagMatch& match) {$/;"	f	function:cuttlefish::GflagsCompatFlag	file:
__anon27bf4bcd0602	common/libs/utils/flag_parser.cpp	/^      .Getter([&value]() { return std::to_string(value); })$/;"	f	function:cuttlefish::GflagsCompatNumericFlagGeneric	file:
__anon27bf4bcd0702	common/libs/utils/flag_parser.cpp	/^      .Setter([&value](const FlagMatch& match) {$/;"	f	function:cuttlefish::GflagsCompatNumericFlagGeneric	file:
__anon27bf4bcd0802	common/libs/utils/flag_parser.cpp	/^      .Getter([&value]() { return value ? "true" : "false"; })$/;"	f	function:cuttlefish::GflagsCompatFlag	file:
__anon27bf4bcd0902	common/libs/utils/flag_parser.cpp	/^      .Setter([name, &value](const FlagMatch& match) {$/;"	f	function:cuttlefish::GflagsCompatFlag	file:
__anon29a199ff0111	host/libs/graphics_detector/graphics_detector.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon29a199ff0202	host/libs/graphics_detector/graphics_detector.cpp	/^  auto EglLoadFunction = [&](const char* name) {$/;"	f	function:cuttlefish::__anon29a199ff0111::PopulateEglAvailability	file:
__anon29a199ff0302	host/libs/graphics_detector/graphics_detector.cpp	/^  Closer context_closer([&]() { eglDestroyContext(display, context); });$/;"	f	function:cuttlefish::__anon29a199ff0111::PopulateEglAvailability	file:
__anon29a199ff0402	host/libs/graphics_detector/graphics_detector.cpp	/^  Closer instancecloser([&]() {vkDestroyInstance(instance, nullptr); });$/;"	f	function:cuttlefish::__anon29a199ff0111::PopulateVulkanAvailability	file:
__anon29a199ff0502	host/libs/graphics_detector/graphics_detector.cpp	/^                 [](unsigned char c) { return std::tolower(c); });$/;"	f	function:cuttlefish::__anon29a199ff0111::ToLower	file:
__anon29cd72800111	guest/hals/camera/vsock_camera_server.cpp	/^namespace {$/;"	n	namespace:android::hardware::camera::provider::V2_7::implementation	file:
__anon29cd72800202	guest/hals/camera/vsock_camera_server.cpp	/^  server_thread_ = std::thread([this, port, cid] { serverLoop(port, cid); });$/;"	f	function:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer::start	file:
__anon2a3d92f70111	host/frontend/webrtc/audio_handler.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon2a3d92f70202	host/frontend/webrtc/audio_handler.cpp	/^  server_thread_ = std::thread([this]() { Loop(); });$/;"	f	function:cuttlefish::AudioHandler::Start	file:
__anon2a3d92f70302	host/frontend/webrtc/audio_handler.cpp	/^    std::thread playback_thread([this, &audio_client]() {$/;"	f	function:cuttlefish::AudioHandler::Loop	file:
__anon2a3d92f70402	host/frontend/webrtc/audio_handler.cpp	/^    std::thread capture_thread([this, &audio_client]() {$/;"	f	function:cuttlefish::AudioHandler::Loop	file:
__anon2afb66ee0102	host/frontend/webrtc/lib/local_recorder.cpp	/^  display->encoder_thread_ = std::thread([](Display* display) {$/;"	f	function:cuttlefish::webrtc_streaming::LocalRecorder::AddDisplay	file:
__anon2c505fdf0111	host/frontend/webrtc/lib/utils.cpp	/^namespace {$/;"	n	namespace:cuttlefish::webrtc_streaming	file:
__anon2cec80f10111	host/libs/config/cuttlefish_config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon2d61e9d10111	host/libs/config/adb/data.cpp	/^namespace {}$/;"	n	namespace:cuttlefish	file:
__anon2e549bd00111	host/libs/config/config_flag.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon2e549bd00202	host/libs/config/config_flag.cpp	/^    auto getter = [this]() { return config_; };$/;"	f	function:cuttlefish::__anon2e549bd00111::ConfigFlagImpl::INJECT	file:
__anon2e549bd00302	host/libs/config/config_flag.cpp	/^    auto setter = [this](const FlagMatch& m) { return ChooseConfig(m.value); };$/;"	f	function:cuttlefish::__anon2e549bd00111::ConfigFlagImpl::INJECT	file:
__anon316d80cb0103	guest/hals/ril/reference-libril/ril_ex.h	/^typedef enum {$/;"	g
__anon3442b2250111	host/libs/config/cuttlefish_config_instance.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon39e8abf00111	common/libs/utils/subprocess.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon39e8abf00202	common/libs/utils/subprocess.cpp	/^    stdin_thread = std::thread([pipe_write, stdin_str, &io_error]() {$/;"	f	function:cuttlefish::RunWithManagedStdio	file:
__anon39e8abf00302	common/libs/utils/subprocess.cpp	/^    stdout_thread = std::thread([pipe_read, stdout_str, &io_error]() {$/;"	f	function:cuttlefish::RunWithManagedStdio	file:
__anon39e8abf00402	common/libs/utils/subprocess.cpp	/^    stderr_thread = std::thread([pipe_read, stderr_str, &io_error]() {$/;"	f	function:cuttlefish::RunWithManagedStdio	file:
__anon3ad7623b0102	host/frontend/webrtc/kernel_log_events_handler.cpp	/^      read_thread_([this]() { ReadLoop(); }) {}$/;"	f	namespace:cuttlefish	file:
__anon3daf7c700102	common/libs/confui/utils.h	/^  ([&ss, &delim](auto& arg) { ss << arg << delim; }(args), ...);$/;"	f	function:cuttlefish::confui::ArgsToStringWithDelim	file:
__anon3daf7c700202	common/libs/confui/utils.h	/^                     [](int c) -> bool { return std::isdigit(c); });$/;"	f	function:cuttlefish::confui::IsOnlyDigits	typeref:typename:bool	file:
__anon3fa4410d0102	host/commands/run_cvd/process_monitor.cc	/^  std::thread parent_comms_thread([&running, this]() {$/;"	f	function:cuttlefish::ProcessMonitor::MonitorRoutine	file:
__anon3fa4410d0202	host/commands/run_cvd/process_monitor.cc	/^    auto matches = [pid](const auto& it) { return it.proc->pid() == pid; };$/;"	f	function:cuttlefish::ProcessMonitor::MonitorRoutine	file:
__anon3fa4410d0302	host/commands/run_cvd/process_monitor.cc	/^  auto stop = [](const auto& it) {$/;"	f	function:cuttlefish::ProcessMonitor::MonitorRoutine	file:
__anon40cdc2c70111	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^namespace {$/;"	n	file:
__anon4361040d0102	host/libs/config/feature.cpp	/^  auto add_feature = [&ordered_features](Feature* feature) -> bool {$/;"	f	function:cuttlefish::Feature::RunSetup	typeref:typename:bool	file:
__anon4361040d0202	host/libs/config/feature.cpp	/^  auto handle = [&flags](FlagFeature* feature) -> bool {$/;"	f	function:cuttlefish::FlagFeature::ProcessFlags	typeref:typename:bool	file:
__anon4552bec90111	host/commands/start/flag_forwarder.cc	/^namespace {$/;"	n	file:
__anon459bf0e40111	host/libs/config/adb/flags.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon459bf0e40202	host/libs/config/adb/flags.cpp	/^    mode_flag_.Getter([this]() {$/;"	f	function:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl::INJECT	file:
__anon459bf0e40302	host/libs/config/adb/flags.cpp	/^    mode_flag_.Setter([this](const FlagMatch& match) {$/;"	f	function:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl::INJECT	file:
__anon473d11590111	host/libs/wayland/wayland_compositor.cpp	/^namespace {$/;"	n	namespace:wayland	file:
__anon477f946a0111	host/frontend/webrtc_operator/server.cpp	/^namespace {$/;"	n	file:
__anon477f946a0202	host/frontend/webrtc_operator/server.cpp	/^      kListDevicesUriPath, [&device_registry](struct lws* wsi) {$/;"	f	function:main	file:
__anon477f946a0302	host/frontend/webrtc_operator/server.cpp	/^      kInfraConfigPath, [&server_config](struct lws* wsi) {$/;"	f	function:main	file:
__anon477f946a0402	host/frontend/webrtc_operator/server.cpp	/^      kConnectPath, [&device_registry, &poll_store](struct lws* wsi) {$/;"	f	function:main	file:
__anon477f946a0502	host/frontend/webrtc_operator/server.cpp	/^      kForwardPath, [&poll_store](struct lws* wsi) {$/;"	f	function:main	file:
__anon477f946a0602	host/frontend/webrtc_operator/server.cpp	/^      kPollPath, [&poll_store](struct lws* wsi) {$/;"	f	function:main	file:
__anon483fb9980111	host/commands/cvd/main.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon49de69e60111	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^namespace {$/;"	n	namespace:keymaster::V4_1	file:
__anon4b86e7460102	host/libs/confui/host_server.cc	/^      [](ThreadSafeQueue<std::unique_ptr<ConfUiMessage>>::QueueImpl*) {$/;"	f	function:cuttlefish::confui::HostServer::HostServer	file:
__anon4b86e7460202	host/libs/confui/host_server.cc	/^  auto hal_cmd_fetching = [this]() { this->HalCmdFetcherLoop(); };$/;"	f	function:cuttlefish::confui::HostServer::Start	file:
__anon4b86e7460302	host/libs/confui/host_server.cc	/^  auto main = [this]() { this->MainLoop(); };$/;"	f	function:cuttlefish::confui::HostServer::Start	file:
__anon4be913be0102	guest/commands/sensor_injection/main.cpp	/^      sensors->getSensorsList_2_1([&](const auto& list) {$/;"	f	function:getSensorHandle	file:
__anon4e57c5f20102	host/libs/config/feature.h	/^  visit = [&callback, &features_status, &visit](Subclass* feature) -> bool {$/;"	f	function:cuttlefish::FeatureSuperclass::TopologicalVisit	typeref:typename:bool	file:
__anon4ec25d870111	common/libs/device_config/guest_device_config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon512a2c1f0103	guest/hals/ril/reference-ril/atchannel.h	/^typedef enum {$/;"	g
__anon512a2c1f0208	guest/hals/ril/reference-ril/atchannel.h	/^typedef struct {$/;"	s
__anon512a2c1f0303	guest/hals/ril/reference-ril/atchannel.h	/^typedef enum {$/;"	g
__anon521370420102	host/commands/fetcher/build_api.h	/^   return std::visit([this](auto&& arg) { return Artifacts(arg); }, build);$/;"	f	function:cuttlefish::BuildApi::Artifacts	file:
__anon521370420202	host/commands/fetcher/build_api.h	/^    return std::visit([this, &artifact, &path](auto&& arg) {$/;"	f	function:cuttlefish::BuildApi::ArtifactToFile	file:
__anon527e8bd40111	host/commands/run_cvd/server_loop.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon550da8bf0102	host/frontend/webrtc/connection_observer.cpp	/^      std::thread th([this]() {$/;"	f	function:cuttlefish::ConnectionObserverImpl::OnConnected	file:
__anon560e372a0102	host/libs/confui/host_mode_ctrl.h	/^    auto check = [this]() -> bool {$/;"	f	function:cuttlefish::HostModeCtrl::WaitAndroidMode	typeref:typename:bool	file:
__anon5714be600111	guest/hals/keymint/remote/service.cpp	/^namespace {$/;"	n	file:
__anon587bcda10111	host/commands/assemble_cvd/clean.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon58d626b40102	guest/hals/camera/stream_buffer_cache.cpp	/^      [buffer_id](const std::shared_ptr<CachedStreamBuffer>& buffer) {$/;"	f	function:android::hardware::camera::device::V3_4::implementation::StreamBufferCache::get	file:
__anon58d626b40202	guest/hals/camera/stream_buffer_cache.cpp	/^      [&buffer_id](const std::shared_ptr<CachedStreamBuffer>& buffer) {$/;"	f	function:android::hardware::camera::device::V3_4::implementation::StreamBufferCache::remove	file:
__anon58d626b40302	guest/hals/camera/stream_buffer_cache.cpp	/^  auto id_match = [id](const std::shared_ptr<CachedStreamBuffer>& buffer) {$/;"	f	function:android::hardware::camera::device::V3_4::implementation::StreamBufferCache::update	file:
__anon58d908c60102	host/libs/confui/host_renderer.cc	/^                             teeui::Color color) -> teeui::Error {$/;"	f	function:cuttlefish::confui::ConfUiRenderer::RepaintRawFrame	typeref:typename:teeui::Error	file:
__anon5c4f198b0103	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef enum {$/;"	g
__anon5ef0e91e0102	host/commands/modem_simulator/network_service.cpp	/^          [this](const Client& client) { this->HandleRadioPowerReq(client); }),$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0202	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0302	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0402	host/commands/modem_simulator/network_service.cpp	/^          [this](const Client& client) { this->HandleSignalStrength(client); }),$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0502	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0602	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0702	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0802	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0902	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0a02	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0b02	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0c02	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0d02	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0e02	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e0f02	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e1002	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon5ef0e91e1102	host/commands/modem_simulator/network_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::NetworkService::InitializeCommandHandlers	file:
__anon61381e100111	common/libs/net/netlink_client.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon63a091d80111	host/commands/restart_cvd/restart_cvd.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon64f55d8c0102	common/libs/utils/flag_parser_test.cpp	/^  flag.Setter([&elems](const FlagMatch& match) {$/;"	f	function:cuttlefish::TEST	file:
__anon65a808010111	host/commands/stop/main.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon6b0274e10111	host/commands/run_cvd/launch_streamer.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon6b0274e10202	host/commands/run_cvd/launch_streamer.cpp	/^    auto stopper = [host_socket = std::move(host_socket_)](Subprocess* proc) {$/;"	f	function:cuttlefish::__anon6b0274e10111::WebRtcServer::Commands	file:
__anon6dbb5ee00102	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00202	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00302	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00402	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00502	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00602	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00702	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00802	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6dbb5ee00902	host/commands/modem_simulator/misc_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::MiscService::InitializeCommandHandlers	file:
__anon6f6aae500102	host/commands/run_cvd/launch_modem.cpp	/^    Command cmd(ModemSimulatorBinary(), [this](Subprocess* proc) {$/;"	f	function:cuttlefish::ModemSimulator::Commands	file:
__anon70d7df6f0108	guest/hals/ril/reference-ril/reference-ril.c	/^typedef struct {$/;"	s	file:
__anon70d7df6f0208	guest/hals/ril/reference-ril/reference-ril.c	/^typedef struct {$/;"	s	file:
__anon70d7df6f0303	guest/hals/ril/reference-ril/reference-ril.c	/^typedef enum {$/;"	g	file:
__anon70d7df6f0403	guest/hals/ril/reference-ril/reference-ril.c	/^typedef enum {$/;"	g	file:
__anon70d7df6f0503	guest/hals/ril/reference-ril/reference-ril.c	/^typedef enum {$/;"	g	file:
__anon710b399e0102	host/libs/screen_connector/screen_connector_multiplexer.h	/^    auto selector = [this, &is_discard_frame]() -> int {$/;"	f	function:cuttlefish::ScreenConnectorInputMultiplexer::Pop	typeref:typename:int	file:
__anon7281a6ce0111	host/commands/powerwash_cvd/powerwash_cvd.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon72e4bdb10111	common/libs/net/network_interface_manager.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon734383cf0111	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^namespace {$/;"	n	file:
__anon734383cf0202	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^                                     [](char c) { return std::isdigit(c); });$/;"	f	function:__anon734383cf0111::IsInteger	file:
__anon79ba8e560111	host/libs/websocket/websocket_handler.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon7b80148c0111	common/libs/confui/protocol.cpp	/^namespace {$/;"	n	namespace:cuttlefish::confui	file:
__anon7b80148c0211	common/libs/confui/protocol.cpp	/^namespace {$/;"	n	namespace:cuttlefish::confui	file:
__anon7cf2d7d50102	host/libs/confui/sign_utils.h	/^auto bytes_cast(const T& v) -> const uint8_t (&)[sizeof(T)] {$/;"	f	namespace:cuttlefish::confui::support	file:
__anon7cf2d7d50202	host/libs/confui/sign_utils.h	/^auto bytes_cast(T& v) -> uint8_t (&)[sizeof(T)] {$/;"	f	namespace:cuttlefish::confui::support	file:
__anon7d4eee310111	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^namespace {$/;"	n	file:
__anon7d4eee310202	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^  std::thread screen_thread([this, touch_fd]() {$/;"	f	function:VSoCInputService::ProcessEvents	file:
__anon7d4eee310302	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^    EventLoop(virtual_touchscreen_, [touch_fd]() {$/;"	f	function:VSoCInputService::ProcessEvents::__anon7d4eee310202	file:
__anon7d4eee310402	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^  std::thread keyboard_thread([this, keyboard_fd]() {$/;"	f	function:VSoCInputService::ProcessEvents	file:
__anon7d4eee310502	guest/commands/vsoc_input_service/vsoc_input_service.cpp	/^    EventLoop(virtual_keyboard_, [keyboard_fd]() {$/;"	f	function:VSoCInputService::ProcessEvents::__anon7d4eee310402	file:
__anon7d63e7dc0102	common/libs/utils/vsock_connection.cpp	/^                    [this, port, cid]() { return Connect(port, cid); });$/;"	f	function:cuttlefish::VsockConnection::ConnectAsync	file:
__anon7d63e7dc0202	common/libs/utils/vsock_connection.cpp	/^  return std::async(std::launch::async, [this, size]() { return Read(size); });$/;"	f	function:cuttlefish::VsockConnection::ReadAsync	file:
__anon7d63e7dc0302	common/libs/utils/vsock_connection.cpp	/^  return std::async(std::launch::async, [this]() { return ReadMessage(); });$/;"	f	function:cuttlefish::VsockConnection::ReadMessageAsync	file:
__anon7d63e7dc0402	common/libs/utils/vsock_connection.cpp	/^  return std::async(std::launch::async, [this]() { return ReadJsonMessage(); });$/;"	f	function:cuttlefish::VsockConnection::ReadJsonMessageAsync	file:
__anon7d839c5b0102	host/frontend/webrtc/display_handler.cpp	/^           WebRtcScProcessedFrame& processed_frame) {$/;"	f	function:cuttlefish::DisplayHandler::GetScreenConnectorCallback	file:
__anon7ea6a0320111	host/libs/config/adb/launch.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon80582ec40102	host/commands/kernel_log_monitor/main.cc	/^      klog.SubscribeToEvents([subscriber_fd](Json::Value message) {$/;"	f	function:main	file:
__anon807585c50102	guest/hals/confirmationui/guest_session.cpp	/^    auto clean_up_and_get_first = [&]() -> std::unique_ptr<ConfUiMessage> {$/;"	f	function:android::hardware::confirmationui::V1_0::implementation::GuestSession::PromptUserConfirmation	typeref:typename:std::unique_ptr<ConfUiMessage>	file:
__anon807585c50202	guest/hals/confirmationui/guest_session.cpp	/^    auto wait_input_and_signal = [&]() -> std::unique_ptr<ConfUiMessage> {$/;"	f	function:android::hardware::confirmationui::V1_0::implementation::GuestSession::PromptUserConfirmation	typeref:typename:std::unique_ptr<ConfUiMessage>	file:
__anon807585c50302	guest/hals/confirmationui/guest_session.cpp	/^    input_ready_cv_.wait(input_ready_lock, [&]() { return input_ready; });$/;"	f	function:android::hardware::confirmationui::V1_0::implementation::GuestSession::PromptUserConfirmation	file:
__anon807585c50402	guest/hals/confirmationui/guest_session.cpp	/^                                   [this] { return listener_state_ != ListenerState::SetupDone; /;"	f	function:android::hardware::confirmationui::V1_0::implementation::GuestSession::DeliverSecureInputEvent	file:
__anon8078843e0111	host/libs/audio_connector/server.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon8078843e0202	host/libs/audio_connector/server.cpp	/^                                   uint32_t consumed_length) {$/;"	f	function:cuttlefish::__anon8078843e0111::SendStatusCallback	file:
__anon8185be2f0111	host/libs/websocket/websocket_server.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon8223c28e0102	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0202	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0302	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0402	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0502	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0602	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0702	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0802	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0902	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon8223c28e0a02	host/commands/modem_simulator/data_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::DataService::InitializeCommandHandlers	file:
__anon883919040102	host/commands/modem_simulator/channel_monitor.cpp	/^    monitor_thread_ = std::thread([this]() { MonitorLoop(); });$/;"	f	function:cuttlefish::ChannelMonitor::ChannelMonitor	file:
__anon883919040202	host/commands/modem_simulator/channel_monitor.cpp	/^        [&](std::unique_ptr<Client>& other) { return *other == client; });$/;"	f	function:cuttlefish::ChannelMonitor::ReadCommand	file:
__anon8c3f0f5d0102	host/commands/modem_simulator/nvram_config.cpp	/^  std::call_once(once_flag, [num_instances, sim_type]() {$/;"	f	function:cuttlefish::NvramConfig::InitNvramConfigService	file:
__anon8d12954e0111	host/commands/run_cvd/validate.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon8e1e78490111	host/commands/start/main.cc	/^namespace {$/;"	n	file:
__anon8f5be4990111	host/libs/wayland/wayland_dmabuf.cpp	/^namespace {$/;"	n	namespace:wayland	file:
__anon913036200111	common/frontend/socket_vsock_proxy/main.cpp	/^namespace {$/;"	n	file:
__anon9162129c0111	host/libs/vm_manager/crosvm_manager.cpp	/^namespace {$/;"	n	namespace:cuttlefish::vm_manager	file:
__anon948178400111	host/commands/fetcher/build_api.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon948178400202	host/commands/fetcher/build_api.cc	/^  std::visit([&out](auto&& arg) { out << arg; }, build);$/;"	f	function:cuttlefish::operator <<	file:
__anon94f9180b0102	common/libs/utils/tee_logging.cpp	/^  auto concat_lines = [&](const char* message, int size) {$/;"	f	function:cuttlefish::StderrOutputGenerator	file:
__anon9bac88d60102	host/libs/confui/session.cc	/^  auto invalid_input_handler = [&, this]() {$/;"	f	function:cuttlefish::confui::Session::HandleInSession	file:
__anon9f2993ef0111	host/frontend/webrtc_operator/client_handler.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anon9f2993ef0202	host/frontend/webrtc_operator/client_handler.cpp	/^  std::generate_n(ret.begin(), len, [&]() { return chars[random(e)]; });$/;"	f	function:cuttlefish::__anon9f2993ef0111::RandomClientSecret	file:
__anona05e27140102	host/commands/secure_env/primary_key_builder.cpp	/^  return [unique](TpmResourceManager& resource_manager) {$/;"	f	function:cuttlefish::SigningKeyCreator	file:
__anona05e27140202	host/commands/secure_env/primary_key_builder.cpp	/^  return [unique](TpmResourceManager& resource_manager) {$/;"	f	function:cuttlefish::ParentKeyCreator	file:
__anona2d2fad50102	tests/hal/hal_implementation_test.cpp	/^  auto setInserter = [&](const vintf::ManifestInstance& i) -> bool {$/;"	f	function:allHidlManifestInterfaces	typeref:typename:bool	file:
__anona2d2fad50202	tests/hal/hal_implementation_test.cpp	/^  auto setInserter = [&](const vintf::ManifestInstance& i) -> bool {$/;"	f	function:allAidlManifestInterfaces	typeref:typename:bool	file:
__anona4a84cd70111	host/frontend/adb_connector/main.cpp	/^namespace {$/;"	n	file:
__anona6e38b1b0111	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace {$/;"	n	namespace:android::hardware::camera::provider::V2_7::implementation	file:
__anona6e38b1b0202	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^             VsockCameraDevice::Settings settings) {$/;"	f	function:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider::setCallback	file:
__anona6e38b1b0302	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^            [this] { deviceRemoved(kDeviceName); });$/;"	f	function:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider::setCallback::__anona6e38b1b0202	file:
__anona9f16c970111	host/libs/wayland/wayland_seat.cpp	/^namespace {$/;"	n	namespace:wayland	file:
__anonab9390d10111	host/frontend/webrtc/lib/streamer.cpp	/^namespace {$/;"	n	namespace:cuttlefish::webrtc_streaming	file:
__anonab9390d10202	host/frontend/webrtc/lib/streamer.cpp	/^       touch_enabled]() -> std::shared_ptr<VideoSink> {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::AddDisplay	typeref:typename:std::shared_ptr<VideoSink>	file:
__anonab9390d10302	host/frontend/webrtc/lib/streamer.cpp	/^      RTC_FROM_HERE, [this, &label]() -> std::shared_ptr<AudioSink> {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::AddAudioStream	typeref:typename:std::shared_ptr<AudioSink>	file:
__anonab9390d10402	host/frontend/webrtc/lib/streamer.cpp	/^  impl_->signal_thread_->PostTask(RTC_FROM_HERE, [this, observer]() {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Register	file:
__anonab9390d10502	host/frontend/webrtc/lib/streamer.cpp	/^      RTC_FROM_HERE, [this]() { impl_->server_connection_.reset(); });$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Unregister	file:
__anonab9390d10602	host/frontend/webrtc/lib/streamer.cpp	/^    auto deleter = [](webrtc::VideoTrackSourceInterface* source) {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::RecordDisplays	file:
__anonab9390d10702	host/frontend/webrtc/lib/streamer.cpp	/^  signal_thread_->PostTask(RTC_FROM_HERE, [this]() {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::OnOpen	file:
__anonab9390d10802	host/frontend/webrtc/lib/streamer.cpp	/^  signal_thread_->PostTask(RTC_FROM_HERE, [this]() {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::OnClose	file:
__anonab9390d10902	host/frontend/webrtc/lib/streamer.cpp	/^        RTC_FROM_HERE, [this]() { server_connection_->Connect(); },$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::OnError	file:
__anonab9390d10a02	host/frontend/webrtc/lib/streamer.cpp	/^    signal_thread_->PostTask(RTC_FROM_HERE, [this]() {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::OnError	file:
__anonab9390d10b02	host/frontend/webrtc/lib/streamer.cpp	/^  signal_thread_->PostTask(RTC_FROM_HERE, [this, server_message]() {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::OnReceive	file:
__anonab9390d10c02	host/frontend/webrtc/lib/streamer.cpp	/^      [this, client_id](const Json::Value& msg) {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::CreateClientHandler	file:
__anonab9390d10d02	host/frontend/webrtc/lib/streamer.cpp	/^      [this, client_id](bool isOpen) {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::CreateClientHandler	file:
__anonab9390d10e02	host/frontend/webrtc/lib/streamer.cpp	/^  signal_thread_->PostTask(RTC_FROM_HERE, [this, client_id]() {$/;"	f	function:cuttlefish::webrtc_streaming::Streamer::Impl::DestroyClientHandler	file:
__anonadab6e0c0111	host/commands/run_cvd/main.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonae6530d30111	host/commands/assemble_cvd/super_image_mixer.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonb05ec4f60102	host/commands/console_forwarder/main.cpp	/^    writer_thread_ = std::thread([this]() { WriteLoop(); });$/;"	f	function:cuttlefish::ConsoleForwarder::StartServer	file:
__anonb1d4e5780102	host/libs/screen_connector/screen_connector_ctrl.h	/^    auto check = [this]() -> bool { return atomic_mode_ == ModeType::kAndroidMode; };$/;"	f	function:cuttlefish::ScreenConnectorCtrl::WaitAndroidMode	typeref:typename:bool	file:
__anonb2b4da3a0111	host/libs/vm_manager/qemu_manager.cpp	/^namespace {$/;"	n	namespace:cuttlefish::vm_manager	file:
__anonb2b4da3a0202	host/libs/vm_manager/qemu_manager.cpp	/^  auto stop = [](Subprocess* proc) {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb2b4da3a0302	host/libs/vm_manager/qemu_manager.cpp	/^  auto add_hvc_sink = [&qemu_cmd, &hvc_num]() {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb2b4da3a0402	host/libs/vm_manager/qemu_manager.cpp	/^  auto add_serial_sink = [&qemu_cmd, &serial_num]() {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb2b4da3a0502	host/libs/vm_manager/qemu_manager.cpp	/^                                &serial_num](const std::string& output) {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb2b4da3a0602	host/libs/vm_manager/qemu_manager.cpp	/^                             &serial_num](const std::string& prefix) {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb2b4da3a0702	host/libs/vm_manager/qemu_manager.cpp	/^  auto add_hvc_ro = [&qemu_cmd, &hvc_num](const std::string& output) {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb2b4da3a0802	host/libs/vm_manager/qemu_manager.cpp	/^  auto add_hvc = [&qemu_cmd, &hvc_num](const std::string& prefix) {$/;"	f	function:cuttlefish::vm_manager::QemuManager::StartCommands	file:
__anonb50860fb0102	host/frontend/webrtc/bluetooth_handler.cpp	/^  std::thread loop([this]() { ReadLoop(); });$/;"	f	function:cuttlefish::webrtc_streaming::BluetoothHandler::BluetoothHandler	file:
__anonb7895b810102	host/libs/wayland/wayland_server.cpp	/^          [this, wayland_socket_fd]() {$/;"	f	function:wayland::WaylandServer::WaylandServer	file:
__anonb7895b810202	host/libs/wayland/wayland_server.cpp	/^  server_ready_cv_.wait(lock, [&]{return server_ready_; });$/;"	f	function:wayland::WaylandServer::WaylandServer	file:
__anonb7fa39a50111	guest/hals/bt/remote/remote_bluetooth.cpp	/^namespace {$/;"	n	file:
__anonb7fa39a50202	guest/hals/bt/remote/remote_bluetooth.cpp	/^  unlink_cb_ = [this, cb](sp<BluetoothDeathRecipient>& death_recipient) {$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50302	guest/hals/bt/remote/remote_bluetooth.cpp	/^      [](const std::vector<uint8_t>& \/* raw_command *\/) {$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50402	guest/hals/bt/remote/remote_bluetooth.cpp	/^      [this](const std::vector<uint8_t>& raw_event) {$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50502	guest/hals/bt/remote/remote_bluetooth.cpp	/^      [this](const std::vector<uint8_t>& raw_acl) {$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50602	guest/hals/bt/remote/remote_bluetooth.cpp	/^      [this](const std::vector<uint8_t>& raw_sco) {$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50702	guest/hals/bt/remote/remote_bluetooth.cpp	/^      [this](const std::vector<uint8_t>& raw_iso) {$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50802	guest/hals/bt/remote/remote_bluetooth.cpp	/^      []() { LOG(INFO) << "HCI socket device disconnected"; });$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonb7fa39a50902	guest/hals/bt/remote/remote_bluetooth.cpp	/^      fd_, [this](int fd) { h4_.OnDataReady(fd); });$/;"	f	function:android::hardware::bluetooth::V1_1::remote::BluetoothHci::initialize_impl	file:
__anonbb773a0c0111	host/frontend/webrtc/adb_handler.cpp	/^namespace {$/;"	n	namespace:cuttlefish::webrtc_streaming	file:
__anonbb773a0c0202	host/frontend/webrtc/adb_handler.cpp	/^    std::thread loop([this]() { ReadLoop(); });$/;"	f	function:cuttlefish::webrtc_streaming::AdbHandler::AdbHandler	file:
__anonbbac300c0102	host/commands/modem_simulator/sup_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SupService::InitializeCommandHandlers	file:
__anonbbac300c0202	host/commands/modem_simulator/sup_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SupService::InitializeCommandHandlers	file:
__anonbbac300c0302	host/commands/modem_simulator/sup_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SupService::InitializeCommandHandlers	file:
__anonbbac300c0402	host/commands/modem_simulator/sup_service.cpp	/^          "+CLIP?", [this](const Client& client) { this->HandleCLIP(client); }),$/;"	f	function:cuttlefish::SupService::InitializeCommandHandlers	file:
__anonbbac300c0502	host/commands/modem_simulator/sup_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SupService::InitializeCommandHandlers	file:
__anonbbac300c0602	host/commands/modem_simulator/sup_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SupService::InitializeCommandHandlers	file:
__anonbc3851b60108	host/frontend/webrtc/lib/streamer.h	/^  struct {$/;"	s	struct:cuttlefish::webrtc_streaming::StreamerConfig
__anonbd7a135a0102	common/libs/utils/files.cpp	/^                     struct FTW*) -> int {$/;"	f	function:cuttlefish::RecursivelyRemoveDirectory	typeref:typename:int	file:
__anonbf7022000102	host/commands/secure_env/fragile_tpm_storage.cpp	/^  auto close_tr = [this](ESYS_TR* handle) {$/;"	f	function:cuttlefish::FragileTpmStorage::Read	file:
__anonbfa95aa40111	host/commands/assemble_cvd/boot_image_utils.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonbfba73ec0102	host/commands/modem_simulator/thread_looper.cpp	/^  looper_thread_ = std::thread([this]() { ThreadLoop(); });$/;"	f	function:cuttlefish::ThreadLooper::ThreadLooper	file:
__anonc140734a0111	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace {$/;"	n	namespace:android::hardware::camera::device::V3_4::implementation	file:
__anonc24c37010102	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^      std::thread([this, timeout_ms] { processRequestLoop(timeout_ms); });$/;"	f	function:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::VsockCameraDeviceSession	file:
__anonc24c37010202	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^  auto is_empty = [this] { return pending_requests_.empty(); };$/;"	f	function:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::flush	file:
__anonc24c37010302	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^  auto not_empty = [this] { return !pending_requests_.empty(); };$/;"	f	function:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::getRequestFromQueue	file:
__anonc6b6781f0111	host/frontend/webrtc_operator/server_config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonc785b2110102	host/commands/modem_simulator/thread_looper.h	/^  return [f, me] {$/;"	f	function:cuttlefish::makeSafeCallback	file:
__anonc785b2110202	host/commands/modem_simulator/thread_looper.h	/^                             [f, params...](T *me) { (me->*f)(params...); });$/;"	f	function:cuttlefish::makeSafeCallback	file:
__anonc785b2110302	host/commands/modem_simulator/thread_looper.h	/^                             [f, params...](T *me) { (me->*f)(params...); });$/;"	f	function:cuttlefish::makeSafeCallback	file:
__anoncaae79910111	common/libs/utils/network.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonccb356fd0111	host/commands/fetcher/fetch_cvd.cc	/^namespace {$/;"	n	file:
__anonccb356fd0211	host/commands/fetcher/fetch_cvd.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonccb356fd0302	host/commands/fetcher/fetch_cvd.cc	/^  std::string product = std::visit([](auto&& arg) { return arg.product; }, build);$/;"	f	function:cuttlefish::__anonccb356fd0211::TargetBuildZipFromArtifacts	file:
__anonccb356fd0402	host/commands/fetcher/fetch_cvd.cc	/^  auto id = std::visit([](auto&& arg) { return arg.id; }, build);$/;"	f	function:cuttlefish::__anonccb356fd0211::TargetBuildZipFromArtifacts	file:
__anonccb356fd0502	host/commands/fetcher/fetch_cvd.cc	/^    auto id = std::visit([](auto&& arg) { return arg.id; }, build);$/;"	f	function:cuttlefish::__anonccb356fd0211::AddFilesToConfig	file:
__anonccb356fd0602	host/commands/fetcher/fetch_cvd.cc	/^    auto target = std::visit([](auto&& arg) { return arg.target; }, build);$/;"	f	function:cuttlefish::__anonccb356fd0211::AddFilesToConfig	file:
__anoncdd3d0380102	host/commands/bt_connector/main.cpp	/^  auto guest_to_host = std::thread([&]() {$/;"	f	function:main	file:
__anoncdd3d0380202	host/commands/bt_connector/main.cpp	/^  auto host_to_guest = std::thread([&]() {$/;"	f	function:main	file:
__anonced26a190111	common/libs/utils/users.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anoncf090a650111	common/libs/fs/shared_buf.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anoncfc77f870102	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870202	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870302	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870402	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870502	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870602	host/commands/modem_simulator/sms_service.cpp	/^          [this](const Client& client) { this->HandleGetSmscAddress(client); }),$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870702	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870802	host/commands/modem_simulator/sms_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::SmsService::InitializeCommandHandlers	file:
__anoncfc77f870902	host/commands/modem_simulator/sms_service.cpp	/^          makeSafeCallback<SmsService>(this, [&sms_pdu](SmsService* me) {$/;"	f	function:cuttlefish::SmsService::HandleSendSMSPDU	file:
__anoncfc77f870a02	host/commands/modem_simulator/sms_service.cpp	/^        makeSafeCallback<SmsService>(this, [sms_pdu](SmsService* me) {$/;"	f	function:cuttlefish::SmsService::HandleSendSMSPDU	file:
__anoncfc77f870b02	host/commands/modem_simulator/sms_service.cpp	/^        makeSafeCallback<SmsService>(this, [sms_pdu, ref](SmsService* me) {$/;"	f	function:cuttlefish::SmsService::HandleSendSMSPDU	file:
__anond073544d0102	host/frontend/webrtc/main.cpp	/^    touch_accepters.emplace_back([label, &input_sockets]() {$/;"	f	function:main	file:
__anond073544d0202	host/frontend/webrtc/main.cpp	/^  std::thread keyboard_accepter([&input_sockets]() {$/;"	f	function:main	file:
__anond073544d0302	host/frontend/webrtc/main.cpp	/^  std::thread switches_accepter([&input_sockets]() {$/;"	f	function:main	file:
__anond073544d0402	host/frontend/webrtc/main.cpp	/^  std::thread control_thread([control_socket, &local_recorder]() {$/;"	f	function:main	file:
__anond0fc42ea0111	host/frontend/webrtc/lib/client_handler.cpp	/^namespace {$/;"	n	namespace:cuttlefish::webrtc_streaming	file:
__anond0fc42ea0202	host/frontend/webrtc/lib/client_handler.cpp	/^    observer_->OnAdbChannelOpen([this](const uint8_t *msg, size_t size) {$/;"	f	function:cuttlefish::webrtc_streaming::AdbChannelHandler::OnMessage	file:
__anond0fc42ea0302	host/frontend/webrtc/lib/client_handler.cpp	/^  observer_->OnControlChannelOpen([this](const Json::Value& message) {$/;"	f	function:cuttlefish::webrtc_streaming::ControlChannelHandler::ControlChannelHandler	file:
__anond0fc42ea0402	host/frontend/webrtc/lib/client_handler.cpp	/^    observer_->OnBluetoothChannelOpen([this](const uint8_t *msg, size_t size) {$/;"	f	function:cuttlefish::webrtc_streaming::BluetoothChannelHandler::OnMessage	file:
__anond0fc42ea0502	host/frontend/webrtc/lib/client_handler.cpp	/^                                      [this](webrtc::RTCError error) {$/;"	f	function:cuttlefish::webrtc_streaming::ClientHandler::AddPendingIceCandidates	file:
__anond0fc42ea0602	host/frontend/webrtc/lib/client_handler.cpp	/^            CvdOnSetRemoteDescription>([this](webrtc::RTCError error) {$/;"	f	function:cuttlefish::webrtc_streaming::ClientHandler::HandleMessage	file:
__anond0fc42ea0702	host/frontend/webrtc/lib/client_handler.cpp	/^            [this](webrtc::RTCError error) {$/;"	f	function:cuttlefish::webrtc_streaming::ClientHandler::HandleMessage	file:
__anond0fc42ea0802	host/frontend/webrtc/lib/client_handler.cpp	/^                                        [this](webrtc::RTCError error) {$/;"	f	function:cuttlefish::webrtc_streaming::ClientHandler::HandleMessage	file:
__anond0fc42ea0902	host/frontend/webrtc/lib/client_handler.cpp	/^          [this](const uint8_t *msg, size_t size, bool binary) {$/;"	f	function:cuttlefish::webrtc_streaming::ClientHandler::OnConnectionChange	file:
__anond268d4620111	host/libs/wayland/wayland_shell.cpp	/^namespace {$/;"	n	namespace:wayland	file:
__anond3364bd20111	host/commands/host_bugreport/main.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anond3364bd20202	host/commands/host_bugreport/main.cc	/^  auto save = [&writer, config](const std::string& path) {$/;"	f	function:cuttlefish::__anond3364bd20111::CvdHostBugreportMain	file:
__anond3364bd20302	host/commands/host_bugreport/main.cc	/^    auto save = [&writer, instance](const std::string& path) {$/;"	f	function:cuttlefish::__anond3364bd20111::CvdHostBugreportMain	file:
__anond4ab38d90102	host/frontend/webrtc/lib/camera_streamer.cpp	/^  reader_thread_ = std::thread([this] {$/;"	f	function:cuttlefish::webrtc_streaming::CameraStreamer::StartReadLoop	file:
__anond70c3a4f0111	common/libs/fs/shared_fd.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anond80b65c40102	host/libs/screen_connector/screen_connector.h	/^               std::uint8_t* frame_bytes) {$/;"	f	function:cuttlefish::ScreenConnector::SetCallback	file:
__anond90bdb570111	host/libs/config/bootconfig_args.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anondfffca8d0111	host/commands/fetcher/curl_wrapper.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anondfffca8d0202	host/commands/fetcher/curl_wrapper.cc	/^        [&, this]() { return inner_curl_.DownloadToFile(url, path, headers); });$/;"	f	function:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper::DownloadToFile	file:
__anondfffca8d0302	host/commands/fetcher/curl_wrapper.cc	/^        [&, this]() { return inner_curl_.DownloadToString(url, headers); });$/;"	f	function:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper::DownloadToString	file:
__anondfffca8d0402	host/commands/fetcher/curl_wrapper.cc	/^        [&, this]() { return inner_curl_.DownloadToJson(url, headers); });$/;"	f	function:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper::DownloadToJson	file:
__anone2ec5ace0111	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^namespace {$/;"	n	namespace:aidl::android::hardware::security::keymint	file:
__anone7ed366f0111	host/commands/run_cvd/boot_state_machine.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anone7ed366f0202	host/commands/run_cvd/boot_state_machine.cc	/^        [this, boot_events_pipe]() { ThreadLoop(boot_events_pipe); });$/;"	f	function:cuttlefish::__anone7ed366f0111::CvdBootStateMachine::Setup	file:
__anone81850a20111	host/commands/fetcher/credential_source.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anone862986b0111	host/commands/secure_env/tpm_keymaster_context.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anone963d72d0111	host/libs/config/adb/config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anone9f9f83a0111	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^namespace {$/;"	n	namespace:cuttlefish::webrtc_streaming	file:
__anonebd60ce30111	host/libs/wayland/wayland_subcompositor.cpp	/^namespace {$/;"	n	namespace:wayland	file:
__anoned36ed9d0111	host/libs/config/data_image.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonedfd971c0102	common/libs/utils/environment.cpp	/^      [](FILE* fp, size_t len) {$/;"	f	function:cuttlefish::HostArchStr	file:
__anonf13e85620111	host/commands/run_cvd/launch.cc	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonf2157dfa0111	common/libs/net/netlink_request.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonf277137d0111	common/libs/device_config/host_device_config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonf279fac10102	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^      read_thread_ = std::thread([this]() { ReadLoop(); });$/;"	f	function:GnssGrpcProxyServiceImpl::StartServer	file:
__anonf279fac10202	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^          std::thread([this]() { ReadNmeaFromLocalFile(); });$/;"	f	function:GnssGrpcProxyServiceImpl::StartReadNmeaFileThread	file:
__anonf279fac10302	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^          std::thread([this]() { ReadGnssRawMeasurement(); });$/;"	f	function:GnssGrpcProxyServiceImpl::StartReadGnssRawMeasurementFileThread	file:
__anonf3320da50102	host/libs/vm_manager/vm_manager.cpp	/^      [](const CuttlefishConfig& config) {$/;"	f	function:cuttlefish::vm_manager::VmManagerComponent	file:
__anonf390c6e60102	host/commands/modem_simulator/stk_service.cpp	/^                     [this](const Client& client) {$/;"	f	function:cuttlefish::StkService::InitializeCommandHandlers	file:
__anonf390c6e60202	host/commands/modem_simulator/stk_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::StkService::InitializeCommandHandlers	file:
__anonf390c6e60302	host/commands/modem_simulator/stk_service.cpp	/^                     [this](const Client& client, std::string& cmd) {$/;"	f	function:cuttlefish::StkService::InitializeCommandHandlers	file:
__anonf7286d770111	host/libs/config/fetcher_config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonf7286d770211	host/libs/config/fetcher_config.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonf9a2982a0108	guest/hals/ril/reference-libril/ril.cpp	/^typedef struct {$/;"	s	namespace:android	file:
__anonfa7764770111	host/commands/kernel_log_monitor/kernel_log_server.cc	/^namespace {$/;"	n	file:
__anonfa7764770208	host/commands/kernel_log_monitor/kernel_log_server.cc	/^constexpr struct {$/;"	s	namespace:__anonfa7764770111	file:
__anonfa7764770308	host/commands/kernel_log_monitor/kernel_log_server.cc	/^constexpr struct {$/;"	s	namespace:__anonfa7764770111	file:
__anonfb30483e0111	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonfb53392e0111	host/libs/config/kernel_args.cpp	/^namespace {$/;"	n	namespace:cuttlefish	file:
__anonfcb88b810102	common/libs/concurrency/multiplexer.h	/^    auto default_selector = [this]() -> int {$/;"	f	function:cuttlefish::Multiplexer::Pop	typeref:typename:int	file:
__anonff3d797e0111	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^namespace {$/;"	n	namespace:cuttlefish::webrtc_streaming	file:
__anonff76b58a0102	guest/hals/bt/remote/remote_bluetooth.h	/^                                    [](const std::vector<uint8_t>&) {},$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	file:
__anonff76b58a0202	guest/hals/bt/remote/remote_bluetooth.h	/^                                    [](const std::vector<uint8_t>&) {},$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	file:
__anonff76b58a0302	guest/hals/bt/remote/remote_bluetooth.h	/^                                    [](const std::vector<uint8_t>&) {},$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	file:
__anonff76b58a0402	guest/hals/bt/remote/remote_bluetooth.h	/^                                    [](const std::vector<uint8_t>&) {},$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	file:
__anonff76b58a0502	guest/hals/bt/remote/remote_bluetooth.h	/^                                    [](const std::vector<uint8_t>&) {},$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	file:
__anonff76b58a0602	guest/hals/bt/remote/remote_bluetooth.h	/^                                    [] {}};$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	file:
__eglMustCastToProperFunctionPointerType	host/libs/graphics_detector/include/EGL/egl.h	/^typedef void (*__eglMustCastToProperFunctionPointerType)(void);$/;"	t	typeref:typename:void (*)(void)
__egl_h_	host/libs/graphics_detector/include/EGL/egl.h	/^#define __egl_h_ /;"	d
__eglext_h_	host/libs/graphics_detector/include/EGL/eglext.h	/^#define __eglext_h_ /;"	d
__eglplatform_h_	host/libs/graphics_detector/include/EGL/eglplatform.h	/^#define __eglplatform_h_$/;"	d
__get_default_hostdir	tools/upload_to_gce_and_run.py	/^def __get_default_hostdir():$/;"	f
__khrplatform_h_	host/libs/graphics_detector/include/KHR/khrplatform.h	/^#define __khrplatform_h_$/;"	d
aad_	host/commands/secure_env/hmac_serializable.h	/^  const Serializable* aad_;$/;"	m	class:cuttlefish::HmacSerializable	typeref:typename:const Serializable *
abort	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^Return<void> TrustyConfirmationUI::abort() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:Return<void>
abort	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCode> RemoteKeymaster4Device::abort(uint64_t operationHandle) {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCode>
abort	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^ScopedAStatus RemoteKeyMintOperation::abort() {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation	typeref:typename:ScopedAStatus
acceptCall	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::acceptCall(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
acceptCallResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::acceptCallResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
accessNetwork	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessNetworks_v1_5 accessNetwork;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:RIL_RadioAccessNetworks_v1_5
accessNetwork	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessNetworks_v1_5 accessNetwork;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:RIL_RadioAccessNetworks_v1_5
access_kregistry_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::access_kregistry_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
ackPDU	guest/hals/ril/reference-libril/ril.h	/^    char *ackPDU;     \/* or NULL if n\/a *\/$/;"	m	struct:__anon0bfbaecf1a08	typeref:typename:char *
acknowledgeIncomingGsmSmsWithPdu	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::acknowledgeIncomingGsmSmsWithPdu(int32_t serial, bool success,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
acknowledgeIncomingGsmSmsWithPduResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::acknowledgeIncomingGsmSmsWithPduResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
acknowledgeLastIncomingCdmaSms	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::acknowledgeLastIncomingCdmaSms(int32_t serial, const CdmaSmsAck& sms/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
acknowledgeLastIncomingCdmaSmsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::acknowledgeLastIncomingCdmaSmsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
acknowledgeLastIncomingGsmSms	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::acknowledgeLastIncomingGsmSms(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
acknowledgeLastIncomingGsmSmsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::acknowledgeLastIncomingGsmSmsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
acknowledgeRequest	guest/hals/ril/reference-libril/ril_service.cpp	/^void radio_1_6::acknowledgeRequest(int slotId, int serial) {$/;"	f	class:radio_1_6	typeref:typename:void
aconline	host/commands/health/health.cpp	/^int aconline() {$/;"	f	typeref:typename:int
acquireAsBlob	guest/hals/camera/cached_stream_buffer.cpp	/^void* CachedStreamBuffer::acquireAsBlob(int32_t size, int timeout_ms) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:void *
acquireAsYUV	guest/hals/camera/cached_stream_buffer.cpp	/^YCbCrLayout CachedStreamBuffer::acquireAsYUV(int32_t width, int32_t height,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:YCbCrLayout
acquireFence	guest/hals/camera/cached_stream_buffer.h	/^  int acquireFence() const { return acquire_fence_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:int
acquire_fence_	guest/hals/camera/cached_stream_buffer.h	/^  int acquire_fence_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:int
act	guest/hals/ril/reference-libril/ril.h	/^  RIL_RadioAccessNetworks act;$/;"	m	struct:__anon0bfbaecfa608	typeref:typename:RIL_RadioAccessNetworks
act_data	common/libs/net/netlink_request_test.cpp	/^  const uint8_t* act_data = static_cast<const uint8_t*>(arg.RequestData());$/;"	v	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:const uint8_t *
activation_date_valid	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^bool TpmKeymasterEnforcement::activation_date_valid($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:bool
active	guest/hals/ril/reference-libril/ril.h	/^    int             active;     \/* 0=inactive, 1=active\/physical link down, 2=active\/physical/;"	m	struct:__anon0bfbaecf1208	typeref:typename:int
active	guest/hals/ril/reference-libril/ril.h	/^    int             active;     \/* 0=inactive, 1=active\/physical link down, 2=active\/physical/;"	m	struct:__anon0bfbaecf1308	typeref:typename:int
active	guest/hals/ril/reference-libril/ril.h	/^    int             active;     \/* 0=inactive, 1=active\/physical link down, 2=active\/physical/;"	m	struct:__anon0bfbaecf1408	typeref:typename:int
active	guest/hals/ril/reference-libril/ril.h	/^    int             active;     \/* 0=inactive, 1=active\/physical link down, 2=active\/physical/;"	m	struct:__anon0bfbaecf1508	typeref:typename:int
active	guest/hals/ril/reference-libril/ril.h	/^    int             active;     \/* 0=inactive, 1=active\/physical link down,$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:int
active	host/frontend/webrtc/audio_handler.h	/^    bool active = false;$/;"	m	struct:cuttlefish::AudioHandler::StreamDesc	typeref:typename:bool
active_calls_	host/commands/modem_simulator/call_service.h	/^  std::map<int, CallStatus> active_calls_;$/;"	m	class:cuttlefish::CallService	typeref:typename:std::map<int,CallStatus>
active_interfaces_	host/libs/allocd/resource_manager.h	/^  std::set<std::string> active_interfaces_;$/;"	m	class:cuttlefish::Session	typeref:typename:std::set<std::string>
active_interfaces_	host/libs/allocd/resource_manager.h	/^  std::set<std::string> active_interfaces_;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:std::set<std::string>
active_touch_slots_	host/frontend/webrtc/connection_observer.cpp	/^  std::set<int32_t> active_touch_slots_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:std::set<int32_t>	file:
actual_interval_ms	guest/hals/ril/reference-libril/ril.h	/^  unsigned int actual_interval_ms; \/* actual LCE reporting interval,$/;"	m	struct:__anon0bfbaecf2308	typeref:typename:unsigned int
adbChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #adbChannel;$/;"	M	class:DeviceConnection
adbOnMessage	host/frontend/webrtc_operator/assets/js/adb.js	/^function adbOnMessage(arrayBuffer) {$/;"	f
adbOpenConnection	host/frontend/webrtc_operator/assets/js/adb.js	/^function adbOpenConnection() {$/;"	f
adbSendOkay	host/frontend/webrtc_operator/assets/js/adb.js	/^function adbSendOkay(remoteId) {$/;"	f
adbShell	host/frontend/webrtc_operator/assets/js/adb.js	/^function adbShell(command) {$/;"	f
adb_channel_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::scoped_refptr<webrtc::DataChannelInterface> adb_channel_;$/;"	m	class:cuttlefish::webrtc_streaming::AdbChannelHandler	typeref:typename:rtc::scoped_refptr<webrtc::DataChannelInterface>	file:
adb_device_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::adb_device_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
adb_handler_	host/frontend/webrtc/connection_observer.cpp	/^  std::shared_ptr<cuttlefish::webrtc_streaming::AdbHandler> adb_handler_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:std::shared_ptr<cuttlefish::webrtc_streaming::AdbHandler>	file:
adb_handler_	host/frontend/webrtc/lib/client_handler.h	/^  std::unique_ptr<AdbChannelHandler> adb_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::unique_ptr<AdbChannelHandler>
adb_host_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::adb_host_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
adb_ip_and_port	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::adb_ip_and_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
adb_socket_	host/frontend/webrtc/adb_handler.h	/^  SharedFD adb_socket_;$/;"	m	struct:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:SharedFD
adb_ws	host/frontend/webrtc_operator/assets/js/adb.js	/^  adb_ws = {$/;"	c	class:init_adb
adb_ws	host/frontend/webrtc_operator/assets/js/adb.js	/^let adb_ws;$/;"	v
addClientAndAppData	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^void addClientAndAppData(const hidl_vec<uint8_t>& clientId, const hidl_vec<uint8_t>& appData,$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:void
addCommandListener	host/frontend/webrtc_operator/assets/js/controls.js	/^  let addCommandListener =$/;"	f	function:cmdConsole
addIntermediate	guest/hals/ril/reference-ril/atchannel.c	/^static void addIntermediate(const char *line)$/;"	f	typeref:typename:void	file:
addKVToManifest	tools/make_manifest.sh	/^addKVToManifest() {$/;"	f
addLine	host/frontend/webrtc_operator/assets/js/controls.js	/^  let addLine =$/;"	f	function:cmdConsole
addPathToManifest	tools/make_manifest.sh	/^addPathToManifest() {$/;"	f
addPayloadAndDispatchRequest	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::addPayloadAndDispatchRequest(MsgHeader *msg, uint16_t reqLen,$/;"	f	class:SapImpl	typeref:typename:Return<void>
addRequestToList	guest/hals/ril/reference-libril/ril.cpp	/^addRequestToList(int serial, int slotId, int request) {$/;"	f	namespace:android	typeref:typename:RequestInfo *
addRngEntropy	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCode> RemoteKeymaster4Device::addRngEntropy(const hidl_vec<uint8_t>& data) {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCode>
addRngEntropy	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::addRngEntropy(const vector<uint8_t>& data) {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
addService	guest/hals/keymint/remote/service.cpp	/^std::shared_ptr<T> addService(Args&&... args) {$/;"	f	namespace:__anon5714be600111	typeref:typename:std::shared_ptr<T>
addShaToManifest	tools/make_manifest.sh	/^addShaToManifest() {$/;"	f
addSocketToList	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::addSocketToList(const char *socketName, RIL_SOCKET_ID socketid,$/;"	f	class:RilSapSocket	typeref:typename:void
addString	host/frontend/webrtc_operator/assets/js/controls.js	/^  let addString =$/;"	f	function:cmdConsole
addToList	guest/hals/ril/reference-libril/ril_event.cpp	/^static void addToList(struct ril_event * ev, struct ril_event * list)$/;"	f	typeref:typename:void	file:
add_cvd_file	host/libs/config/fetcher_config.cpp	/^bool FetcherConfig::add_cvd_file(const CvdFile& file, bool override_entry) {$/;"	f	class:cuttlefish::FetcherConfig	typeref:typename:bool
additional_info_	common/libs/confui/packet_types.h	/^  ConfUiPacketInfo additional_info_;$/;"	m	struct:cuttlefish::confui::packet::ParsedPacket	typeref:typename:ConfUiPacketInfo
addr	host/frontend/webrtc/lib/streamer.h	/^    std::string addr;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig::__anonbc3851b60108	typeref:typename:std::string
addr_	host/frontend/webrtc/lib/ws_connection.cpp	/^  const std::string addr_;$/;"	m	class:WsConnectionImpl	typeref:typename:const std::string	file:
address	guest/hals/ril/reference-libril/ril.h	/^    char *          address;    \/* An address, e.g., "192.0.1.3" or "2001:db8::1". *\/$/;"	m	struct:__anon0bfbaecf1208	typeref:typename:char *
address	guest/hals/ril/reference-libril/ril.h	/^    char * address;$/;"	m	struct:__anon0bfbaecf1c08	typeref:typename:char *
address_	common/libs/net/netlink_client.cpp	/^  sockaddr_nl address_;$/;"	m	class:cuttlefish::__anon61381e100111::NetlinkClientImpl	typeref:typename:sockaddr_nl	file:
addresses	guest/hals/ril/reference-libril/ril.h	/^    char *          addresses;  \/* A space-delimited list of addresses with optional "\/" prefi/;"	m	struct:__anon0bfbaecf1308	typeref:typename:char *
addresses	guest/hals/ril/reference-libril/ril.h	/^    char *          addresses;  \/* A space-delimited list of addresses with optional "\/" prefi/;"	m	struct:__anon0bfbaecf1408	typeref:typename:char *
addresses	guest/hals/ril/reference-libril/ril.h	/^    char *          addresses;  \/* A space-delimited list of addresses with optional "\/" prefi/;"	m	struct:__anon0bfbaecf1508	typeref:typename:char *
addresses	guest/hals/ril/reference-libril/ril.h	/^    char *          addresses;  \/* A space-delimited list of addresses with optional "\/" prefi/;"	m	struct:__anon0bfbaecf1608	typeref:typename:char *
addresses	host/commands/modem_simulator/data_service.h	/^    std::string addresses;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:std::string
aid	guest/hals/ril/reference-libril/ril.h	/^    char *               aid;   \/* is AID(application ID) of the card application *\/$/;"	m	struct:__anon0bfbaecf4108	typeref:typename:char *
aid	guest/hals/ril/reference-libril/ril.h	/^    char *aid;                  \/* AID value, See ETSI 102.221 8.1 and 101.220 4,$/;"	m	struct:__anon0bfbaecfc208	typeref:typename:char *
aidPtr	guest/hals/ril/reference-libril/ril.h	/^    char * aidPtr; \/* AID value, See ETSI 102.221 and 101.220*\/$/;"	m	struct:__anon0bfbaecfa308	typeref:typename:char *
aidPtr	guest/hals/ril/reference-libril/ril.h	/^    char *aidPtr;   \/* AID value, See ETSI 102.221 8.1 and 101.220 4, NULL if no value. *\/$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:char *
aid_ptr	guest/hals/ril/reference-libril/ril.h	/^  char             *aid_ptr;        \/* null terminated string, e.g., from 0xA0, 0x00 -> 0x41,$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:char *
aidl	guest/hals/health/storage/Storage.cpp	/^namespace aidl::android::hardware::health::storage {$/;"	n	file:
aidl	guest/hals/health/storage/Storage.h	/^namespace aidl::android::hardware::health::storage {$/;"	n
aidl	guest/hals/keymint/remote/remote_keymint_device.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	file:
aidl	guest/hals/keymint/remote/remote_keymint_device.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n
aidl	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	file:
aidl	guest/hals/keymint/remote/remote_keymint_operation.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n
aidl	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	file:
aidl	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n
aidl	guest/hals/keymint/remote/remote_secure_clock.cpp	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	file:
aidl	guest/hals/keymint/remote/remote_secure_clock.h	/^namespace aidl::android::hardware::security::secureclock {$/;"	n
aidl	guest/hals/keymint/remote/remote_shared_secret.cpp	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	file:
aidl	guest/hals/keymint/remote/remote_shared_secret.h	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n
ajaxPostJson	host/frontend/webrtc_operator/assets/js/server_connector.js	/^async function ajaxPostJson(url, data) {$/;"	f
alertPitch	guest/hals/ril/reference-libril/ril.h	/^  char alertPitch;   \/* as defined 3.7.5.5-2 *\/$/;"	m	struct:__anon0bfbaecf1008	typeref:typename:char
alfaCombineChannel	host/libs/confui/host_renderer.cc	/^static teeui::Color alfaCombineChannel(std::uint32_t shift, double alfa,$/;"	f	namespace:cuttlefish::confui	typeref:typename:teeui::Color	file:
aliases_	common/libs/utils/flag_parser.h	/^  std::vector<FlagAlias> aliases_;$/;"	m	class:cuttlefish::Flag	typeref:typename:std::vector<FlagAlias>
align_size	host/commands/append_squashfs_overlay/src/main.rs	/^fn align_size(size: u64, alignment: u64) -> u64 {$/;"	f
allAidlManifestInterfaces	tests/hal/hal_implementation_test.cpp	/^static std::set<VersionedAidlPackage> allAidlManifestInterfaces() {$/;"	f	typeref:typename:std::set<VersionedAidlPackage>	file:
allHidlManifestInterfaces	tests/hal/hal_implementation_test.cpp	/^static std::set<FQName> allHidlManifestInterfaces() {$/;"	f	typeref:typename:std::set<FQName>	file:
allTreeHidlInterfaces	tests/hal/hal_implementation_test.cpp	/^static std::set<FQName> allTreeHidlInterfaces() {$/;"	f	typeref:typename:std::set<FQName>	file:
allocatePduSessionId	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::allocatePduSessionId(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
allocatePduSessionIdResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::allocatePduSessionIdResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
allowedCarriersPrioritized	guest/hals/ril/reference-libril/ril.h	/^  int allowedCarriersPrioritized;       \/* allowed list prioritized *\/$/;"	m	struct:__anon0bfbaecf2908	typeref:typename:int
allowed_carriers	guest/hals/ril/reference-libril/ril.h	/^  RIL_Carrier * allowed_carriers;       \/* allowed carriers *\/$/;"	m	struct:__anon0bfbaecf2708	typeref:typename:RIL_Carrier *
allowed_carriers	guest/hals/ril/reference-libril/ril.h	/^  RIL_Carrier * allowed_carriers;       \/* allowed carriers *\/$/;"	m	struct:__anon0bfbaecf2908	typeref:typename:RIL_Carrier *
allowed_config_presets_	host/libs/config/config_flag.cpp	/^  std::set<std::string> allowed_config_presets_;$/;"	m	class:cuttlefish::__anon2e549bd00111::ConfigReader	typeref:typename:std::set<std::string>	file:
alphaLong	guest/hals/ril/reference-libril/ril.h	/^    char alphaLong[32];   \/* Long alpha Operator Name String or Enhanced Operator Name String.*/;"	m	struct:__anon0bfbaecf6008	typeref:typename:char[32]
alphaShort	guest/hals/ril/reference-libril/ril.h	/^    char alphaShort[32];  \/* Short alpha Operator Name String or Enhanced Operator Name String /;"	m	struct:__anon0bfbaecf6008	typeref:typename:char[32]
alpha_buf	guest/hals/ril/reference-libril/ril.h	/^  char alpha_buf[CDMA_ALPHA_INFO_BUFFER_LENGTH];$/;"	m	struct:__anon0bfbaecf8208	typeref:typename:char[]
alpha_len	guest/hals/ril/reference-libril/ril.h	/^  char alpha_len;$/;"	m	struct:__anon0bfbaecf8208	typeref:typename:char
als	guest/hals/ril/reference-libril/ril.h	/^    char            als;        \/* ALS line indicator if available$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char
and_mode_cv_	host/libs/confui/host_mode_ctrl.h	/^  std::condition_variable and_mode_cv_;$/;"	m	class:cuttlefish::HostModeCtrl	typeref:typename:std::condition_variable
and_mode_cv_	host/libs/screen_connector/screen_connector_ctrl.h	/^  std::condition_variable and_mode_cv_;$/;"	m	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:std::condition_variable
android	guest/hals/bt/remote/remote_bluetooth.cpp	/^namespace android {$/;"	n	file:
android	guest/hals/bt/remote/remote_bluetooth.h	/^namespace android {$/;"	n
android	guest/hals/camera/cached_stream_buffer.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	file:
android	guest/hals/camera/cached_stream_buffer.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n
android	guest/hals/camera/stream_buffer_cache.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	file:
android	guest/hals/camera/stream_buffer_cache.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n
android	guest/hals/camera/vsock_camera_device_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	file:
android	guest/hals/camera/vsock_camera_device_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n
android	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	file:
android	guest/hals/camera/vsock_camera_device_session_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n
android	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	file:
android	guest/hals/camera/vsock_camera_metadata.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n
android	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	file:
android	guest/hals/camera/vsock_camera_provider_2_7.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n
android	guest/hals/camera/vsock_camera_server.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	file:
android	guest/hals/camera/vsock_camera_server.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n
android	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^namespace android {$/;"	n	file:
android	guest/hals/confirmationui/TrustyConfirmationUI.h	/^namespace android {$/;"	n
android	guest/hals/confirmationui/guest_session.cpp	/^namespace android {$/;"	n	file:
android	guest/hals/confirmationui/guest_session.h	/^namespace android {$/;"	n
android	guest/hals/confirmationui/include/TrustyConfirmationuiHal.h	/^namespace android {$/;"	n
android	guest/hals/health/health.cpp	/^namespace android {$/;"	n	file:
android	guest/hals/health/storage/Storage.cpp	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl	file:
android	guest/hals/health/storage/Storage.h	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl
android	guest/hals/keymint/remote/remote_keymint_device.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl	file:
android	guest/hals/keymint/remote/remote_keymint_device.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl
android	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl	file:
android	guest/hals/keymint/remote/remote_keymint_operation.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl
android	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl	file:
android	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl
android	guest/hals/keymint/remote/remote_secure_clock.cpp	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl	file:
android	guest/hals/keymint/remote/remote_secure_clock.h	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl
android	guest/hals/keymint/remote/remote_shared_secret.cpp	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl	file:
android	guest/hals/keymint/remote/remote_shared_secret.h	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl
android	guest/hals/ril/reference-libril/ril.cpp	/^namespace android {$/;"	n	file:
android	guest/hals/ril/reference-libril/ril_internal.h	/^namespace android {$/;"	n
android	guest/monitoring/cuttlefish_service/AndroidManifest.xml	/^    package="com.android.google.gce.gceservice">$/;"	n	uri:http://schemas.android.com/apk/res/android
android	shared/overlays/SettingsProvider/AndroidManifest.xml	/^    package="com.android.providers.settings.cuttlefish.overlay">$/;"	n	uri:http://schemas.android.com/apk/res/android
android	shared/overlays/core/AndroidManifest.xml	/^    package="android.cuttlefish.overlay">$/;"	n	uri:http://schemas.android.com/apk/res/android
android	shared/phone/overlays/core/AndroidManifest.xml	/^    package="android.cuttlefish.phone.overlay">$/;"	n	uri:http://schemas.android.com/apk/res/android
android	tests/ril/AndroidManifest.xml	/^    android:sharedUserId="android.uid.system">$/;"	n	uri:http://schemas.android.com/apk/res/android
android	tests/wifi/AndroidManifest.xml	/^    android:sharedUserId="android.uid.system">$/;"	n	uri:http://schemas.android.com/apk/res/android
android_last_signal_time_	host/commands/modem_simulator/network_service.h	/^  time_t android_last_signal_time_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:time_t
android_wifi_priv_cmd	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^typedef struct android_wifi_priv_cmd {$/;"	s
android_wifi_priv_cmd	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^} android_wifi_priv_cmd;$/;"	t	typeref:struct:android_wifi_priv_cmd
ap_kernel_image	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::ap_kernel_image() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
ap_rootfs_image	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::ap_rootfs_image() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
apduReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::apduReq(int32_t token, SapApduType type, const hidl_vec<uint8_t>& command)/;"	f	class:SapImpl	typeref:typename:Return<void>
api_level	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional int32 api_level = 7;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:int32
apn	guest/hals/ril/reference-libril/ril.h	/^    char *          apn;        \/* ignored *\/$/;"	m	struct:__anon0bfbaecf1208	typeref:typename:char *
apn	guest/hals/ril/reference-libril/ril.h	/^    char *apn;                  \/* the APN to connect to *\/$/;"	m	struct:__anon0bfbaecfc008	typeref:typename:char *
apn	guest/hals/ril/reference-libril/ril.h	/^    char *apn;                  \/* the APN to connect to *\/$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
apn	guest/hals/ril/reference-libril/ril.h	/^    char* apn;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:char *
apn	guest/hals/ril/reference-libril/ril.h	/^    char* apn;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
apn	host/commands/modem_simulator/data_service.h	/^    std::string apn;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:std::string
app-controls	host/frontend/webrtc_operator/assets/client.html	/^          <div id='app-controls'>$/;"	I
app_label_ptr	guest/hals/ril/reference-libril/ril.h	/^  char             *app_label_ptr;  \/* null terminated string *\/$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:char *
app_state	guest/hals/ril/reference-libril/ril.h	/^  RIL_AppState     app_state;$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:RIL_AppState
app_type	guest/hals/ril/reference-libril/ril.h	/^  RIL_AppType      app_type;$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:RIL_AppType
appendPrintBuf	guest/hals/ril/reference-libril/ril_internal.h	/^    #define appendPrintBuf(/;"	d
applications	guest/hals/ril/reference-libril/ril.h	/^    RIL_AppStatusV1_5 applications[RIL_CARD_MAX_APPS];$/;"	m	struct:__anon0bfbaecf3f08	typeref:typename:RIL_AppStatusV1_5[]
applications	guest/hals/ril/reference-libril/ril.h	/^  RIL_AppStatus applications[RIL_CARD_MAX_APPS];$/;"	m	struct:__anon0bfbaecf3908	typeref:typename:RIL_AppStatus[]
applications	guest/hals/ril/reference-libril/ril.h	/^  RIL_AppStatus applications[RIL_CARD_MAX_APPS];$/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:RIL_AppStatus[]
applySignalPercentage	host/commands/modem_simulator/network_service.cpp	/^void NetworkService::applySignalPercentage(double percentd) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:void
arch_	host/libs/vm_manager/qemu_manager.h	/^  Arch arch_;$/;"	m	class:cuttlefish::vm_manager::QemuManager	typeref:typename:Arch
areUiccApplicationsEnabled	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::areUiccApplicationsEnabled(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
areUiccApplicationsEnabled	guest/hals/ril/reference-ril/reference-ril.c	/^bool areUiccApplicationsEnabled = true;$/;"	v	typeref:typename:bool
areUiccApplicationsEnabledResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::areUiccApplicationsEnabledResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
arfcn	guest/hals/ril/reference-libril/ril.h	/^    int arfcn;  \/* 16-bit GSM Absolute RF channel number, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:int
arfcn	guest/hals/ril/reference-libril/ril.h	/^    int arfcn;  \/* 16-bit GSM Absolute RF channel number; this value must be reported *\/$/;"	m	struct:__anon0bfbaecf5908	typeref:typename:int
array	host/frontend/webrtc_operator/assets/js/adb.js	/^let array = new Uint8Array();$/;"	v
assembly_dir	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::assembly_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
assets_dir_	host/libs/websocket/websocket_server.h	/^  std::string assets_dir_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::string
assigned_ip	common/libs/utils/network.cpp	/^  std::uint8_t assigned_ip[4];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[4]	file:
at_close	guest/hals/ril/reference-ril/atchannel.c	/^void at_close()$/;"	f	typeref:typename:void
at_get_cme_error	guest/hals/ril/reference-ril/atchannel.c	/^AT_CME_Error at_get_cme_error(const ATResponse *p_response)$/;"	f	typeref:typename:AT_CME_Error
at_handshake	guest/hals/ril/reference-ril/atchannel.c	/^int at_handshake()$/;"	f	typeref:typename:int
at_open	guest/hals/ril/reference-ril/atchannel.c	/^int at_open(int fd, ATUnsolHandler h)$/;"	f	typeref:typename:int
at_response_free	guest/hals/ril/reference-ril/atchannel.c	/^void at_response_free(ATResponse *p_response)$/;"	f	typeref:typename:void
at_response_new	guest/hals/ril/reference-ril/atchannel.c	/^static ATResponse * at_response_new()$/;"	f	typeref:typename:ATResponse *	file:
at_send_command	guest/hals/ril/reference-ril/atchannel.c	/^int at_send_command (const char *command, ATResponse **pp_outResponse)$/;"	f	typeref:typename:int
at_send_command_full	guest/hals/ril/reference-ril/atchannel.c	/^static int at_send_command_full (const char *command, ATCommandType type,$/;"	f	typeref:typename:int	file:
at_send_command_full_nolock	guest/hals/ril/reference-ril/atchannel.c	/^static int at_send_command_full_nolock (const char *command, ATCommandType type,$/;"	f	typeref:typename:int	file:
at_send_command_multiline	guest/hals/ril/reference-ril/atchannel.c	/^int at_send_command_multiline (const char *command,$/;"	f	typeref:typename:int
at_send_command_numeric	guest/hals/ril/reference-ril/atchannel.c	/^int at_send_command_numeric (const char *command,$/;"	f	typeref:typename:int
at_send_command_singleline	guest/hals/ril/reference-ril/atchannel.c	/^int at_send_command_singleline (const char *command,$/;"	f	typeref:typename:int
at_send_command_sms	guest/hals/ril/reference-ril/atchannel.c	/^int at_send_command_sms (const char *command,$/;"	f	typeref:typename:int
at_set_on_reader_closed	guest/hals/ril/reference-ril/atchannel.c	/^void at_set_on_reader_closed(void (*onClose)(void))$/;"	f	typeref:typename:void
at_set_on_timeout	guest/hals/ril/reference-ril/atchannel.c	/^void at_set_on_timeout(void (*onTimeout)(void))$/;"	f	typeref:typename:void
at_tok_hasmore	guest/hals/ril/reference-ril/at_tok.c	/^int at_tok_hasmore(char **p_cur)$/;"	f	typeref:typename:int
at_tok_nextbool	guest/hals/ril/reference-ril/at_tok.c	/^int at_tok_nextbool(char **p_cur, char *p_out)$/;"	f	typeref:typename:int
at_tok_nexthexint	guest/hals/ril/reference-ril/at_tok.c	/^int at_tok_nexthexint(char **p_cur, int *p_out)$/;"	f	typeref:typename:int
at_tok_nextint	guest/hals/ril/reference-ril/at_tok.c	/^int at_tok_nextint(char **p_cur, int *p_out)$/;"	f	typeref:typename:int
at_tok_nextint_base	guest/hals/ril/reference-ril/at_tok.c	/^static int at_tok_nextint_base(char **p_cur, int *p_out, int base, int  uns)$/;"	f	typeref:typename:int	file:
at_tok_nextstr	guest/hals/ril/reference-ril/at_tok.c	/^int at_tok_nextstr(char **p_cur, char **p_out)$/;"	f	typeref:typename:int
at_tok_start	guest/hals/ril/reference-ril/at_tok.c	/^int at_tok_start(char **p_cur)$/;"	f	typeref:typename:int
atomic_mode_	host/libs/confui/host_mode_ctrl.h	/^  std::atomic<ModeType> atomic_mode_;$/;"	m	class:cuttlefish::HostModeCtrl	typeref:typename:std::atomic<ModeType>
atomic_mode_	host/libs/screen_connector/screen_connector_ctrl.h	/^  std::atomic<ModeType> atomic_mode_;$/;"	m	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:std::atomic<ModeType>
atr	guest/hals/ril/reference-libril/ril.h	/^    char *atr;$/;"	m	struct:__anon0bfbaecf3b08	typeref:typename:char *
atr	guest/hals/ril/reference-libril/ril.h	/^    char* atr;$/;"	m	struct:__anon0bfbaecfb908	typeref:typename:char *
attestKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::attestKey(const hidl_vec<uint8_t>& keyToAttest,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
attestation_context_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::unique_ptr<TpmAttestationRecordContext> attestation_context_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::unique_ptr<TpmAttestationRecordContext>
attr	guest/hals/ril/reference-libril/rilSocketQueue.h	/^    pthread_mutexattr_t attr;$/;"	m	class:Ril_queue	typeref:typename:pthread_mutexattr_t
attr1_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr1_length = 0x8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
attr1_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr1_length = 0x8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
attr1_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr1_type = kDummy1Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
attr1_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr1_type = kDummy1Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
attr1_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr1_value = kValue1;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint32_t	file:
attr1_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr1_value = kValue1;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint32_t	file:
attr2_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr2_length = 0x8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
attr2_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr2_length = 0x8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
attr2_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr2_type = kDummy2Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
attr2_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr2_type = kDummy2Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
attr2_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr2_value = kValue2;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint32_t	file:
attr2_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr2_value = kValue2;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint32_t	file:
attr_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_length = 0x10;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90208	typeref:typename:const uint16_t	file:
attr_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_length = 0x8;  \/\/ 4 bytes of value + 4 bytes of header.$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90308	typeref:typename:const uint16_t	file:
attr_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_length = 0x8;  \/\/ 4 bytes of value + 4 bytes of header.$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90508	typeref:typename:const uint16_t	file:
attr_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_length = 0x8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint16_t	file:
attr_length_i16	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_i16 = 6;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_i32	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_i32 = 8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_i64	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_i64 = 12;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_i8	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_i8 = 5;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_u16	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_u16 = 6;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_u32	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_u32 = 8;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_u64	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_u64 = 12;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_length_u8	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_length_u8 = 5;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_padding_i16	common/libs/net/netlink_request_test.cpp	/^    uint8_t attr_padding_i16[2] = {0, 0};$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint8_t[2]	file:
attr_padding_i8	common/libs/net/netlink_request_test.cpp	/^    uint8_t attr_padding_i8[3] = {0, 0, 0};$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint8_t[3]	file:
attr_padding_u16	common/libs/net/netlink_request_test.cpp	/^    uint8_t attr_padding_u16[2] = {0, 0};$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint8_t[2]	file:
attr_padding_u8	common/libs/net/netlink_request_test.cpp	/^    uint8_t attr_padding_u8[3] = {0, 0, 0};$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint8_t[3]	file:
attr_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_type = kDummyTag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90208	typeref:typename:const uint16_t	file:
attr_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_type = kDummyTag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90308	typeref:typename:const uint16_t	file:
attr_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_type = kDummyTag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90508	typeref:typename:const uint16_t	file:
attr_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t attr_type = kDummyTag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint16_t	file:
attr_type_i16	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_i16 = kDummyTag + 2;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_i32	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_i32 = kDummyTag + 1;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_i64	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_i64 = kDummyTag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_i8	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_i8 = kDummyTag + 3;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_u16	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_u16 = kDummyTag + 6;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_u32	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_u32 = kDummyTag + 5;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_u64	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_u64 = kDummyTag + 4;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_type_u8	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_type_u8 = kDummyTag + 7;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr_value = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90308	typeref:typename:const uint32_t	file:
attr_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr_value = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90508	typeref:typename:const uint32_t	file:
attr_value	common/libs/net/netlink_request_test.cpp	/^    const uint32_t attr_value = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint32_t	file:
attr_value_i16	common/libs/net/netlink_request_test.cpp	/^    int16_t attr_value_i16 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:int16_t	file:
attr_value_i32	common/libs/net/netlink_request_test.cpp	/^    int32_t attr_value_i32 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:int32_t	file:
attr_value_i64	common/libs/net/netlink_request_test.cpp	/^    int64_t attr_value_i64 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:int64_t	file:
attr_value_i8	common/libs/net/netlink_request_test.cpp	/^    int8_t attr_value_i8 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:int8_t	file:
attr_value_u16	common/libs/net/netlink_request_test.cpp	/^    uint16_t attr_value_u16 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint16_t	file:
attr_value_u32	common/libs/net/netlink_request_test.cpp	/^    uint32_t attr_value_u32 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint32_t	file:
attr_value_u64	common/libs/net/netlink_request_test.cpp	/^    uint64_t attr_value_u64 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint64_t	file:
attr_value_u8	common/libs/net/netlink_request_test.cpp	/^    uint8_t attr_value_u8 = kValue;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90408	typeref:typename:uint8_t	file:
attributes	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t attributes;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptPartitionEntry	typeref:typename:std::uint64_t	file:
audioCtrl	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_T53_AudioControlInfoRecord  audioCtrl;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_T53_AudioControlInfoRecord
audio_callback_	host/frontend/webrtc/lib/audio_device.h	/^  webrtc::AudioTransport* audio_callback_ = nullptr;$/;"	m	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:webrtc::AudioTransport *
audio_device_module_	host/frontend/webrtc/lib/streamer.cpp	/^  std::shared_ptr<AudioDeviceModuleWrapper> audio_device_module_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::shared_ptr<AudioDeviceModuleWrapper>	file:
audio_observers_	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  std::set<AudioObserver*> audio_observers_;$/;"	m	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:std::set<AudioObserver * >
audio_server_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD audio_server_;$/;"	m	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:SharedFD	file:
audio_server_	host/frontend/webrtc/audio_handler.h	/^  std::unique_ptr<AudioServer> audio_server_;$/;"	m	class:cuttlefish::AudioHandler	typeref:typename:std::unique_ptr<AudioServer>
audio_server_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::audio_server_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
audio_sink_	host/frontend/webrtc/audio_handler.h	/^  std::shared_ptr<webrtc_streaming::AudioSink> audio_sink_;$/;"	m	class:cuttlefish::AudioHandler	typeref:typename:std::shared_ptr<webrtc_streaming::AudioSink>
audio_source_	host/frontend/webrtc/audio_handler.h	/^  std::shared_ptr<webrtc_streaming::AudioSource> audio_source_;$/;"	m	class:cuttlefish::AudioHandler	typeref:typename:std::shared_ptr<webrtc_streaming::AudioSource>
audio_sources_	host/frontend/webrtc/lib/streamer.cpp	/^      audio_sources_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::map<std::string,rtc::scoped_refptr<AudioTrackSourceImpl>>	file:
audiocontrol_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::audiocontrol_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
auth1	host/commands/secure_env/tpm_auth.cpp	/^ESYS_TR TpmAuth::auth1() const {$/;"	f	class:cuttlefish::TpmAuth	typeref:typename:ESYS_TR
auth1_	host/commands/secure_env/tpm_auth.h	/^  ESYS_TR auth1_;$/;"	m	class:cuttlefish::TpmAuth	typeref:typename:ESYS_TR
auth2	host/commands/secure_env/tpm_auth.cpp	/^ESYS_TR TpmAuth::auth2() const {$/;"	f	class:cuttlefish::TpmAuth	typeref:typename:ESYS_TR
auth2_	host/commands/secure_env/tpm_auth.h	/^  ESYS_TR auth2_;$/;"	m	class:cuttlefish::TpmAuth	typeref:typename:ESYS_TR
auth3	host/commands/secure_env/tpm_auth.cpp	/^ESYS_TR TpmAuth::auth3() const {$/;"	f	class:cuttlefish::TpmAuth	typeref:typename:ESYS_TR
auth3_	host/commands/secure_env/tpm_auth.h	/^  ESYS_TR auth3_;$/;"	m	class:cuttlefish::TpmAuth	typeref:typename:ESYS_TR
authContext	guest/hals/ril/reference-libril/ril.h	/^    int authContext;            \/* P2 value of authentication command, see P2 parameter in$/;"	m	struct:__anon0bfbaecfc208	typeref:typename:int
authData	guest/hals/ril/reference-libril/ril.h	/^    char *authData;             \/* the challenge string in Base64 format, see 3GPP$/;"	m	struct:__anon0bfbaecfc208	typeref:typename:char *
authType	guest/hals/ril/reference-libril/ril.h	/^    int authType;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
authType	guest/hals/ril/reference-libril/ril.h	/^    int authType;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
auth_token_key_t	host/libs/confui/sign_utils.h	/^using auth_token_key_t = std::array<std::uint8_t, 32>;$/;"	t	namespace:cuttlefish::confui::support	typeref:typename:std::array<std::uint8_t,32>
auth_token_timed_out	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^bool TpmKeymasterEnforcement::auth_token_timed_out($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:bool
authtype	guest/hals/ril/reference-libril/ril.h	/^    int authtype;               \/* authentication protocol used for this PDP context$/;"	m	struct:__anon0bfbaecfc008	typeref:typename:int
authtype	guest/hals/ril/reference-libril/ril.h	/^    int authtype;               \/* authentication protocol used for this PDP context$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:int
awaitConnection	host/frontend/webrtc_operator/assets/js/adb.js	/^function awaitConnection() {$/;"	f
awaitDataChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^function awaitDataChannel(pc, label, onMessage) {$/;"	f
backing_file_offset	host/libs/image_aggregator/image_aggregator.cc	/^  Be64 backing_file_offset;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be64	file:
backing_file_size	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 backing_file_size;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
backoff_ms	host/frontend/webrtc/lib/ws_connection.cpp	/^const uint32_t backoff_ms[] = {1000, 2000, 3000, 4000, 5000};$/;"	v	namespace:__anon14ee93270111	typeref:typename:const uint32_t[]
backup_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t backup_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint64_t	file:
bands	guest/hals/ril/reference-libril/ril.h	/^    } bands;$/;"	m	struct:__anon0bfbaecfab08	typeref:union:__anon0bfbaecfab08::__anon0bfbaecfac0a
bands	guest/hals/ril/reference-libril/ril.h	/^    } bands;$/;"	m	struct:__anon0bfbaecfae08	typeref:union:__anon0bfbaecfae08::__anon0bfbaecfaf0a
bands_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t bands_length;                        \/\/ Length of bands$/;"	m	struct:__anon0bfbaecfab08	typeref:typename:uint32_t
bands_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t bands_length; \/\/ Length of bands$/;"	m	struct:__anon0bfbaecfae08	typeref:typename:uint32_t
bandwidth	guest/hals/ril/reference-libril/ril.h	/^    int32_t bandwidth;  \/* Cell bandwidth, in kHz. *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int32_t
base	guest/hals/ril/reference-libril/ril.h	/^    RIL_AppStatus base;$/;"	m	struct:__anon0bfbaecf3e08	typeref:typename:RIL_AppStatus
base	guest/hals/ril/reference-libril/ril.h	/^    RIL_CardStatus_v1_2 base;$/;"	m	struct:__anon0bfbaecf3c08	typeref:typename:RIL_CardStatus_v1_2
base	guest/hals/ril/reference-libril/ril.h	/^    RIL_CardStatus_v1_4 base;$/;"	m	struct:__anon0bfbaecf3f08	typeref:typename:RIL_CardStatus_v1_4
base	guest/hals/ril/reference-libril/ril.h	/^    RIL_CardStatus_v6 base;$/;"	m	struct:__anon0bfbaecf3b08	typeref:typename:RIL_CardStatus_v6
base	guest/hals/ril/reference-libril/ril.h	/^    RIL_SimSlotStatus base;$/;"	m	struct:__anon0bfbaecfba08	typeref:typename:RIL_SimSlotStatus
base64_decode	guest/hals/ril/reference-ril/base64util.cpp	/^int base64_decode(const char *base64input, unsigned char *bindata) {$/;"	f	typeref:typename:int
base64_encode	guest/hals/ril/reference-ril/base64util.cpp	/^char *base64_encode(const unsigned char *bindata, char *base64output,$/;"	f	typeref:typename:char *
basestationId	guest/hals/ril/reference-libril/ril.h	/^    int basestationId;  \/* Base Station Id 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5c08	typeref:typename:int
basestationId	guest/hals/ril/reference-libril/ril.h	/^    int basestationId;  \/* Base Station Id 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7c08	typeref:typename:int
bc_address_	common/libs/net/network_interface.h	/^  std::string bc_address_;$/;"	m	class:cuttlefish::NetworkInterface	typeref:typename:std::string
bcc_	host/commands/secure_env/tpm_remote_provisioning_context.h	/^  cppbor::Array bcc_;$/;"	m	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:cppbor::Array
bearerBitmask	guest/hals/ril/reference-libril/ril.h	/^    int bearerBitmask;          \/* the bearer bitmask. See RIL_RadioAccessFamily for the value /;"	m	struct:__anon0bfbaecfc108	typeref:typename:int
bearerBitmask	guest/hals/ril/reference-libril/ril.h	/^    int bearerBitmask;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
bearer_proto	guest/hals/ril/reference-libril/ril.h	/^    char *bearer_proto;         \/* One of the PDP_type values in TS 27.007 section 10.1.1.$/;"	m	struct:__anon0bfbaecfc308	typeref:typename:char *
begin	common/libs/fs/shared_select.h	/^  const_iterator begin() const { return value_.begin(); }$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:const_iterator
begin	common/libs/fs/shared_select.h	/^  iterator begin() { return value_.begin(); }$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:iterator
begin	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::begin(KeyPurpose purpose, const hidl_vec<uint8_t>& key,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
begin	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::begin($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
begin	host/libs/confui/sign_utils.h	/^  const uint8_t* begin() const { return data_; }$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy	typeref:typename:const uint8_t *
begin_chs	host/libs/config/mbr.h	/^  std::uint8_t begin_chs[3];$/;"	m	struct:MbrPartitionEntry	typeref:typename:std::uint8_t[3]
bin_path	fetcher.mk	/^bin_path := $(notdir $(HOST_OUT_EXECUTABLES))$/;"	m
binary	host/libs/websocket/websocket_handler.h	/^    bool binary;$/;"	m	struct:cuttlefish::WebSocketHandler::WsBuffer	typeref:typename:bool
bind_compositor	host/libs/wayland/wayland_compositor.cpp	/^void bind_compositor(wl_client* client,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
bind_linux_dmabuf	host/libs/wayland/wayland_dmabuf.cpp	/^void bind_linux_dmabuf(wl_client* client,$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
bind_seat	host/libs/wayland/wayland_seat.cpp	/^void bind_seat(wl_client* client, void* data, uint32_t version, uint32_t id) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
bind_shell	host/libs/wayland/wayland_shell.cpp	/^void bind_shell(wl_client* client, void* data, uint32_t version, uint32_t id) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
bind_subcompositor	host/libs/wayland/wayland_subcompositor.cpp	/^void bind_subcompositor(wl_client* client,$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
bind_virtio_gpu_metadata	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^void bind_virtio_gpu_metadata(wl_client* client, void* data,$/;"	f	namespace:wayland::__anon027348120111	typeref:typename:void
bitErrorRate	guest/hals/ril/reference-libril/ril.h	/^    int bitErrorRate;    \/* bit error rate (0-7, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4608	typeref:typename:int
bitErrorRate	guest/hals/ril/reference-libril/ril.h	/^    int bitErrorRate;    \/* bit error rate (0-7, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4708	typeref:typename:int
bitErrorRate	guest/hals/ril/reference-libril/ril.h	/^    int bitErrorRate;    \/* bit error rate (0-7, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4808	typeref:typename:int
bitmap	guest/hals/ril/reference-ril/reference-ril.c	/^    int bitmap;$/;"	m	struct:__anon70d7df6f0208	typeref:typename:int	file:
bits_per_sample	host/frontend/webrtc/audio_handler.cpp	/^  int bits_per_sample() const override { return bits_per_sample_; }$/;"	f	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
bits_per_sample	host/frontend/webrtc/audio_handler.h	/^    int bits_per_sample = -1;$/;"	m	struct:cuttlefish::AudioHandler::StreamDesc	typeref:typename:int
bits_per_sample_	host/frontend/webrtc/audio_handler.cpp	/^  int bits_per_sample_;$/;"	m	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
blank_data_image_mb	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::blank_data_image_mb() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
bluetooth	guest/hals/bt/remote/remote_bluetooth.cpp	/^namespace bluetooth {$/;"	n	namespace:android::hardware	file:
bluetooth	guest/hals/bt/remote/remote_bluetooth.h	/^namespace bluetooth {$/;"	n	namespace:android::hardware
bluetooth-console-button	host/frontend/webrtc_operator/assets/client.html	/^            <button id='bluetooth-console-button' title='Bluetooth console' class='material-icon/;"	I
bluetooth-console-close	host/frontend/webrtc_operator/assets/client.html	/^          <button id='bluetooth-console-close' title='Close' class='material-icons modal-close'>/;"	I
bluetooth-console-cmd-label	host/frontend/webrtc_operator/assets/client.html	/^            <tr><td width='1'><p id='bluetooth-console-cmd-label'>Command:<\/p><\/td><td width='/;"	I
bluetooth-console-input	host/frontend/webrtc_operator/assets/client.html	/^            <tr><td width='1'><p id='bluetooth-console-cmd-label'>Command:<\/p><\/td><td width='/;"	I
bluetooth-console-modal	host/frontend/webrtc_operator/assets/client.html	/^      <div id='bluetooth-console-modal' class='modal'>$/;"	I
bluetooth-console-modal-header	host/frontend/webrtc_operator/assets/client.html	/^        <div id='bluetooth-console-modal-header' class='modal-header'>$/;"	I
bluetooth-console-view	host/frontend/webrtc_operator/assets/client.html	/^            <tr><td colspan='2'><textarea id='bluetooth-console-view' readonly rows='10' cols='6/;"	I
bluetoothChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #bluetoothChannel;$/;"	M	class:DeviceConnection
bluetooth_channel_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::scoped_refptr<webrtc::DataChannelInterface> bluetooth_channel_;$/;"	m	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler	typeref:typename:rtc::scoped_refptr<webrtc::DataChannelInterface>	file:
bluetooth_handler_	host/frontend/webrtc/connection_observer.cpp	/^      bluetooth_handler_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:std::shared_ptr<cuttlefish::webrtc_streaming::BluetoothHandler>	file:
bluetooth_handler_	host/frontend/webrtc/lib/client_handler.h	/^  std::unique_ptr<BluetoothChannelHandler> bluetooth_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::unique_ptr<BluetoothChannelHandler>
body	host/frontend/webrtc_operator/assets/index.css	/^body {$/;"	s
body	host/frontend/webrtc_operator/assets/style.css	/^body {$/;"	s
bootStateMachineComponent	host/commands/run_cvd/boot_state_machine.cc	/^bootStateMachineComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig,KernelLogPipeProvider>>
boot_event_handler_	host/commands/run_cvd/boot_state_machine.cc	/^  std::thread boot_event_handler_;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:std::thread	file:
boot_filename	common/libs/utils/network.cpp	/^  std::uint8_t boot_filename[128];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[128]	file:
boot_patchlevel_	host/commands/secure_env/tpm_key_blob_maker.h	/^  std::optional<uint32_t> boot_patchlevel_;$/;"	m	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:std::optional<uint32_t>
boot_patchlevel_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::optional<uint32_t> boot_patchlevel_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::optional<uint32_t>
boot_signature	host/libs/config/mbr.h	/^  std::uint8_t boot_signature[2];$/;"	m	struct:MasterBootRecord	typeref:typename:std::uint8_t[2]
boot_slot	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::boot_slot() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
bootconfig_supported	host/commands/assemble_cvd/flags.h	/^  bool bootconfig_supported;$/;"	m	struct:cuttlefish::KernelConfig	typeref:typename:bool
bootconfig_supported	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::bootconfig_supported() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
bootloader	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::bootloader() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
bootstrap_code	host/libs/config/mbr.h	/^  std::uint8_t bootstrap_code[446];$/;"	m	struct:MasterBootRecord	typeref:typename:std::uint8_t[446]
bridge_name_	host/libs/allocd/resource.h	/^  std::string bridge_name_;$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:std::string
broadcast	common/libs/device_config/device_config.proto	/^    string broadcast = 4;$/;"	f	message:cuttlefish.DeviceConfig.RILConfig	typeref:typename:string
broadcast_config_	host/commands/modem_simulator/sms_service.h	/^  BroadcastConfig broadcast_config_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:BroadcastConfig
broadcaster_	host/frontend/webrtc/lib/video_track_source_impl.h	/^  rtc::VideoBroadcaster broadcaster_;$/;"	m	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:rtc::VideoBroadcaster
bsic	guest/hals/ril/reference-libril/ril.h	/^    uint8_t bsic; \/* 6-bit Base Station Identity Code; 0xFF if unknown *\/$/;"	m	struct:__anon0bfbaecf5908	typeref:typename:uint8_t
bsic	guest/hals/ril/reference-libril/ril.h	/^    uint8_t bsic;\/* 6-bit Base Station Identity Code, 0xFF if unknown *\/$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:uint8_t
buf	guest/hals/ril/reference-libril/ril.h	/^  char buf[CDMA_NUMBER_INFO_BUFFER_LENGTH];$/;"	m	struct:__anon0bfbaecf8308	typeref:typename:char[]
buf	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^  char* buf;$/;"	m	struct:android_wifi_priv_cmd	typeref:typename:char *
buf_	common/libs/fs/shared_fd_stream.h	/^  SharedFDStreambuf buf_;$/;"	m	class:cuttlefish::SharedFDIstream	typeref:typename:SharedFDStreambuf
buf_	common/libs/fs/shared_fd_stream.h	/^  SharedFDStreambuf buf_;$/;"	m	class:cuttlefish::SharedFDOstream	typeref:typename:SharedFDStreambuf
buf_	host/frontend/webrtc/display_handler.h	/^  std::unique_ptr<CvdVideoFrameBuffer> buf_;$/;"	m	struct:cuttlefish::WebRtcScProcessedFrame	typeref:typename:std::unique_ptr<CvdVideoFrameBuffer>
buffer	host/frontend/webrtc/audio_handler.h	/^    HoldingBuffer buffer;$/;"	m	struct:cuttlefish::AudioHandler::StreamDesc	typeref:typename:HoldingBuffer
buffer	host/frontend/webrtc/audio_handler.h	/^    std::vector<uint8_t> buffer;$/;"	m	struct:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:std::vector<uint8_t>
bufferId	guest/hals/camera/cached_stream_buffer.h	/^  uint64_t bufferId() const { return buffer_id_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:uint64_t
buffer_	guest/hals/camera/cached_stream_buffer.h	/^  buffer_handle_t buffer_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:buffer_handle_t
buffer_	host/frontend/webrtc/audio_handler.cpp	/^  const uint8_t* buffer_;$/;"	m	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:const uint8_t *	file:
buffer_	host/frontend/webrtc/connection_observer.cpp	/^  std::vector<T> buffer_;$/;"	m	struct:cuttlefish::InputEventBufferImpl	typeref:typename:std::vector<T>	file:
buffer_	host/frontend/webrtc/lib/ws_connection.cpp	/^    std::vector<uint8_t> buffer_;$/;"	m	struct:WsConnectionImpl::WsBuffer	typeref:typename:std::vector<uint8_t>	file:
buffer_	host/libs/audio_connector/buffers.h	/^  const volatile uint8_t* const buffer_;$/;"	m	class:cuttlefish::TxBuffer	typeref:typename:const volatile uint8_t * const
buffer_	host/libs/audio_connector/buffers.h	/^  volatile uint8_t* const buffer_;$/;"	m	class:cuttlefish::RxBuffer	typeref:typename:volatile uint8_t * const
buffer_	host/libs/screen_connector/screen_connector_queue.h	/^  std::deque<T> buffer_;$/;"	m	class:cuttlefish::ScreenConnectorQueue	typeref:typename:std::deque<T>
buffer_bytes	host/libs/audio_connector/commands.h	/^  uint32_t buffer_bytes() const { return buffer_bytes_; }$/;"	f	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:uint32_t
buffer_bytes	host/libs/audio_connector/shm_layout.h	/^  Le32 buffer_bytes;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:Le32
buffer_bytes_	host/libs/audio_connector/commands.h	/^  const uint32_t buffer_bytes_;$/;"	m	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:const uint32_t
buffer_cache_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  StreamBufferCache buffer_cache_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:StreamBufferCache
buffer_count	guest/hals/camera/vsock_camera_device_session_3_4.h	/^    uint32_t buffer_count;$/;"	m	struct:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::ReadVsockRequest	typeref:typename:uint32_t
buffer_destroy	host/libs/wayland/wayland_dmabuf.cpp	/^void buffer_destroy(wl_client*, wl_resource* buffer) {$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
buffer_id_	guest/hals/camera/cached_stream_buffer.h	/^  uint64_t buffer_id_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:uint64_t
buffer_ids	guest/hals/camera/vsock_camera_device_session_3_4.h	/^    std::vector<uint64_t> buffer_ids;$/;"	m	struct:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::ReadVsockRequest	typeref:typename:std::vector<uint64_t>
buffer_implementation	host/libs/wayland/wayland_dmabuf.cpp	/^const struct wl_buffer_interface buffer_implementation = {$/;"	v	namespace:wayland::__anon8f5be4990111	typeref:typename:const struct wl_buffer_interface
buffer_len	host/libs/audio_connector/shm_layout.h	/^  uint32_t buffer_len;$/;"	m	struct:cuttlefish::IoTransferMsg	typeref:typename:uint32_t
buffer_offset	host/libs/audio_connector/shm_layout.h	/^  uint32_t buffer_offset;$/;"	m	struct:cuttlefish::IoStatusMsg	typeref:typename:uint32_t
buffer_offset	host/libs/audio_connector/shm_layout.h	/^  uint32_t buffer_offset;$/;"	m	struct:cuttlefish::IoTransferMsg	typeref:typename:uint32_t
buffer_queue_	host/libs/websocket/websocket_handler.h	/^  std::deque<WsBuffer> buffer_queue_;$/;"	m	class:cuttlefish::WebSocketHandler	typeref:typename:std::deque<WsBuffer>
buffer_status_	host/libs/confui/cbor.h	/^  Error buffer_status_;$/;"	m	class:cuttlefish::confui::Cbor	typeref:typename:Error
build_id	host/libs/config/fetcher_config.h	/^  std::string build_id;$/;"	m	struct:cuttlefish::CvdFile	typeref:typename:std::string
build_instance	tools/create_base_image.go	/^var build_instance string$/;"	v	package:main	typeref:typename:string
build_project	tools/create_base_image.go	/^var build_project string$/;"	v	package:main	typeref:typename:string
build_slist	host/commands/fetcher/curl_wrapper.cc	/^curl_slist* build_slist(const std::vector<std::string>& strings) {$/;"	f	namespace:cuttlefish::__anondfffca8d0111	typeref:typename:curl_slist *
build_target	host/libs/config/fetcher_config.h	/^  std::string build_target;$/;"	m	struct:cuttlefish::CvdFile	typeref:typename:std::string
build_zone	tools/create_base_image.go	/^var build_zone string$/;"	v	package:main	typeref:typename:string
bus_type_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  const uint16_t bus_type_;$/;"	m	class:cuttlefish_input_service::VirtualDeviceBase	typeref:typename:const uint16_t
button	host/example_custom_actions/custom_action_config.json	/^		"button":{$/;"	o	object:0
button	shared/config/config_foldable.json	/^                        "button":{$/;"	o	object:custom_actions.0
button	shared/config/config_foldable.json	/^                        "button":{$/;"	o	object:custom_actions.1
buttons	host/example_custom_actions/custom_action_config.json	/^		"buttons":[$/;"	a	object:1
buttons	host/frontend/webrtc_operator/assets/js/app.js	/^  #buttons = {};$/;"	M	class:DeviceControlApp
buttons	host/libs/config/custom_actions.h	/^  std::vector<ControlPanelButton> buttons;$/;"	m	struct:cuttlefish::CustomActionConfig	typeref:typename:std::vector<ControlPanelButton>
cache_	guest/hals/camera/stream_buffer_cache.h	/^  std::vector<std::shared_ptr<CachedStreamBuffer>> cache_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:std::vector<std::shared_ptr<CachedStreamBuffer>>
cached_gnss_raw	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::string cached_gnss_raw;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::string	file:
cached_gnss_raw_mutex	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::mutex cached_gnss_raw_mutex;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::mutex	file:
cached_jpeg_	guest/hals/camera/vsock_frame_provider.h	/^  std::vector<char> cached_jpeg_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::vector<char>
cached_nmea	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::string cached_nmea;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::string	file:
cached_nmea_mutex	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::mutex cached_nmea_mutex;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::mutex	file:
calcNextTimeout	guest/hals/ril/reference-libril/ril_event.cpp	/^static int calcNextTimeout(struct timeval * tv)$/;"	f	typeref:typename:int	file:
callFromCLCCLine	guest/hals/ril/reference-ril/reference-ril.c	/^static int callFromCLCCLine(char *line, RIL_Call *p_call)$/;"	f	typeref:typename:int	file:
callRingInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::callRingInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
callStateChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::callStateChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
callStateToString	guest/hals/ril/reference-libril/ril.cpp	/^callStateToString(RIL_CallState s) {$/;"	f	namespace:android	typeref:typename:const char *
call_forward_infos_	host/commands/modem_simulator/sup_service.h	/^  std::vector<CallForwardInfo> call_forward_infos_;$/;"	m	class:cuttlefish::SupService	typeref:typename:std::vector<CallForwardInfo>
call_state	host/commands/modem_simulator/call_service.h	/^    CallState call_state;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:CallState
call_waiting_info_	host/commands/modem_simulator/sup_service.h	/^  CallWaitingInfo call_waiting_info_;$/;"	m	class:cuttlefish::SupService	typeref:typename:CallWaitingInfo
callback_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  const sp<ICameraDeviceCallback> callback_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:const sp<ICameraDeviceCallback>
callback_	host/libs/wayland/wayland_surfaces.h	/^  std::optional<FrameCallback> callback_;$/;"	m	class:wayland::Surfaces	typeref:typename:std::optional<FrameCallback>
callback_from_streamer_	host/libs/screen_connector/screen_connector.h	/^  GenerateProcessedFrameCallback callback_from_streamer_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:GenerateProcessedFrameCallback
callback_mutex_	host/libs/wayland/wayland_surfaces.h	/^  std::mutex callback_mutex_;$/;"	m	class:wayland::Surfaces	typeref:typename:std::mutex
callback_t	guest/hals/camera/vsock_camera_server.h	/^  using callback_t =$/;"	t	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer
callback_thread_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::thread callback_thread_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::thread
callbacks_	guest/hals/camera/vsock_camera_provider_2_7.h	/^  sp<ICameraProviderCallback> callbacks_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:sp<ICameraProviderCallback>
camera	guest/hals/camera/cached_stream_buffer.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/cached_stream_buffer.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware
camera	guest/hals/camera/stream_buffer_cache.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/stream_buffer_cache.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware
camera	guest/hals/camera/vsock_camera_device_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/vsock_camera_device_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware
camera	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/vsock_camera_device_session_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware
camera	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/vsock_camera_metadata.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware
camera	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/vsock_camera_provider_2_7.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware
camera	guest/hals/camera/vsock_camera_server.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware	file:
camera	guest/hals/camera/vsock_camera_server.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware
camera-control	host/frontend/webrtc_operator/assets/client.html	/^            <div id="camera-control" title="Capture Camera"><\/div>$/;"	I
cameraDataChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #cameraDataChannel;$/;"	M	class:DeviceConnection
cameraEnabled	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  get cameraEnabled() {$/;"	G	class:DeviceConnection
cameraHeight	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  get cameraHeight() {$/;"	G	class:DeviceConnection
cameraInputQueue	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #cameraInputQueue;$/;"	M	class:DeviceConnection
cameraSenders	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #cameraSenders = [];$/;"	M	class:DeviceConnection
cameraWidth	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  get cameraWidth() {$/;"	G	class:DeviceConnection
camera_channel_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::scoped_refptr<webrtc::DataChannelInterface> camera_channel_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraChannelHandler	typeref:typename:rtc::scoped_refptr<webrtc::DataChannelInterface>	file:
camera_characteristics_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  VsockCameraMetadata camera_characteristics_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:VsockCameraMetadata
camera_controller_	host/frontend/webrtc/connection_observer.cpp	/^  cuttlefish::CameraController *camera_controller_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:cuttlefish::CameraController *	file:
camera_controller_	host/frontend/webrtc/connection_observer.h	/^  cuttlefish::CameraController* camera_controller_ = nullptr;$/;"	m	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:cuttlefish::CameraController *
camera_data_handler_	host/frontend/webrtc/lib/client_handler.h	/^  std::unique_ptr<CameraChannelHandler> camera_data_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::unique_ptr<CameraChannelHandler>
camera_res_x	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #camera_res_x;$/;"	M	class:DeviceConnection
camera_res_y	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #camera_res_y;$/;"	M	class:DeviceConnection
camera_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::camera_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
camera_session_active_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::atomic<bool> camera_session_active_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::atomic<bool>
camera_streamer_	host/frontend/webrtc/lib/streamer.cpp	/^  std::unique_ptr<CameraStreamer> camera_streamer_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::unique_ptr<CameraStreamer>	file:
camera_track_	host/frontend/webrtc/lib/client_handler.h	/^  std::unique_ptr<ClientVideoTrackImpl> camera_track_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::unique_ptr<ClientVideoTrackImpl>
can_init_gles2_on_egl_surfaceless	host/libs/graphics_detector/graphics_detector.h	/^  bool can_init_gles2_on_egl_surfaceless = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
can_present_number	host/commands/modem_simulator/call_service.h	/^    bool can_present_number;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
cancel	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public boolean cancel(boolean canInterrupt) {$/;"	m	class:GceFuture
cancel	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        public synchronized void cancel() {$/;"	m	class:GceWifiManager.MonitorWifiJob
cancelHandover	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::cancelHandover(int32_t serial, int32_t callId) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
cancelHandoverResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cancelHandoverResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
cancelJpegRequest	guest/hals/camera/vsock_frame_provider.cpp	/^void VsockFrameProvider::cancelJpegRequest() { jpeg_pending_ = false; }$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:void
cancelPendingUssd	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::cancelPendingUssd(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
cancelPendingUssdResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cancelPendingUssdResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cancelled	guest/hals/ril/reference-libril/ril_internal.h	/^    char cancelled;$/;"	m	struct:android::RequestInfo	typeref:typename:char
capacity	host/commands/health/health.cpp	/^int capacity() {$/;"	f	typeref:typename:int
capacity_	common/libs/concurrency/semaphore.h	/^  const unsigned int capacity_;  \/\/ inclusive upper limit$/;"	m	class:cuttlefish::Semaphore	typeref:typename:const unsigned int
cardState	guest/hals/ril/reference-libril/ril.h	/^    RIL_CardState cardState;$/;"	m	struct:__anon0bfbaecfb908	typeref:typename:RIL_CardState
card_state	guest/hals/ril/reference-libril/ril.h	/^  RIL_CardState card_state;$/;"	m	struct:__anon0bfbaecf3908	typeref:typename:RIL_CardState
card_state	guest/hals/ril/reference-libril/ril.h	/^  RIL_CardState card_state;$/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:RIL_CardState
carrierInfoForImsiEncryption	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::carrierInfoForImsiEncryption(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
carrierKey	guest/hals/ril/reference-libril/ril.h	/^    uint8_t* carrierKey;       \/* Public Key from the Carrier used to encrypt the$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:uint8_t *
carrierKey	guest/hals/ril/reference-libril/ril.h	/^  uint8_t * carrierKey;               \/* Public Key from the Carrier used to encrypt the$/;"	m	struct:__anon0bfbaecf2a08	typeref:typename:uint8_t *
carrierKeyLength	guest/hals/ril/reference-libril/ril.h	/^    int32_t carrierKeyLength;  \/* Length of the Public Key. *\/$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:int32_t
carrierKeyLength	guest/hals/ril/reference-libril/ril.h	/^  int32_t carrierKeyLength;            \/* Length of the Public Key. *\/$/;"	m	struct:__anon0bfbaecf2a08	typeref:typename:int32_t
categories	guest/hals/ril/reference-libril/ril.h	/^    RIL_EmergencyServiceCategory categories; \/* The bitfield of @1.4::EmergencyServiceCategory(/;"	m	struct:__anon0bfbaecfb708	typeref:typename:RIL_EmergencyServiceCategory
cause	guest/hals/ril/reference-libril/ril.h	/^  char cause;$/;"	m	struct:__anon0bfbaecf8708	typeref:typename:char
cause_code	guest/hals/ril/reference-libril/ril.h	/^  RIL_LastCallFailCause cause_code;$/;"	m	struct:__anon0bfbaecf2e08	typeref:typename:RIL_LastCallFailCause
cb	host/commands/modem_simulator/thread_looper.h	/^      Callback cb;$/;"	m	struct:cuttlefish::ThreadLooper::Event	typeref:typename:Callback
cbor_	host/libs/confui/session.h	/^  std::unique_ptr<Cbor> cbor_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::unique_ptr<Cbor>
cdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoCdma        cdma;$/;"	m	union:__anon0bfbaecf7008::__anon0bfbaecf710a	typeref:typename:RIL_CellInfoCdma
cdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoCdma        cdma;$/;"	m	union:__anon0bfbaecf7208::__anon0bfbaecf730a	typeref:typename:RIL_CellInfoCdma
cdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoCdma    cdma;$/;"	m	union:__anon0bfbaecf6e08::__anon0bfbaecf6f0a	typeref:typename:RIL_CellInfoCdma
cdmaCallWaitingInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaCallWaitingInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cdmaInfoRecInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaInfoRecInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cdmaMessage	guest/hals/ril/reference-libril/ril.h	/^        RIL_CDMA_SMS_Message* cdmaMessage;$/;"	m	union:__anon0bfbaecf1808::__anon0bfbaecf190a	typeref:typename:RIL_CDMA_SMS_Message *
cdmaNewSmsInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaNewSmsInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
cdmaOtaProvisionStatusInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaOtaProvisionStatusInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cdmaPrlChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaPrlChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cdmaRuimSmsStorageFullInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaRuimSmsStorageFullInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cdmaSms	guest/hals/ril/reference-libril/ril_service.cpp	/^    RIL_CDMA_SMS_Message cdmaSms;$/;"	m	struct:ImsCdmaSms	typeref:typename:RIL_CDMA_SMS_Message	file:
cdmaSubscriptionSourceChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cdmaSubscriptionSourceChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cdma_dbm	host/commands/modem_simulator/network_service.h	/^    int cdma_dbm;   \/* Valid values are positive integers.  This value is the actual RSSI value$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
cdma_ecio	host/commands/modem_simulator/network_service.h	/^    int cdma_ecio;  \/* Valid values are positive integers.  This value is the actual Ec\/Io mul/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
cdma_roaming_preference_	host/commands/modem_simulator/sim_service.h	/^  int cdma_roaming_preference_;$/;"	m	class:cuttlefish::SimService	typeref:typename:int
cdma_subscription_app_index	guest/hals/ril/reference-libril/ril.h	/^  int           cdma_subscription_app_index;     \/* value < RIL_CARD_MAX_APPS, -1 if none *\/$/;"	m	struct:__anon0bfbaecf3908	typeref:typename:int
cdma_subscription_app_index	guest/hals/ril/reference-libril/ril.h	/^  int           cdma_subscription_app_index;     \/* value < RIL_CARD_MAX_APPS, -1 if none *\/$/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:int
cdma_subscription_source_	host/commands/modem_simulator/sim_service.h	/^  int cdma_subscription_source_;$/;"	m	class:cuttlefish::SimService	typeref:typename:int
cellIdentity	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentity_v16 cellIdentity;    \/\/ Current cell information$/;"	m	struct:__anon0bfbaecf8008	typeref:typename:RIL_CellIdentity_v16
cellIdentity	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentity_v16 cellIdentity;    \/\/ current cell information$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:RIL_CellIdentity_v16
cellIdentityCdma	guest/hals/ril/reference-libril/ril.h	/^      RIL_CellIdentityCdma_v1_2 cellIdentityCdma;$/;"	m	union:__anon0bfbaecf7d08::__anon0bfbaecf7e0a	typeref:typename:RIL_CellIdentityCdma_v1_2
cellIdentityCdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityCdma cellIdentityCdma;$/;"	m	union:__anon0bfbaecf7408::__anon0bfbaecf750a	typeref:typename:RIL_CellIdentityCdma
cellIdentityCdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityCdma cellIdentityCdma;$/;"	m	union:__anon0bfbaecf7608::__anon0bfbaecf770a	typeref:typename:RIL_CellIdentityCdma
cellIdentityCdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityCdma      cellIdentityCdma;$/;"	m	struct:__anon0bfbaecf6608	typeref:typename:RIL_CellIdentityCdma
cellIdentityGsm	guest/hals/ril/reference-libril/ril.h	/^      RIL_CellIdentityGsm_v1_2 cellIdentityGsm;$/;"	m	union:__anon0bfbaecf7d08::__anon0bfbaecf7e0a	typeref:typename:RIL_CellIdentityGsm_v1_2
cellIdentityGsm	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityGsm_v12 cellIdentityGsm;$/;"	m	union:__anon0bfbaecf7408::__anon0bfbaecf750a	typeref:typename:RIL_CellIdentityGsm_v12
cellIdentityGsm	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityGsm_v12 cellIdentityGsm;$/;"	m	union:__anon0bfbaecf7608::__anon0bfbaecf770a	typeref:typename:RIL_CellIdentityGsm_v12
cellIdentityGsm	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityGsm   cellIdentityGsm;$/;"	m	struct:__anon0bfbaecf6208	typeref:typename:RIL_CellIdentityGsm
cellIdentityGsm	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityGsm_v12   cellIdentityGsm;$/;"	m	struct:__anon0bfbaecf6308	typeref:typename:RIL_CellIdentityGsm_v12
cellIdentityLte	guest/hals/ril/reference-libril/ril.h	/^      RIL_CellIdentityLte_v1_2 cellIdentityLte;$/;"	m	union:__anon0bfbaecf7d08::__anon0bfbaecf7e0a	typeref:typename:RIL_CellIdentityLte_v1_2
cellIdentityLte	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityLte_v12 cellIdentityLte;$/;"	m	union:__anon0bfbaecf7408::__anon0bfbaecf750a	typeref:typename:RIL_CellIdentityLte_v12
cellIdentityLte	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityLte_v12 cellIdentityLte;$/;"	m	union:__anon0bfbaecf7608::__anon0bfbaecf770a	typeref:typename:RIL_CellIdentityLte_v12
cellIdentityLte	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityLte        cellIdentityLte;$/;"	m	struct:__anon0bfbaecf6708	typeref:typename:RIL_CellIdentityLte
cellIdentityLte	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityLte_v12    cellIdentityLte;$/;"	m	struct:__anon0bfbaecf6808	typeref:typename:RIL_CellIdentityLte_v12
cellIdentityNr	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityNr cellIdentityNr;$/;"	m	union:__anon0bfbaecf7608::__anon0bfbaecf770a	typeref:typename:RIL_CellIdentityNr
cellIdentityTdscdma	guest/hals/ril/reference-libril/ril.h	/^      RIL_CellIdentityTdscdma_v1_2 cellIdentityTdscdma;$/;"	m	union:__anon0bfbaecf7d08::__anon0bfbaecf7e0a	typeref:typename:RIL_CellIdentityTdscdma_v1_2
cellIdentityTdscdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityTdscdma cellIdentityTdscdma;$/;"	m	union:__anon0bfbaecf7408::__anon0bfbaecf750a	typeref:typename:RIL_CellIdentityTdscdma
cellIdentityTdscdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityTdscdma cellIdentityTdscdma;$/;"	m	union:__anon0bfbaecf7608::__anon0bfbaecf770a	typeref:typename:RIL_CellIdentityTdscdma
cellIdentityTdscdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityTdscdma     cellIdentityTdscdma;$/;"	m	struct:__anon0bfbaecf6908	typeref:typename:RIL_CellIdentityTdscdma
cellIdentityWcdma	guest/hals/ril/reference-libril/ril.h	/^      RIL_CellIdentityWcdma_v1_2 cellIdentityWcdma;$/;"	m	union:__anon0bfbaecf7d08::__anon0bfbaecf7e0a	typeref:typename:RIL_CellIdentityWcdma_v1_2
cellIdentityWcdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityWcdma_v12 cellIdentityWcdma;$/;"	m	union:__anon0bfbaecf7408::__anon0bfbaecf750a	typeref:typename:RIL_CellIdentityWcdma_v12
cellIdentityWcdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityWcdma_v12 cellIdentityWcdma;$/;"	m	union:__anon0bfbaecf7608::__anon0bfbaecf770a	typeref:typename:RIL_CellIdentityWcdma_v12
cellIdentityWcdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityWcdma cellIdentityWcdma;$/;"	m	struct:__anon0bfbaecf6408	typeref:typename:RIL_CellIdentityWcdma
cellIdentityWcdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityWcdma_v12 cellIdentityWcdma;$/;"	m	struct:__anon0bfbaecf6508	typeref:typename:RIL_CellIdentityWcdma_v12
cellInfoListInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::cellInfoListInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
cellInfoType	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoType cellInfoType;$/;"	m	struct:__anon0bfbaecf7d08	typeref:typename:RIL_CellInfoType
cellInfoType	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellInfoType          cellInfoType;   \/* cell type for selecting from union CellInfo *\/$/;"	m	struct:__anon0bfbaecf7208	typeref:typename:RIL_CellInfoType
cellInfoType	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellInfoType  cellInfoType;   \/* cell type for selecting from union CellInfo *\/$/;"	m	struct:__anon0bfbaecf6e08	typeref:typename:RIL_CellInfoType
cellInfoType	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellInfoType  cellInfoType;   \/* cell type for selecting from union CellInfo *\/$/;"	m	struct:__anon0bfbaecf7008	typeref:typename:RIL_CellInfoType
cellInfoType	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellInfoType  cellInfoType;   \/* cell type for selecting from union CellInfo *\/$/;"	m	struct:__anon0bfbaecf7408	typeref:typename:RIL_CellInfoType
cellInfoType	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellInfoType  cellInfoType;   \/* cell type for selecting from union CellInfo *\/$/;"	m	struct:__anon0bfbaecf7608	typeref:typename:RIL_CellInfoType
cellidentity	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellIdentityNr          cellidentity;$/;"	m	struct:__anon0bfbaecf6a08	typeref:typename:RIL_CellIdentityNr
certs_dir_	host/libs/websocket/websocket_server.h	/^  std::string certs_dir_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::string
cfData	guest/hals/ril/reference-libril/ril.h	/^    RIL_CfData cfData;$/;"	m	union:__anon0bfbaecf9908::__anon0bfbaecf9a0a	typeref:typename:RIL_CfData
cfInfo	guest/hals/ril/reference-libril/ril.h	/^  RIL_CallForwardInfo cfInfo[NUM_SERVICE_CLASSES]; \/* This is the response data$/;"	m	struct:__anon0bfbaecf9808	typeref:typename:RIL_CallForwardInfo[]
cfg	guest/hals/ril/reference-libril/ril.h	/^  } cfg;$/;"	m	struct:__anon0bfbaecf9308	typeref:union:__anon0bfbaecf9308::__anon0bfbaecf940a
challenge	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^    uint64_t challenge;$/;"	m	struct:cuttlefish::TpmKeymasterEnforcement::VerifyAuthorization::VerificationData	typeref:typename:uint64_t	file:
changeIccPin2ForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::changeIccPin2ForApp(int32_t serial, const hidl_string& oldPin2,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
changeIccPin2ForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::changeIccPin2ForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
changeIccPinForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::changeIccPinForApp(int32_t serial, const hidl_string& oldPin,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
changeIccPinForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::changeIccPinForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
channel_	guest/hals/keymaster/remote/remote_keymaster.h	/^    cuttlefish::KeymasterChannel* channel_;$/;"	m	class:keymaster::RemoteKeymaster	typeref:typename:cuttlefish::KeymasterChannel *
channel_	guest/hals/keymint/remote/remote_keymaster.h	/^  cuttlefish::KeymasterChannel* channel_;$/;"	m	class:keymaster::RemoteKeymaster	typeref:typename:cuttlefish::KeymasterChannel *
channel_	host/commands/secure_env/gatekeeper_responder.h	/^  cuttlefish::GatekeeperChannel& channel_;$/;"	m	class:cuttlefish::GatekeeperResponder	typeref:typename:cuttlefish::GatekeeperChannel &
channel_	host/commands/secure_env/keymaster_responder.h	/^  cuttlefish::KeymasterChannel& channel_;$/;"	m	class:cuttlefish::KeymasterResponder	typeref:typename:cuttlefish::KeymasterChannel &
channel_monitor_	host/commands/modem_simulator/modem_service.h	/^  ChannelMonitor* channel_monitor_;$/;"	m	class:cuttlefish::ModemService	typeref:typename:ChannelMonitor *
channel_monitor_	host/commands/modem_simulator/modem_simulator.h	/^  std::unique_ptr<ChannelMonitor> channel_monitor_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:std::unique_ptr<ChannelMonitor>
channel_open_reported_	host/frontend/webrtc/lib/client_handler.cpp	/^  bool channel_open_reported_ = false;$/;"	m	class:cuttlefish::webrtc_streaming::AdbChannelHandler	typeref:typename:bool	file:
channel_open_reported_	host/frontend/webrtc/lib/client_handler.cpp	/^  bool channel_open_reported_ = false;$/;"	m	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler	typeref:typename:bool	file:
channels	guest/hals/ril/reference-libril/ril.h	/^    uint32_t channels[MAX_CHANNELS];              \/\/ Frequency channels to scan$/;"	m	struct:__anon0bfbaecfab08	typeref:typename:uint32_t[]
channels	guest/hals/ril/reference-libril/ril.h	/^    uint32_t channels[MAX_CHANNELS]; \/\/ Frequency channels to scan$/;"	m	struct:__anon0bfbaecfae08	typeref:typename:uint32_t[]
channels	host/frontend/webrtc/audio_handler.cpp	/^  int channels() const override { return channels_; }$/;"	f	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
channels	host/frontend/webrtc/audio_handler.h	/^    int channels = -1;$/;"	m	struct:cuttlefish::AudioHandler::StreamDesc	typeref:typename:int
channels	host/libs/audio_connector/commands.h	/^  uint8_t channels() const { return channels_; }$/;"	f	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:uint8_t
channels	host/libs/audio_connector/shm_layout.h	/^  uint8_t channels;$/;"	m	struct:cuttlefish::virtio_snd_chmap_info	typeref:typename:uint8_t
channels	host/libs/audio_connector/shm_layout.h	/^  uint8_t channels;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:uint8_t
channels_	host/frontend/webrtc/audio_handler.cpp	/^  int channels_;$/;"	m	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
channels_	host/libs/audio_connector/commands.h	/^  const uint8_t channels_;$/;"	m	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:const uint8_t
channels_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t channels_length;                     \/\/ Length of channels$/;"	m	struct:__anon0bfbaecfab08	typeref:typename:uint32_t
channels_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t channels_length; \/\/ Length of channels$/;"	m	struct:__anon0bfbaecfae08	typeref:typename:uint32_t
channels_max	host/libs/audio_connector/shm_layout.h	/^  uint8_t channels_max;$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:uint8_t
channels_min	host/libs/audio_connector/shm_layout.h	/^  uint8_t channels_min;$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:uint8_t
checkAndDequeue	guest/hals/ril/reference-libril/rilSocketQueue.h	/^int Ril_queue<T>::checkAndDequeue(MsgId id, int token) {$/;"	f	class:Ril_queue	typeref:typename:int
checkAndDequeueRequestInfoIfAck	guest/hals/ril/reference-libril/ril.cpp	/^checkAndDequeueRequestInfoIfAck(struct RequestInfo *pRI, bool isAck) {$/;"	f	namespace:android	typeref:typename:int	file:
checkPin1AndAdjustSimStatus	host/commands/modem_simulator/sim_service.cpp	/^bool SimService::checkPin1AndAdjustSimStatus(std::string_view pin) {$/;"	f	class:cuttlefish::SimService	typeref:typename:bool
checkReturnStatus	guest/hals/ril/reference-libril/ril_config.cpp	/^void checkReturnStatus(Return<void>& ret) {$/;"	f	typeref:typename:void
checkReturnStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^void RadioImpl_1_6::checkReturnStatus(Return<void>& ret) {$/;"	f	class:RadioImpl_1_6	typeref:typename:void
checkReturnStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^void checkReturnStatus(int32_t slotId, Return<void>& ret, bool isRadioService) {$/;"	f	typeref:typename:void
checkReturnStatus	guest/hals/ril/reference-libril/sap_service.cpp	/^void SapImpl::checkReturnStatus(Return<void>& ret) {$/;"	f	class:SapImpl	typeref:typename:void
checkReturnStatus_config	guest/hals/ril/reference-libril/ril_config.cpp	/^void RadioConfigImpl::checkReturnStatus_config(Return<void>& ret) {$/;"	f	class:RadioConfigImpl	typeref:typename:void
chmaps	host/libs/audio_connector/shm_layout.h	/^  uint32_t chmaps;$/;"	m	struct:cuttlefish::VioSConfig	typeref:typename:uint32_t
choose_hton	host/libs/confui/sign_utils.h	/^struct choose_hton;$/;"	v	namespace:cuttlefish::confui::support	typeref:typename:const struct
choose_hton	host/libs/confui/sign_utils.h	/^struct choose_hton<IntType, __ORDER_BIG_ENDIAN__> {$/;"	s	namespace:cuttlefish::confui::support
choose_hton	host/libs/confui/sign_utils.h	/^struct choose_hton<IntType, __ORDER_LITTLE_ENDIAN__> {$/;"	s	namespace:cuttlefish::confui::support
ci	guest/hals/ril/reference-libril/ril.h	/^    int ci;     \/* 28-bit Cell Identity described in TS ???, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf5d08	typeref:typename:int
ci	guest/hals/ril/reference-libril/ril.h	/^    int ci;     \/* 28-bit Cell Identity described in TS ???, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf5e08	typeref:typename:int
ci	guest/hals/ril/reference-libril/ril.h	/^    int ci;     \/* 28-bit Cell Identity described in TS ???, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int             cid;        \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecf1208	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int             cid;        \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecf1308	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int             cid;        \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecf1408	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int             cid;        \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int             cid;        \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;                                 \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;                    \/* Context ID, uniquely identifies this call *\/$/;"	m	struct:__anon0bfbaecfc308	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 16-bit GSM Cell Identity described in TS 27.007, 0..65535, INT_MAX if unknow/;"	m	struct:__anon0bfbaecf5808	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 16-bit GSM Cell Identity described in TS 27.007, 0..65535, INT_MAX if unknow/;"	m	struct:__anon0bfbaecf5908	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 16-bit GSM Cell Identity described in TS 27.007, 0..65535, INT_MAX if unknow/;"	m	struct:__anon0bfbaecf7808	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 28-bit UMTS Cell Identity described in TS 25.331, 0..268435455, INT_MAX if u/;"	m	struct:__anon0bfbaecf5a08	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 28-bit UMTS Cell Identity described in TS 25.331, 0..268435455, INT_MAX if u/;"	m	struct:__anon0bfbaecf5b08	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 28-bit UMTS Cell Identity described in TS 25.331, 0..268435455, INT_MAX if u/;"	m	struct:__anon0bfbaecf5f08	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 28-bit UMTS Cell Identity described in TS 25.331, 0..268435455, INT_MAX if u/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^    int cid;    \/* 28-bit UMTS Cell Identity described in TS 25.331, 0..268435455, INT_MAX if u/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int
cid	guest/hals/ril/reference-libril/ril.h	/^   char * cid;         \/* Combination of LAC and Cell Id in 32 bits in GSM.$/;"	m	struct:__anon0bfbaecf2208	typeref:typename:char *
cid	guest/hals/ril/reference-ril/reference-ril.c	/^    int cid;$/;"	m	struct:PDPInfo	typeref:typename:int	file:
cid	host/commands/modem_simulator/data_service.h	/^    int cid;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:int
cid_	host/frontend/webrtc/lib/camera_streamer.h	/^  unsigned int cid_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:unsigned int
cla	guest/hals/ril/reference-libril/ril.h	/^    int cla;$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:int
classx	host/commands/modem_simulator/sup_service.h	/^    int classx;               \/\/ a sum of integers each representing a class of information$/;"	m	struct:cuttlefish::SupService::CallWaitingInfo	typeref:typename:int
clccStateToRILState	guest/hals/ril/reference-ril/reference-ril.c	/^static int clccStateToRILState(int state, RIL_CallState *p_state)$/;"	f	typeref:typename:int	file:
cleanup	tools/network-setup.sh	/^cleanup() {$/;"	f
clear	guest/hals/camera/stream_buffer_cache.cpp	/^void StreamBufferCache::clear() {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:void
clearPendingCommand	guest/hals/ril/reference-ril/atchannel.c	/^static void clearPendingCommand()$/;"	f	typeref:typename:void	file:
clearPrintBuf	guest/hals/ril/reference-libril/ril_internal.h	/^    #define clearPrintBuf /;"	d
clearTombstonesFromCuttlefish	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    public void clearTombstonesFromCuttlefish() throws DeviceNotAvailableException {$/;"	m	class:TombstoneTransmitTest
client_fd	host/commands/modem_simulator/channel_monitor.h	/^  cuttlefish::SharedFD client_fd;$/;"	m	class:cuttlefish::Client	typeref:typename:cuttlefish::SharedFD
client_handler_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::weak_ptr<ClientHandler> client_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdCreateSessionDescriptionObserver	typeref:typename:std::weak_ptr<ClientHandler>	file:
client_handler_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::weak_ptr<ClientHandler> client_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdSetSessionDescriptionObserver	typeref:typename:std::weak_ptr<ClientHandler>	file:
client_harware_address	common/libs/utils/network.cpp	/^  std::uint8_t client_harware_address[16];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[16]	file:
client_id	common/libs/utils/network.h	/^  std::string client_id;$/;"	m	struct:cuttlefish::DnsmasqDhcp4Lease	typeref:typename:std::string
client_id	host/frontend/webrtc_operator/client_handler.cpp	/^  size_t client_id() const { return client_id_; }$/;"	f	class:cuttlefish::PollConnectionHandler	typeref:typename:size_t	file:
client_id_	host/frontend/webrtc/lib/client_handler.h	/^  int client_id_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:int
client_id_	host/frontend/webrtc_operator/client_handler.cpp	/^  size_t client_id_ = 0;$/;"	m	class:cuttlefish::PollConnectionHandler	typeref:typename:size_t	file:
client_id_	host/frontend/webrtc_operator/client_handler.h	/^  size_t client_id_;$/;"	m	class:cuttlefish::ClientWSHandler	typeref:typename:size_t
client_info	host/commands/metrics/proto/clientanalytics.proto	/^  optional ClientInfo client_info = 1;$/;"	f	message:LogRequest	typeref:typename:ClientInfo
client_ip	common/libs/utils/network.cpp	/^  std::uint8_t client_ip[4];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[4]	file:
client_socket_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD client_socket_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:SharedFD	file:
client_type	host/commands/metrics/proto/clientanalytics.proto	/^  optional int32 client_type = 1;$/;"	f	message:ClientInfo	typeref:typename:int32
clients_	host/commands/modem_simulator/channel_monitor.h	/^  std::vector<std::unique_ptr<Client>> clients_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:std::vector<std::unique_ptr<Client>>
clients_	host/frontend/webrtc/lib/streamer.cpp	/^  std::map<int, std::shared_ptr<ClientHandler>> clients_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::map<int,std::shared_ptr<ClientHandler>>	file:
clients_	host/frontend/webrtc_operator/device_handler.h	/^  std::vector<std::weak_ptr<ClientHandler>> clients_;$/;"	m	class:cuttlefish::DeviceHandler	typeref:typename:std::vector<std::weak_ptr<ClientHandler>>
clir	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_T53_CLIRInfoRecord          clir;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_T53_CLIRInfoRecord
clir	guest/hals/ril/reference-libril/ril.h	/^    int clir;$/;"	m	struct:__anon0bfbaecf1c08	typeref:typename:int
clir_status_	host/commands/modem_simulator/sup_service.h	/^  ClirStatusInfo clir_status_;$/;"	m	class:cuttlefish::SupService	typeref:typename:ClirStatusInfo
close	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::close() {$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
close	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::close() {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
closeLogicalChannel	host/commands/modem_simulator/unittest/service_test.cpp	/^  bool closeLogicalChannel(int channel) {$/;"	f	class:ModemServiceTest	typeref:typename:bool	file:
closeRequest	guest/hals/ril/reference-libril/ril_internal.h	/^    #define closeRequest /;"	d
closeResponse	guest/hals/ril/reference-libril/ril_internal.h	/^    #define closeResponse /;"	d
close_	host/libs/websocket/websocket_handler.h	/^  bool close_ = false;$/;"	m	class:cuttlefish::WebSocketHandler	typeref:typename:bool
closed	common/libs/utils/tcp_socket.cpp	/^bool ClientSocket::closed() const {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:bool
closed_lock_	common/libs/utils/tcp_socket.h	/^  mutable std::mutex closed_lock_;$/;"	m	class:cuttlefish::ClientSocket	typeref:typename:std::mutex
cluster_bits	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 cluster_bits;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
cmd	common/libs/security/gatekeeper_channel.h	/^    uint32_t cmd : 31;$/;"	m	struct:gatekeeper::GatekeeperRawMessage	typeref:typename:uint32_t:31
cmd	common/libs/security/keymaster_channel.h	/^    AndroidKeymasterCommand cmd : 31;$/;"	m	struct:keymaster::keymaster_message	typeref:typename:AndroidKeymasterCommand:31
cmd	guest/hals/confirmationui/include/TrustyIpc.h	/^    uint32_t cmd;$/;"	m	struct:confirmationui_hdr	typeref:typename:uint32_t
cmd	host/commands/run_cvd/process_monitor.h	/^  std::unique_ptr<Command> cmd;$/;"	m	struct:cuttlefish::MonitorEntry	typeref:typename:std::unique_ptr<Command>
cmdConsole	host/frontend/webrtc_operator/assets/js/controls.js	/^function cmdConsole(consoleViewName, consoleInputName) {$/;"	f
code	common/libs/utils/network.cpp	/^  std::uint8_t code;$/;"	m	struct:cuttlefish::Dhcp4MessageTypeOption	typeref:typename:std::uint8_t	file:
code	common/libs/utils/network.cpp	/^  std::uint8_t code;$/;"	m	struct:cuttlefish::Dhcp4ServerIdentifier	typeref:typename:std::uint8_t	file:
code	guest/commands/vsoc_input_service/vsoc_input_service.h	/^  uint16_t code;$/;"	m	struct:cuttlefish::input_events::InputEvent	typeref:typename:uint16_t
code	guest/hals/ril/reference-libril/ril.h	/^    RIL_KeepaliveStatusCode code;$/;"	m	struct:__anon0bfbaecfc708	typeref:typename:RIL_KeepaliveStatusCode
code	guest/hals/ril/reference-libril/ril.h	/^    int     code;               \/* See 27.007 7.17$/;"	m	struct:__anon0bfbaecf3108	typeref:typename:int
code	host/frontend/webrtc/connection_observer.cpp	/^  uint16_t code;$/;"	m	struct:cuttlefish::virtio_input_event	typeref:typename:uint16_t	file:
code	host/libs/audio_connector/shm_layout.h	/^  Le32 code;$/;"	m	struct:cuttlefish::virtio_snd_hdr	typeref:typename:Le32
color_bg_	host/libs/confui/host_renderer.h	/^  teeui::Color color_bg_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Color
color_text_	host/libs/confui/host_renderer.h	/^  teeui::Color color_text_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Color
com.android.cuttlefish.ril.tests	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^package com.android.cuttlefish.ril.tests;$/;"	p
com.android.cuttlefish.tests	tests/graphics/src/com/android/cuttlefish/tests/GfxstreamEnabledTest.java	/^package com.android.cuttlefish.tests;$/;"	p
com.android.cuttlefish.tests	tests/powerwash/src/com/android/cuttlefish/tests/PowerwashTest.java	/^package com.android.cuttlefish.tests;$/;"	p
com.android.cuttlefish.tests	tests/recovery/src/com/android/cuttlefish/tests/RebootRecoveryTest.java	/^package com.android.cuttlefish.tests;$/;"	p
com.android.cuttlefish.wifi.tests	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^package com.android.cuttlefish.wifi.tests;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceBroadcastReceiver.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.google.gce.gceservice	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^package com.android.google.gce.gceservice;$/;"	p
com.android.tests.tombstoneTransmit	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^package com.android.tests.tombstoneTransmit;$/;"	p
command	guest/hals/ril/reference-libril/ril.h	/^    int command;    \/* one of the commands listed for TS 27.007 +CRSM*\/$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:int
command	guest/hals/ril/reference-libril/ril.h	/^    int command;    \/* one of the commands listed for TS 27.007 +CRSM*\/$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:int
command	host/example_custom_actions/custom_action_config.json	/^				"command":"alert",$/;"	s	object:1.buttons.1
command	host/example_custom_actions/custom_action_config.json	/^				"command":"settings",$/;"	s	object:1.buttons.0
command	host/example_custom_actions/custom_action_config.json	/^			"command":"web",$/;"	s	object:0.button
command	host/frontend/webrtc/lib/streamer.cpp	/^  std::string command;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::ControlPanelButtonDescriptor	typeref:typename:std::string	file:
command	host/frontend/webrtc_operator/assets/js/app.js	/^          command: 'device_state',$/;"	p	class:DeviceControlApp.getCustomDeviceStateButtonCb.message
command	host/libs/config/custom_actions.h	/^  std::string command;$/;"	m	struct:cuttlefish::ControlPanelButton	typeref:typename:std::string
command	shared/config/config_foldable.json	/^                                "command":"device_state_closed",$/;"	s	object:custom_actions.0.button
command	shared/config/config_foldable.json	/^                                "command":"device_state_opened",$/;"	s	object:custom_actions.1.button
command_	common/libs/utils/subprocess.h	/^  std::vector<std::string> command_;$/;"	m	class:cuttlefish::Command	typeref:typename:std::vector<std::string>
command_	host/commands/modem_simulator/command_parser.h	/^  std::string_view command_;$/;"	m	class:cuttlefish::CommandParser	typeref:typename:std::string_view
command_	host/libs/vm_manager/crosvm_builder.h	/^  Command command_;$/;"	m	class:cuttlefish::CrosvmBuilder	typeref:typename:Command
command_handlers_	host/commands/modem_simulator/modem_service.h	/^  const std::vector<CommandHandler> command_handlers_;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::vector<CommandHandler>
command_prefix	host/commands/modem_simulator/modem_service.h	/^  std::string command_prefix;$/;"	m	class:cuttlefish::CommandHandler	typeref:typename:std::string
command_prefix_	host/commands/modem_simulator/unittest/service_test.cpp	/^  std::string command_prefix_;$/;"	m	class:ModemServiceTest	typeref:typename:std::string	file:
command_queue_	host/commands/secure_env/in_process_tpm.cpp	/^  std::list<std::vector<uint8_t>> command_queue_;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:std::list<std::vector<uint8_t>>	file:
commands_event	guest/hals/ril/reference-libril/ril_ex.h	/^    struct ril_event* commands_event;$/;"	m	struct:SocketListenParam	typeref:struct:ril_event *
commands_to_custom_action_servers_	host/frontend/webrtc/connection_observer.cpp	/^  std::map<std::string, cuttlefish::SharedFD> commands_to_custom_action_servers_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:std::map<std::string,cuttlefish::SharedFD>	file:
commands_to_custom_action_servers_	host/frontend/webrtc/connection_observer.h	/^      commands_to_custom_action_servers_;$/;"	m	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:std::map<std::string,SharedFD>
common_arg_parser	tools/tombstone_to_line.py	/^def common_arg_parser():$/;"	f
company	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional string company = 10;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:string
component_disks	host/libs/image_aggregator/cdisk_spec.proto	/^  repeated ComponentDisk component_disks = 2;$/;"	f	message:CompositeDisk	typeref:typename:ComponentDisk
compositor_create_region	host/libs/wayland/wayland_compositor.cpp	/^void compositor_create_region(wl_client* client,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
compositor_create_surface	host/libs/wayland/wayland_compositor.cpp	/^void compositor_create_surface(wl_client* client,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
compositor_destroy_resource_callback	host/libs/wayland/wayland_compositor.cpp	/^void compositor_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
compositor_implementation	host/libs/wayland/wayland_compositor.cpp	/^const struct wl_compositor_interface compositor_implementation = {$/;"	v	namespace:wayland::__anon473d11590111	typeref:typename:const struct wl_compositor_interface
computeChecksum	host/frontend/webrtc_operator/assets/js/adb.js	/^function computeChecksum(array) {$/;"	f
computeCrc32	host/frontend/webrtc_operator/utils.cpp	/^uint32_t computeCrc32(const void *_data, size_t size) {$/;"	f	typeref:typename:uint32_t
computeSharedHmac	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::computeSharedHmac($/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
computeSharedSecret	guest/hals/keymint/remote/remote_shared_secret.cpp	/^ScopedAStatus RemoteSharedSecret::computeSharedSecret($/;"	f	class:aidl::android::hardware::security::sharedsecret::RemoteSharedSecret	typeref:typename:ScopedAStatus
concat	host/libs/config/bootconfig_args.cpp	/^std::string concat(const S& s, const T& t) {$/;"	f	namespace:cuttlefish::__anond90bdb570111	typeref:typename:std::string
cond	guest/hals/ril/reference-libril/rilSocketQueue.h	/^    pthread_cond_t cond;$/;"	m	class:Ril_queue	typeref:typename:pthread_cond_t
cond_	host/commands/modem_simulator/thread_looper.h	/^  std::condition_variable cond_;$/;"	m	class:cuttlefish::ThreadLooper	typeref:typename:std::condition_variable
condvar_	host/commands/console_forwarder/main.cpp	/^  std::condition_variable condvar_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:std::condition_variable	file:
conference	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::conference(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
conferenceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::conferenceResponse(int slotId, int responseType,$/;"	f	class:radio_1_6	typeref:typename:int
confidence_level	guest/hals/ril/reference-libril/ril.h	/^  unsigned char confidence_level;      \/* capacity estimate confidence: 0-100 *\/$/;"	m	struct:__anon0bfbaecf2408	typeref:typename:unsigned char
config	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #config = undefined;$/;"	M	class:PollingConnector
config	host/libs/config/adb/test.cpp	/^  AdbConfig& config;$/;"	m	struct:cuttlefish::TestData	typeref:typename:AdbConfig &	file:
config_	host/commands/assemble_cvd/disk_flags.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::BootImageRepacker	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/assemble_cvd/disk_flags.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::InitializeAccessKregistryImage	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/assemble_cvd/flag_feature.cpp	/^  ConfigFlag& config_;$/;"	m	class:cuttlefish::ParseGflagsImpl	typeref:typename:ConfigFlag &	file:
config_	host/commands/modem_simulator/nvram_config.h	/^    const NvramConfig* config_;$/;"	m	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:const NvramConfig *
config_	host/commands/run_cvd/boot_state_machine.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::BluetoothConnector	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::MetricsService	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::OpenWrt	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::RootCanal	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::SecureEnvironment	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::VehicleHalServer	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::VmmCommands	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::WmediumdServer	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch_modem.cpp	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch_streamer.cpp	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/launch_streamer.cpp	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/main.cc	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:const CuttlefishConfig &	file:
config_	host/commands/run_cvd/server_loop.cpp	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:const CuttlefishConfig &	file:
config_	host/frontend/webrtc/lib/streamer.cpp	/^  StreamerConfig config_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:StreamerConfig	file:
config_	host/libs/config/adb/config.cpp	/^  AdbConfig& config_;$/;"	m	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	typeref:typename:AdbConfig &	file:
config_	host/libs/config/adb/flags.cpp	/^  AdbConfig& config_;$/;"	m	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:AdbConfig &	file:
config_	host/libs/config/adb/launch.cpp	/^  const AdbConfig& config_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:const AdbConfig &	file:
config_	host/libs/config/config_flag.cpp	/^  std::string config_;$/;"	m	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:std::string	file:
config_	host/libs/config/custom_actions.cpp	/^  ConfigFlag& config_;$/;"	m	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:ConfigFlag &	file:
config_	host/libs/config/cuttlefish_config.h	/^    CuttlefishConfig* config_;$/;"	m	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:CuttlefishConfig *
config_	host/libs/config/cuttlefish_config.h	/^    const CuttlefishConfig* config_;$/;"	m	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:const CuttlefishConfig *
config_	host/libs/config/data_image.cpp	/^  const CuttlefishConfig& config_;$/;"	m	class:cuttlefish::InitializeDataImageImpl	typeref:typename:const CuttlefishConfig &	file:
config_flag_	host/libs/config/adb/flags.cpp	/^  ConfigFlag& config_flag_;$/;"	m	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:ConfigFlag &	file:
config_path_	host/commands/run_cvd/launch.cc	/^  std::string config_path_;$/;"	m	class:cuttlefish::WmediumdServer	typeref:typename:std::string	file:
config_path_	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  std::string config_path_;$/;"	m	class:cuttlefish::WmediumdMessageReloadConfig	typeref:typename:std::string
config_reader_	host/libs/config/config_flag.cpp	/^  ConfigReader& config_reader_;$/;"	m	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:ConfigReader &	file:
config_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::config_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
configureStreams	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::configureStreams($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
configureStreams	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Status VsockCameraDeviceSession::configureStreams($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Status
configureStreams_3_3	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::configureStreams_3_3($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
configureStreams_3_4	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::configureStreams_3_4($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
confirm	tools/make_manifest.sh	/^confirm() {$/;"	f
confirmationui	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^namespace confirmationui {$/;"	n	namespace:android::hardware	file:
confirmationui	guest/hals/confirmationui/TrustyConfirmationUI.h	/^namespace confirmationui {$/;"	n	namespace:android::hardware
confirmationui	guest/hals/confirmationui/guest_session.cpp	/^namespace confirmationui {$/;"	n	namespace:android::hardware	file:
confirmationui	guest/hals/confirmationui/guest_session.h	/^namespace confirmationui {$/;"	n	namespace:android::hardware
confirmationui	guest/hals/confirmationui/include/TrustyConfirmationuiHal.h	/^namespace confirmationui {$/;"	n	namespace:android::hardware
confirmationui_cmd	guest/hals/confirmationui/include/TrustyIpc.h	/^enum confirmationui_cmd : uint32_t {$/;"	g	typeref:typename:uint32_t
confirmationui_hdr	guest/hals/confirmationui/include/TrustyIpc.h	/^struct confirmationui_hdr {$/;"	s
confirmationui_init_req	guest/hals/confirmationui/include/TrustyIpc.h	/^struct confirmationui_init_req {$/;"	s
confirmationui_msg_args	guest/hals/confirmationui/include/TrustyIpc.h	/^struct confirmationui_msg_args {$/;"	s
confui	common/libs/confui/packet.cpp	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	common/libs/confui/packet.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	common/libs/confui/packet_types.cpp	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	common/libs/confui/packet_types.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	common/libs/confui/protocol.cpp	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	common/libs/confui/protocol.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	common/libs/confui/protocol_types.cpp	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	common/libs/confui/protocol_types.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	common/libs/confui/utils.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/cbor.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/cbor.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/host_renderer.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/host_renderer.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/host_server.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/host_server.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/host_utils.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/host_utils.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/host_virtual_input.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/server_common.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/server_common.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/session.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/session.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/sign.cc	/^namespace confui {$/;"	n	namespace:cuttlefish	file:
confui	host/libs/confui/sign.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui	host/libs/confui/sign_utils.h	/^namespace confui {$/;"	n	namespace:cuttlefish
confui_host_vsock_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::confui_host_vsock_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
confui_input_	host/frontend/webrtc/connection_observer.cpp	/^  cuttlefish::confui::HostVirtualInput &confui_input_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:cuttlefish::confui::HostVirtualInput &	file:
confui_input_	host/frontend/webrtc/connection_observer.h	/^  cuttlefish::confui::HostVirtualInput& confui_input_;$/;"	m	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:cuttlefish::confui::HostVirtualInput &
confui_mode_cv_	host/libs/confui/host_mode_ctrl.h	/^  std::condition_variable confui_mode_cv_;$/;"	m	class:cuttlefish::HostModeCtrl	typeref:typename:std::condition_variable
connId	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #connId = undefined;$/;"	M	class:PollingConnector
conn_types	host/commands/modem_simulator/data_service.h	/^    std::string conn_types;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:std::string
connectReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::connectReq(int32_t token, int32_t maxMsgSize) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
connectWs	host/frontend/webrtc_operator/assets/js/server_connector.js	/^async function connectWs() {$/;"	f
connected	host/frontend/webrtc_operator/assets/js/adb.js	/^function connected() {$/;"	f
connected	host/libs/audio_connector/shm_layout.h	/^  uint8_t connected;$/;"	m	struct:cuttlefish::virtio_snd_jack_info	typeref:typename:uint8_t
connectedCb	host/frontend/webrtc_operator/assets/js/adb.js	/^let connectedCb;$/;"	v
connected_callback_	guest/hals/camera/vsock_camera_server.h	/^  callback_t connected_callback_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:callback_t
connectionStatus	guest/hals/ril/reference-libril/ril.h	/^  RIL_CellConnectionStatus  connectionStatus;  \/* Connection status for the cell. *\/$/;"	m	struct:__anon0bfbaecf7208	typeref:typename:RIL_CellConnectionStatus
connection_	guest/hals/camera/vsock_camera_device_3_4.h	/^  std::shared_ptr<cuttlefish::VsockConnection> connection_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:std::shared_ptr<cuttlefish::VsockConnection>
connection_	guest/hals/camera/vsock_camera_provider_2_7.h	/^  std::shared_ptr<cuttlefish::VsockConnection> connection_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:std::shared_ptr<cuttlefish::VsockConnection>
connection_	guest/hals/camera/vsock_camera_server.h	/^  std::shared_ptr<cuttlefish::VsockServerConnection> connection_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:std::shared_ptr<cuttlefish::VsockServerConnection>
connection_	guest/hals/camera/vsock_frame_provider.h	/^  std::shared_ptr<cuttlefish::VsockConnection> connection_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::shared_ptr<cuttlefish::VsockConnection>
connection_observer_factory_	host/frontend/webrtc/lib/streamer.cpp	/^  std::shared_ptr<ConnectionObserverFactory> connection_observer_factory_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::shared_ptr<ConnectionObserverFactory>	file:
console	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::console() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
console_dev	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::console_dev() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
console_forwarder_in_wr_	host/commands/run_cvd/launch.cc	/^  SharedFD console_forwarder_in_wr_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:SharedFD	file:
console_forwarder_out_rd_	host/commands/run_cvd/launch.cc	/^  SharedFD console_forwarder_out_rd_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:SharedFD	file:
console_in_	host/commands/console_forwarder/main.cpp	/^  SharedFD console_in_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:SharedFD	file:
console_in_pipe_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::console_in_pipe_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
console_log_	host/commands/console_forwarder/main.cpp	/^  SharedFD console_log_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:SharedFD	file:
console_out_	host/commands/console_forwarder/main.cpp	/^  SharedFD console_out_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:SharedFD	file:
console_out_pipe_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::console_out_pipe_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
console_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::console_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
console_path_	host/commands/console_forwarder/main.cpp	/^  std::string console_path_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:std::string	file:
console_pipe_prefix	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::console_pipe_prefix() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
const_iterator	common/libs/fs/shared_select.h	/^  typedef std::set<SharedFD>::const_iterator const_iterator;$/;"	t	class:cuttlefish::SharedFDSet	typeref:typename:std::set<SharedFD>::const_iterator
constructCdmaSms	guest/hals/ril/reference-libril/ril_service.cpp	/^void constructCdmaSms(RIL_CDMA_SMS_Message &rcsm, const CdmaSmsMessage& sms) {$/;"	f	typeref:typename:void
constructDefaultRequestSettings	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::constructDefaultRequestSettings($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
constructor	host/frontend/webrtc_operator/assets/js/app.js	/^  constructor() {$/;"	m	class:DeviceDetailsUpdater
constructor	host/frontend/webrtc_operator/assets/js/app.js	/^  constructor(deviceConnection) {$/;"	m	class:DeviceControlApp
constructor	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  constructor(pc, control) {$/;"	m	class:DeviceConnection
constructor	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  constructor(serverConnector) {$/;"	m	class:Controller
constructor	host/frontend/webrtc_operator/assets/js/index.js	/^  constructor({url, selectDeviceCb}) {$/;"	m	class:DeviceListApp
constructor	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  constructor() {$/;"	m	class:Connector
constructor	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  constructor() {$/;"	m	class:PollingConnector
constructor	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  constructor(ws) {$/;"	m	class:WebsocketConnector
consumed_length	host/libs/audio_connector/shm_layout.h	/^  uint32_t consumed_length;$/;"	m	struct:cuttlefish::IoStatusMsg	typeref:typename:uint32_t
containsValidSettings	guest/hals/camera/vsock_camera_server.cpp	/^bool containsValidSettings(const VsockCameraDevice::Settings& settings) {$/;"	f	namespace:android::hardware::camera::provider::V2_7::implementation::__anon29cd72800111	typeref:typename:bool
content_len	host/libs/websocket/websocket_handler.cpp	/^size_t DynHandler::content_len() const { return out_buffer_.size() - LWS_PRE; }$/;"	f	class:cuttlefish::DynHandler	typeref:typename:size_t
content_type	host/commands/fetcher/build_api.h	/^  std::string content_type;$/;"	m	class:cuttlefish::Artifact	typeref:typename:std::string
contents	guest/hals/ril/reference-libril/ril.h	/^    char *contents;             \/* Carrier-defined content.  It is binary, opaque and$/;"	m	struct:__anon0bfbaecfc308	typeref:typename:char *
contents_length	guest/hals/ril/reference-libril/ril.h	/^    int contents_length;        \/* The number of octets in the contents. *\/$/;"	m	struct:__anon0bfbaecfc308	typeref:typename:int
context_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::shared_ptr<WsConnectionContextImpl> context_;$/;"	m	class:WsConnectionImpl	typeref:typename:std::shared_ptr<WsConnectionContextImpl>	file:
context_	host/libs/websocket/websocket_server.h	/^  struct lws_context* context_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:struct:lws_context *
control	common/libs/utils/unix_sockets.h	/^  std::vector<ControlMessage> control;$/;"	m	struct:cuttlefish::UnixSocketMessage	typeref:typename:std::vector<ControlMessage>
control	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #control;$/;"	M	class:DeviceConnection
control-panel-custom-buttons	host/frontend/webrtc_operator/assets/client.html	/^          <div id='control-panel-custom-buttons' class='control-panel-column'><\/div>$/;"	I
control-panel-default-buttons	host/frontend/webrtc_operator/assets/client.html	/^          <div id='control-panel-default-buttons' class='control-panel-column'>$/;"	I
controlChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #controlChannel;$/;"	M	class:DeviceConnection
control_channel_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::scoped_refptr<webrtc::DataChannelInterface> control_channel_;$/;"	m	class:cuttlefish::webrtc_streaming::ControlChannelHandler	typeref:typename:rtc::scoped_refptr<webrtc::DataChannelInterface>	file:
control_handler_	host/frontend/webrtc/lib/client_handler.h	/^  std::unique_ptr<ControlChannelHandler> control_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::unique_ptr<ControlChannelHandler>
control_socket_	host/libs/audio_connector/server.h	/^  SharedFD control_socket_;$/;"	m	class:cuttlefish::AudioClientConnection	typeref:typename:SharedFD
controls-and-displays	host/frontend/webrtc_operator/assets/client.html	/^        <div id='controls-and-displays'>$/;"	I
convertApduResponseProtoToHal	guest/hals/ril/reference-libril/sap_service.cpp	/^SapResultCode convertApduResponseProtoToHal(RIL_SIM_SAP_APDU_RSP_Response responseProto) {$/;"	f	typeref:typename:SapResultCode
convertBytesToHex	guest/hals/ril/reference-ril/reference-ril.c	/^void convertBytesToHex(uint8_t *bytes, int length, uint8_t *hex_str) {$/;"	f	typeref:typename:void
convertBytesToHexString	guest/hals/ril/reference-ril/reference-ril.c	/^void convertBytesToHexString(char *bin_ptr, int length, unsigned char *hex_ptr) {$/;"	f	typeref:typename:void
convertCertificate	guest/hals/keymint/remote/remote_keymint_device.cpp	/^Certificate convertCertificate(const keymaster_blob_t& cert) {$/;"	f	namespace:aidl::android::hardware::security::keymint::__anon087586ca0111	typeref:typename:Certificate
convertCertificateChain	guest/hals/keymint/remote/remote_keymint_device.cpp	/^vector<Certificate> convertCertificateChain(const CertificateChain& chain) {$/;"	f	namespace:aidl::android::hardware::security::keymint::__anon087586ca0111	typeref:typename:vector<Certificate>
convertCharPtrToHidlString	guest/hals/ril/reference-libril/ril_service.cpp	/^hidl_string convertCharPtrToHidlString(const char *ptr) {$/;"	f	typeref:typename:hidl_string
convertFileContentsToString	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private String convertFileContentsToString(File f) throws IOException {$/;"	m	class:TombstoneTransmitTest	file:
convertFileListToStringList	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private List<String> convertFileListToStringList(List<File> inputList) throws IOException {$/;"	m	class:TombstoneTransmitTest	file:
convertHexStringToBytes	guest/hals/ril/reference-libril/ril_service.cpp	/^extern "C" uint8_t * convertHexStringToBytes(void *response, size_t responseLen) {$/;"	f	typeref:typename:uint8_t *
convertIntToRadioIndicationType	guest/hals/ril/reference-libril/ril_service.cpp	/^RadioIndicationType convertIntToRadioIndicationType(int indicationType) {$/;"	f	typeref:typename:RadioIndicationType
convertKeyCharacteristics	guest/hals/keymint/remote/remote_keymint_device.cpp	/^vector<KeyCharacteristics> convertKeyCharacteristics($/;"	f	namespace:aidl::android::hardware::security::keymint::__anon087586ca0111	typeref:typename:vector<KeyCharacteristics>
convertMvnoTypeToString	guest/hals/ril/reference-libril/ril_service.cpp	/^static bool convertMvnoTypeToString(MvnoType type, char *&str) {$/;"	f	typeref:typename:bool	file:
convertOperatorStatusToInt	guest/hals/ril/reference-libril/ril_service.cpp	/^int convertOperatorStatusToInt(const char *str) {$/;"	f	typeref:typename:int
convertPowerResponseProtoToHal	guest/hals/ril/reference-libril/sap_service.cpp	/^SapResultCode convertPowerResponseProtoToHal(RIL_SIM_SAP_POWER_RSP_Response responseProto) {$/;"	f	typeref:typename:SapResultCode
convertResetSimResponseProtoToHal	guest/hals/ril/reference-libril/sap_service.cpp	/^SapResultCode convertResetSimResponseProtoToHal(RIL_SIM_SAP_RESET_SIM_RSP_Response responseProto/;"	f	typeref:typename:SapResultCode
convertResponseHexStringEntryToInt	guest/hals/ril/reference-libril/ril_service.cpp	/^int convertResponseHexStringEntryToInt(char **response, int index, int numStrings) {$/;"	f	typeref:typename:int
convertResponseStringEntryToInt	guest/hals/ril/reference-libril/ril_service.cpp	/^int convertResponseStringEntryToInt(char **response, int index, int numStrings) {$/;"	f	typeref:typename:int
convertRilCdmaSignalInfoRecordToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilCdmaSignalInfoRecordToHal(RIL_CDMA_SignalInfoRecord *signalInfoRecord,$/;"	f	typeref:typename:void
convertRilCellInfoListToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilCellInfoListToHal(void *response, size_t responseLen, hidl_vec<CellInfo>& records/;"	f	typeref:typename:void
convertRilCellInfoListToHal_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilCellInfoListToHal_1_2(void *response, size_t responseLen, hidl_vec<V1_2::CellInfo/;"	f	typeref:typename:void
convertRilCellInfoListToHal_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilCellInfoListToHal_1_4(void *response, size_t responseLen, hidl_vec<V1_4::CellInfo/;"	f	typeref:typename:void
convertRilDataCallListToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilDataCallListToHal(void *response, size_t responseLen,$/;"	f	typeref:typename:void
convertRilDataCallToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilDataCallToHal(RIL_Data_Call_Response_v11 *dcResponse,$/;"	f	typeref:typename:void
convertRilDataCallToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilDataCallToHal(RIL_Data_Call_Response_v12 *dcResponse,$/;"	f	typeref:typename:void
convertRilHardwareConfigListToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilHardwareConfigListToHal(void *response, size_t responseLen,$/;"	f	typeref:typename:void
convertRilKeepaliveStatusToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilKeepaliveStatusToHal(const RIL_KeepaliveStatus *rilStatus,$/;"	f	typeref:typename:void
convertRilLceDataInfoToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilLceDataInfoToHal(void *response, size_t responseLen, LceDataInfo& lce) {$/;"	f	typeref:typename:void
convertRilRadioCapabilityToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilRadioCapabilityToHal(void *response, size_t responseLen, RadioCapability& rc) {$/;"	f	typeref:typename:void
convertRilSignalStrengthToHal	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilSignalStrengthToHal(void *response, size_t responseLen,$/;"	f	typeref:typename:void
convertRilSignalStrengthToHal_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^void convertRilSignalStrengthToHal_1_4(void *response, size_t responseLen,$/;"	f	typeref:typename:void
convertStorageKeyToEphemeral	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::convertStorageKeyToEphemeral($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
convertToPdpProtocolType	guest/hals/ril/reference-libril/ril_service.cpp	/^::android::hardware::radio::V1_4::PdpProtocolType convertToPdpProtocolType(hidl_string str) {$/;"	f	typeref:typename:::android::hardware::radio::V1_4::PdpProtocolType
convertTransferAtrResponseProtoToHal	guest/hals/ril/reference-libril/sap_service.cpp	/^SapResultCode convertTransferAtrResponseProtoToHal($/;"	f	typeref:typename:SapResultCode
convertTransferCardReaderStatusResponseProtoToHal	guest/hals/ril/reference-libril/sap_service.cpp	/^SapResultCode convertTransferCardReaderStatusResponseProtoToHal($/;"	f	typeref:typename:SapResultCode
convertUIOption	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^teeui::UIOption convertUIOption(UIOption uio) {$/;"	f	namespace:android::hardware::confirmationui::V1_0::implementation::__anon2184467c0111	typeref:typename:teeui::UIOption
convertUsimToSim	guest/hals/ril/reference-ril/reference-ril.c	/^bool convertUsimToSim(uint8_t *byteUSIM, int len, uint8_t *hexSIM) {$/;"	f	typeref:typename:bool
copyHidlStringToRil	guest/hals/ril/reference-libril/ril_service.cpp	/^bool copyHidlStringToRil(char **dest, const hidl_string &src, RequestInfo *pRI) {$/;"	f	typeref:typename:bool
copyHidlStringToRil	guest/hals/ril/reference-libril/ril_service.cpp	/^bool copyHidlStringToRil(char **dest, const hidl_string &src, RequestInfo *pRI, bool allowEmpty)/;"	f	typeref:typename:bool
copyJpegData	guest/hals/camera/vsock_frame_provider.cpp	/^bool VsockFrameProvider::copyJpegData(uint32_t size, void* dst) {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
copyYUVFrame	guest/hals/camera/vsock_frame_provider.cpp	/^bool VsockFrameProvider::copyYUVFrame(uint32_t w, uint32_t h, YCbCrLayout dst) {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
copy_command_	host/commands/modem_simulator/command_parser.h	/^  std::string copy_command_;$/;"	m	class:cuttlefish::CommandParser	typeref:typename:std::string
count	host/frontend/webrtc/audio_handler.h	/^    size_t count;$/;"	m	struct:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:size_t
count	host/libs/audio_connector/commands.h	/^  uint32_t count() const { return count_; }$/;"	f	class:cuttlefish::InfoCommand	typeref:typename:uint32_t
count	host/libs/audio_connector/shm_layout.h	/^  Le32 count;$/;"	m	struct:cuttlefish::virtio_snd_query_info	typeref:typename:Le32
count_	common/libs/concurrency/semaphore.h	/^  unsigned int count_;$/;"	m	class:cuttlefish::Semaphore	typeref:typename:unsigned int
count_	host/libs/audio_connector/commands.h	/^  const size_t count_;$/;"	m	class:cuttlefish::InfoCommand	typeref:typename:const size_t
cpid	guest/hals/ril/reference-libril/ril.h	/^    int cpid;    \/* 8-bit Cell Parameters ID described in TS 25.331, 0..127, INT_MAX if unknown/;"	m	struct:__anon0bfbaecf5f08	typeref:typename:int
cpid	guest/hals/ril/reference-libril/ril.h	/^    int cpid;    \/* 8-bit Cell Parameters ID described in TS 25.331, 0..127, INT_MAX if unknown/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int
cpp_basename	common/libs/utils/files.cpp	/^std::string cpp_basename(const std::string& str) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
cpp_dirname	common/libs/utils/files.cpp	/^std::string cpp_dirname(const std::string& str) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string
cpus	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::cpus() const { return (*dictionary_)[kCpus].asInt(); }$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
cqi	guest/hals/ril/reference-libril/ril.h	/^    int cqi;             \/* The current Channel Quality Indicator.$/;"	m	struct:__anon0bfbaecf4b08	typeref:typename:int
cqi	guest/hals/ril/reference-libril/ril.h	/^    int cqi;             \/* The current Channel Quality Indicator.$/;"	m	struct:__anon0bfbaecf4c08	typeref:typename:int
crc32	host/commands/fetcher/build_api.h	/^  unsigned int crc32;$/;"	m	class:cuttlefish::Artifact	typeref:typename:unsigned int
crc32_tab	host/frontend/webrtc_operator/utils.cpp	/^static const uint32_t crc32_tab[] = {$/;"	v	typeref:typename:const uint32_t[]	file:
createAdbMessage	host/frontend/webrtc_operator/assets/js/adb.js	/^function createAdbMessage(command, arg0, arg1, payload) {$/;"	f
createConnector	host/frontend/webrtc_operator/assets/js/server_connector.js	/^export async function createConnector() {$/;"	f
createControlPanelButton	host/frontend/webrtc_operator/assets/js/controls.js	/^function createControlPanelButton($/;"	f
createDataChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^function createDataChannel(pc, label, onMessage) {$/;"	f
createDeviceDisplays	host/frontend/webrtc_operator/assets/js/app.js	/^  #createDeviceDisplays() {$/;"	m	class:DeviceControlApp
createDeviceEntry	host/frontend/webrtc_operator/assets/js/index.js	/^  #createDeviceEntry(devId, buttonId) {$/;"	m	class:DeviceListApp
createInstance	tools/create_base_image.go	/^func createInstance(instance string, arg string) {$/;"	f	package:main
createManifest	tools/make_manifest.sh	/^createManifest() {$/;"	f
createModalButton	host/frontend/webrtc_operator/assets/js/controls.js	/^function createModalButton(button_id, modal_id, close_id) {$/;"	f
createMsgHeader	guest/hals/ril/reference-libril/sap_service.cpp	/^MsgHeader* SapImpl::createMsgHeader(MsgId msgId, int32_t token) {$/;"	f	class:SapImpl	typeref:typename:MsgHeader *
createPeerConnection	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^function createPeerConnection(infra_config) {$/;"	f
createRootcanalMessage	host/frontend/webrtc_operator/assets/js/rootcanal.js	/^function createRootcanalMessage(command, args) {$/;"	f
createToggleControl	host/frontend/webrtc_operator/assets/js/controls.js	/^function createToggleControl(elm, iconName, onChangeCb) {$/;"	f
createTrustyConfirmationUI	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^android::sp<IConfirmationUI> createTrustyConfirmationUI() {$/;"	f	namespace:android::hardware::confirmationui::V1_0::implementation	typeref:typename:android::sp<IConfirmationUI>
create_interface	tools/vlan_prototype_up.sh	/^create_interface() {$/;"	f
creation_time	host/commands/fetcher/build_api.h	/^  unsigned long creation_time;$/;"	m	class:cuttlefish::Artifact	typeref:typename:unsigned long
credential	host/commands/fetcher/credential_source.h	/^  std::string credential;$/;"	m	class:cuttlefish::FixedCredentialSource	typeref:typename:std::string
credential_source	host/commands/fetcher/build_api.h	/^  CredentialSource* credential_source;$/;"	m	class:cuttlefish::BuildApi	typeref:typename:CredentialSource *
crosvm_binary	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::crosvm_binary() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
crosvm_socket	host/libs/vm_manager/crosvm_manager.cpp	/^constexpr auto crosvm_socket = "crosvm_control.sock";$/;"	v	namespace:cuttlefish::vm_manager	typeref:typename:auto
crypt_method	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 crypt_method;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
csiRsrp	guest/hals/ril/reference-libril/ril.h	/^  int32_t csiRsrp;  \/* CSI reference signal received power, multiplied by -1.$/;"	m	struct:__anon0bfbaecf4e08	typeref:typename:int32_t
csiRsrq	guest/hals/ril/reference-libril/ril.h	/^  int32_t csiRsrq;  \/* CSI reference signal received quality, multiplied by -1.$/;"	m	struct:__anon0bfbaecf4e08	typeref:typename:int32_t
csiSinr	guest/hals/ril/reference-libril/ril.h	/^  int32_t csiSinr;  \/* CSI signal-to-noise and interference ratio.$/;"	m	struct:__anon0bfbaecf4e08	typeref:typename:int32_t
cssSupported	guest/hals/ril/reference-libril/ril.h	/^    int32_t cssSupported;                 \/\/ concurrent services support indicator. if$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:int32_t
ctx_	host/libs/confui/host_renderer.h	/^  teeui::context<teeui::ConfUIParameters> ctx_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::context<teeui::ConfUIParameters>
curl	host/commands/fetcher/build_api.h	/^  CurlWrapper& curl;$/;"	m	class:cuttlefish::BuildApi	typeref:typename:CurlWrapper &
curl	host/commands/fetcher/credential_source.h	/^  CurlWrapper& curl;$/;"	m	class:cuttlefish::GceMetadataCredentialSource	typeref:typename:CurlWrapper &
curl_	host/commands/fetcher/curl_wrapper.cc	/^  CURL* curl_;$/;"	m	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	typeref:typename:CURL *	file:
curr	guest/hals/ril/reference-libril/RilSapSocket.h	/^        MsgHeader* curr;$/;"	m	struct:RilSapSocket::SapSocketRequest	typeref:typename:MsgHeader *
curr_session_	host/libs/confui/host_server.h	/^  std::shared_ptr<Session> curr_session_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:std::shared_ptr<Session>
currentRotation	host/frontend/webrtc_operator/assets/js/app.js	/^  #currentRotation = 0;$/;"	M	class:DeviceControlApp
currentSignalStrengthInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::currentSignalStrengthInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
currentState	guest/hals/ril/reference-ril/reference-ril.c	/^currentState()$/;"	f	typeref:typename:RIL_RadioState	file:
currentTech	guest/hals/ril/reference-ril/reference-ril.c	/^    int currentTech;    \/\/ Technology the modem is currently using (in the format used by mode/;"	m	struct:__anon70d7df6f0108	typeref:typename:int	file:
current_buffer	host/libs/wayland/wayland_surface.h	/^    struct wl_resource* current_buffer = nullptr;$/;"	m	struct:wayland::Surface::State	typeref:struct:wl_resource *
current_frame_number	host/libs/wayland/wayland_surface.h	/^    uint32_t current_frame_number = 0;$/;"	m	struct:wayland::Surface::State	typeref:typename:uint32_t
current_height_	host/libs/confui/host_renderer.h	/^  std::uint32_t current_height_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::uint32_t
current_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t current_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint64_t	file:
current_network_mode_	host/commands/modem_simulator/network_service.h	/^  ModemTechnology current_network_mode_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:ModemTechnology
current_operator_numeric_	host/commands/modem_simulator/network_service.h	/^  std::string current_operator_numeric_ = "";$/;"	m	class:cuttlefish::NetworkService	typeref:typename:std::string
current_select_item_menu_ids_	host/commands/modem_simulator/stk_service.h	/^  std::vector<std::string> current_select_item_menu_ids_;$/;"	m	class:cuttlefish::StkService	typeref:typename:std::vector<std::string>
current_session_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::unique_ptr<GuestSession> current_session_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::unique_ptr<GuestSession>
current_session_id_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::atomic<std::uint32_t> current_session_id_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::atomic<std::uint32_t>
current_session_lock_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::mutex current_session_lock_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::mutex
current_storage_	host/commands/start/flag_forwarder.cc	/^  T current_storage_;$/;"	m	class:DynamicFlag	typeref:typename:T	file:
current_width_	host/libs/confui/host_renderer.h	/^  std::uint32_t current_width_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::uint32_t
custom_action_config_	host/commands/run_cvd/launch_streamer.cpp	/^  const CustomActionConfigProvider& custom_action_config_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:const CustomActionConfigProvider &	file:
custom_action_config_	host/libs/config/custom_actions.cpp	/^  std::string custom_action_config_;$/;"	m	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:std::string	file:
custom_action_config_flag_	host/libs/config/custom_actions.cpp	/^  Flag custom_action_config_flag_;$/;"	m	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:Flag	file:
custom_actions	shared/config/config_foldable.json	/^	"custom_actions" : [$/;"	a
custom_actions_	host/libs/config/custom_actions.cpp	/^  std::vector<CustomActionConfig> custom_actions_;$/;"	m	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:std::vector<CustomActionConfig>	file:
custom_actions_flag_	host/libs/config/custom_actions.cpp	/^  Flag custom_actions_flag_;$/;"	m	class:cuttlefish::__anon12e4c76c0111::CustomActionConfigImpl	typeref:typename:Flag	file:
custom_control_panel_buttons_	host/frontend/webrtc/lib/streamer.cpp	/^  std::vector<ControlPanelButtonDescriptor> custom_control_panel_buttons_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::vector<ControlPanelButtonDescriptor>	file:
cuttlefish	build/cvd-host-package.go	/^package cuttlefish$/;"	p
cuttlefish	common/libs/concurrency/multiplexer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/concurrency/semaphore.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/concurrency/thread_safe_queue.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/confui/packet.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/confui/packet.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/confui/packet_types.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/confui/packet_types.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/confui/protocol.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/confui/protocol.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/confui/protocol_types.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/confui/protocol_types.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/confui/utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/device_config/device_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/device_config/device_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/device_config/device_config.proto	/^package cuttlefish;$/;"	p
cuttlefish	common/libs/device_config/device_config_shared.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/device_config/device_config_shared.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/device_config/guest_device_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/device_config/host_device_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/fs/shared_buf.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/fs/shared_buf.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/fs/shared_fd.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/fs/shared_fd.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/fs/shared_fd_stream.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/fs/shared_fd_stream.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/fs/shared_fd_test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/fs/shared_select.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/net/netlink_client.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/net/netlink_client.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/net/netlink_request.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/net/netlink_request.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/net/netlink_request_test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/net/network_interface.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/net/network_interface_manager.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/net/network_interface_manager.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/security/gatekeeper_channel.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/security/gatekeeper_channel.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/security/keymaster_channel.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/security/keymaster_channel.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/security/keymaster_channel_test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/archive.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/archive.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/base64.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/base64.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/cf_endian.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/environment.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/environment.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/files.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/files.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/flag_parser.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/flag_parser.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/flag_parser_test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/network.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/network.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/shared_fd_flag.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/shared_fd_flag.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/size_utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/subprocess.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/subprocess.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/tcp_socket.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/tcp_socket.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/tee_logging.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/tee_logging.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/unix_sockets.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/unix_sockets.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/unix_sockets_test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/users.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/users.h	/^namespace cuttlefish {$/;"	n
cuttlefish	common/libs/utils/vsock_connection.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	common/libs/utils/vsock_connection.h	/^namespace cuttlefish {$/;"	n
cuttlefish	guest/commands/vsoc_input_service/vsoc_input_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	guest/hals/camera/vsock_frame_provider.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	guest/hals/camera/vsock_frame_provider.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/alloc.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/alloc.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/assemble_cvd.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/boot_config.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/boot_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/boot_image_utils.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/boot_image_utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/clean.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/clean.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/disk_flags.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/disk_flags.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/flag_feature.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/flag_feature.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/flags.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/flags.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/misc_info.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/misc_info.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/assemble_cvd/super_image_mixer.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/assemble_cvd/super_image_mixer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/console_forwarder/main.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/cvd/main.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/fetcher/build_api.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/fetcher/build_api.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/fetcher/credential_source.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/fetcher/credential_source.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/fetcher/curl_wrapper.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/fetcher/curl_wrapper.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/fetcher/fetch_cvd.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/host_bugreport/main.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/metrics/metrics_defs.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/metrics/proto/cf_log.proto	/^package cuttlefish;$/;"	p
cuttlefish	host/commands/metrics/proto/cf_metrics_event.proto	/^package cuttlefish;$/;"	p
cuttlefish	host/commands/modem_simulator/call_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/call_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/cf_device_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/channel_monitor.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/channel_monitor.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/command_parser.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/command_parser.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/data_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/data_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/device_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/misc_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/misc_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/modem_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/modem_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/modem_simulator.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/modem_simulator.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/network_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/network_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/nvram_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/nvram_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/pdu_parser.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/pdu_parser.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/sim_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/sim_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/sms_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/sms_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/stk_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/stk_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/sup_service.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/sup_service.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/modem_simulator/thread_looper.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/modem_simulator/thread_looper.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/powerwash_cvd/powerwash_cvd.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/restart_cvd/restart_cvd.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/boot_state_machine.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/boot_state_machine.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/run_cvd/launch.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/launch.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/run_cvd/launch_modem.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/launch_streamer.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/main.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/process_monitor.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/process_monitor.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/run_cvd/reporting.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/reporting.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/run_cvd/runner_defs.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/run_cvd/server_loop.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/server_loop.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/run_cvd/validate.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/run_cvd/validate.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/composite_serialization.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/composite_serialization.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/device_tpm.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/device_tpm.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/encrypted_serializable.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/encrypted_serializable.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/encrypted_serializable_test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/fragile_tpm_storage.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/fragile_tpm_storage.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/gatekeeper_responder.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/gatekeeper_responder.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/gatekeeper_storage.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/hmac_serializable.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/hmac_serializable.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/in_process_tpm.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/in_process_tpm.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/insecure_fallback_storage.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/insecure_fallback_storage.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/json_serializable.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/json_serializable.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/keymaster_responder.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/keymaster_responder.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/primary_key_builder.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/primary_key_builder.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/proxy_keymaster_context.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/secure_env.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/test_tpm.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/test_tpm.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_attestation_record.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_attestation_record.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_auth.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_auth.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_commands.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_commands.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_encrypt_decrypt.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_encrypt_decrypt.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_gatekeeper.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_gatekeeper.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_hmac.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_hmac.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_key_blob_maker.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_key_blob_maker.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_keymaster_context.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_keymaster_context.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_keymaster_enforcement.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_random_source.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_random_source.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_remote_provisioning_context.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_remote_provisioning_context.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_resource_manager.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_resource_manager.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/secure_env/tpm_serialize.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/secure_env/tpm_serialize.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/commands/status/main.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/stop/main.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/commands/tombstone_receiver/main.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/adb_connector/adb_connection_maintainer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/adb_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/adb_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/audio_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/audio_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/bluetooth_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/bluetooth_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/connection_observer.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/connection_observer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/cvd_video_frame_buffer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/display_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/display_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/kernel_log_events_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/kernel_log_events_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/audio_device.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/audio_device.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/audio_frame_buffer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/audio_sink.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/audio_source.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/audio_track_source_impl.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/camera_controller.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/camera_streamer.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/camera_streamer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/client_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/client_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/connection_observer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/local_recorder.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/local_recorder.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/port_range_socket_factory.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/streamer.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/streamer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/utils.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/video_frame_buffer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/video_sink.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/video_track_source_impl.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc/lib/vp8only_encoder_factory.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/client_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc_operator/client_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/constants/signaling_constants.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/device_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc_operator/device_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/device_list_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc_operator/device_list_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/device_registry.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc_operator/device_registry.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/server_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc_operator/server_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/frontend/webrtc_operator/signal_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/frontend/webrtc_operator/signal_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/allocd/alloc_utils.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/allocd/alloc_utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/allocd/request.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/allocd/resource.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/allocd/resource.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/allocd/resource_manager.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/allocd/resource_manager.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/allocd/utils.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/allocd/utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/audio_connector/buffers.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/audio_connector/buffers.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/audio_connector/commands.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/audio_connector/commands.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/audio_connector/server.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/audio_connector/server.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/audio_connector/shm_layout.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/adb/adb.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/adb/config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/adb/data.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/adb/flags.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/adb/launch.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/adb/strings.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/adb/test.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/bootconfig_args.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/bootconfig_args.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/command_source.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/config_flag.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/config_flag.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/config_fragment.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/custom_actions.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/custom_actions.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/cuttlefish_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/cuttlefish_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/cuttlefish_config_instance.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/data_image.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/data_image.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/feature.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/feature.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/fetcher_config.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/fetcher_config.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/host_tools_version.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/host_tools_version.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/inject.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/kernel_args.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/kernel_args.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/kernel_log_pipe_provider.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/known_paths.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/known_paths.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/config/logging.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/config/logging.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/cbor.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/cbor.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/host_mode_ctrl.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/host_renderer.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/host_renderer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/host_server.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/host_server.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/host_utils.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/host_utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/host_virtual_input.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/server_common.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/server_common.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/session.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/session.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/sign.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/confui/sign.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/confui/sign_utils.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/graphics_detector/graphics_detector.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/graphics_detector/graphics_detector.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/image_aggregator/image_aggregator.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/image_aggregator/image_aggregator.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/msg_queue/msg_queue.cc	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/msg_queue/msg_queue.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/screen_connector/screen_connector.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/screen_connector/screen_connector_common.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/screen_connector/screen_connector_ctrl.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/screen_connector/screen_connector_multiplexer.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/screen_connector/screen_connector_queue.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/screen_connector/wayland_screen_connector.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/screen_connector/wayland_screen_connector.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/vm_manager/crosvm_builder.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/vm_manager/crosvm_builder.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/vm_manager/crosvm_manager.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/vm_manager/crosvm_manager.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/vm_manager/host_configuration.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/vm_manager/host_configuration.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/vm_manager/qemu_manager.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/vm_manager/qemu_manager.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/vm_manager/vm_manager.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/vm_manager/vm_manager.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/websocket/websocket_handler.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/websocket/websocket_handler.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/websocket/websocket_server.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/websocket/websocket_server.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/wmediumd_controller/wmediumd_api_protocol.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^namespace cuttlefish {$/;"	n
cuttlefish	host/libs/wmediumd_controller/wmediumd_controller.cpp	/^namespace cuttlefish {$/;"	n	file:
cuttlefish	host/libs/wmediumd_controller/wmediumd_controller.h	/^namespace cuttlefish {$/;"	n
cuttlefish_env_path	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::cuttlefish_env_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_device_base.h	/^namespace cuttlefish_input_service {$/;"	n
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_keyboard.cpp	/^namespace cuttlefish_input_service {$/;"	n	file:
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_keyboard.h	/^namespace cuttlefish_input_service {$/;"	n
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_power_button.cpp	/^namespace cuttlefish_input_service {$/;"	n	file:
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_power_button.h	/^namespace cuttlefish_input_service {$/;"	n
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_touchscreen.cpp	/^namespace cuttlefish_input_service {$/;"	n	file:
cuttlefish_input_service	guest/commands/vsoc_input_service/virtual_touchscreen.h	/^namespace cuttlefish_input_service {$/;"	n
cuttlefish_input_service	guest/commands/vsoc_input_service/vsoc_input_service.h	/^namespace cuttlefish_input_service {$/;"	n
cuttlefish_version	host/commands/metrics/proto/cf_log.proto	/^  optional string cuttlefish_version = 4;$/;"	f	message:cuttlefish.CuttlefishLogEvent	typeref:typename:string
cvdHostPackage	build/cvd-host-package.go	/^type cvdHostPackage struct {$/;"	s	package:cuttlefish
cvdHostPackageDependencyTag	build/cvd-host-package.go	/^var cvdHostPackageDependencyTag = dependencyTag{}$/;"	v	package:cuttlefish
cvdHostPackageFactory	build/cvd-host-package.go	/^func cvdHostPackageFactory() android.Module {$/;"	f	package:cuttlefish	typeref:typename:android.Module
cvd_connection_	host/frontend/webrtc/lib/camera_streamer.h	/^  VsockClientConnection cvd_connection_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:VsockClientConnection
cvd_host_packages	host_package.mk	/^cvd_host_packages := $(SOONG_HOST_OUT)\/cvd-host_package.tar.gz$/;"	m
cvd_host_packages	host_package.mk	/^cvd_host_packages :=$/;"	m
data	common/libs/utils/unix_sockets.h	/^  std::vector<char> data;$/;"	m	struct:cuttlefish::UnixSocketMessage	typeref:typename:std::vector<char>
data	guest/hals/ril/reference-libril/ril.h	/^    char *data;     \/* May be NULL*\/$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:char *
data	guest/hals/ril/reference-libril/ril.h	/^    char *data;     \/* May be NULL*\/$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:char *
data	guest/hals/ril/reference-libril/ril.h	/^    char *data;     \/* May be NULL. In hex string format. *\/$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:char *
data	host/commands/fetcher/curl_wrapper.h	/^  T data;$/;"	m	struct:cuttlefish::CurlResponse	typeref:typename:T
data	host/frontend/webrtc/audio_handler.cpp	/^  const uint8_t* data() const override { return buffer_; }$/;"	f	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:const uint8_t *	file:
data	host/frontend/webrtc/audio_handler.cpp	/^uint8_t* AudioHandler::HoldingBuffer::data() { return buffer.data(); }$/;"	f	class:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:uint8_t *
data	host/frontend/webrtc/connection_observer.cpp	/^  T *data() { return buffer_.data(); }$/;"	f	struct:cuttlefish::InputEventBufferImpl	typeref:typename:T *	file:
data	host/frontend/webrtc/connection_observer.cpp	/^  const void *data() const override { return buffer_.data(); }$/;"	f	struct:cuttlefish::InputEventBufferImpl	typeref:typename:const void *	file:
data	host/frontend/webrtc/lib/ws_connection.cpp	/^    uint8_t* data() { return &buffer_[LWS_PRE]; }$/;"	f	struct:WsConnectionImpl::WsBuffer	typeref:typename:uint8_t *	file:
data	host/libs/confui/host_renderer.h	/^  auto data() { return teeui_frame_.data(); }$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:auto
data	host/libs/confui/sign_utils.h	/^  const uint8_t* data() const { return data_; }$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy	typeref:typename:const uint8_t *
data	host/libs/websocket/websocket_handler.h	/^    std::vector<uint8_t> data;$/;"	m	struct:cuttlefish::WebSocketHandler::WsBuffer	typeref:typename:std::vector<uint8_t>
dataCallListChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::dataCallListChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
data_	common/libs/utils/unix_sockets.h	/^  std::vector<char> data_;$/;"	m	struct:cuttlefish::ControlMessage	typeref:typename:std::vector<char>
data_	host/libs/confui/sign_utils.h	/^  const uint8_t* data_;$/;"	m	class:cuttlefish::confui::support::ByteBufferProxy	typeref:typename:const uint8_t *
data_channels_	host/frontend/webrtc/lib/client_handler.h	/^  std::vector<rtc::scoped_refptr<webrtc::DataChannelInterface>> data_channels_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::vector<rtc::scoped_refptr<webrtc::DataChannelInterface>>
data_code_scheme_	host/commands/modem_simulator/pdu_parser.h	/^  std::string data_code_scheme_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:std::string
data_path_	host/libs/config/data_image.cpp	/^  DataImagePath& data_path_;$/;"	m	class:cuttlefish::InitializeDataImageImpl	typeref:typename:DataImagePath &	file:
data_policy	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::data_policy() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
data_registration_status_	host/commands/modem_simulator/network_service.h	/^  NetworkRegistrationStatus data_registration_status_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:NetworkRegistrationStatus
data_service_	host/commands/modem_simulator/network_service.h	/^  DataService* data_service_ = nullptr;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:DataService *
dbm	guest/hals/ril/reference-libril/ril.h	/^    int dbm;  \/* Valid values are positive integers.  This value is the actual RSSI value$/;"	m	struct:__anon0bfbaecf4908	typeref:typename:int
dbm	guest/hals/ril/reference-libril/ril.h	/^    int dbm;  \/* Valid values are positive integers.  This value is the actual RSSI value$/;"	m	struct:__anon0bfbaecf4a08	typeref:typename:int
dcss	host/commands/modem_simulator/sms_service.h	/^    std::string dcss;$/;"	m	struct:cuttlefish::SmsService::BroadcastConfig	typeref:typename:std::string
deactivateDataCall	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::deactivateDataCall(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
deactivateDataCallResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::deactivateDataCallResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
deactivateDataCall_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::deactivateDataCall_1_2(int32_t serial, int32_t cid,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
death_recipient_	guest/hals/bt/remote/remote_bluetooth.h	/^  sp<BluetoothDeathRecipient> death_recipient_;$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:sp<BluetoothDeathRecipient>
decodeRootcanalMessage	host/frontend/webrtc_operator/assets/js/rootcanal.js	/^function decodeRootcanalMessage(array) {$/;"	f
defaultRoamingIndicator	guest/hals/ril/reference-libril/ril.h	/^    int32_t defaultRoamingIndicator;      \/\/ default Roaming Indicator from the PRL,$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:int32_t
defvalue_storage_	host/commands/start/flag_forwarder.cc	/^  T defvalue_storage_;$/;"	m	class:DynamicFlag	typeref:typename:T	file:
delete	host/commands/secure_env/in_process_tpm.cpp	/^#define delete /;"	d	file:
deleteAllKeys	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCode> RemoteKeymaster4Device::deleteAllKeys() {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCode>
deleteAllKeys	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::deleteAllKeys() {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
deleteAllUsers	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^Return<void> RemoteGateKeeperDevice::deleteAllUsers(deleteAllUsers_cb _hidl_cb) {$/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:Return<void>
deleteKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCode> RemoteKeymaster4Device::deleteKey(const hidl_vec<uint8_t>& keyBlob) {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCode>
deleteKey	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::deleteKey(const vector<uint8_t>& keyBlob) {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
deleteSmsOnRuim	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::deleteSmsOnRuim(int32_t serial, int32_t index) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
deleteSmsOnRuimResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::deleteSmsOnRuimResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
deleteSmsOnSim	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::deleteSmsOnSim(int32_t serial, int32_t index) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
deleteSmsOnSimResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::deleteSmsOnSimResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
deleteUser	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^Return<void> RemoteGateKeeperDevice::deleteUser(uint32_t \/*uid*\/, deleteUser_cb _hidl_cb) {$/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:Return<void>
delete_interface	tools/vlan_prototype_down.sh	/^delete_interface() {$/;"	f
deliverSecureInputEvent	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^TrustyConfirmationUI::deliverSecureInputEvent(const HardwareAuthToken& auth_token) {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:Return<ResponseCode>
dependencyTag	build/cvd-host-package.go	/^type dependencyTag struct {$/;"	s	package:cuttlefish
deprecated_boot_completed	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::deprecated_boot_completed() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
deprecated_boot_completed_	host/commands/kernel_log_monitor/kernel_log_server.h	/^  bool deprecated_boot_completed_;$/;"	m	class:monitor::KernelLogServer	typeref:typename:bool
dequeue	guest/hals/ril/reference-libril/rilSocketQueue.h	/^T* Ril_queue<T>::dequeue(void) {$/;"	f	class:Ril_queue	typeref:typename:T *
description	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #description;$/;"	M	class:DeviceConnection
description	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  get description() {$/;"	G	class:DeviceConnection
description	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  set description(desc) {$/;"	S	class:DeviceConnection
dest_family	tools/create_base_image.go	/^var dest_family string$/;"	v	package:main	typeref:typename:string
dest_family_flag=	tools/create_base_image_hostlib.sh	/^    dest_family_flag=()$/;"	f
dest_image	tools/create_base_image.go	/^var dest_image string$/;"	v	package:main	typeref:typename:string
dest_project	tools/create_base_image.go	/^var dest_project string$/;"	v	package:main	typeref:typename:string
destinationAddress	guest/hals/ril/reference-libril/ril.h	/^    char destinationAddress[MAX_INADDR_LEN]; \/* Destination address in network-byte order *\/$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:char[]
destinationPort	guest/hals/ril/reference-libril/ril.h	/^    int destinationPort;                     \/* Destination port if applicable or 0x7FFFFFFF;$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:int
destinations_	common/libs/utils/tee_logging.h	/^  std::vector<SeverityTarget> destinations_;$/;"	m	class:cuttlefish::TeeLogger	typeref:typename:std::vector<SeverityTarget>
destroyAttestationIds	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCode> RemoteKeymaster4Device::destroyAttestationIds() {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCode>
destroyAttestationIds	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::destroyAttestationIds() {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
destroy_virtio_gpu_metadata_resource_callback	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^void destroy_virtio_gpu_metadata_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anon027348120111	typeref:typename:void
destroy_virtio_gpu_surface_metadata_resource_callback	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^void destroy_virtio_gpu_surface_metadata_resource_callback($/;"	f	namespace:wayland::__anon027348120111	typeref:typename:void
dev_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  struct uinput_user_dev dev_ {};$/;"	s	class:cuttlefish_input_service::VirtualDeviceBase
dev_path_	guest/hals/bt/remote/remote_bluetooth.h	/^  const std::string dev_path_;$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:const std::string
device	guest/hals/camera/cached_stream_buffer.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera	file:
device	guest/hals/camera/cached_stream_buffer.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera
device	guest/hals/camera/stream_buffer_cache.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera	file:
device	guest/hals/camera/stream_buffer_cache.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera
device	guest/hals/camera/vsock_camera_device_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera	file:
device	guest/hals/camera/vsock_camera_device_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera
device	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera	file:
device	guest/hals/camera/vsock_camera_device_session_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera
device	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera	file:
device	guest/hals/camera/vsock_camera_metadata.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera
device	guest/hals/gatekeeper/remote/service.cpp	/^const char device[] = "\/dev\/hvc4";$/;"	v	typeref:typename:const char[]
device	guest/hals/keymaster/remote/service4.cpp	/^const char device[] = "\/dev\/hvc3";$/;"	v	typeref:typename:const char[]
device	guest/hals/keymint/remote/service.cpp	/^const char device[] = "\/dev\/hvc3";$/;"	v	namespace:__anon5714be600111	typeref:typename:const char[]
device-audio	host/frontend/webrtc_operator/assets/client.html	/^            <audio controls id="device-audio"><\/audio>$/;"	I
device-connection	host/frontend/webrtc_operator/assets/client.html	/^      <section id="device-connection">$/;"	I
device-details-button	host/frontend/webrtc_operator/assets/client.html	/^            <button id='device-details-button' title='Device Details' class='material-icons'>$/;"	I
device-details-close	host/frontend/webrtc_operator/assets/client.html	/^          <button id='device-details-close' title='Close' class='material-icons modal-close'>clo/;"	I
device-details-hardware	host/frontend/webrtc_operator/assets/client.html	/^        <span id='device-details-hardware'>unknown<\/span>$/;"	I
device-details-modal	host/frontend/webrtc_operator/assets/client.html	/^      <div id='device-details-modal' class='modal'>$/;"	I
device-details-modal-header	host/frontend/webrtc_operator/assets/client.html	/^        <div id='device-details-modal-header' class='modal-header'>$/;"	I
device-displays	host/frontend/webrtc_operator/assets/client.html	/^          <div id='device-displays'>$/;"	I
device-list	host/frontend/webrtc_operator/assets/index.html	/^        <ul id="device-list"><\/ul>$/;"	I
device-selector	host/frontend/webrtc_operator/assets/index.html	/^      <section id='device-selector'>$/;"	I
deviceAdded	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^void VsockCameraProvider::deviceAdded(const char* name) {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:void
deviceConnection	host/frontend/webrtc_operator/assets/js/app.js	/^  #deviceConnection = {};$/;"	M	class:DeviceControlApp
deviceId	host/frontend/webrtc_operator/assets/js/server_connector.js	/^export function deviceId() {$/;"	f
deviceLocked	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCodeV41> RemoteKeymaster4Device::deviceLocked($/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCodeV41>
deviceLocked	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::deviceLocked($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
devicePrivKey_	host/commands/secure_env/tpm_remote_provisioning_context.h	/^  std::vector<uint8_t> devicePrivKey_;$/;"	m	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:std::vector<uint8_t>
deviceRemoved	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^void VsockCameraProvider::deviceRemoved(const char* name) {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:void
device_config_	common/libs/device_config/device_config.h	/^  DeviceConfig device_config_;$/;"	m	class:cuttlefish::DeviceConfigHelper	typeref:typename:DeviceConfig
device_handler	host/frontend/webrtc_operator/client_handler.cpp	/^  std::shared_ptr<DeviceHandler> device_handler() const {$/;"	f	class:cuttlefish::PollConnectionHandler	typeref:typename:std::shared_ptr<DeviceHandler>	file:
device_handler_	host/frontend/webrtc_operator/client_handler.cpp	/^  std::weak_ptr<DeviceHandler> device_handler_;$/;"	m	class:cuttlefish::PollConnectionHandler	typeref:typename:std::weak_ptr<DeviceHandler>	file:
device_handler_	host/frontend/webrtc_operator/client_handler.h	/^  std::weak_ptr<DeviceHandler> device_handler_;$/;"	m	class:cuttlefish::ClientWSHandler	typeref:typename:std::weak_ptr<DeviceHandler>
device_id	host/commands/metrics/proto/cf_log.proto	/^  optional string device_id = 3;$/;"	f	message:cuttlefish.CuttlefishLogEvent	typeref:typename:string
device_id	host/frontend/webrtc/lib/streamer.h	/^  std::string device_id;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig	typeref:typename:std::string
device_id_	host/frontend/webrtc_operator/device_handler.h	/^  std::string device_id_;$/;"	m	class:cuttlefish::DeviceHandler	typeref:typename:std::string
device_info	host/frontend/webrtc_operator/device_handler.h	/^  Json::Value device_info() const { return device_info_; }$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:Json::Value
device_info_	host/frontend/webrtc_operator/device_handler.h	/^  Json::Value device_info_;$/;"	m	class:cuttlefish::DeviceHandler	typeref:typename:Json::Value
device_module	host/frontend/webrtc/lib/streamer.cpp	/^  rtc::scoped_refptr<CfAudioDeviceModule> device_module() {$/;"	f	class:cuttlefish::webrtc_streaming::__anonab9390d10111::AudioDeviceModuleWrapper	typeref:typename:rtc::scoped_refptr<CfAudioDeviceModule>	file:
device_module_	host/frontend/webrtc/lib/streamer.cpp	/^  rtc::scoped_refptr<CfAudioDeviceModule> device_module_;$/;"	m	class:cuttlefish::webrtc_streaming::__anonab9390d10111::AudioDeviceModuleWrapper	typeref:typename:rtc::scoped_refptr<CfAudioDeviceModule>	file:
device_name_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  const char* const device_name_;$/;"	m	class:cuttlefish_input_service::VirtualDeviceBase	typeref:typename:const char * const
device_states	host/frontend/webrtc/lib/streamer.cpp	/^  std::vector<DeviceState> device_states;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::ControlPanelButtonDescriptor	typeref:typename:std::vector<DeviceState>	file:
device_states	host/libs/config/custom_actions.h	/^  std::vector<DeviceState> device_states;$/;"	m	struct:cuttlefish::CustomActionConfig	typeref:typename:std::vector<DeviceState>
device_states	shared/config/config_foldable.json	/^                        "device_states": [$/;"	a	object:custom_actions.0
device_states	shared/config/config_foldable.json	/^                        "device_states": [$/;"	a	object:custom_actions.1
device_type	host/commands/metrics/proto/cf_log.proto	/^  optional DeviceType device_type = 2;$/;"	f	message:cuttlefish.CuttlefishLogEvent	typeref:typename:DeviceType
devices_	host/frontend/webrtc_operator/device_registry.h	/^  std::map<std::string, std::weak_ptr<DeviceHandler>> devices_;$/;"	m	class:cuttlefish::DeviceRegistry	typeref:typename:std::map<std::string,std::weak_ptr<DeviceHandler>>
df_name	host/commands/modem_simulator/sim_service.h	/^    std::string df_name;$/;"	m	struct:cuttlefish::SimService::LogicalChannel	typeref:typename:std::string
dhcp	common/libs/utils/network.cpp	/^  Dhcp4ReleaseMessage dhcp;$/;"	m	struct:cuttlefish::CompleteReleaseFrame	typeref:typename:Dhcp4ReleaseMessage	file:
dial	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::dial(int32_t serial, const Dial& dialInfo) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
dialInfo	guest/hals/ril/reference-libril/ril.h	/^    RIL_Dial                     dialInfo;$/;"	m	struct:__anon0bfbaecfb708	typeref:typename:RIL_Dial
dialResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::dialResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
dictionary_	host/commands/modem_simulator/nvram_config.h	/^  std::unique_ptr<Json::Value> dictionary_;$/;"	m	class:cuttlefish::NvramConfig	typeref:typename:std::unique_ptr<Json::Value>
dictionary_	host/libs/config/cuttlefish_config.h	/^  std::unique_ptr<Json::Value> dictionary_;$/;"	m	class:cuttlefish::CuttlefishConfig	typeref:typename:std::unique_ptr<Json::Value>
dictionary_	host/libs/config/fetcher_config.h	/^  std::unique_ptr<Json::Value> dictionary_;$/;"	m	class:cuttlefish::FetcherConfig	typeref:typename:std::unique_ptr<Json::Value>
digest	host/commands/secure_env/soft_gatekeeper.h	/^    uint8_t digest[SHA256_DIGEST_LENGTH];$/;"	m	struct:gatekeeper::fast_hash_t	typeref:typename:uint8_t[]
digest_size_	host/commands/secure_env/hmac_serializable.h	/^  uint32_t digest_size_;$/;"	m	class:cuttlefish::HmacSerializable	typeref:typename:uint32_t
direction	host/libs/audio_connector/shm_layout.h	/^  uint8_t direction;$/;"	m	struct:cuttlefish::virtio_snd_chmap_info	typeref:typename:uint8_t
direction	host/libs/audio_connector/shm_layout.h	/^  uint8_t direction;$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:uint8_t
disableWifi	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private void disableWifi() throws Exception {$/;"	m	class:RilE2eTests	file:
disableWifi	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private void disableWifi() {$/;"	m	class:WifiE2eTests	file:
disable_scan_offload	shared/config/wpa_supplicant_overlay.conf	/^disable_scan_offload=1$/;"	k
disconnect	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  disconnect() {$/;"	m	class:DeviceConnection
disconnectReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::disconnectReq(int32_t token) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
disconnect_callback_	common/libs/utils/vsock_connection.h	/^  std::function<void()> disconnect_callback_;$/;"	m	class:cuttlefish::VsockConnection	typeref:typename:std::function<void ()>
disconnectedCb	host/frontend/webrtc_operator/assets/js/adb.js	/^let disconnectedCb;$/;"	v
disconnectedTimeout	host/frontend/webrtc_operator/assets/js/adb.js	/^let disconnectedTimeout;$/;"	v
discrete_gpu_device_extensions	host/libs/graphics_detector/graphics_detector.h	/^  std::string discrete_gpu_device_extensions;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
discrete_gpu_device_name	host/libs/graphics_detector/graphics_detector.h	/^  std::string discrete_gpu_device_name;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
disk_guid	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t disk_guid[16];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint8_t[16]	file:
disk_size	common/libs/utils/files.h	/^  off_t disk_size;$/;"	m	struct:cuttlefish::FileSizes	typeref:typename:off_t
dispatchCallForwardStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchCallForwardStatus(int serial, int slotId, int request,$/;"	f	typeref:typename:bool
dispatchIccApdu	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchIccApdu(int serial, int slotId, int request, const SimApdu& message) {$/;"	f	typeref:typename:bool
dispatchImsCdmaSms	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchImsCdmaSms(const ImsSmsMessage& message, RequestInfo *pRI) {$/;"	f	typeref:typename:bool
dispatchImsGsmSms	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchImsGsmSms(const ImsSmsMessage& message, RequestInfo *pRI) {$/;"	f	typeref:typename:bool
dispatchInts	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchInts(int serial, int slotId, int request, int countInts, ...) {$/;"	f	typeref:typename:bool
dispatchQueue	guest/hals/ril/reference-libril/RilSapSocket.h	/^    Ril_queue<SapSocketRequest> dispatchQueue;$/;"	m	class:RilSapSocket	typeref:typename:Ril_queue<SapSocketRequest>
dispatchRaw	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchRaw(int serial, int slotId, int request, const hidl_vec<uint8_t>& rawBytes) {$/;"	f	typeref:typename:bool
dispatchRequest	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::dispatchRequest(MsgHeader *req) {$/;"	f	class:RilSapSocket	typeref:typename:void
dispatchString	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchString(int serial, int slotId, int request, const char * str) {$/;"	f	typeref:typename:bool
dispatchStrings	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchStrings(int serial, int slotId, int request, bool allowEmpty, int countStrings, .../;"	f	typeref:typename:bool
dispatchStrings	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchStrings(int serial, int slotId, int request, const hidl_vec<hidl_string>& data) {$/;"	f	typeref:typename:bool
dispatchVoid	guest/hals/ril/reference-libril/ril_service.cpp	/^bool dispatchVoid(int serial, int slotId, int request) {$/;"	f	typeref:typename:bool
display	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_DisplayInfoRecord           display;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_DisplayInfoRecord
display0	shared/config/config_auto.json	/^	"display0": "width=1080,height=600,dpi=120",$/;"	s
display1	shared/config/config_auto.json	/^	"display1": "width=400,height=600,dpi=120",$/;"	s
displayDescriptions	host/frontend/webrtc_operator/assets/js/app.js	/^  #displayDescriptions = [];$/;"	M	class:DeviceControlApp
display_	host/libs/wayland/wayland_server.cpp	/^  struct wl_display* display_ = nullptr;$/;"	m	struct:wayland::internal::WaylandServerState	typeref:struct:wl_display *	file:
display_config	common/libs/device_config/device_config.proto	/^  repeated DisplayConfig display_config = 2;$/;"	f	message:cuttlefish.DeviceConfig	typeref:typename:DisplayConfig
display_configs	host/libs/config/cuttlefish_config.cpp	/^std::vector<CuttlefishConfig::DisplayConfig> CuttlefishConfig::display_configs()$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::vector<CuttlefishConfig::DisplayConfig>
display_num_	host/libs/confui/host_renderer.h	/^  std::uint32_t display_num_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::uint32_t
display_num_	host/libs/confui/host_server.h	/^  const std::uint32_t display_num_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:const std::uint32_t
display_num_	host/libs/confui/session.h	/^  const std::uint32_t display_num_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:const std::uint32_t
display_number_	host/libs/screen_connector/screen_connector_common.h	/^  std::uint32_t display_number_;$/;"	m	struct:cuttlefish::ScreenConnectorFrameInfo	typeref:typename:std::uint32_t
display_sinks_	host/frontend/webrtc/display_handler.h	/^  std::vector<std::shared_ptr<webrtc_streaming::VideoSink>> display_sinks_;$/;"	m	class:cuttlefish::DisplayHandler	typeref:typename:std::vector<std::shared_ptr<webrtc_streaming::VideoSink>>
displays_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::vector<std::unique_ptr<Display>> displays_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Impl	typeref:typename:std::vector<std::unique_ptr<Display>>	file:
displays_	host/frontend/webrtc/lib/streamer.cpp	/^  std::map<std::string, DisplayDescriptor> displays_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::map<std::string,DisplayDescriptor>	file:
dlog	guest/hals/ril/reference-libril/ril_event.cpp	/^#define dlog(/;"	d	file:
dns	common/libs/device_config/device_config.proto	/^    string dns = 3;$/;"	f	message:cuttlefish.DeviceConfig.RILConfig	typeref:typename:string
dnses	guest/hals/ril/reference-libril/ril.h	/^    char *          dnses;      \/* A space-delimited list of DNS server addresses,$/;"	m	struct:__anon0bfbaecf1308	typeref:typename:char *
dnses	guest/hals/ril/reference-libril/ril.h	/^    char *          dnses;      \/* A space-delimited list of DNS server addresses,$/;"	m	struct:__anon0bfbaecf1408	typeref:typename:char *
dnses	guest/hals/ril/reference-libril/ril.h	/^    char *          dnses;      \/* A space-delimited list of DNS server addresses,$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:char *
dnses	guest/hals/ril/reference-libril/ril.h	/^    char *          dnses;      \/* A space-delimited list of DNS server addresses,$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:char *
dnses	host/commands/modem_simulator/data_service.h	/^    std::string dnses;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:std::string
do_redirects	common/libs/utils/subprocess.cpp	/^void do_redirects(const std::map<Subprocess::StdIOChannel, int>& redirects) {$/;"	f	namespace:cuttlefish::__anon39e8abf00111	typeref:typename:void
doc	host/commands/modem_simulator/sim_service.h	/^    XMLDocument doc;$/;"	m	struct:cuttlefish::SimService::SimFileSystem	typeref:typename:XMLDocument
down	host/frontend/webrtc_operator/assets/js/app.js	/^      down: false,$/;"	p	class:DeviceControlApp.startMouseTracking.mouseCtx
downLink	guest/hals/ril/reference-libril/ril.h	/^  char downLink;$/;"	m	struct:__anon0bfbaecf8808	typeref:typename:char
download_host_package	host/commands/fetcher/fetch_cvd.cc	/^std::vector<std::string> download_host_package(BuildApi* build_api,$/;"	f	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:std::vector<std::string>
download_images	host/commands/fetcher/fetch_cvd.cc	/^std::vector<std::string> download_images(BuildApi* build_api,$/;"	f	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:std::vector<std::string>
download_ota_tools	host/commands/fetcher/fetch_cvd.cc	/^std::vector<std::string> download_ota_tools(BuildApi* build_api,$/;"	f	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:std::vector<std::string>
download_target_files	host/commands/fetcher/fetch_cvd.cc	/^std::vector<std::string> download_target_files(BuildApi* build_api,$/;"	f	namespace:cuttlefish::__anonccb356fd0211	typeref:typename:std::vector<std::string>
dpi	common/libs/device_config/device_config.proto	/^    int32 dpi = 3;$/;"	f	message:cuttlefish.DeviceConfig.DisplayConfig	typeref:typename:int32
dpi	host/frontend/webrtc/lib/streamer.cpp	/^  int dpi;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::DisplayDescriptor	typeref:typename:int	file:
dpi	host/libs/config/cuttlefish_config.h	/^    int dpi;$/;"	m	struct:cuttlefish::CuttlefishConfig::DisplayConfig	typeref:typename:int
dpi	shared/config/config_foldable.json	/^	"dpi" : 386,$/;"	n
dpi	shared/config/config_phone.json	/^	"dpi" : 320,$/;"	n
dpi	shared/config/config_tablet.json	/^	"dpi" : 320,$/;"	n
dpi	shared/config/config_tv.json	/^	"dpi" : 213,$/;"	n
drawElements	host/libs/confui/host_renderer.h	/^  static teeui::Error drawElements(std::tuple<Elements...>& layout,$/;"	f	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Error
droidcore	fetcher.mk	/^droidcore: $(fetcher_bin)$/;"	t
droidcore	host_package.mk	/^droidcore: $(cvd_host_packages)$/;"	t
dump	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    protected void dump(FileDescriptor fd, PrintWriter pw, String[] args) {$/;"	m	class:GceService
dumpState	guest/hals/camera/vsock_camera_device_3_4.cpp	/^Return<void> VsockCameraDevice::dumpState($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:Return<void>
dump_event	guest/hals/ril/reference-libril/ril_event.cpp	/^#define dump_event(/;"	d	file:
dump_event	guest/hals/ril/reference-libril/ril_event.cpp	/^static void dump_event(struct ril_event * ev)$/;"	f	typeref:typename:void	file:
dyn_handler_factories_	host/libs/websocket/websocket_server.h	/^  std::unordered_map<std::string, DynHandlerFactory> dyn_handler_factories_ =$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::unordered_map<std::string,DynHandlerFactory>
dyn_handlers_	host/libs/websocket/websocket_server.h	/^  std::unordered_map<struct lws*, std::unique_ptr<DynHandler>> dyn_handlers_ =$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::unordered_map<struct lws *,std::unique_ptr<DynHandler>>
dyn_mounts_	host/libs/websocket/websocket_server.h	/^  std::vector<struct lws_http_mount> dyn_mounts_ = {};$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::vector<struct lws_http_mount>
earfcn	guest/hals/ril/reference-libril/ril.h	/^    int earfcn; \/* 18-bit LTE Absolute RF Channel Number; this value must be reported *\/$/;"	m	struct:__anon0bfbaecf5e08	typeref:typename:int
earfcn	guest/hals/ril/reference-libril/ril.h	/^    int earfcn; \/* 18-bit LTE Absolute RF Channel Number; this value must be reported *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
earlyBootEnded	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<ErrorCodeV41> RemoteKeymaster4Device::earlyBootEnded() {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<ErrorCodeV41>
earlyBootEnded	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::earlyBootEnded() {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
ebr	host/libs/allocd/request.h	/^  ebr           \/\/ ethernet bridge$/;"	e	enum:cuttlefish::IfaceType
ecio	guest/hals/ril/reference-libril/ril.h	/^    int ecio; \/* Valid values are positive integers.  This value is the actual Ec\/Io multiplie/;"	m	struct:__anon0bfbaecf4908	typeref:typename:int
ecio	guest/hals/ril/reference-libril/ril.h	/^    int ecio; \/* Valid values are positive integers.  This value is the actual Ec\/Io multiplie/;"	m	struct:__anon0bfbaecf4a08	typeref:typename:int
ef_id	guest/hals/ril/reference-libril/ril.h	/^    int                  ef_id; \/* is the EFID of the updated file if the result is *\/$/;"	m	struct:__anon0bfbaecf4108	typeref:typename:int
egl_client_extensions	host/libs/graphics_detector/graphics_detector.h	/^  std::string egl_client_extensions;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
egl_extensions	host/libs/graphics_detector/graphics_detector.h	/^  std::string egl_extensions;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
egl_vendor	host/libs/graphics_detector/graphics_detector.h	/^  std::string egl_vendor;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
egl_version	host/libs/graphics_detector/graphics_detector.h	/^  std::string egl_version;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
eid	guest/hals/ril/reference-libril/ril.h	/^    char *              eid;    \/* The EID is the eUICC identifier. The EID shall be stored wit/;"	m	struct:__anon0bfbaecf3c08	typeref:typename:char *
eid	guest/hals/ril/reference-libril/ril.h	/^    char* eid;$/;"	m	struct:__anon0bfbaecfba08	typeref:typename:char *
elapsed_time_ms	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional Duration elapsed_time_ms = 4;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:Duration
element	host/frontend/webrtc_operator/assets/js/app.js	/^  #element;$/;"	M	class:DeviceDetailsUpdater
emergencyDial	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::emergencyDial(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
emergencyDialResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::emergencyDialResponse(int slotId, int responseType, int serial, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
emergencyDial_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::emergencyDial_1_6(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
emergency_mode	host/commands/modem_simulator/nvram_config.cpp	/^bool NvramConfig::InstanceSpecific::emergency_mode() const {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:bool
empty	guest/hals/ril/reference-libril/rilSocketQueue.h	/^int Ril_queue<T>::empty(void) {$/;"	f	class:Ril_queue	typeref:typename:int
empty	host/frontend/webrtc/audio_handler.cpp	/^bool AudioHandler::HoldingBuffer::empty() const { return count == 0; }$/;"	f	class:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:bool
enableModem	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::enableModem(int32_t serial, bool \/* on *\/) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
enableModemResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::enableModemResponse(int slotId, int responseType, int serial, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
enableNetwork	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private void enableNetwork(String SSID) {$/;"	m	class:WifiE2eTests	file:
enableUiccApplications	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::enableUiccApplications(int32_t serial, bool enable) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
enableUiccApplicationsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::enableUiccApplicationsResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
enableWifi	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private void enableWifi() {$/;"	m	class:WifiE2eTests	file:
enable_audio	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_audio() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_gnss_grpc_proxy	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_gnss_grpc_proxy() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_host_bluetooth	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_host_bluetooth() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_metrics	host/libs/config/cuttlefish_config.cpp	/^CuttlefishConfig::Answer CuttlefishConfig::enable_metrics() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:CuttlefishConfig::Answer
enable_minimal_mode	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_minimal_mode() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_modem_simulator	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_modem_simulator() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_sandbox	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_sandbox() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_vehicle_hal_grpc_server	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_vehicle_hal_grpc_server() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enable_webrtc	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::enable_webrtc() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
enabled	guest/hals/ril/reference-libril/ril.h	/^    int enabled;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
enabled	guest/hals/ril/reference-libril/ril.h	/^    int enabled;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
encode_queue_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::list<webrtc::VideoFrame> encode_queue_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::list<webrtc::VideoFrame>	file:
encode_queue_mutex_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::mutex encode_queue_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::mutex	file:
encoder_factory_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::unique_ptr<webrtc::VideoEncoderFactory> encoder_factory_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Impl	typeref:typename:std::unique_ptr<webrtc::VideoEncoderFactory>	file:
encoder_queue_signal_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::condition_variable encoder_queue_signal_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::condition_variable	file:
encoder_running_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::atomic_bool encoder_running_ = true;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::atomic_bool	file:
encoder_thread_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::thread encoder_thread_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::thread	file:
end	common/libs/fs/shared_select.h	/^  const_iterator end() const { return value_.end(); }$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:const_iterator
end	common/libs/fs/shared_select.h	/^  iterator end() { return value_.end(); }$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:iterator
end	host/libs/confui/sign_utils.h	/^  const uint8_t* end() const { return data_ + size_; }$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy	typeref:typename:const uint8_t *
endSensorInjection	guest/commands/sensor_injection/main.cpp	/^void endSensorInjection(const sp<ISensors> sensors) {$/;"	f	typeref:typename:void
end_chs	host/libs/config/mbr.h	/^  std::uint8_t end_chs[3];$/;"	m	struct:MbrPartitionEntry	typeref:typename:std::uint8_t[3]
end_code	common/libs/utils/network.cpp	/^  std::uint8_t end_code;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t	file:
enforcement_	host/commands/secure_env/tpm_keymaster_context.h	/^  keymaster::KeymasterEnforcement& enforcement_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster::KeymasterEnforcement &
enforcement_policy	host/commands/secure_env/proxy_keymaster_context.h	/^  keymaster::KeymasterEnforcement* enforcement_policy() override {$/;"	f	class:cuttlefish::ProxyKeymasterContext	typeref:typename:keymaster::KeymasterEnforcement *
enforcement_policy	host/commands/secure_env/tpm_keymaster_context.cpp	/^keymaster::KeymasterEnforcement* TpmKeymasterContext::enforcement_policy() {$/;"	f	class:cuttlefish::TpmKeymasterContext	typeref:typename:keymaster::KeymasterEnforcement *
enqueue	guest/hals/ril/reference-libril/rilSocketQueue.h	/^void Ril_queue<T>::enqueue(T* request) {$/;"	f	class:Ril_queue	typeref:typename:void
enroll	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^Return<void> RemoteGateKeeperDevice::enroll(uint32_t uid,$/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:Return<void>
enterEmergencyCallbackModeInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::enterEmergencyCallbackModeInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
entries	host/libs/image_aggregator/image_aggregator.cc	/^  GptPartitionEntry entries[GPT_NUM_PARTITIONS];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptBeginning	typeref:typename:GptPartitionEntry[]	file:
entries	host/libs/image_aggregator/image_aggregator.cc	/^  GptPartitionEntry entries[GPT_NUM_PARTITIONS];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptEnd	typeref:typename:GptPartitionEntry[]	file:
env_	common/libs/utils/subprocess.h	/^  std::vector<std::string> env_{};$/;"	m	class:cuttlefish::Command	typeref:typename:std::vector<std::string>
errno_	common/libs/fs/shared_fd.h	/^  int errno_;$/;"	m	class:cuttlefish::FileInstance	typeref:typename:int
error	guest/hals/ril/reference-libril/ril.h	/^    RIL_Errno error;$/;"	m	struct:__anon0bfbaecfb308	typeref:typename:RIL_Errno
error	host/frontend/webrtc/lib/utils.h	/^  std::string error() const { return error_.value_or(""); }$/;"	f	class:cuttlefish::webrtc_streaming::ValidationResult	typeref:typename:std::string
error-message	host/frontend/webrtc_operator/assets/client.html	/^        <div id="error-message-div"><h3 id="error-message" class="error"><\/h3><\/div>$/;"	I
error-message-div	host/frontend/webrtc_operator/assets/client.html	/^        <div id="error-message-div"><h3 id="error-message" class="error"><\/h3><\/div>$/;"	I
errorCode	guest/hals/ril/reference-libril/ril.h	/^    int errorCode;    \/* See 3GPP 27.005, 3.2.5 for GSM\/UMTS,$/;"	m	struct:__anon0bfbaecf1a08	typeref:typename:int
error_	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^    int error_;$/;"	m	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:int
error_	host/frontend/webrtc/lib/utils.h	/^  std::optional<std::string> error_;$/;"	m	class:cuttlefish::webrtc_streaming::ValidationResult	typeref:typename:std::optional<std::string>
error_type	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional ErrorType error_type = 2;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:ErrorType
esp_image_	host/libs/config/data_image.cpp	/^  std::string esp_image_;$/;"	m	class:cuttlefish::InitializeEspImageImpl	typeref:typename:std::string	file:
esys_	host/commands/secure_env/test_tpm.h	/^  ESYS_CONTEXT* esys_;$/;"	m	class:cuttlefish::TestTpm	typeref:typename:ESYS_CONTEXT *
esys_	host/commands/secure_env/tpm_random_source.h	/^  ESYS_CONTEXT* esys_;$/;"	m	class:cuttlefish::TpmRandomSource	typeref:typename:ESYS_CONTEXT *
esys_	host/commands/secure_env/tpm_resource_manager.h	/^  ESYS_CONTEXT* esys_;$/;"	m	class:cuttlefish::TpmResourceManager	typeref:typename:ESYS_CONTEXT *
etap	host/libs/allocd/request.h	/^  etap,         \/\/ ethernet tap$/;"	e	enum:cuttlefish::IfaceType
eth	common/libs/utils/network.cpp	/^  ether_header eth;$/;"	m	struct:cuttlefish::CompleteReleaseFrame	typeref:typename:ether_header	file:
ethernet_tap	host/commands/assemble_cvd/alloc.h	/^  IfaceData ethernet_tap;$/;"	m	struct:cuttlefish::IfaceConfig	typeref:typename:IfaceData
ethernet_tap_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::ethernet_tap_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
ethhdr	common/libs/utils/network.cpp	/^#define ethhdr /;"	d	file:
eutran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_EutranBands eutran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfab08::__anon0bfbaecfac0a	typeref:typename:RIL_EutranBands[]
eutran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_EutranBands eutran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfae08::__anon0bfbaecfaf0a	typeref:typename:RIL_EutranBands[]
evdo_dbm	host/commands/modem_simulator/network_service.h	/^    int evdo_dbm;   \/* Refer cdma_dbm *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
evdo_ecio	host/commands/modem_simulator/network_service.h	/^    int evdo_ecio;  \/* Refer cdma_ecio *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
evdo_snr	host/commands/modem_simulator/network_service.h	/^    int evdo_snr;   \/* Valid values are 0-8.  8 is the highest signal to noise ratio. *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
event	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^  struct input_event event {};$/;"	s	function:VirtualDeviceBase::EmitEvent	file:
event	guest/hals/ril/reference-libril/ril.cpp	/^    struct ril_event event;$/;"	m	struct:android::UserCallbackInfo	typeref:struct:ril_event	file:
event	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  Event event;             \/\/ emitted when the stage is encountered$/;"	m	struct:__anonfa7764770111::__anonfa7764770308	typeref:typename:Event	file:
event	host/commands/kernel_log_monitor/utils.h	/^  Event event;$/;"	m	struct:monitor::ReadEventResult	typeref:typename:Event
eventLoop	guest/hals/ril/reference-libril/ril.cpp	/^eventLoop(void *param) {$/;"	f	namespace:android	typeref:typename:void *	file:
event_pipe_read_ends_	host/commands/run_cvd/launch.cc	/^  std::vector<SharedFD> event_pipe_read_ends_;$/;"	m	class:cuttlefish::KernelLogMonitor	typeref:typename:std::vector<SharedFD>	file:
event_pipe_write_ends_	host/commands/run_cvd/launch.cc	/^  std::vector<SharedFD> event_pipe_write_ends_;$/;"	m	class:cuttlefish::KernelLogMonitor	typeref:typename:std::vector<SharedFD>	file:
event_socket_	host/libs/audio_connector/server.h	/^  SharedFD event_socket_;$/;"	m	class:cuttlefish::AudioClientConnection	typeref:typename:SharedFD
event_time_ms	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional Timestamp event_time_ms = 3;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:Timestamp
event_time_ms	host/commands/metrics/proto/clientanalytics.proto	/^  optional int64 event_time_ms = 1;$/;"	f	message:LogEvent	typeref:typename:int64
event_type	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional EventType event_type = 1;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:EventType
eventfd_	host/frontend/webrtc/kernel_log_events_handler.h	/^  SharedFD eventfd_;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:SharedFD
excluded_carriers	guest/hals/ril/reference-libril/ril.h	/^  RIL_Carrier * excluded_carriers;      \/* excluded carriers$/;"	m	struct:__anon0bfbaecf2708	typeref:typename:RIL_Carrier *
excluded_carriers	guest/hals/ril/reference-libril/ril.h	/^  RIL_Carrier * excluded_carriers;      \/* explicitly excluded carriers$/;"	m	struct:__anon0bfbaecf2908	typeref:typename:RIL_Carrier *
execute	common/libs/utils/subprocess.cpp	/^int execute(const std::vector<std::string>& command) {$/;"	f	namespace:cuttlefish	typeref:typename:int
execute	common/libs/utils/subprocess.cpp	/^int execute(const std::vector<std::string>& command,$/;"	f	namespace:cuttlefish	typeref:typename:int
execute	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^    public int execute() {$/;"	m	class:BluetoothChecker
execute	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    public int execute() {$/;"	m	class:ConnectivityChecker
execute	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public int execute() {$/;"	m	class:EventReporter
execute	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        public synchronized int execute() {$/;"	m	class:GceWifiManager.MonitorWifiJob
execute	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    public synchronized int execute() {$/;"	m	class:GceWifiManager
execute	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^    public abstract int execute();$/;"	m	class:JobBase
exists_boot_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_boot_image_spec = 13;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_bootloader_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_bootloader_spec = 14;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_composite_disk_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_composite_disk_spec = 15;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_data_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_data_image_spec = 16;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_metadata_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_metadata_image_spec = 17;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_misc_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_misc_image_spec = 18;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_qemu_binary_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_qemu_binary_spec = 19;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_super_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_super_image_spec = 20;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_system_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_system_image_spec = 12;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exists_vendor_boot_image_spec	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional bool exists_vendor_boot_image_spec = 21;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:bool
exitEmergencyCallbackMode	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::exitEmergencyCallbackMode(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
exitEmergencyCallbackModeInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::exitEmergencyCallbackModeInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
exitEmergencyCallbackModeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::exitEmergencyCallbackModeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
exit_with_parent_	common/libs/utils/subprocess.h	/^  bool exit_with_parent_;$/;"	m	class:cuttlefish::SubprocessOptions	typeref:typename:bool
exp_data	common/libs/net/netlink_request_test.cpp	/^  const uint8_t* exp_data = static_cast<const uint8_t*>($/;"	v	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:const uint8_t *
expiration	host/commands/fetcher/credential_source.h	/^  std::chrono::steady_clock::time_point expiration;$/;"	m	class:cuttlefish::GceMetadataCredentialSource	typeref:typename:std::chrono::steady_clock::time_point
expirationTime	guest/hals/ril/reference-libril/ril.h	/^    int64_t expirationTime;    \/* Date-Time (in UTC) when the key will expire. *\/$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:int64_t
expirationTime	guest/hals/ril/reference-libril/ril.h	/^  int64_t expirationTime;             \/* Date-Time (in UTC) when the key will expire. *\/$/;"	m	struct:__anon0bfbaecf2a08	typeref:typename:int64_t
expiration_date_passed	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^bool TpmKeymasterEnforcement::expiration_date_passed($/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:bool
expiry	common/libs/utils/network.h	/^  std::uint64_t expiry;$/;"	m	struct:cuttlefish::DnsmasqDhcp4Lease	typeref:typename:std::uint64_t
explicitCallTransfer	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::explicitCallTransfer(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
explicitCallTransferResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::explicitCallTransferResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
exportKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::exportKey(KeyFormat exportFormat,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
extended_sul_	host/frontend/webrtc/lib/ws_connection.cpp	/^  CreateConnectionSul extended_sul_;$/;"	m	class:WsConnectionImpl	typeref:typename:CreateConnectionSul	file:
extra_bootconfig_args	host/libs/config/cuttlefish_config.cpp	/^std::vector<std::string> CuttlefishConfig::extra_bootconfig_args() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::vector<std::string>
extra_data_	common/libs/confui/protocol_types.h	/^  std::vector<std::uint8_t> extra_data_;$/;"	m	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::vector<std::uint8_t>
extra_data_	guest/hals/confirmationui/guest_session.h	/^    std::vector<std::uint8_t> extra_data_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::vector<std::uint8_t>
extra_data_	host/libs/confui/cbor.h	/^  std::vector<std::uint8_t> extra_data_;$/;"	m	class:cuttlefish::confui::Cbor	typeref:typename:std::vector<std::uint8_t>
extra_data_	host/libs/confui/session.h	/^  std::vector<std::uint8_t> extra_data_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::vector<std::uint8_t>
extra_kernel_cmdline	host/libs/config/cuttlefish_config.cpp	/^std::vector<std::string> CuttlefishConfig::extra_kernel_cmdline() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::vector<std::string>
f	host/libs/confui/sign_utils.h	/^    static int f(const U*, const void*) {$/;"	f	struct:cuttlefish::confui::support::ByteBufferProxy::has_data	typeref:typename:int
f_command_handler	host/commands/modem_simulator/modem_service.h	/^  std::optional<f_func> f_command_handler;$/;"	m	class:cuttlefish::CommandHandler	typeref:typename:std::optional<f_func>
f_func	host/commands/modem_simulator/modem_service.h	/^using f_func = std::function<void(const Client&)>;                \/\/ Full match$/;"	t	namespace:cuttlefish
facility_lock_	host/commands/modem_simulator/sim_service.h	/^  std::map<std::string, FacilityLock> facility_lock_;$/;"	m	class:cuttlefish::SimService	typeref:typename:std::map<std::string,FacilityLock>
factory_reset_protected_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::factory_reset_protected_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
failCauseToString	guest/hals/ril/reference-libril/ril.cpp	/^failCauseToString(RIL_Errno e) {$/;"	f	namespace:android	typeref:typename:const char *
failure_map_	host/commands/secure_env/soft_gatekeeper.h	/^    FailureRecordMap failure_map_;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:FailureRecordMap
fast_hash_map_	host/commands/secure_env/soft_gatekeeper.h	/^    FastHashMap fast_hash_map_;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:FastHashMap
fast_hash_t	host/commands/secure_env/soft_gatekeeper.h	/^struct fast_hash_t {$/;"	s	namespace:gatekeeper
fatal_echo	tools/create_base_image_hostlib.sh	/^fatal_echo() {$/;"	f
fd	guest/hals/ril/reference-libril/ril_event.h	/^    int fd;$/;"	m	struct:ril_event	typeref:typename:int
fdCommand	guest/hals/ril/reference-libril/ril_ex.h	/^    int fdCommand;$/;"	m	struct:SocketListenParam	typeref:typename:int
fdListen	guest/hals/ril/reference-libril/ril_ex.h	/^    int fdListen;$/;"	m	struct:SocketListenParam	typeref:typename:int
fd_	common/libs/fs/shared_fd.h	/^  int fd_;$/;"	m	class:cuttlefish::FileInstance	typeref:typename:int
fd_	common/libs/utils/tcp_socket.h	/^  SharedFD fd_;$/;"	m	class:cuttlefish::ClientSocket	typeref:typename:SharedFD
fd_	common/libs/utils/tcp_socket.h	/^  SharedFD fd_;$/;"	m	class:cuttlefish::ServerSocket	typeref:typename:SharedFD
fd_	common/libs/utils/vsock_connection.h	/^  SharedFD fd_;$/;"	m	class:cuttlefish::VsockConnection	typeref:typename:SharedFD
fd_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  int fd_ = -1;$/;"	m	class:cuttlefish_input_service::VirtualDeviceBase	typeref:typename:int
fd_	guest/hals/bt/remote/remote_bluetooth.h	/^  int fd_{-1};$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:int
fds_	common/libs/utils/unix_sockets.h	/^  std::vector<int> fds_;$/;"	m	struct:cuttlefish::ControlMessage	typeref:typename:std::vector<int>
features	host/libs/audio_connector/commands.h	/^  uint32_t features() const { return features_; }$/;"	f	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:uint32_t
features	host/libs/audio_connector/shm_layout.h	/^  Le32 features; \/* 1 << VIRTIO_SND_JACK_F_XXX *\/$/;"	m	struct:cuttlefish::virtio_snd_jack_info	typeref:typename:Le32
features	host/libs/audio_connector/shm_layout.h	/^  Le32 features; \/* 1 << VIRTIO_SND_PCM_F_XXX *\/$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:Le32
features	host/libs/audio_connector/shm_layout.h	/^  Le32 features; \/* 1 << VIRTIO_SND_PCM_F_XXX *\/$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:Le32
features_	host/libs/audio_connector/commands.h	/^  const uint32_t features_;$/;"	m	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:const uint32_t
fetcher_bin	fetcher.mk	/^fetcher_bin := $(HOST_OUT)\/$(bin_path)\/fetch_cvd$/;"	m
fg_launcher_pipe_	host/commands/run_cvd/boot_state_machine.cc	/^  SharedFD fg_launcher_pipe_;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:SharedFD	file:
fifo_	host/commands/run_cvd/launch.cc	/^  SharedFD fifo_;$/;"	m	class:cuttlefish::KernelLogMonitor	typeref:typename:SharedFD	file:
fifos_	host/commands/run_cvd/launch.cc	/^  std::vector<SharedFD> fifos_;$/;"	m	class:cuttlefish::BluetoothConnector	typeref:typename:std::vector<SharedFD>	file:
fifos_	host/commands/run_cvd/launch.cc	/^  std::vector<SharedFD> fifos_;$/;"	m	class:cuttlefish::SecureEnvironment	typeref:typename:std::vector<SharedFD>	file:
file	common/libs/utils/archive.h	/^  std::string file;$/;"	m	class:cuttlefish::Archive	typeref:typename:std::string
file_path	host/commands/modem_simulator/sim_service.h	/^    std::string file_path;$/;"	m	struct:cuttlefish::SimService::SimFileSystem	typeref:typename:std::string
file_path	host/libs/config/fetcher_config.h	/^  std::string file_path;$/;"	m	struct:cuttlefish::CvdFile	typeref:typename:std::string
file_path	host/libs/image_aggregator/cdisk_spec.proto	/^  string file_path = 1;$/;"	f	message:ComponentDisk	typeref:typename:string
file_write_callback	host/commands/fetcher/curl_wrapper.cc	/^size_t file_write_callback(char *ptr, size_t, size_t nmemb, void *userdata) {$/;"	f	namespace:cuttlefish::__anondfffca8d0111	typeref:typename:size_t
file_writer_	host/frontend/webrtc/lib/local_recorder.cpp	/^  mkvmuxer::MkvWriter file_writer_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Impl	typeref:typename:mkvmuxer::MkvWriter	file:
fileid	guest/hals/ril/reference-libril/ril.h	/^    int fileid;     \/* EF id *\/$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:int
fileid	guest/hals/ril/reference-libril/ril.h	/^    int fileid;     \/* EF id *\/$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:int
filename_	host/commands/start/flag_forwarder.cc	/^  std::string filename_;$/;"	m	class:DynamicFlag	typeref:typename:std::string	file:
fillCaptureResult	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::fillCaptureResult($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
fillCellIdentityFromDataRegStateResponseString	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityFromDataRegStateResponseString(CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
fillCellIdentityFromDataRegStateResponseString_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityFromDataRegStateResponseString_1_2(V1_2::CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
fillCellIdentityFromDataRegStateResponseString_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityFromDataRegStateResponseString_1_5(V1_5::CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
fillCellIdentityFromVoiceRegStateResponseString	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityFromVoiceRegStateResponseString(V1_5::CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
fillCellIdentityFromVoiceRegStateResponseString_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityFromVoiceRegStateResponseString_1_2(V1_2::CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
fillCellIdentityResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityResponse(CellIdentity &cellIdentity, RIL_CellIdentity_v16 &rilCellIdentity)/;"	f	typeref:typename:void
fillCellIdentityResponse_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityResponse_1_2(V1_2::CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
fillCellIdentityResponse_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^void fillCellIdentityResponse_1_5(V1_5::CellIdentity &cellIdentity,$/;"	f	typeref:typename:void
finalResponse	guest/hals/ril/reference-ril/atchannel.h	/^    char *finalResponse;      \/* eg OK, ERROR *\/$/;"	m	struct:__anon512a2c1f0208	typeref:typename:char *
findNextEOL	guest/hals/ril/reference-ril/atchannel.c	/^static char * findNextEOL(char *cur)$/;"	f	typeref:typename:char *	file:
finish	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::finish(uint64_t operationHandle,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
finish	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^ScopedAStatus RemoteKeyMintOperation::finish($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation	typeref:typename:ScopedAStatus
firePending	guest/hals/ril/reference-libril/ril_event.cpp	/^static void firePending()$/;"	f	typeref:typename:void	file:
first_lba	host/libs/config/mbr.h	/^  std::uint32_t first_lba;$/;"	m	struct:MbrPartitionEntry	typeref:typename:std::uint32_t
first_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t first_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptPartitionEntry	typeref:typename:std::uint64_t	file:
first_read_command_	host/commands/modem_simulator/channel_monitor.h	/^  bool first_read_command_;  \/\/ Only used when ClientType::REMOTE$/;"	m	class:cuttlefish::Client	typeref:typename:bool
first_signal_strength_request_	host/commands/modem_simulator/network_service.h	/^  bool first_signal_strength_request_;  \/\/ For time update$/;"	m	class:cuttlefish::NetworkService	typeref:typename:bool
first_usable_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t first_usable_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint64_t	file:
flagXml	common/libs/utils/flag_parser_test.cpp	/^std::optional<std::map<std::string, std::string>> flagXml(const Flag& f) {$/;"	f	namespace:cuttlefish	typeref:typename:std::optional<std::map<std::string,std::string>>
flag_	host/libs/config/config_flag.cpp	/^  Flag flag_;$/;"	m	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:Flag	file:
flag_	host/libs/config/config_flag.cpp	/^  Flag flag_;$/;"	m	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:Flag	file:
flags	common/libs/utils/network.cpp	/^  __be16 flags;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:__be16	file:
flags_	host/commands/start/flag_forwarder.h	/^  std::set<std::unique_ptr<SubprocessFlag>> flags_;$/;"	m	class:FlagForwarder	typeref:typename:std::set<std::unique_ptr<SubprocessFlag>>
flags_	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  uint32_t flags_;$/;"	m	class:cuttlefish::WmediumdMessageSetControl	typeref:typename:uint32_t
flush	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<Status> VsockCameraDeviceSession::flush() {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<Status>
flushing_requests_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::atomic<bool> flushing_requests_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::atomic<bool>
footer	host/libs/image_aggregator/image_aggregator.cc	/^  GptHeader footer;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptEnd	typeref:typename:GptHeader	file:
footer_padding	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t footer_padding[SECTOR_SIZE - sizeof(GptHeader)];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptEnd	typeref:typename:std::uint8_t[]	file:
foreground_launcher_pipe_	host/commands/run_cvd/boot_state_machine.cc	/^  SharedFD foreground_launcher_pipe_;$/;"	m	class:cuttlefish::__anone7ed366f0111::ProcessLeader	typeref:typename:SharedFD	file:
format	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  EventFormat format;      \/\/ how the log message is formatted$/;"	m	struct:__anonfa7764770111::__anonfa7764770308	typeref:typename:EventFormat	file:
format	host/libs/audio_connector/commands.h	/^  uint8_t format() const { return format_; }$/;"	f	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:uint8_t
format	host/libs/audio_connector/shm_layout.h	/^  uint8_t format;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:uint8_t
format_	host/libs/audio_connector/commands.h	/^  const uint8_t format_;$/;"	m	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:const uint8_t
formats	host/libs/audio_connector/shm_layout.h	/^  Le64 formats;  \/* 1 << VIRTIO_SND_PCM_FMT_XXX *\/$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:Le64
formatted_message_buffer_	host/libs/confui/cbor.h	/^  std::vector<std::uint8_t> formatted_message_buffer_;$/;"	m	class:cuttlefish::confui::Cbor	typeref:typename:std::vector<std::uint8_t>
forward	guest/commands/bt_vhci_forwarder/main.cpp	/^ssize_t forward(int from, int to, std::optional<unsigned char> filter_out,$/;"	f	typeref:typename:ssize_t
forward	guest/commands/bt_vhci_forwarder/main.cpp	/^ssize_t forward(int from, int to, unsigned char* buf) {$/;"	f	typeref:typename:ssize_t
forward	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async #forward(msg) {$/;"	m	class:PollingConnector
forwardFromCCFCULine	guest/hals/ril/reference-ril/reference-ril.c	/^static int forwardFromCCFCULine(char *line, RIL_CallForwardInfo *p_forward) {$/;"	f	typeref:typename:int	file:
fps_	guest/hals/camera/vsock_camera_metadata.h	/^  int32_t fps_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata	typeref:typename:int32_t
fragment	host/libs/config/adb/test.cpp	/^  AdbConfigFragment& fragment;$/;"	m	struct:cuttlefish::TestData	typeref:typename:AdbConfigFragment &	file:
frame_	guest/hals/camera/vsock_frame_provider.h	/^  std::vector<char> frame_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::vector<char>
frame_buffer_	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^      frame_buffer_;$/;"	m	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:std::shared_ptr<::cuttlefish::webrtc_streaming::VideoFrameBuffer>	file:
frame_mutex_	guest/hals/camera/vsock_frame_provider.h	/^  std::mutex frame_mutex_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::mutex
frame_mutex_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::mutex frame_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::mutex
frame_number	guest/hals/camera/vsock_camera_device_session_3_4.h	/^    uint32_t frame_number;$/;"	m	struct:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::ReadVsockRequest	typeref:typename:uint32_t
frame_provider_	guest/hals/camera/vsock_camera_device_3_4.h	/^  std::shared_ptr<cuttlefish::VsockFrameProvider> frame_provider_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:std::shared_ptr<cuttlefish::VsockFrameProvider>
frame_provider_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::shared_ptr<cuttlefish::VsockFrameProvider> frame_provider_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::shared_ptr<cuttlefish::VsockFrameProvider>
frames	host/frontend/webrtc/audio_handler.cpp	/^  int frames() const override { return frames_; }$/;"	f	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
frames_	host/frontend/webrtc/audio_handler.cpp	/^  int frames_;$/;"	m	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
frames_server_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD frames_server_;$/;"	m	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:SharedFD	file:
frames_socket_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::frames_socket_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
framesizeMatches	guest/hals/camera/vsock_frame_provider.cpp	/^bool VsockFrameProvider::framesizeMatches(uint32_t width, uint32_t height,$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
freeCardStatus	guest/hals/ril/reference-ril/reference-ril.c	/^static void freeCardStatus(RIL_CardStatus_v1_5 *p_card_status) {$/;"	f	typeref:typename:void	file:
freeCarrierRestrictions	guest/hals/ril/reference-libril/ril_service.cpp	/^void freeCarrierRestrictions(RIL_CarrierRestrictions &request) {$/;"	f	typeref:typename:void
freeSetDataProfileData	guest/hals/ril/reference-libril/ril_service.cpp	/^void freeSetDataProfileData(int numProfiles, T *dataProfiles, T **dataProfilePtrs,$/;"	f	typeref:typename:void
fromCodeScheme	guest/hals/ril/reference-libril/ril.h	/^    int fromCodeScheme;$/;"	m	struct:__anon0bfbaecf4408	typeref:typename:int
fromEmergencyDialer	guest/hals/ril/reference-libril/ril.h	/^    bool                         fromEmergencyDialer;$/;"	m	struct:__anon0bfbaecfb708	typeref:typename:bool
fromServiceId	guest/hals/ril/reference-libril/ril.h	/^    int fromServiceId;$/;"	m	struct:__anon0bfbaecf4408	typeref:typename:int
front	guest/hals/ril/reference-libril/rilSocketQueue.h	/^    T *front;$/;"	m	class:Ril_queue	typeref:typename:T *
full	host/frontend/webrtc/audio_handler.cpp	/^bool AudioHandler::HoldingBuffer::full() const {$/;"	f	class:cuttlefish::AudioHandler::HoldingBuffer	typeref:typename:bool
func	guest/hals/ril/reference-libril/ril_event.h	/^    ril_event_cb func;$/;"	m	struct:ril_event	typeref:typename:ril_event_cb
futures	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #futures = {};$/;"	M	class:WebsocketConnector
gCameraServer	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^VsockCameraServer gCameraServer;$/;"	v	namespace:android::hardware::camera::provider::V2_7::implementation::__anona6e38b1b0111	typeref:typename:VsockCameraServer
gSimStatusResponse	host/commands/modem_simulator/sim_service.cpp	/^const std::map<SimService::SimStatus, std::string> gSimStatusResponse = {$/;"	v	namespace:cuttlefish	typeref:typename:const std::map<SimService::SimStatus,std::string>
g_importer	guest/hals/camera/cached_stream_buffer.cpp	/^HandleImporter g_importer;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anon1055ca380111	typeref:typename:HandleImporter
garbageCollect	guest/hals/health/storage/Storage.cpp	/^Storage::garbageCollect(int64_t \/*timeout_seconds*\/,$/;"	f	class:aidl::android::hardware::health::storage::Storage	typeref:typename:ndk::ScopedAStatus
gatekeeper	common/libs/security/gatekeeper_channel.h	/^namespace gatekeeper {$/;"	n
gatekeeper	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^namespace gatekeeper {$/;"	n	file:
gatekeeper	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^namespace gatekeeper {$/;"	n
gatekeeper	host/commands/secure_env/soft_gatekeeper.h	/^namespace gatekeeper {$/;"	n
gatekeeper_	host/commands/secure_env/gatekeeper_responder.h	/^  gatekeeper::GateKeeper& gatekeeper_;$/;"	m	class:cuttlefish::GatekeeperResponder	typeref:typename:gatekeeper::GateKeeper &
gatekeeper_	host/commands/secure_env/tpm_keymaster_enforcement.h	/^  TpmGatekeeper& gatekeeper_;$/;"	m	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:TpmGatekeeper &
gatekeeper_channel_	guest/hals/gatekeeper/remote/remote_gatekeeper.h	/^    cuttlefish::GatekeeperChannel* gatekeeper_channel_;$/;"	m	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:cuttlefish::GatekeeperChannel *
gateway	common/libs/device_config/device_config.proto	/^    string gateway = 2;$/;"	f	message:cuttlefish.DeviceConfig.RILConfig	typeref:typename:string
gateway_ip	common/libs/utils/network.cpp	/^  std::uint8_t gateway_ip[4];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[4]	file:
gateways	guest/hals/ril/reference-libril/ril.h	/^    char *          gateways;   \/* A space-delimited list of default gateway addresses,$/;"	m	struct:__anon0bfbaecf1308	typeref:typename:char *
gateways	guest/hals/ril/reference-libril/ril.h	/^    char *          gateways;   \/* A space-delimited list of default gateway addresses,$/;"	m	struct:__anon0bfbaecf1408	typeref:typename:char *
gateways	guest/hals/ril/reference-libril/ril.h	/^    char *          gateways;   \/* A space-delimited list of default gateway addresses,$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:char *
gateways	guest/hals/ril/reference-libril/ril.h	/^    char *          gateways;   \/* A space-delimited list of default gateway addresses,$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:char *
gateways	host/commands/modem_simulator/data_service.h	/^    std::string gateways;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:std::string
gce	tools/create_base_image.go	/^func gce(action OnFail, gceArg string, errorStr ...string) (string, error) {$/;"	f	package:main	typeref:typename:(string, error)
gcloud_ssh	tools/upload_to_gce_and_run.py	/^def gcloud_ssh(args):$/;"	f
gdb_port	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::gdb_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
generateCertificateRequest	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^ScopedAStatus RemoteRemotelyProvisionedComponent::generateCertificateRequest($/;"	f	class:aidl::android::hardware::security::keymint::RemoteRemotelyProvisionedComponent	typeref:typename:ScopedAStatus
generateEcdsaP256KeyPair	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^ScopedAStatus RemoteRemotelyProvisionedComponent::generateEcdsaP256KeyPair($/;"	f	class:aidl::android::hardware::security::keymint::RemoteRemotelyProvisionedComponent	typeref:typename:ScopedAStatus
generateKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::generateKey(const hidl_vec<KeyParameter>& keyParams,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
generateKey	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::generateKey($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
generateTimeStamp	guest/hals/keymint/remote/remote_secure_clock.cpp	/^ScopedAStatus RemoteSecureClock::generateTimeStamp(int64_t challenge,$/;"	f	class:aidl::android::hardware::security::secureclock::RemoteSecureClock	typeref:typename:ScopedAStatus
generateTombstoneOfLengthInKb	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private void generateTombstoneOfLengthInKb(int requestedLengthInKb) throws DeviceNotAvailabl/;"	m	class:TombstoneTransmitTest	file:
geran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_GeranBands geran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfab08::__anon0bfbaecfac0a	typeref:typename:RIL_GeranBands[]
geran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_GeranBands geran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfae08::__anon0bfbaecfaf0a	typeref:typename:RIL_GeranBands[]
get	common/libs/fs/shared_fd.h	/^  const void* get() const { return ptr_; }$/;"	f	class:cuttlefish::ScopedMMap	typeref:typename:const void *
get	common/libs/fs/shared_fd.h	/^  void* get() { return ptr_; }$/;"	f	class:cuttlefish::ScopedMMap	typeref:typename:void *
get	guest/hals/camera/stream_buffer_cache.cpp	/^std::shared_ptr<CachedStreamBuffer> StreamBufferCache::get(uint64_t buffer_id) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:std::shared_ptr<CachedStreamBuffer>
get	host/commands/secure_env/tpm_resource_manager.cpp	/^ESYS_TR TpmResourceManager::ObjectSlot::get() {$/;"	f	class:cuttlefish::TpmResourceManager::ObjectSlot	typeref:typename:ESYS_TR
get	host/libs/audio_connector/buffers.h	/^  const volatile uint8_t* get() const { return buffer_; }$/;"	f	class:cuttlefish::TxBuffer	typeref:typename:const volatile uint8_t *
get	host/libs/audio_connector/buffers.h	/^  volatile uint8_t* get() const { return buffer_; }$/;"	f	class:cuttlefish::RxBuffer	typeref:typename:volatile uint8_t *
getAidlPackage	tests/hal/hal_implementation_test.cpp	/^std::string getAidlPackage(const std::string& aidlType) {$/;"	f	typeref:typename:std::string
getAllowedCarriers	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getAllowedCarriers(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getAllowedCarriersResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getAllowedCarriersResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getAllowedCarriers_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getAllowedCarriers_1_4(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getAllowedNetworkTypesBitmap	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getAllowedNetworkTypesBitmap(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getAllowedNetworkTypesBitmapResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getAllowedNetworkTypesBitmapResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getAvailableBandModes	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getAvailableBandModes(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getAvailableBandModesResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getAvailableBandModesResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getAvailableNetworks	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getAvailableNetworks(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getAvailableNetworksResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getAvailableNetworksResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getBarringInfo	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getBarringInfo(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getBarringInfoResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getBarringInfoResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getBasebandVersion	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getBasebandVersion(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getBasebandVersionResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getBasebandVersionResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getBitmapFromPreferred	guest/hals/ril/reference-ril/reference-ril.c	/^unsigned getBitmapFromPreferred(int value) {$/;"	f	typeref:typename:unsigned
getBlobSize	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^unsigned int VsockCameraDeviceSession::getBlobSize($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:unsigned int
getByte	host/libs/confui/cbor.h	/^  inline uint8_t getByte(const uint64_t& v, const uint8_t index) {$/;"	f	class:cuttlefish::confui::Cbor	typeref:typename:uint8_t
getCDMASubscription	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCDMASubscription(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCDMASubscriptionResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCDMASubscriptionResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCallForwardStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCallForwardStatus(int32_t serial, const CallForwardInfo& callInfo/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCallForwardStatusResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCallForwardStatusResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCallWaiting	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCallWaiting(int32_t serial, int32_t serviceClass) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCallWaitingResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCallWaitingResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCameraCharacteristics	guest/hals/camera/vsock_camera_device_3_4.cpp	/^Return<void> VsockCameraDevice::getCameraCharacteristics($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:Return<void>
getCameraDeviceInterface_V1_x	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::getCameraDeviceInterface_V1_x($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
getCameraDeviceInterface_V3_x	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::getCameraDeviceInterface_V3_x($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
getCameraIdList	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::getCameraIdList($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
getCapacity	guest/hals/health/health.cpp	/^Return<void> HealthImpl::getCapacity(getCapacity_cb _hidl_cb) {$/;"	f	class:android::hardware::health::V2_1::implementation::HealthImpl	typeref:typename:Return<void>
getCaptureRequestMetadataQueue	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::getCaptureRequestMetadataQueue($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
getCaptureResultMetadataQueue	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::getCaptureResultMetadataQueue($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
getCardStatus	guest/hals/ril/reference-ril/reference-ril.c	/^static int getCardStatus(RIL_CardStatus_v1_5 **pp_card_status) {$/;"	f	typeref:typename:int	file:
getCdmaBroadcastConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCdmaBroadcastConfig(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCdmaBroadcastConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCdmaBroadcastConfigResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCdmaRoamingPreference	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCdmaRoamingPreference(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCdmaRoamingPreferenceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCdmaRoamingPreferenceResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCdmaSubscriptionSource	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCdmaSubscriptionSource(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCdmaSubscriptionSourceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCdmaSubscriptionSourceResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCellInfoList	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCellInfoList(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCellInfoListResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCellInfoListResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCellInfoList_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCellInfoList_1_6(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCellInfoTypeRadioTechnology	guest/hals/ril/reference-libril/ril_service.cpp	/^RIL_CellInfoType getCellInfoTypeRadioTechnology(char *rat) {$/;"	f	typeref:typename:RIL_CellInfoType
getChargeCounter	guest/hals/health/health.cpp	/^Return<void> HealthImpl::getChargeCounter(getChargeCounter_cb _hidl_cb) {$/;"	f	class:android::hardware::health::V2_1::implementation::HealthImpl	typeref:typename:Return<void>
getChargeStatus	guest/hals/health/health.cpp	/^Return<void> HealthImpl::getChargeStatus(getChargeStatus_cb _hidl_cb) {$/;"	f	class:android::hardware::health::V2_1::implementation::HealthImpl	typeref:typename:Return<void>
getClip	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getClip(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getClipResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getClipResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getClir	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getClir(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getClirResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getClirResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getConcurrentStreamingCameraIds	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::getConcurrentStreamingCameraIds($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
getConfig	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async #getConfig() {$/;"	m	class:PollingConnector
getConfigSlotStatus	guest/hals/ril/reference-ril/reference-ril.c	/^void getConfigSlotStatus(RIL_SimSlotStatus_V1_2 *pSimSlotStatus) {$/;"	f	typeref:typename:void
getConnected	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    public GceFuture<Boolean> getConnected() {$/;"	m	class:ConnectivityChecker
getCurrentCalls	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCurrentCalls(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCurrentCallsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getCurrentCallsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getCurrentCalls_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getCurrentCalls_1_6(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getCurrentNow	guest/hals/health/health.cpp	/^Return<void> HealthImpl::getCurrentNow(getCurrentNow_cb _hidl_cb) {$/;"	f	class:android::hardware::health::V2_1::implementation::HealthImpl	typeref:typename:Return<void>
getCustomDeviceStateButtonCb	host/frontend/webrtc_operator/assets/js/app.js	/^  #getCustomDeviceStateButtonCb(device_states) {$/;"	m	class:DeviceControlApp
getDataCallList	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getDataCallList(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getDataCallListResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getDataCallListResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getDataCallList_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getDataCallList_1_6(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getDataRegistrationState	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getDataRegistrationState(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getDataRegistrationStateResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getDataRegistrationStateResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getDataRegistrationState_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getDataRegistrationState_1_5(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getDataRegistrationState_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getDataRegistrationState_1_6(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getDeviceIdentity	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getDeviceIdentity(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getDeviceIdentityResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getDeviceIdentityResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getEnabled	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^    public GceFuture<Boolean> getEnabled() {$/;"	m	class:BluetoothChecker
getFacilityLockForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getFacilityLockForApp(int32_t serial, const hidl_string& facility,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getFacilityLockForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getFacilityLockForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getGsmBroadcastConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getGsmBroadcastConfig(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getGsmBroadcastConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getGsmBroadcastConfigResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getHalDeviceCapabilities	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::getHalDeviceCapabilities(int32_t serial) {$/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
getHalDeviceCapabilitiesResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::getHalDeviceCapabilitiesResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getHardwareConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getHardwareConfig(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getHardwareConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getHardwareConfigResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getHardwareInfo	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::getHardwareInfo(getHardwareInfo_cb _hidl_cb) {$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
getHardwareInfo	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::getHardwareInfo(KeyMintHardwareInfo* info) {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
getHardwareInfo	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^ScopedAStatus RemoteRemotelyProvisionedComponent::getHardwareInfo($/;"	f	class:aidl::android::hardware::security::keymint::RemoteRemotelyProvisionedComponent	typeref:typename:ScopedAStatus
getHasDied	guest/hals/bt/remote/remote_bluetooth.cpp	/^  bool getHasDied() const { return has_died_; }$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothDeathRecipient	typeref:typename:bool	file:
getHmacSharingParameters	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::getHmacSharingParameters($/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
getIMSIForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getIMSIForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getIccCardStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getIccCardStatus(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getIccCardStatusResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getIccCardStatusResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getIccId	guest/hals/ril/reference-ril/reference-ril.c	/^static void getIccId(char *iccid, int size) {$/;"	f	typeref:typename:void	file:
getImsRegistrationState	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getImsRegistrationState(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getImsRegistrationStateResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getImsRegistrationStateResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getImsiForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getImsiForApp(int32_t serial, const hidl_string& aid) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getKeyCharacteristics	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::getKeyCharacteristics(const hidl_vec<uint8_t>& keyBlob,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
getKeyCharacteristics	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::getKeyCharacteristics($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
getLastCallFailCause	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getLastCallFailCause(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getLastCallFailCauseResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getLastCallFailCauseResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getMessageList	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public List<String> getMessageList() {$/;"	m	class:EventReporter
getModemActivityInfo	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getModemActivityInfo(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getModemActivityInfoResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getModemActivityInfoResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getModemStackStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getModemStackStatus(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getModemStackStatusResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getModemStackStatusResponse(int slotId, int responseType, int serial, RIL_Errno e/;"	f	class:radio_1_6	typeref:typename:int
getModemTechFromPrefer	host/commands/modem_simulator/network_service.cpp	/^int NetworkService::getModemTechFromPrefer(int preferred_mask) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:int
getModemsConfig	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::getModemsConfig(int32_t serial) {$/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
getModemsConfigResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::getModemsConfigResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getMute	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getMute(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getMuteResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getMuteResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getName	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public String getName() {$/;"	m	class:GceFuture
getNeighboringCids	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getNeighboringCids(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getNeighboringCidsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getNeighboringCidsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getNetworkSelectionMode	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getNetworkSelectionMode(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getNetworkSelectionModeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getNetworkSelectionModeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getNetworkTypeFromTech	host/commands/modem_simulator/network_service.cpp	/^NetworkService::getNetworkTypeFromTech(ModemTechnology modemTech) {$/;"	f	class:cuttlefish::NetworkService	typeref:typename:NetworkService::NetworkRegistrationStatus::AccessTechnoloy
getNow	guest/hals/ril/reference-libril/ril_event.cpp	/^static void getNow(struct timeval * tv)$/;"	f	typeref:typename:void	file:
getOperator	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getOperator(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getOperatorResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getOperatorResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getPDP	guest/hals/ril/reference-ril/reference-ril.c	/^static int getPDP() {$/;"	f	typeref:typename:int	file:
getPhoneCapability	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::getPhoneCapability(int32_t serial) {$/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
getPhoneCapabilityResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::getPhoneCapabilityResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getPreferredFps	guest/hals/camera/vsock_camera_metadata.h	/^  int32_t getPreferredFps() const { return fps_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata	typeref:typename:int32_t
getPreferredFromBitmap	guest/hals/ril/reference-ril/reference-ril.c	/^int getPreferredFromBitmap(int value, int *index) {$/;"	f	typeref:typename:int
getPreferredHeight	guest/hals/camera/vsock_camera_metadata.h	/^  int32_t getPreferredHeight() const { return height_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata	typeref:typename:int32_t
getPreferredNetworkType	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getPreferredNetworkType(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getPreferredNetworkTypeBitmap	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getPreferredNetworkTypeBitmap(int32_t serial ) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getPreferredNetworkTypeBitmapResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getPreferredNetworkTypeBitmapResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getPreferredNetworkTypeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getPreferredNetworkTypeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getPreferredVoicePrivacy	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getPreferredVoicePrivacy(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getPreferredVoicePrivacyResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getPreferredVoicePrivacyResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getPreferredWidth	guest/hals/camera/vsock_camera_metadata.h	/^  int32_t getPreferredWidth() const { return width_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata	typeref:typename:int32_t
getProtocolString	guest/hals/ril/reference-libril/ril_service.cpp	/^const char * getProtocolString(const ::android::hardware::radio::V1_4::PdpProtocolType protocolV/;"	f	typeref:typename:const char *
getRUIMStatus	guest/hals/ril/reference-ril/reference-ril.c	/^getRUIMStatus()$/;"	f	typeref:typename:SIM_Status	file:
getRadioCapability	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getRadioCapability(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getRadioCapabilityResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getRadioCapabilityResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getRadioInterfaceName	guest/hals/ril/reference-ril/reference-ril.c	/^static const char* getRadioInterfaceName()$/;"	f	typeref:typename:const char *	file:
getRadioServiceRwlock	guest/hals/ril/reference-libril/ril_service.cpp	/^pthread_rwlock_t * radio_1_6::getRadioServiceRwlock(int slotId) {$/;"	f	class:radio_1_6	typeref:typename:pthread_rwlock_t *
getRequestFromQueue	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^bool VsockCameraDeviceSession::getRequestFromQueue(ReadVsockRequest& req,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:bool
getRequestSettingsFmq	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^bool VsockCameraDeviceSession::getRequestSettingsFmq($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:bool
getResourceCost	guest/hals/camera/vsock_camera_device_3_4.cpp	/^Return<void> VsockCameraDevice::getResourceCost($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:Return<void>
getRotation	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private int getRotation() {$/;"	m	class:GceService	file:
getSIMStatus	guest/hals/ril/reference-ril/reference-ril.c	/^getSIMStatus()$/;"	f	typeref:typename:SIM_Status	file:
getSapImpl	guest/hals/ril/reference-libril/sap_service.cpp	/^sp<SapImpl> getSapImpl(RilSapSocket *sapSocket) {$/;"	f	typeref:typename:sp<SapImpl>
getScreenBounds	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private Point getScreenBounds() {$/;"	m	class:GceService	file:
getSecurityLevel	guest/hals/keymint/remote/service.cpp	/^SecurityLevel getSecurityLevel(::keymaster::RemoteKeymaster& remote_keymaster) {$/;"	f	namespace:__anon5714be600111	typeref:typename:SecurityLevel
getSensorHandle	guest/commands/sensor_injection/main.cpp	/^int getSensorHandle(SensorType type, const sp<ISensors> sensors) {$/;"	f	typeref:typename:int
getSharedSecretParameters	guest/hals/keymint/remote/remote_shared_secret.cpp	/^ScopedAStatus RemoteSharedSecret::getSharedSecretParameters($/;"	f	class:aidl::android::hardware::security::sharedsecret::RemoteSharedSecret	typeref:typename:ScopedAStatus
getSignalStrength	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSignalStrength(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSignalStrengthResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getSignalStrengthResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getSignalStrength_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSignalStrength_1_4(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSignalStrength_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSignalStrength_1_6(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSimPhonebookCapacity	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSimPhonebookCapacity(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSimPhonebookCapacityResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getSimPhonebookCapacityResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getSimPhonebookRecords	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSimPhonebookRecords(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSimPhonebookRecordsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getSimPhonebookRecordsResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getSimSlotsStatus	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::getSimSlotsStatus(int32_t serial) {$/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
getSimSlotsStatusResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::getSimSlotsStatusResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getSimlockRemainTimes	guest/hals/ril/reference-ril/reference-ril.c	/^static int getSimlockRemainTimes(const char* type) {$/;"	f	typeref:typename:int	file:
getSlicingConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSlicingConfig(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSlicingConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getSlicingConfigResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getSmscAddress	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSmscAddress(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSmscAddressResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getSmscAddressResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getSocketById	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^RilSapSocket *RilSapSocket::getSocketById(RIL_SOCKET_ID socketId) {$/;"	f	class:RilSapSocket	typeref:typename:RilSapSocket *
getSocketId	guest/hals/ril/reference-libril/RilSocket.h	/^        RIL_SOCKET_ID getSocketId(void) {$/;"	f	class:RilSocket	typeref:typename:RIL_SOCKET_ID
getStream	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  getStream(stream_id) {$/;"	m	class:DeviceConnection
getSystemSelectionChannels	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getSystemSelectionChannels(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getSystemSelectionChannelsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getSystemSelectionChannelsResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
getTTYMode	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getTTYMode(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getTTYModeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getTTYModeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getTechFromNetworkType	host/commands/modem_simulator/network_service.cpp	/^NetworkService::ModemTechnology NetworkService::getTechFromNetworkType($/;"	f	class:cuttlefish::NetworkService	typeref:typename:NetworkService::ModemTechnology
getTimeNanosFromLine	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::string getTimeNanosFromLine(const std::string& line) {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:std::string	file:
getTimestampString	host/frontend/webrtc_operator/assets/js/app.js	/^  #getTimestampString() {$/;"	m	class:DeviceControlApp
getTombstonesViaAdb	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    private List<File> getTombstonesViaAdb() throws DeviceNotAvailableException {$/;"	m	class:TombstoneTransmitTest	file:
getTransformRotation	host/frontend/webrtc_operator/assets/js/app.js	/^  #getTransformRotation(element) {$/;"	m	class:DeviceControlApp
getU32LE	host/frontend/webrtc_operator/assets/js/adb.js	/^function getU32LE(array, offset) {$/;"	f
getVendorTags	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::getVendorTags($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
getVersion	guest/hals/ril/reference-libril/ril.h	/^    RIL_GetVersion getVersion;$/;"	m	struct:__anon0bfbaecfbf08	typeref:typename:RIL_GetVersion
getVersion	guest/hals/ril/reference-ril/reference-ril.c	/^static const char * getVersion(void)$/;"	f	typeref:typename:const char *	file:
getVoiceRadioTechnology	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getVoiceRadioTechnology(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getVoiceRadioTechnologyResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getVoiceRadioTechnologyResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getVoiceRegistrationState	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getVoiceRegistrationState(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getVoiceRegistrationStateResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::getVoiceRegistrationStateResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
getVoiceRegistrationState_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getVoiceRegistrationState_1_5(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getVoiceRegistrationState_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::getVoiceRegistrationState_1_6(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
getWifiReady	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        public GceFuture<Boolean> getWifiReady() {$/;"	m	class:GceWifiManager.MonitorWifiJob
getWifiReady	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    public GceFuture<Boolean> getWifiReady() {$/;"	m	class:GceWifiManager
getZeroPaddedString	host/frontend/webrtc_operator/assets/js/app.js	/^  #getZeroPaddedString(value, desiredLength) {$/;"	m	class:DeviceControlApp
get_current_time_ms	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^uint64_t TpmKeymasterEnforcement::get_current_time_ms() const {$/;"	f	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:uint64_t
get_cvd_files	host/libs/config/fetcher_config.cpp	/^std::map<std::string, CvdFile> FetcherConfig::get_cvd_files() const {$/;"	f	class:cuttlefish::FetcherConfig	typeref:typename:std::map<std::string,CvdFile>
get_next_tombstone_path_blocking	guest/monitoring/tombstone_transmit/tombstone_transmit.cpp	/^static std::string get_next_tombstone_path_blocking(int fd) {$/;"	f	typeref:typename:std::string	file:
get_wall_clock_time_ms	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^uint64_t get_wall_clock_time_ms() {$/;"	f	namespace:cuttlefish::__anon0281e17c0211	typeref:typename:uint64_t
getter_	common/libs/utils/flag_parser.h	/^  std::optional<std::function<std::string()>> getter_;$/;"	m	class:cuttlefish::Flag	typeref:typename:std::optional<std::function<std::string ()>>
gles2_extensions	host/libs/graphics_detector/graphics_detector.h	/^  std::string gles2_extensions;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
gles2_renderer	host/libs/graphics_detector/graphics_detector.h	/^  std::string gles2_renderer;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
gles2_vendor	host/libs/graphics_detector/graphics_detector.h	/^  std::string gles2_vendor;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
gles2_version	host/libs/graphics_detector/graphics_detector.h	/^  std::string gles2_version;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:std::string
global_id_	host/libs/allocd/resource.h	/^  uint32_t global_id_{};$/;"	m	class:cuttlefish::StaticResource	typeref:typename:uint32_t
global_instance	host/commands/secure_env/in_process_tpm.cpp	/^  static Impl* global_instance;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:Impl *	file:
global_instance	host/commands/secure_env/in_process_tpm.cpp	/^InProcessTpm::Impl* InProcessTpm::Impl::global_instance;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:InProcessTpm::Impl *
global_mutex	host/commands/secure_env/in_process_tpm.cpp	/^  static std::mutex global_mutex;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:std::mutex	file:
global_mutex	host/commands/secure_env/in_process_tpm.cpp	/^std::mutex InProcessTpm::Impl::global_mutex;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:std::mutex
global_resource_id_	host/libs/allocd/resource_manager.h	/^  std::atomic_uint32_t global_resource_id_ = 0;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:std::atomic_uint32_t
gnss_file_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::gnss_file_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
gnss_grpc_proxy	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^package gnss_grpc_proxy;$/;"	p
gnss_grpc_proxy_in_wr_	host/commands/run_cvd/launch.cc	/^  SharedFD gnss_grpc_proxy_in_wr_;$/;"	m	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:SharedFD	file:
gnss_grpc_proxy_out_rd_	host/commands/run_cvd/launch.cc	/^  SharedFD gnss_grpc_proxy_out_rd_;$/;"	m	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:SharedFD	file:
gnss_grpc_proxy_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::gnss_grpc_proxy_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
gnss_in_	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    cuttlefish::SharedFD gnss_in_;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:cuttlefish::SharedFD	file:
gnss_in_pipe_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::gnss_in_pipe_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
gnss_out_	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    cuttlefish::SharedFD gnss_out_;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:cuttlefish::SharedFD	file:
gnss_out_pipe_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::gnss_out_pipe_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
gnss_pipe_prefix	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::gnss_pipe_prefix() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
gpu_capture_binary	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::gpu_capture_binary() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
gpu_mode	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::gpu_mode() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
grabPartialWakeLock	guest/hals/ril/reference-libril/ril.cpp	/^grabPartialWakeLock() {$/;"	f	namespace:android	typeref:typename:void	file:
grp	common/libs/utils/users.cpp	/^  struct group grp{};$/;"	s	function:cuttlefish::__anonced26a190111::GroupIdFromName	file:
grp_p	common/libs/utils/users.cpp	/^  struct group* grp_p{};$/;"	s	function:cuttlefish::__anonced26a190111::GroupIdFromName	file:
grpc	host/commands/gnss_grpc_proxy/grpcpp.h	/^namespace grpc {$/;"	n
gsm	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoGsm     gsm;$/;"	m	union:__anon0bfbaecf6e08::__anon0bfbaecf6f0a	typeref:typename:RIL_CellInfoGsm
gsm	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoGsm_v12     gsm;$/;"	m	union:__anon0bfbaecf7008::__anon0bfbaecf710a	typeref:typename:RIL_CellInfoGsm_v12
gsm	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoGsm_v12     gsm;$/;"	m	union:__anon0bfbaecf7208::__anon0bfbaecf730a	typeref:typename:RIL_CellInfoGsm_v12
gsmMessage	guest/hals/ril/reference-libril/ril.h	/^        char**                gsmMessage;   \/* This is an array of pointers where pointers$/;"	m	union:__anon0bfbaecf1808::__anon0bfbaecf190a	typeref:typename:char **
gsm_ber	host/commands/modem_simulator/network_service.h	/^    int gsm_ber;   \/* bit error rate (0-7, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
gsm_rssi	host/commands/modem_simulator/network_service.h	/^    int gsm_rssi;  \/* Valid values are (0-31, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
gsm_umts_subscription_app_index	guest/hals/ril/reference-libril/ril.h	/^  int           gsm_umts_subscription_app_index; \/* value < RIL_CARD_MAX_APPS, -1 if none *\/$/;"	m	struct:__anon0bfbaecf3908	typeref:typename:int
gsm_umts_subscription_app_index	guest/hals/ril/reference-libril/ril.h	/^  int           gsm_umts_subscription_app_index; \/* value < RIL_CARD_MAX_APPS, -1 if none *\/$/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:int
guest_audit_security	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::guest_audit_security() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
guest_enforce_security	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::guest_enforce_security() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
guest_hal_socket_	host/libs/confui/host_server.h	/^  SharedFD guest_hal_socket_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:SharedFD
h	host/libs/confui/host_renderer.h	/^    std::uint32_t x, y, w, h;  \/\/ (x, y) is the top left$/;"	m	struct:cuttlefish::confui::ConfUiRenderer::Boundary	typeref:typename:std::uint32_t
h	host/libs/wayland/wayland_surface.h	/^    int32_t h;$/;"	m	struct:wayland::Surface::Region	typeref:typename:int32_t
h4_	guest/hals/bt/remote/remote_bluetooth.h	/^  test_vendor_lib::H4Packetizer h4_{fd_,$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:test_vendor_lib::H4Packetizer
h_	host/libs/confui/host_renderer.h	/^  int h_;$/;"	m	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:int
hal_cli_socket_	host/libs/confui/host_server.h	/^  SharedFD hal_cli_socket_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:SharedFD
hal_cmd_q_id_	host/libs/confui/host_server.h	/^  int hal_cmd_q_id_;         \/\/ Q id in input_multiplexer_$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:int
hal_input_fetcher_thread_	host/libs/confui/host_server.h	/^  std::thread hal_input_fetcher_thread_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:std::thread
hal_vsock_port_	host/libs/confui/host_server.h	/^  int hal_vsock_port_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:int
handle	guest/hals/camera/cached_stream_buffer.h	/^  native_handle_t* handle() const { return handle_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::ReleaseFence	typeref:typename:native_handle_t *
handleConnectionRequest	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientWSHandler::handleConnectionRequest(const Json::Value& message) {$/;"	f	class:cuttlefish::ClientWSHandler	typeref:typename:void
handleFinalResponse	guest/hals/ril/reference-ril/atchannel.c	/^static void handleFinalResponse(const char *line)$/;"	f	typeref:typename:void	file:
handleForward	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientWSHandler::handleForward(const Json::Value& message) {$/;"	f	class:cuttlefish::ClientWSHandler	typeref:typename:void
handleMessage	host/frontend/webrtc/adb_handler.cpp	/^void AdbHandler::handleMessage(const uint8_t *msg, size_t len) {$/;"	f	class:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:void
handleMessage	host/frontend/webrtc/bluetooth_handler.cpp	/^void BluetoothHandler::handleMessage(const uint8_t *msg, size_t len) {$/;"	f	class:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:void
handleMessage	host/frontend/webrtc_operator/client_handler.cpp	/^void ClientWSHandler::handleMessage(const std::string& type,$/;"	f	class:cuttlefish::ClientWSHandler	typeref:typename:void
handleMessage	host/frontend/webrtc_operator/device_handler.cpp	/^void DeviceHandler::handleMessage(const std::string& type,$/;"	f	class:cuttlefish::DeviceHandler	typeref:typename:void
handleStkCallSetupRequestFromSim	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::handleStkCallSetupRequestFromSim(int32_t serial, bool accept) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
handleStkCallSetupRequestFromSimResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::handleStkCallSetupRequestFromSimResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
handleUnsolicited	guest/hals/ril/reference-ril/atchannel.c	/^static void handleUnsolicited(const char *line)$/;"	f	typeref:typename:void	file:
handle_	guest/hals/camera/cached_stream_buffer.h	/^  native_handle_t* handle_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::ReleaseFence	typeref:typename:native_handle_t *
handler_factories_	host/libs/websocket/websocket_server.h	/^      handler_factories_ = {};$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::unordered_map<std::string,std::unique_ptr<WebSocketHandlerFactory>>
handlers_	host/frontend/webrtc_operator/client_handler.h	/^       handlers_;$/;"	m	class:cuttlefish::PollConnectionStore	typeref:typename:std::map<std::string,std::shared_ptr<PollConnectionHandler>>
handlers_	host/libs/websocket/websocket_server.h	/^  std::unordered_map<struct lws*, std::shared_ptr<WebSocketHandler>> handlers_ =$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::unordered_map<struct lws *,std::shared_ptr<WebSocketHandler>>
hangup	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::hangup(int32_t serial, int32_t gsmIndex) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
hangupConnectionResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::hangupConnectionResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
hangupForegroundResumeBackground	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::hangupForegroundResumeBackground(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
hangupForegroundResumeBackgroundResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::hangupForegroundResumeBackgroundResponse(int slotId, int responseType, int serial/;"	f	class:radio_1_6	typeref:typename:int
hangupWaitingOrBackground	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::hangupWaitingOrBackground(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
hangupWaitingOrBackgroundResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::hangupWaitingOrBackgroundResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
hardware	guest/hals/bt/remote/remote_bluetooth.cpp	/^namespace hardware {$/;"	n	namespace:android	file:
hardware	guest/hals/bt/remote/remote_bluetooth.h	/^namespace hardware {$/;"	n	namespace:android
hardware	guest/hals/camera/cached_stream_buffer.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/cached_stream_buffer.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android
hardware	guest/hals/camera/stream_buffer_cache.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/stream_buffer_cache.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android
hardware	guest/hals/camera/vsock_camera_device_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/vsock_camera_device_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android
hardware	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/vsock_camera_device_session_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android
hardware	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/vsock_camera_metadata.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android
hardware	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/vsock_camera_provider_2_7.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android
hardware	guest/hals/camera/vsock_camera_server.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android	file:
hardware	guest/hals/camera/vsock_camera_server.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android
hardware	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^namespace hardware {$/;"	n	namespace:android	file:
hardware	guest/hals/confirmationui/TrustyConfirmationUI.h	/^namespace hardware {$/;"	n	namespace:android
hardware	guest/hals/confirmationui/guest_session.cpp	/^namespace hardware {$/;"	n	namespace:android	file:
hardware	guest/hals/confirmationui/guest_session.h	/^namespace hardware {$/;"	n	namespace:android
hardware	guest/hals/confirmationui/include/TrustyConfirmationuiHal.h	/^namespace hardware {$/;"	n	namespace:android
hardware	guest/hals/health/health.cpp	/^namespace hardware {$/;"	n	namespace:android	file:
hardware	guest/hals/health/storage/Storage.cpp	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl::android	file:
hardware	guest/hals/health/storage/Storage.h	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl::android
hardware	guest/hals/keymint/remote/remote_keymint_device.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android	file:
hardware	guest/hals/keymint/remote/remote_keymint_device.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android
hardware	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android	file:
hardware	guest/hals/keymint/remote/remote_keymint_operation.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android
hardware	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android	file:
hardware	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android
hardware	guest/hals/keymint/remote/remote_secure_clock.cpp	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl::android	file:
hardware	guest/hals/keymint/remote/remote_secure_clock.h	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl::android
hardware	guest/hals/keymint/remote/remote_shared_secret.cpp	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl::android	file:
hardware	guest/hals/keymint/remote/remote_shared_secret.h	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl::android
hardwareConfigChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::hardwareConfigChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
hardware_	host/frontend/webrtc/lib/streamer.cpp	/^  std::map<std::string, std::string> hardware_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::map<std::string,std::string>	file:
hasRegistration	tests/hal/hal_implementation_test.cpp	/^  bool hasRegistration;$/;"	m	struct:AidlPackageCheck	typeref:typename:bool	file:
has_broute_ipv4	host/libs/allocd/alloc_utils.h	/^  bool has_broute_ipv4 = false;$/;"	m	struct:cuttlefish::EthernetNetworkConfig	typeref:typename:bool
has_broute_ipv6	host/libs/allocd/alloc_utils.h	/^  bool has_broute_ipv6 = false;$/;"	m	struct:cuttlefish::EthernetNetworkConfig	typeref:typename:bool
has_data	host/libs/confui/sign_utils.h	/^  struct has_data {$/;"	s	class:cuttlefish::confui::support::ByteBufferProxy
has_died_	guest/hals/bt/remote/remote_bluetooth.cpp	/^  bool has_died_;$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothDeathRecipient	typeref:typename:bool	file:
has_discrete_gpu	host/libs/graphics_detector/graphics_detector.h	/^  bool has_discrete_gpu = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
has_dnsmasq	host/libs/allocd/alloc_utils.h	/^  bool has_dnsmasq = false;$/;"	m	struct:cuttlefish::GatewayConfig	typeref:typename:bool
has_egl	host/libs/graphics_detector/graphics_detector.h	/^  bool has_egl = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
has_gateway	host/libs/allocd/alloc_utils.h	/^  bool has_gateway = false;$/;"	m	struct:cuttlefish::GatewayConfig	typeref:typename:bool
has_gl	host/libs/graphics_detector/graphics_detector.h	/^  bool has_gl = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
has_gles1	host/libs/graphics_detector/graphics_detector.h	/^  bool has_gles1 = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
has_gles2	host/libs/graphics_detector/graphics_detector.h	/^  bool has_gles2 = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
has_iptable	host/libs/allocd/alloc_utils.h	/^  bool has_iptable = false;$/;"	m	struct:cuttlefish::GatewayConfig	typeref:typename:bool
has_ipv4_	host/libs/allocd/resource.h	/^  bool has_ipv4_ = true;$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:bool
has_ipv6_	host/libs/allocd/resource.h	/^  bool has_ipv6_ = true;$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:bool
has_tap	host/libs/allocd/alloc_utils.h	/^  bool has_tap = false;$/;"	m	struct:cuttlefish::EthernetNetworkConfig	typeref:typename:bool
has_vulkan	host/libs/graphics_detector/graphics_detector.h	/^  bool has_vulkan = false;$/;"	m	struct:cuttlefish::GraphicsAvailability	typeref:typename:bool
have_saved_params_	host/commands/secure_env/tpm_keymaster_enforcement.h	/^  bool have_saved_params_ = false;$/;"	m	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:bool
hda_fn_nid	host/libs/audio_connector/shm_layout.h	/^  Le32 hda_fn_nid;$/;"	m	struct:cuttlefish::virtio_snd_info	typeref:typename:Le32
hda_reg_caps	host/libs/audio_connector/shm_layout.h	/^  Le32 hda_reg_caps;$/;"	m	struct:cuttlefish::virtio_snd_jack_info	typeref:typename:Le32
hda_reg_defconf	host/libs/audio_connector/shm_layout.h	/^  Le32 hda_reg_defconf;$/;"	m	struct:cuttlefish::virtio_snd_jack_info	typeref:typename:Le32
hdr	host/libs/audio_connector/shm_layout.h	/^  struct virtio_snd_hdr hdr;$/;"	m	struct:cuttlefish::virtio_snd_pcm_hdr	typeref:struct:virtio_snd_hdr
hdr	host/libs/audio_connector/shm_layout.h	/^  struct virtio_snd_hdr hdr;$/;"	m	struct:cuttlefish::virtio_snd_query_info	typeref:struct:virtio_snd_hdr
hdr	host/libs/audio_connector/shm_layout.h	/^  struct virtio_snd_info hdr;$/;"	m	struct:cuttlefish::virtio_snd_chmap_info	typeref:struct:virtio_snd_info
hdr	host/libs/audio_connector/shm_layout.h	/^  struct virtio_snd_info hdr;$/;"	m	struct:cuttlefish::virtio_snd_jack_info	typeref:struct:virtio_snd_info
hdr	host/libs/audio_connector/shm_layout.h	/^  struct virtio_snd_info hdr;$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:struct:virtio_snd_info
hdr	host/libs/audio_connector/shm_layout.h	/^  struct virtio_snd_pcm_hdr hdr;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:struct:virtio_snd_pcm_hdr
head	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^static RilSapSocket::RilSapSocketList *head = NULL;$/;"	v	typeref:typename:RilSapSocket::RilSapSocketList *	file:
header	common/libs/net/netlink_request_test.cpp	/^  nlmsghdr* header = static_cast<nlmsghdr*>(arg.RequestData());$/;"	v	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:nlmsghdr *
header	host/frontend/webrtc_operator/assets/client.html	/^        <div id='header'>$/;"	I
header	host/libs/image_aggregator/image_aggregator.cc	/^  GptHeader header;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptBeginning	typeref:typename:GptHeader	file:
header_	common/libs/net/netlink_request.h	/^  nlmsghdr* header_;$/;"	m	class:cuttlefish::NetlinkRequest	typeref:typename:nlmsghdr *
header_	host/libs/audio_connector/buffers.h	/^  const virtio_snd_pcm_xfer header_;$/;"	m	class:cuttlefish::ShmBuffer	typeref:typename:const virtio_snd_pcm_xfer
header_crc32	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint32_t header_crc32;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint32_t	file:
header_padding	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t header_padding[SECTOR_SIZE - sizeof(GptHeader)];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptBeginning	typeref:typename:std::uint8_t[]	file:
header_size	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint32_t header_size;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint32_t	file:
headers_	host/frontend/webrtc/lib/ws_connection.cpp	/^  const std::vector<std::pair<std::string, std::string>> headers_;$/;"	m	class:WsConnectionImpl	typeref:typename:const std::vector<std::pair<std::string,std::string>>	file:
headers_	host/libs/websocket/websocket_server.h	/^  struct lws_protocol_vhost_options headers_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:struct:lws_protocol_vhost_options
health	guest/hals/health/health.cpp	/^namespace health {$/;"	n	namespace:android::hardware	file:
health	guest/hals/health/storage/Storage.cpp	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl::android::hardware	file:
health	guest/hals/health/storage/Storage.h	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl::android::hardware
health	host/commands/health/health.cpp	/^int health() {$/;"	f	typeref:typename:int
height	common/libs/device_config/device_config.proto	/^    int32 height = 2;$/;"	f	message:cuttlefish.DeviceConfig.DisplayConfig	typeref:typename:int32
height	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^int CvdVideoFrameBuffer::height() const { return height_; }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:int
height	host/frontend/webrtc/lib/streamer.cpp	/^  int height;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::DisplayDescriptor	typeref:typename:int	file:
height	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  int height() const override { return frame_buffer_->height(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:int	file:
height	host/libs/config/cuttlefish_config.h	/^    int height;$/;"	m	struct:cuttlefish::CuttlefishConfig::DisplayConfig	typeref:typename:int
height_	guest/hals/camera/vsock_camera_metadata.h	/^  int32_t height_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata	typeref:typename:int32_t
height_	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  const int height_;$/;"	m	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:const int
height_	host/frontend/webrtc/lib/video_track_source_impl.h	/^  int height_;$/;"	m	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:int
help_	common/libs/utils/flag_parser.h	/^  std::optional<std::string> help_;$/;"	m	class:cuttlefish::Flag	typeref:typename:std::optional<std::string>
help_	host/commands/start/flag_forwarder.cc	/^  std::string help_;$/;"	m	class:DynamicFlag	typeref:typename:std::string	file:
helper_	host/libs/config/adb/launch.cpp	/^  const AdbHelper& helper_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::AdbConnector	typeref:typename:const AdbHelper &	file:
helper_	host/libs/config/adb/launch.cpp	/^  const AdbHelper& helper_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:const AdbHelper &	file:
hexCharToInt	guest/hals/ril/reference-libril/ril_service.cpp	/^extern "C" uint8_t hexCharToInt(uint8_t c) {$/;"	f	typeref:typename:uint8_t
hidl2MsgString	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^inline MsgString hidl2MsgString(const hidl_string& s) {$/;"	f	namespace:android::hardware::confirmationui::V1_0::implementation::__anon2184467c0111	typeref:typename:MsgString
hidl2MsgVector	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^inline MsgVector<teeui::UIOption> hidl2MsgVector(const hidl_vec<UIOption>& v) {$/;"	f	namespace:android::hardware::confirmationui::V1_0::implementation::__anon2184467c0111	typeref:typename:MsgVector<teeui::UIOption>
hidl2MsgVector	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^template <typename T> inline MsgVector<T> hidl2MsgVector(const hidl_vec<T>& v) {$/;"	f	namespace:android::hardware::confirmationui::V1_0::implementation::__anon2184467c0111	typeref:typename:MsgVector<T>
hidl_vec2sized_buffer	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^SizedBuffer hidl_vec2sized_buffer(const hidl_vec<uint8_t>& vec) {$/;"	f	namespace:gatekeeper	typeref:typename:SizedBuffer
hinge_angle_value	host/libs/config/custom_actions.h	/^  std::optional<int> hinge_angle_value;$/;"	m	struct:cuttlefish::DeviceState	typeref:typename:std::optional<int>
hinge_angle_value	shared/config/config_foldable.json	/^                                        "hinge_angle_value": 0$/;"	n	object:custom_actions.0.device_states.0
hinge_angle_value	shared/config/config_foldable.json	/^                                        "hinge_angle_value": 180$/;"	n	object:custom_actions.1.device_states.0
hlen	common/libs/utils/network.cpp	/^  std::uint8_t hlen;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t	file:
hmac256	host/libs/confui/sign.cc	/^std::optional<support::hmac_t> HMacImplementation::hmac256($/;"	f	class:cuttlefish::confui::HMacImplementation	typeref:typename:std::optional<support::hmac_t>
hmac_t	host/libs/confui/sign_utils.h	/^using hmac_t = auth_token_key_t;$/;"	t	namespace:cuttlefish::confui::support	typeref:typename:auth_token_key_t
hops	common/libs/utils/network.cpp	/^  std::uint8_t hops;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t	file:
host_cmd_fetcher_thread_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::thread host_cmd_fetcher_thread_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::thread
host_fd_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    cuttlefish::SharedFD host_fd_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:cuttlefish::SharedFD
host_fd_	guest/hals/confirmationui/guest_session.h	/^    cuttlefish::SharedFD host_fd_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:cuttlefish::SharedFD
host_fetcher	fetcher.mk	/^host_fetcher: $(fetcher_bin)$/;"	t
host_id	host/commands/modem_simulator/cf_device_config.cpp	/^int DeviceConfig::host_id() {$/;"	f	class:cuttlefish::modem::DeviceConfig	typeref:typename:int
host_mode_ctrl_	host/libs/confui/host_server.h	/^  HostModeCtrl& host_mode_ctrl_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:HostModeCtrl &
host_mode_ctrl_	host/libs/confui/session.h	/^  HostModeCtrl& host_mode_ctrl_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:HostModeCtrl &
host_mode_ctrl_	host/libs/screen_connector/screen_connector.h	/^  HostModeCtrl& host_mode_ctrl_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:HostModeCtrl &
host_mode_ctrl_	host/libs/screen_connector/screen_connector_multiplexer.h	/^  HostModeCtrl& host_mode_ctrl_;$/;"	m	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:HostModeCtrl &
host_socket_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD host_socket_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:SharedFD	file:
host_tools_version	host/libs/config/cuttlefish_config.cpp	/^std::map<std::string, uint32_t> CuttlefishConfig::host_tools_version() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::map<std::string,uint32_t>
host_vsock_port_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    int host_vsock_port_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:int
hostname	common/libs/utils/network.h	/^  std::string hostname;$/;"	m	struct:cuttlefish::DnsmasqDhcp4Lease	typeref:typename:std::string
hosttar	host_package.mk	/^hosttar: $(cvd_host_packages)$/;"	t
hton	host/libs/confui/sign_utils.h	/^  inline static IntType hton(const IntType& value) { return value; }$/;"	f	struct:cuttlefish::confui::support::choose_hton	typeref:typename:IntType
hton	host/libs/confui/sign_utils.h	/^  inline static IntType hton(const IntType& value) {$/;"	f	struct:cuttlefish::confui::support::choose_hton	typeref:typename:IntType
hton	host/libs/confui/sign_utils.h	/^inline IntType hton(const IntType& value) {$/;"	f	namespace:cuttlefish::confui::support	typeref:typename:IntType
httpUrl	host/frontend/webrtc_operator/assets/js/server_connector.js	/^function httpUrl(path) {$/;"	f
http_code	host/commands/fetcher/curl_wrapper.h	/^  long http_code;$/;"	m	struct:cuttlefish::CurlResponse	typeref:typename:long
http_headers	host/frontend/webrtc/lib/streamer.h	/^    std::vector<std::pair<std::string, std::string>> http_headers;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig::__anonbc3851b60108	typeref:typename:std::vector<std::pair<std::string,std::string>>
htype	common/libs/utils/network.cpp	/^  std::uint8_t htype;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t	file:
hvc_num_	host/libs/vm_manager/crosvm_builder.h	/^  int hvc_num_;$/;"	m	class:cuttlefish::CrosvmBuilder	typeref:typename:int
hysteresisDb	guest/hals/ril/reference-libril/ril.h	/^    int32_t hysteresisDb;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:int32_t
hysteresisDlKbps	guest/hals/ril/reference-libril/ril.h	/^    int32_t hysteresisDlKbps;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t
hysteresisMs	guest/hals/ril/reference-libril/ril.h	/^    int32_t hysteresisMs;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:int32_t
hysteresisMs	guest/hals/ril/reference-libril/ril.h	/^    int32_t hysteresisMs;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t
hysteresisUlKbps	guest/hals/ril/reference-libril/ril.h	/^    int32_t hysteresisUlKbps;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t
iHeight	host/libs/graphics_detector/include/EGL/eglext.h	/^    EGLint iHeight;$/;"	m	struct:EGLClientPixmapHI	typeref:typename:EGLint
iStride	host/libs/graphics_detector/include/EGL/eglext.h	/^    EGLint iStride;$/;"	m	struct:EGLClientPixmapHI	typeref:typename:EGLint
iWidth	host/libs/graphics_detector/include/EGL/eglext.h	/^    EGLint iWidth;$/;"	m	struct:EGLClientPixmapHI	typeref:typename:EGLint
iccCloseLogicalChannel	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::iccCloseLogicalChannel(int32_t serial, int32_t channelId) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
iccCloseLogicalChannelResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::iccCloseLogicalChannelResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
iccIOForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::iccIOForApp(int32_t serial, const IccIo& iccIo) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
iccIOForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::iccIOForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
iccOpenLogicalChannel	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::iccOpenLogicalChannel(int32_t serial, const hidl_string& aid, int32_/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
iccOpenLogicalChannelResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::iccOpenLogicalChannelResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
iccTransmitApduBasicChannel	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::iccTransmitApduBasicChannel(int32_t serial, const SimApdu& message) /;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
iccTransmitApduBasicChannelResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::iccTransmitApduBasicChannelResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
iccTransmitApduLogicalChannel	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::iccTransmitApduLogicalChannel(int32_t serial, const SimApdu& message/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
iccTransmitApduLogicalChannelResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::iccTransmitApduLogicalChannelResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
iccid	guest/hals/ril/reference-libril/ril.h	/^    char *iccid;$/;"	m	struct:__anon0bfbaecf3b08	typeref:typename:char *
iccid	guest/hals/ril/reference-libril/ril.h	/^    char* iccid;$/;"	m	struct:__anon0bfbaecfb908	typeref:typename:char *
iceServers	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  let pc_config = {iceServers: []};$/;"	p	class:Connect.pc_config
iceServers	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  let pc_config = {iceServers: []};$/;"	p	class:createPeerConnection.pc_config
icon_name	host/example_custom_actions/custom_action_config.json	/^				"icon_name":"notifications_paused"$/;"	s	object:1.buttons.1
icon_name	host/example_custom_actions/custom_action_config.json	/^				"icon_name":"settings"$/;"	s	object:1.buttons.0
icon_name	host/example_custom_actions/custom_action_config.json	/^			"icon_name":"language"$/;"	s	object:0.button
icon_name	host/frontend/webrtc/lib/streamer.cpp	/^  std::string icon_name;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::ControlPanelButtonDescriptor	typeref:typename:std::string	file:
icon_name	host/libs/config/custom_actions.h	/^  std::string icon_name;$/;"	m	struct:cuttlefish::ControlPanelButton	typeref:typename:std::string
icon_name	shared/config/config_foldable.json	/^                                "icon_name":"smartphone"$/;"	s	object:custom_actions.0.button
icon_name	shared/config/config_foldable.json	/^                                "icon_name":"tablet"$/;"	s	object:custom_actions.1.button
id	guest/hals/ril/reference-libril/RilSocket.h	/^        RIL_SOCKET_ID id;$/;"	m	class:RilSocket	typeref:typename:RIL_SOCKET_ID
id	host/commands/fetcher/build_api.h	/^  std::string id;$/;"	m	struct:cuttlefish::DeviceBuild	typeref:typename:std::string
id	host/commands/fetcher/build_api.h	/^  std::string id;$/;"	m	struct:cuttlefish::DirectoryBuild	typeref:typename:std::string
id	host/frontend/webrtc/connection_observer.cpp	/^  int32_t id;$/;"	m	struct:cuttlefish::multitouch_slot	typeref:typename:int32_t	file:
id2name_	host/libs/confui/host_utils.h	/^  std::map<std::thread::id, std::string> id2name_;$/;"	m	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:std::map<std::thread::id,std::string>
id_	guest/hals/camera/vsock_camera_device_3_4.h	/^  std::string id_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:std::string
id_	host/commands/modem_simulator/nvram_config.h	/^    std::string id_;$/;"	m	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:std::string
id_	host/libs/config/cuttlefish_config.h	/^    std::string id_;$/;"	m	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
id_	host/libs/config/cuttlefish_config.h	/^    std::string id_;$/;"	m	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:std::string
identity_	common/libs/fs/shared_fd.h	/^  std::string identity_;$/;"	m	class:cuttlefish::FileInstance	typeref:typename:std::string
idle_mode_time_ms	guest/hals/ril/reference-libril/ril.h	/^  uint32_t idle_mode_time_ms;$/;"	m	struct:__anon0bfbaecf9f08	typeref:typename:uint32_t
if_index_	common/libs/net/network_interface.h	/^  size_t if_index_ = 0;$/;"	m	class:cuttlefish::NetworkInterface	typeref:typename:size_t
ifa_list	common/libs/device_config/host_device_config.cpp	/^    struct ifaddrs *ifa_list{}, *ifa{};$/;"	s	function:cuttlefish::__anonf277137d0111::NetConfig::ParseInterfaceAttributes	file:
iface_id_	host/libs/allocd/resource.h	/^  uint16_t iface_id_;$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:uint16_t
iface_id_	host/libs/allocd/resource.h	/^  uint16_t iface_id_;$/;"	m	class:cuttlefish::MobileIface	typeref:typename:uint16_t
ifname	guest/hals/ril/reference-libril/ril.h	/^    char *          ifname;     \/* The network interface name *\/$/;"	m	struct:__anon0bfbaecf1308	typeref:typename:char *
ifname	guest/hals/ril/reference-libril/ril.h	/^    char *          ifname;     \/* The network interface name *\/$/;"	m	struct:__anon0bfbaecf1408	typeref:typename:char *
ifname	guest/hals/ril/reference-libril/ril.h	/^    char *          ifname;     \/* The network interface name *\/$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:char *
ifname	guest/hals/ril/reference-libril/ril.h	/^    char *          ifname;     \/* The network interface name *\/$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:char *
imageCapture	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  get imageCapture() {$/;"	G	class:DeviceConnection
imageHeight	host/frontend/webrtc_operator/assets/js/app.js	/^        imageHeight: this.#deviceConnection.cameraHeight$/;"	p	class:DeviceControlApp.takePhoto.photoSettings
imageWidth	host/frontend/webrtc_operator/assets/js/app.js	/^        imageWidth: this.#deviceConnection.cameraWidth,$/;"	p	class:DeviceControlApp.takePhoto.photoSettings
image_file_path	host/libs/image_aggregator/image_aggregator.h	/^  std::string image_file_path;$/;"	m	struct:cuttlefish::ImagePartition	typeref:typename:std::string
image_file_paths	host/libs/image_aggregator/image_aggregator.h	/^  std::vector<std::string> image_file_paths;$/;"	m	struct:cuttlefish::MultipleImagePartition	typeref:typename:std::vector<std::string>
impl	common/libs/confui/packet.h	/^namespace impl {$/;"	n	namespace:cuttlefish::confui::packet
impl_	guest/hals/keymaster/remote/remote_keymaster4_device.h	/^    std::unique_ptr<::keymaster::RemoteKeymaster> impl_;$/;"	m	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:std::unique_ptr<::keymaster::RemoteKeymaster>
impl_	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^  keymaster::RemoteKeymaster& impl_;$/;"	m	class:aidl::android::hardware::security::keymint::RemoteRemotelyProvisionedComponent	typeref:typename:keymaster::RemoteKeymaster &
impl_	host/commands/secure_env/in_process_tpm.h	/^ std::unique_ptr<Impl> impl_;$/;"	m	class:cuttlefish::InProcessTpm	typeref:typename:std::unique_ptr<Impl>
impl_	host/frontend/webrtc/lib/local_recorder.cpp	/^  LocalRecorder::Impl& impl_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:LocalRecorder::Impl &	file:
impl_	host/frontend/webrtc/lib/local_recorder.h	/^  std::unique_ptr<Impl> impl_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder	typeref:typename:std::unique_ptr<Impl>
impl_	host/frontend/webrtc/lib/streamer.h	/^  std::shared_ptr<Impl> impl_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer	typeref:typename:std::shared_ptr<Impl>
implementation	guest/hals/camera/cached_stream_buffer.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4	file:
implementation	guest/hals/camera/cached_stream_buffer.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4
implementation	guest/hals/camera/stream_buffer_cache.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4	file:
implementation	guest/hals/camera/stream_buffer_cache.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4
implementation	guest/hals/camera/vsock_camera_device_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4	file:
implementation	guest/hals/camera/vsock_camera_device_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4
implementation	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4	file:
implementation	guest/hals/camera/vsock_camera_device_session_3_4.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4
implementation	guest/hals/camera/vsock_camera_metadata.cpp	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4	file:
implementation	guest/hals/camera/vsock_camera_metadata.h	/^namespace android::hardware::camera::device::V3_4::implementation {$/;"	n	namespace:android::hardware::camera::device::V3_4
implementation	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider::V2_7	file:
implementation	guest/hals/camera/vsock_camera_provider_2_7.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider::V2_7
implementation	guest/hals/camera/vsock_camera_server.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider::V2_7	file:
implementation	guest/hals/camera/vsock_camera_server.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera::provider::V2_7
implementation	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^namespace implementation {$/;"	n	namespace:android::hardware::confirmationui::V1_0	file:
implementation	guest/hals/confirmationui/TrustyConfirmationUI.h	/^namespace implementation {$/;"	n	namespace:android::hardware::confirmationui::V1_0
implementation	guest/hals/confirmationui/guest_session.cpp	/^namespace implementation {$/;"	n	namespace:android::hardware::confirmationui::V1_0	file:
implementation	guest/hals/confirmationui/guest_session.h	/^namespace implementation {$/;"	n	namespace:android::hardware::confirmationui::V1_0
implementation	guest/hals/confirmationui/include/TrustyConfirmationuiHal.h	/^namespace implementation {$/;"	n	namespace:android::hardware::confirmationui::V1_0
implementation	guest/hals/health/health.cpp	/^namespace implementation {$/;"	n	namespace:android::hardware::health::V2_1	file:
importFence	guest/hals/camera/cached_stream_buffer.cpp	/^void CachedStreamBuffer::importFence(const native_handle_t* fence_handle) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:void
importKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::importKey(const hidl_vec<KeyParameter>& params,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
importKey	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::importKey($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
importWrappedKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::importWrappedKey($/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
importWrappedKey	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::importWrappedKey($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
imsNetworkStateChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::imsNetworkStateChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
imsSms	guest/hals/ril/reference-libril/ril_service.cpp	/^    RIL_IMS_SMS_Message imsSms;$/;"	m	struct:ImsCdmaSms	typeref:typename:RIL_IMS_SMS_Message	file:
ims_subscription_app_index	guest/hals/ril/reference-libril/ril.h	/^  int           ims_subscription_app_index;      \/* value < RIL_CARD_MAX_APPS, -1 if none *\/$/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:int
in_buffer_	host/libs/websocket/websocket_handler.h	/^  std::string in_buffer_ = {};$/;"	m	class:cuttlefish::DynHandler	typeref:typename:std::string
in_emergency_mode_	host/commands/modem_simulator/call_service.h	/^  bool in_emergency_mode_;$/;"	m	class:cuttlefish::CallService	typeref:typename:bool
in_group_	common/libs/utils/subprocess.h	/^  bool in_group_;$/;"	m	class:cuttlefish::SubprocessOptions	typeref:typename:bool
incoming_msg_queue_	guest/hals/confirmationui/guest_session.h	/^    Queue incoming_msg_queue_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:Queue
incomplete_command	host/commands/modem_simulator/channel_monitor.h	/^  std::string incomplete_command;$/;"	m	class:cuttlefish::Client	typeref:typename:std::string
incrementalResults	guest/hals/ril/reference-libril/ril.h	/^    int32_t incrementalResults;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:int32_t
incrementalResultsPeriodicity	guest/hals/ril/reference-libril/ril.h	/^    int32_t incrementalResultsPeriodicity;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:int32_t
index	guest/hals/ril/reference-libril/ril.h	/^    int             index;      \/* Connection Index for use with, eg, AT+CHLD *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:int
index	guest/hals/ril/reference-libril/ril.h	/^    int     index;              \/* CUG index. See 27.007 7.17. *\/$/;"	m	struct:__anon0bfbaecf3108	typeref:typename:int
index	guest/hals/ril/reference-libril/ril_event.h	/^    int index;$/;"	m	struct:ril_event	typeref:typename:int
index_	host/commands/secure_env/fragile_tpm_storage.h	/^  Json::Value index_;$/;"	m	class:cuttlefish::FragileTpmStorage	typeref:typename:Json::Value
index_	host/commands/secure_env/insecure_fallback_storage.h	/^  Json::Value index_;$/;"	m	class:cuttlefish::InsecureFallbackStorage	typeref:typename:Json::Value
index_file_	host/commands/secure_env/fragile_tpm_storage.h	/^  std::string index_file_;$/;"	m	class:cuttlefish::FragileTpmStorage	typeref:typename:std::string
index_file_	host/commands/secure_env/insecure_fallback_storage.h	/^  std::string index_file_;$/;"	m	class:cuttlefish::InsecureFallbackStorage	typeref:typename:std::string
indicateRingbackToneInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::indicateRingbackToneInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
infoRec	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_InformationRecord infoRec[RIL_CDMA_MAX_NUMBER_OF_INFO_RECS];$/;"	m	struct:__anon0bfbaecf8b08	typeref:typename:RIL_CDMA_InformationRecord[]
info_reply	host/libs/audio_connector/commands.h	/^  R* info_reply() { return info_reply_; }$/;"	f	class:cuttlefish::InfoCommand	typeref:typename:R *
info_reply_	host/libs/audio_connector/commands.h	/^  R* info_reply_;$/;"	m	class:cuttlefish::InfoCommand	typeref:typename:R *
inherited_fds_	common/libs/utils/subprocess.h	/^  std::map<SharedFD, int> inherited_fds_{};$/;"	m	class:cuttlefish::Command	typeref:typename:std::map<SharedFD,int>
init	build/cvd-host-package.go	/^func init() {$/;"	f	package:cuttlefish
init	tools/create_base_image.go	/^func init() {$/;"	f	package:main
initSapSocket	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::initSapSocket(const char *socketName,$/;"	f	class:RilSapSocket	typeref:typename:void
init_adb	host/frontend/webrtc_operator/assets/js/adb.js	/^function init_adb(devConn, ccb = connectedCb, dcb = disconnectedCb) {$/;"	f
init_list	guest/hals/ril/reference-libril/ril_event.cpp	/^static void init_list(struct ril_event * list)$/;"	f	typeref:typename:void	file:
initialize	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::initialize($/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
initializeAdb	host/frontend/webrtc_operator/assets/js/app.js	/^  #initializeAdb() {$/;"	m	class:DeviceControlApp
initializeCallback	guest/hals/ril/reference-ril/reference-ril.c	/^static void initializeCallback(void *param __unused)$/;"	f	typeref:typename:void	file:
initialize_1_1	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::initialize_1_1($/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
initialize_impl	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::initialize_impl($/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
initramfs_path_	host/libs/config/data_image.cpp	/^  std::string initramfs_path_;$/;"	m	class:cuttlefish::InitializeEspImageImpl	typeref:typename:std::string	file:
injectAuthToken	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline hidl_vec<KeyParameter> injectAuthToken(const hidl_vec<KeyParameter>& keyParamsBase,$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hidl_vec<KeyParameter>
inner_	host/frontend/webrtc/lib/vp8only_encoder_factory.h	/^  std::unique_ptr<webrtc::VideoEncoderFactory> inner_;$/;"	m	class:cuttlefish::webrtc_streaming::VP8OnlyEncoderFactory	typeref:typename:std::unique_ptr<webrtc::VideoEncoderFactory>
inner_curl_	host/commands/fetcher/curl_wrapper.cc	/^  CurlWrapper& inner_curl_;$/;"	m	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:CurlWrapper &	file:
inputChannel	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #inputChannel;$/;"	M	class:DeviceConnection
input_	common/libs/security/gatekeeper_channel.h	/^  SharedFD input_;$/;"	m	class:cuttlefish::GatekeeperChannel	typeref:typename:SharedFD
input_	common/libs/security/keymaster_channel.h	/^  SharedFD input_;$/;"	m	class:cuttlefish::KeymasterChannel	typeref:typename:SharedFD
input_channel_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::scoped_refptr<webrtc::DataChannelInterface> input_channel_;$/;"	m	class:cuttlefish::webrtc_streaming::InputChannelHandler	typeref:typename:rtc::scoped_refptr<webrtc::DataChannelInterface>	file:
input_events	guest/commands/vsoc_input_service/vsoc_input_service.h	/^namespace input_events {$/;"	n	namespace:cuttlefish
input_handler_	host/frontend/webrtc/lib/client_handler.h	/^  std::unique_ptr<InputChannelHandler> input_handler_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::unique_ptr<InputChannelHandler>
input_multiplexer_	host/libs/confui/host_server.h	/^  Multiplexer input_multiplexer_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:Multiplexer
input_socket_path_	host/libs/confui/host_server.h	/^  std::string input_socket_path_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:std::string
input_sockets_	host/frontend/webrtc/connection_observer.cpp	/^  cuttlefish::InputSockets& input_sockets_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:cuttlefish::InputSockets &	file:
input_sockets_	host/frontend/webrtc/connection_observer.h	/^  InputSockets& input_sockets_;$/;"	m	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:InputSockets &
insecure_storage_	host/commands/secure_env/tpm_gatekeeper.h	/^  GatekeeperStorage& insecure_storage_;$/;"	m	class:cuttlefish::TpmGatekeeper	typeref:typename:GatekeeperStorage &
instance_	host/commands/assemble_cvd/disk_flags.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::InitializeAccessKregistryImage	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::BluetoothConnector	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::ConfigServer	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::GnssGrpcProxyServer	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::KernelLogMonitor	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::LogcatReceiver	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::OpenWrt	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::RootCanal	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::SecureEnvironment	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::TombstoneReceiver	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::VehicleHalServer	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::WmediumdServer	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch_modem.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch_streamer.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/launch_streamer.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/main.cc	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anonadab6e0c0111::CuttlefishEnvironment	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/server_loop.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/run_cvd/validate.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anon8d12954e0111::ValidateTapDevices	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/commands/secure_env/tpm_serialize.h	/^  Type* instance_;$/;"	m	class:cuttlefish::TpmSerializable	typeref:typename:Type *
instance_	host/libs/config/adb/launch.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::AdbHelper	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_	host/libs/config/adb/launch.cpp	/^  const CuttlefishConfig::InstanceSpecific& instance_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:const CuttlefishConfig::InstanceSpecific &	file:
instance_dir	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::instance_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
instance_dirs	host/libs/config/cuttlefish_config.cpp	/^std::vector<std::string> CuttlefishConfig::instance_dirs() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::vector<std::string>
instance_internal_dir	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::instance_internal_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
instance_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::instance_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
instruction	guest/hals/ril/reference-libril/ril.h	/^    int instruction;$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:int
internal	host/libs/wayland/wayland_server.cpp	/^namespace internal {$/;"	n	namespace:wayland	file:
internal	host/libs/wayland/wayland_server.h	/^namespace internal {$/;"	n	namespace:wayland
internalRequestTimedCallback	guest/hals/ril/reference-libril/ril.cpp	/^internalRequestTimedCallback (RIL_TimedCallback callback, void *param,$/;"	f	namespace:android	typeref:typename:UserCallbackInfo *	file:
interval	guest/hals/ril/reference-libril/ril.h	/^    int32_t interval;                                               \/\/ Time interval in second/;"	m	struct:__anon0bfbaecfad08	typeref:typename:int32_t
interval	guest/hals/ril/reference-libril/ril.h	/^    int32_t interval;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:int32_t
invalid_linux_version	host/libs/vm_manager/host_configuration.cpp	/^constexpr std::pair<int,int> invalid_linux_version = std::pair<int,int>();$/;"	v	namespace:cuttlefish::vm_manager::__anon1edaaabd0111	typeref:typename:std::pair<int,int>
io_xfer	host/libs/audio_connector/shm_layout.h	/^  virtio_snd_pcm_xfer io_xfer;$/;"	m	struct:cuttlefish::IoTransferMsg	typeref:typename:virtio_snd_pcm_xfer
ip	common/libs/utils/network.cpp	/^  iphdr ip;$/;"	m	struct:cuttlefish::CompleteReleaseFrame	typeref:typename:iphdr	file:
ip_address	common/libs/utils/network.h	/^  std::uint8_t ip_address[4];$/;"	m	struct:cuttlefish::DnsmasqDhcp4Lease	typeref:typename:std::uint8_t[4]
ip_address_	common/libs/net/network_interface.h	/^  std::string ip_address_;$/;"	m	class:cuttlefish::NetworkInterface	typeref:typename:std::string
ip_checksum	common/libs/utils/network.cpp	/^static std::uint16_t ip_checksum(std::uint16_t *buf, std::size_t size) {$/;"	f	namespace:cuttlefish	typeref:typename:std::uint16_t	file:
ipaddr	common/libs/device_config/device_config.proto	/^    string ipaddr = 1;$/;"	f	message:cuttlefish.DeviceConfig.RILConfig	typeref:typename:string
ipaddr_	host/libs/allocd/resource.h	/^  std::string ipaddr_;$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:std::string
ipaddr_	host/libs/allocd/resource.h	/^  std::string ipaddr_;$/;"	m	class:cuttlefish::MobileIface	typeref:typename:std::string
is3gpp2	guest/hals/ril/reference-ril/reference-ril.c	/^static int is3gpp2(int radioTech) {$/;"	f	typeref:typename:int	file:
isAospAidlInterface	tests/hal/hal_implementation_test.cpp	/^static bool isAospAidlInterface(const std::string& name) {$/;"	f	typeref:typename:bool	file:
isAospHidlInterface	tests/hal/hal_implementation_test.cpp	/^static bool isAospHidlInterface(const FQName& name) {$/;"	f	typeref:typename:bool	file:
isBlob	guest/hals/camera/vsock_frame_provider.cpp	/^bool VsockFrameProvider::isBlob(const std::vector<char>& blob) {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
isCallActive	host/commands/modem_simulator/call_service.h	/^    bool isCallActive() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
isCallAlerting	host/commands/modem_simulator/call_service.h	/^    bool isCallAlerting() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
isCallBackground	host/commands/modem_simulator/call_service.h	/^    bool isCallBackground() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
isCallDialing	host/commands/modem_simulator/call_service.h	/^    bool isCallDialing() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
isCallIncoming	host/commands/modem_simulator/call_service.h	/^    bool isCallIncoming() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
isCallWaiting	host/commands/modem_simulator/call_service.h	/^    bool isCallWaiting() {$/;"	f	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
isCancelled	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public boolean isCancelled() {$/;"	m	class:GceFuture
isConcurrentStreamCombinationSupported	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::isConcurrentStreamCombinationSupported($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
isConcurrentStreamCombinationSupported_2_7	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::isConcurrentStreamCombinationSupported_2_7($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
isEnabled	guest/hals/ril/reference-libril/ril.h	/^    bool isEnabled;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:bool
isFinalResponse	guest/hals/ril/reference-ril/atchannel.c	/^static int isFinalResponse(const char *line)$/;"	f	typeref:typename:int	file:
isFinalResponseError	guest/hals/ril/reference-ril/atchannel.c	/^static int isFinalResponseError(const char *line)$/;"	f	typeref:typename:int	file:
isFinalResponseSuccess	guest/hals/ril/reference-ril/atchannel.c	/^static int isFinalResponseSuccess(const char *line)$/;"	f	typeref:typename:int	file:
isGnssRawMeasurement	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    bool isGnssRawMeasurement(const std::string& inputStr) {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:bool	file:
isHidlPackageConsidered	tests/hal/hal_implementation_test.cpp	/^static bool isHidlPackageConsidered(const FQName& name) {$/;"	f	typeref:typename:bool	file:
isInEmulator	guest/hals/ril/reference-ril/misc.c	/^bool isInEmulator(void) {$/;"	f	typeref:typename:bool
isInternetLingeringSupported	guest/hals/ril/reference-libril/ril.h	/^    int isInternetLingeringSupported;$/;"	m	struct:__anon0bfbaecfbc08	typeref:typename:int
isMT	guest/hals/ril/reference-libril/ril.h	/^    char            isMT;       \/* nonzero if call is mobile terminated *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char
isMpty	guest/hals/ril/reference-libril/ril.h	/^    char            isMpty;     \/* nonzero if is mpty call *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char
isMultimode	guest/hals/ril/reference-ril/reference-ril.c	/^    int isMultimode;$/;"	m	struct:__anon70d7df6f0108	typeref:typename:int	file:
isNMEA	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    bool isNMEA(const std::string& inputStr) {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:bool	file:
isNrDualConnectivityEnabled	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::isNrDualConnectivityEnabled(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
isNrDualConnectivityEnabled	guest/hals/ril/reference-ril/reference-ril.c	/^static bool isNrDualConnectivityEnabled = true;$/;"	v	typeref:typename:bool	file:
isNrDualConnectivityEnabledResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::isNrDualConnectivityEnabledResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
isPresent	guest/hals/ril/reference-libril/ril.h	/^  char isPresent;    \/* non-zero if signal information record is present *\/$/;"	m	struct:__anon0bfbaecf1008	typeref:typename:char
isRadioOff	host/commands/modem_simulator/network_service.h	/^  bool isRadioOff() const { return radio_state_ == RADIO_STATE_OFF; }$/;"	f	class:cuttlefish::NetworkService	typeref:typename:bool
isRadioOn	guest/hals/ril/reference-ril/reference-ril.c	/^static int isRadioOn()$/;"	f	typeref:typename:int	file:
isRunning	guest/hals/camera/vsock_camera_server.h	/^  bool isRunning() const { return is_running_.load(); }$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:bool
isRunning	guest/hals/camera/vsock_frame_provider.h	/^  bool isRunning() const { return running_.load(); }$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
isSMSUnsolicited	guest/hals/ril/reference-ril/atchannel.c	/^static int isSMSUnsolicited(const char *line)$/;"	f	typeref:typename:int	file:
isServiceTypeCfQuery	guest/hals/ril/reference-libril/ril_service.cpp	/^bool isServiceTypeCfQuery(RIL_SsServiceType serType, RIL_SsRequestType reqType) {$/;"	f	typeref:typename:bool
isSetTorchModeSupported	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::isSetTorchModeSupported($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
isStreamConfigurationSupported	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Status VsockCameraDeviceSession::isStreamConfigurationSupported($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Status
isValid	guest/hals/camera/vsock_camera_metadata.h	/^  bool isValid() const { return is_valid_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraRequestMetadata	typeref:typename:bool
isVoice	guest/hals/ril/reference-libril/ril.h	/^    char            isVoice;    \/* nonzero if this is is a voice call *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char
isVoicePrivacy	guest/hals/ril/reference-libril/ril.h	/^    char            isVoicePrivacy;     \/* nonzero if CDMA voice privacy mode is active *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char
is_binary	host/frontend/webrtc/lib/ws_connection.cpp	/^    bool is_binary() const { return is_binary_; }$/;"	f	struct:WsConnectionImpl::WsBuffer	typeref:typename:bool	file:
is_binary_	host/frontend/webrtc/lib/ws_connection.cpp	/^    bool is_binary_;$/;"	m	struct:WsConnectionImpl::WsBuffer	typeref:typename:bool	file:
is_default_	host/libs/config/config_flag.cpp	/^  bool is_default_;$/;"	m	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:bool	file:
is_international	host/commands/modem_simulator/call_service.h	/^    bool is_international;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
is_inverted_	host/libs/confui/host_renderer.h	/^  bool is_inverted_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
is_magnified_	host/libs/confui/host_renderer.h	/^  bool is_magnified_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
is_mobile_terminated	host/commands/modem_simulator/call_service.h	/^    bool is_mobile_terminated;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
is_movable	host/libs/screen_connector/screen_connector_common.h	/^struct is_movable {$/;"	s	namespace:cuttlefish
is_multi_party	host/commands/modem_simulator/call_service.h	/^    bool is_multi_party;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
is_multimode_modem	guest/hals/ril/reference-ril/reference-ril.c	/^int is_multimode_modem(ModemInfo *mdm)$/;"	f	typeref:typename:int
is_open	host/commands/modem_simulator/sim_service.h	/^    bool is_open;$/;"	m	struct:cuttlefish::SimService::LogicalChannel	typeref:typename:bool
is_open_	guest/hals/camera/vsock_camera_device_3_4.h	/^  std::atomic<bool> is_open_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:std::atomic<bool>
is_operational_	common/libs/net/network_interface.h	/^  bool is_operational_ = false;$/;"	m	class:cuttlefish::NetworkInterface	typeref:typename:bool
is_regular_file_	common/libs/fs/shared_fd.h	/^  bool is_regular_file_;$/;"	m	class:cuttlefish::FileInstance	typeref:typename:bool
is_remote_call	host/commands/modem_simulator/call_service.h	/^    bool is_remote_call;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
is_response	common/libs/security/gatekeeper_channel.h	/^    bool is_response : 1;$/;"	m	struct:gatekeeper::GatekeeperRawMessage	typeref:typename:bool:1
is_response	common/libs/security/keymaster_channel.h	/^    bool is_response : 1;$/;"	m	struct:keymaster::keymaster_message	typeref:typename:bool:1
is_running_	guest/hals/camera/vsock_camera_server.h	/^  std::atomic<bool> is_running_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:std::atomic<bool>
is_setup_well_	host/libs/confui/host_renderer.h	/^  bool is_setup_well_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:bool
is_socket_ok_	host/libs/confui/host_server.h	/^  bool is_socket_ok_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:bool
is_success_	common/libs/confui/protocol_types.h	/^  bool is_success_;$/;"	m	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:bool
is_success_	host/libs/screen_connector/screen_connector_common.h	/^  bool is_success_;$/;"	m	struct:cuttlefish::ScreenConnectorFrameInfo	typeref:typename:bool
is_valid	host/commands/modem_simulator/channel_monitor.h	/^  bool is_valid = true;$/;"	m	class:cuttlefish::Client	typeref:typename:bool
is_valid_	guest/hals/camera/vsock_camera_metadata.h	/^  bool is_valid_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraRequestMetadata	typeref:typename:bool
is_valid_pdu_	host/commands/modem_simulator/pdu_parser.h	/^  bool is_valid_pdu_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:bool
is_voice_mode	host/commands/modem_simulator/call_service.h	/^    bool is_voice_mode;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:bool
is_waiting_sms_pdu_	host/commands/modem_simulator/sms_service.h	/^  bool is_waiting_sms_pdu_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:bool
is_waiting_sms_to_sim_	host/commands/modem_simulator/sms_service.h	/^  bool is_waiting_sms_to_sim_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:bool
itemID	guest/hals/ril/reference-libril/ril.h	/^  RIL_NV_Item   itemID;$/;"	m	struct:__anon0bfbaecf8d08	typeref:typename:RIL_NV_Item
itemID	guest/hals/ril/reference-libril/ril.h	/^  RIL_NV_Item itemID;$/;"	m	struct:__anon0bfbaecf8c08	typeref:typename:RIL_NV_Item
items_	common/libs/concurrency/thread_safe_queue.h	/^  QueueImpl items_;$/;"	m	class:cuttlefish::ThreadSafeQueue	typeref:typename:QueueImpl
iterator	common/libs/fs/shared_select.h	/^  typedef std::set<SharedFD>::iterator iterator;$/;"	t	class:cuttlefish::SharedFDSet	typeref:typename:std::set<SharedFD>::iterator
jacks	host/libs/audio_connector/shm_layout.h	/^  uint32_t jacks;$/;"	m	struct:cuttlefish::VioSConfig	typeref:typename:uint32_t
jpegPending	guest/hals/camera/vsock_frame_provider.h	/^  bool jpegPending() const { return jpeg_pending_.load(); }$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
jpeg_mutex_	guest/hals/camera/vsock_frame_provider.h	/^  std::mutex jpeg_mutex_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::mutex
jpeg_pending_	guest/hals/camera/vsock_frame_provider.h	/^  std::atomic<bool> jpeg_pending_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::atomic<bool>
json_	host/commands/secure_env/json_serializable.cpp	/^  Json::Value& json_;$/;"	m	class:cuttlefish::JsonSerializable	typeref:typename:Json::Value &	file:
k0x100	host/libs/confui/cbor.cc	/^  enum class Condition { k24, k0x100, k0x10000, k0x100000000, kBeyond };$/;"	e	enum:cuttlefish::confui::Cbor::WriteHeader::Condition	file:
k0x10000	host/libs/confui/cbor.cc	/^  enum class Condition { k24, k0x100, k0x10000, k0x100000000, kBeyond };$/;"	e	enum:cuttlefish::confui::Cbor::WriteHeader::Condition	file:
k0x100000000	host/libs/confui/cbor.cc	/^  enum class Condition { k24, k0x100, k0x10000, k0x100000000, kBeyond };$/;"	e	enum:cuttlefish::confui::Cbor::WriteHeader::Condition	file:
k24	host/libs/confui/cbor.cc	/^  enum class Condition { k24, k0x100, k0x10000, k0x100000000, kBeyond };$/;"	e	enum:cuttlefish::confui::Cbor::WriteHeader::Condition	file:
kAberrationMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAberrationMode = ANDROID_COLOR_CORRECTION_ABERRATION_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAbort	common/libs/confui/protocol_types.h	/^  kAbort = 115,       \/\/ to abort the current session$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kAck	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kAck = 1,$/;"	e	enum:cuttlefish::WmediumdMessageType
kAdbChannelLabel	host/frontend/webrtc/lib/client_handler.cpp	/^static constexpr auto kAdbChannelLabel = "adb-channel";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	typeref:typename:auto	file:
kAdbCommandGapTime	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^static constexpr int kAdbCommandGapTime = 5;$/;"	v	namespace:__anon734383cf0111	typeref:typename:int	file:
kAdbDaemonPort	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^constexpr int kAdbDaemonPort = 5037;$/;"	v	namespace:__anon734383cf0111	typeref:typename:int
kAdbIPAndPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kAdbIPAndPort[] = "adb_ip_and_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kAdbMessageLengthLength	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^constexpr std::size_t kAdbMessageLengthLength = 4;$/;"	v	namespace:__anon734383cf0111	typeref:typename:std::size_t
kAdbOkayStatusResponse	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^constexpr char kAdbOkayStatusResponse[] = "OKAY";$/;"	v	namespace:__anon734383cf0111	typeref:typename:char[]
kAdbStatusResponseLength	host/frontend/adb_connector/adb_connection_maintainer.cpp	/^constexpr std::size_t kAdbStatusResponseLength =$/;"	v	namespace:__anon734383cf0111	typeref:typename:std::size_t
kAeAvailableMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAeAvailableMode = ANDROID_CONTROL_AE_MODE_ON;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAeLockAvailable	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAeLockAvailable = ANDROID_CONTROL_AE_LOCK_AVAILABLE_FALSE;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAePrecaptureTrigger	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAePrecaptureTrigger = ANDROID_CONTROL_AE_PRECAPTURE_TRIGGER_IDLE;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAfAvailableModes	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAfAvailableModes[] = {ANDROID_CONTROL_AF_MODE_OFF};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t[]
kAfMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAfMode = ANDROID_CONTROL_AF_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAfTrigger	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAfTrigger = ANDROID_CONTROL_AF_TRIGGER_IDLE;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAllowSelfSigned	host/frontend/webrtc/lib/ws_connection.h	/^    kAllowSelfSigned,$/;"	e	enum:WsConnection::Security
kAndroidMode	host/libs/confui/host_mode_ctrl.h	/^  enum class ModeType : std::uint8_t { kAndroidMode = 55, kConfUI_Mode = 77 };$/;"	e	enum:cuttlefish::HostModeCtrl::ModeType
kAndroidMode	host/libs/screen_connector/screen_connector_ctrl.h	/^    kAndroidMode,$/;"	e	enum:cuttlefish::ScreenConnectorCtrl::ModeType
kAntibandingMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAntibandingMode = ANDROID_CONTROL_AE_ANTIBANDING_MODE_AUTO;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kApKernelImage	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kApKernelImage[] = "ap_kernel_image";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kApRootfsImage	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kApRootfsImage[] = "ap_rootfs_image";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kAreaCode	host/commands/modem_simulator/network_service.cpp	/^static const std::string kAreaCode = "2142";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kArgumentParsingError	host/commands/run_cvd/runner_defs.h	/^  kArgumentParsingError = 1,$/;"	e	enum:cuttlefish::RunnerExitCodes
kAssemblerBin	host/commands/start/main.cc	/^std::string kAssemblerBin = cuttlefish::HostBinaryPath("assemble_cvd");$/;"	v	namespace:__anon8e1e78490111	typeref:typename:std::string
kAssemblyDir	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kAssemblyDir[] = "assembly_dir";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kAudioControlServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kAudioControlServerPort[] = "audiocontrol_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kAudioStreamsField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kAudioStreamsField = "audio_streams";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kAvailableAberrationModes	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAvailableAberrationModes[] = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t[]
kAvailableCapabilities	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAvailableCapabilities[] = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t[]
kAvailableCharacteristicsKeys	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kAvailableCharacteristicsKeys[] = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kAvailableFffect	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAvailableFffect = ANDROID_CONTROL_EFFECT_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAvailableHotpixelMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAvailableHotpixelMode =$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAvailableRequestKeys	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kAvailableRequestKeys[] = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kAvailableResultKeys	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kAvailableResultKeys[] = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kAvailableSceneMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAvailableSceneMode = ANDROID_CONTROL_SCENE_MODE_DISABLED;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAvailableShadingMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAvailableShadingMode = ANDROID_SHADING_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAwaitCleanup	host/libs/confui/server_common.h	/^  kAwaitCleanup = 5,$/;"	e	enum:cuttlefish::confui::MainLoopState
kAwaitingAnswer	host/frontend/webrtc/lib/client_handler.h	/^      kAwaitingAnswer,$/;"	e	enum:cuttlefish::webrtc_streaming::ClientHandler::State
kAwbAvailableMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAwbAvailableMode = ANDROID_CONTROL_AWB_MODE_AUTO;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kAwbLockAvailable	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kAwbLockAvailable = ANDROID_CONTROL_AWB_LOCK_AVAILABLE_FALSE;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kBare	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  kBare,          \/\/ Just an event, no extra data$/;"	e	enum:__anonfa7764770111::EventFormat	file:
kBeyond	host/libs/confui/cbor.cc	/^  enum class Condition { k24, k0x100, k0x10000, k0x100000000, kBeyond };$/;"	e	enum:cuttlefish::confui::Cbor::WriteHeader::Condition	file:
kBlankDataImageMb	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kBlankDataImageMb[] = "blank_data_image_mb";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kBluetoothChannelLabel	host/frontend/webrtc/lib/client_handler.cpp	/^static constexpr auto kBluetoothChannelLabel = "bluetooth-channel";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	typeref:typename:auto	file:
kBootCompletedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kBootCompletedMessage[] = "VIRTUAL_DEVICE_BOOT_COMPLETED";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kBootFailedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kBootFailedMessage[] = "VIRTUAL_DEVICE_BOOT_FAILED";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kBootImageUnpackError	host/commands/run_cvd/runner_defs.h	/^  kBootImageUnpackError = 6,$/;"	e	enum:cuttlefish::RunnerExitCodes
kBootPathAA64	host/libs/config/data_image.cpp	/^const std::string kBootPathAA64 = "EFI\/BOOT\/BOOTAA64.EFI";$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::string
kBootPathIA32	host/libs/config/data_image.cpp	/^const std::string kBootPathIA32 = "EFI\/BOOT\/BOOTIA32.EFI";$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::string
kBootSlot	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kBootSlot[] = "boot_slot";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kBootStarted	host/commands/run_cvd/boot_state_machine.cc	/^  static const int kBootStarted = 0;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:const int	file:
kBootStartedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kBootStartedMessage[] = "VIRTUAL_DEVICE_BOOT_STARTED";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kBootconfigSupported	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kBootconfigSupported[] = "bootconfig_supported";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kBootloader	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kBootloader[] = "bootloader";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kBufferSize	common/libs/fs/shared_fd_stream.h	/^  static constexpr const ptrdiff_t kBufferSize = 4096 + kUngetSize;$/;"	m	class:cuttlefish::SharedFDStreambuf	typeref:typename:const ptrdiff_t
kBufferSize	guest/commands/bt_vhci_forwarder/main.cpp	/^constexpr const size_t kBufferSize = (HCI_MAX_FRAME_SIZE + 1) * 2;$/;"	v	typeref:typename:const size_t
kBufferSize	host/commands/bt_connector/main.cpp	/^constexpr const size_t kBufferSize = (HCI_MAX_FRAME_SIZE + 1) * 2;$/;"	v	typeref:typename:const size_t
kBufferSize	host/frontend/webrtc/lib/ws_connection.cpp	/^constexpr int kBufferSize = 65536;$/;"	v	namespace:__anon14ee93270111	typeref:typename:int
kCDMASignalStrength	host/commands/modem_simulator/network_service.cpp	/^const std::pair<int, int> kCDMASignalStrength = std::make_pair(4, 120);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kCORSHeaders	host/libs/websocket/websocket_server.cpp	/^const std::vector<std::pair<std::string, std::string>> kCORSHeaders = {$/;"	v	namespace:cuttlefish::__anon8185be2f0111	typeref:typename:const std::vector<std::pair<std::string,std::string>>
kCallService	host/commands/modem_simulator/modem_service.h	/^  kCallService    = 3,$/;"	e	enum:cuttlefish::ModemServiceType
kCameraDataChannelLabel	host/frontend/webrtc/lib/client_handler.cpp	/^static constexpr auto kCameraDataChannelLabel = "camera-data-channel";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	typeref:typename:auto	file:
kCameraDataEof	host/frontend/webrtc/lib/client_handler.cpp	/^static constexpr auto kCameraDataEof = "EOF";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	typeref:typename:auto	file:
kCameraServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kCameraServerPort[] = "camera_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kCancel	common/libs/confui/protocol_types.h	/^  constexpr static const auto kCancel = "user_cancel";$/;"	m	struct:cuttlefish::confui::UserResponse	typeref:typename:const auto
kCellId	host/commands/modem_simulator/network_service.cpp	/^static const std::string kCellId = "0000B804";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kCliAck	common/libs/confui/protocol_types.h	/^  kCliAck = 113,  \/\/ client acknowledged. "error:err_msg" or "success:command"$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kCliRespond	common/libs/confui/protocol_types.h	/^  kCliRespond = 114,  \/\/  with "confirm" or "cancel" or "abort"$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kClientDisconnectType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kClientDisconnectType = "client_disconnected";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kClientIdField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kClientIdField = "client_id";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kClientMessageType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kClientMessageType = "client_msg";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kClientSecretField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kClientSecretField = "connection_id";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kCmeErrorFixedDialNumberOnlyAllowed	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorFixedDialNumberOnlyAllowed = "+CME ERROR: 56";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorFixedDialNumberOnlyAllowed	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorFixedDialNumberOnlyAllowed;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorInCorrectParameters	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorInCorrectParameters      = "+CME ERROR: 50";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorInCorrectParameters	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorInCorrectParameters;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorIncorrectPassword	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorIncorrectPassword        = "+CME ERROR: 16";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorIncorrectPassword	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorIncorrectPassword;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorInvalidCharactersInTextString	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorInvalidCharactersInTextString = "+CME ERROR: 27";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorInvalidCharactersInTextString	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorInvalidCharactersInTextString;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorInvalidIndex	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorInvalidIndex             = "+CME ERROR: 21";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorInvalidIndex	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorInvalidIndex;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorMemoryFull	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorMemoryFull               = "+CME ERROR: 20";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorMemoryFull	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorMemoryFull;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNetworkNotAllowedEmergencyCallsOnly	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorNetworkNotAllowedEmergencyCallsOnly = "+CME ERROR: 32";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNetworkNotAllowedEmergencyCallsOnly	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorNetworkNotAllowedEmergencyCallsOnly;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNetworkNotAttachedDueToMTFunctionalRestrictions	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorNetworkNotAttachedDueToMTFunctionalRestrictions = "+CME/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNetworkNotAttachedDueToMTFunctionalRestrictions	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorNetworkNotAttachedDueToMTFunctionalRestrictions;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNoNetworkService	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorNoNetworkService         = "+CME ERROR: 30";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNoNetworkService	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorNoNetworkService;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNotFound	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorNotFound                 = "+CME ERROR: 22";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorNotFound	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorNotFound;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorOperationNotAllowed	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorOperationNotAllowed      = "+CME ERROR: 3";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorOperationNotAllowed	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorOperationNotAllowed;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorOperationNotSupported	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorOperationNotSupported    = "+CME ERROR: 4";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorOperationNotSupported	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorOperationNotSupported;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimBusy	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorSimBusy                  = "+CME ERROR: 14";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimBusy	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorSimBusy;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimNotInserted	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorSimNotInserted           = "+CME ERROR: 10";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimNotInserted	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorSimNotInserted;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimPinRequired	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorSimPinRequired           = "+CME ERROR: 11";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimPinRequired	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorSimPinRequired;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimPukRequired	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmeErrorSimPukRequired           = "+CME ERROR: 12";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmeErrorSimPukRequired	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmeErrorSimPukRequired;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorInvalidPDUModeParam	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmsErrorInvalidPDUModeParam      = "+CMS ERROR: 304";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorInvalidPDUModeParam	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmsErrorInvalidPDUModeParam;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorOperationNotAllowed	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmsErrorOperationNotAllowed      = "+CMS ERROR: 302";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorOperationNotAllowed	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmsErrorOperationNotAllowed;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorOperationNotSupported	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmsErrorOperationNotSupported    = "+CMS ERROR: 303";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorOperationNotSupported	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmsErrorOperationNotSupported;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorSCAddressUnknown	host/commands/modem_simulator/modem_service.cpp	/^const std::string ModemService::kCmsErrorSCAddressUnknown         = "+CMS ERROR: 304";$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kCmsErrorSCAddressUnknown	host/commands/modem_simulator/modem_service.h	/^  static const std::string kCmsErrorSCAddressUnknown;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::string
kColorBackground	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorBackground = 0xffffffff;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorBackgroundInv	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorBackgroundInv = 0xff212121;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorDisabled	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorDisabled = 0xffbdbdbd;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorDisabledInv	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorDisabledInv = 0xff424242;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorEnabled	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorEnabled = 0xff212121;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorEnabledInv	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorEnabledInv = 0xffdedede;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorShield	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorShield = 0xff778500;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorShieldInv	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorShieldInv = 0xffc4cb80;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorText	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorText = 0xff212121;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kColorTextInv	host/libs/confui/host_renderer.h	/^  static constexpr const teeui::Color kColorTextInv = 0xffdedede;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:const teeui::Color
kComingSoonAidl	tests/hal/hal_implementation_test.cpp	/^static const std::set<VersionedAidlPackage> kComingSoonAidl = {$/;"	v	typeref:typename:const std::set<VersionedAidlPackage>	file:
kCompositorVersion	host/libs/wayland/wayland_compositor.cpp	/^constexpr const uint32_t kCompositorVersion = 3;$/;"	v	namespace:wayland::__anon473d11590111	typeref:typename:const uint32_t
kConfUI_Mode	host/libs/confui/host_mode_ctrl.h	/^  enum class ModeType : std::uint8_t { kAndroidMode = 55, kConfUI_Mode = 77 };$/;"	e	enum:cuttlefish::HostModeCtrl::ModeType
kConfUI_Mode	host/libs/screen_connector/screen_connector_ctrl.h	/^    kConfUI_Mode$/;"	e	enum:cuttlefish::ScreenConnectorCtrl::ModeType
kConfUiHostPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kConfUiHostPort[] = "confirmation_ui_host_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kConfigServerError	host/commands/run_cvd/runner_defs.h	/^  kConfigServerError = 19,$/;"	e	enum:cuttlefish::RunnerExitCodes
kConfigServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kConfigServerPort[] = "config_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kConfigType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kConfigType = "config";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kConfirm	common/libs/confui/protocol_types.h	/^  constexpr static const auto kConfirm = "user_confirm";$/;"	m	struct:cuttlefish::confui::UserResponse	typeref:typename:const auto
kConnectClientUriPath	host/frontend/webrtc_operator/server.cpp	/^constexpr auto kConnectClientUriPath = "\/connect_client";$/;"	v	namespace:__anon477f946a0111	typeref:typename:auto
kConnectPath	host/frontend/webrtc_operator/server.cpp	/^const constexpr auto kConnectPath = "\/connect";$/;"	v	namespace:__anon477f946a0111	typeref:typename:const auto
kConnectType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kConnectType = "connect";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kConnected	host/frontend/webrtc/lib/client_handler.h	/^      kConnected,$/;"	e	enum:cuttlefish::webrtc_streaming::ClientHandler::State
kConnecting	host/frontend/webrtc/lib/client_handler.h	/^      kConnecting,$/;"	e	enum:cuttlefish::webrtc_streaming::ClientHandler::State
kConnectorEnabled	host/libs/config/adb/config.cpp	/^  static constexpr char kConnectorEnabled[] = "connector_enabled";$/;"	m	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	typeref:typename:char[]	file:
kConsole	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kConsole[] = "console";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kControlAeCompensationRange	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kControlAeCompensationRange[] = {0, 0};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kControlAeCompensationStep	guest/hals/camera/vsock_camera_metadata.cpp	/^const camera_metadata_rational_t kControlAeCompensationStep[] = {{0, 1}};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const camera_metadata_rational_t[]
kControlAvailableModes	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kControlAvailableModes[] = {ANDROID_CONTROL_MODE_OFF,$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t[]
kControlMaxRegions	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kControlMaxRegions[] = {\/*AE*\/ 0, \/*AWB*\/ 0, \/*AF*\/ 0};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kControlMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kControlMode = ANDROID_CONTROL_MODE_AUTO;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kControlPanelButtonCommand	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonCommand = "command";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kControlPanelButtonDeviceStates	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonDeviceStates = "device_states";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kControlPanelButtonHingeAngleValue	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonHingeAngleValue = "hinge_angle_value";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kControlPanelButtonIconName	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonIconName = "icon_name";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kControlPanelButtonLidSwitchOpen	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonLidSwitchOpen = "lid_switch_open";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kControlPanelButtonShellCommand	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonShellCommand = "shell_command";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kControlPanelButtonTitle	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kControlPanelButtonTitle = "title";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kCpus	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kCpus[] = "cpus";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kCreateImage	host/libs/config/data_image.cpp	/^  enum class DataImageAction { kNoAction, kCreateImage, kResizeImage };$/;"	e	enum:cuttlefish::InitializeDataImageImpl::DataImageAction	file:
kCreatingOffer	host/frontend/webrtc/lib/client_handler.h	/^      kCreatingOffer,$/;"	e	enum:cuttlefish::webrtc_streaming::ClientHandler::State
kCredentialField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kCredentialField = "credential";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kCredentialTypeField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kCredentialTypeField = "credentialType";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kCroppingType	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kCroppingType = ANDROID_SCALER_CROPPING_TYPE_CENTER_ONLY;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kCrosvmBinary	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kCrosvmBinary[] = "crosvm_binary";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kCrosvmVarEmptyDir	host/libs/config/cuttlefish_config.h	/^constexpr char kCrosvmVarEmptyDir[] = "\/var\/empty";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kCurHeaderVersion	host/libs/allocd/utils.cpp	/^constexpr uint16_t kCurHeaderVersion = 1;$/;"	v	namespace:cuttlefish	typeref:typename:uint16_t
kCustomActionButton	host/libs/config/custom_actions.cpp	/^const char* kCustomActionButton = "button";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionButtonCommand	host/libs/config/custom_actions.cpp	/^const char* kCustomActionButtonCommand = "command";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionButtonIconName	host/libs/config/custom_actions.cpp	/^const char* kCustomActionButtonIconName = "icon_name";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionButtonTitle	host/libs/config/custom_actions.cpp	/^const char* kCustomActionButtonTitle = "title";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionButtons	host/libs/config/custom_actions.cpp	/^const char* kCustomActionButtons = "buttons";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionDeviceStateHingeAngleValue	host/libs/config/custom_actions.cpp	/^const char* kCustomActionDeviceStateHingeAngleValue = "hinge_angle_value";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionDeviceStateLidSwitchOpen	host/libs/config/custom_actions.cpp	/^const char* kCustomActionDeviceStateLidSwitchOpen = "lid_switch_open";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionDeviceStates	host/libs/config/custom_actions.cpp	/^const char* kCustomActionDeviceStates = "device_states";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionServer	host/libs/config/custom_actions.cpp	/^const char* kCustomActionServer = "server";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomActionShellCommand	host/libs/config/custom_actions.cpp	/^const char* kCustomActionShellCommand = "shell_command";$/;"	v	namespace:cuttlefish::__anon12e4c76c0111	typeref:typename:const char *
kCustomControlPanelButtonsField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kCustomControlPanelButtonsField = "custom_control_panel_buttons";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kCuttlefishConfigEnvVarName	host/libs/config/cuttlefish_config.h	/^constexpr char kCuttlefishConfigEnvVarName[] = "CUTTLEFISH_CONFIG_FILE";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kCuttlefishConfigurationInitError	host/commands/run_cvd/runner_defs.h	/^  kCuttlefishConfigurationInitError = 3,$/;"	e	enum:cuttlefish::RunnerExitCodes
kCuttlefishConfigurationSaveError	host/commands/run_cvd/runner_defs.h	/^  kCuttlefishConfigurationSaveError = 7,$/;"	e	enum:cuttlefish::RunnerExitCodes
kCuttlefishEnvPath	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kCuttlefishEnvPath[] = "cuttlefish_env_path";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kCvdFileBuildId	host/libs/config/fetcher_config.cpp	/^const char* kCvdFileBuildId = "build_id";$/;"	v	namespace:cuttlefish::__anonf7286d770111	typeref:typename:const char *
kCvdFileBuildTarget	host/libs/config/fetcher_config.cpp	/^const char* kCvdFileBuildTarget = "build_target";$/;"	v	namespace:cuttlefish::__anonf7286d770111	typeref:typename:const char *
kCvdFileSource	host/libs/config/fetcher_config.cpp	/^const char* kCvdFileSource = "source";$/;"	v	namespace:cuttlefish::__anonf7286d770111	typeref:typename:const char *
kCvdFiles	host/libs/config/fetcher_config.cpp	/^const char* kCvdFiles = "cvd_files";$/;"	v	namespace:cuttlefish::__anonf7286d770111	typeref:typename:const char *
kDaemonizationError	host/commands/run_cvd/runner_defs.h	/^  kDaemonizationError = 8,$/;"	e	enum:cuttlefish::RunnerExitCodes
kDataPolicy	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kDataPolicy[] = "data_policy";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kDataPolicyAlwaysCreate	host/libs/config/data_image.cpp	/^const std::string kDataPolicyAlwaysCreate = "always_create";$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::string
kDataPolicyCreateIfMissing	host/libs/config/data_image.cpp	/^const std::string kDataPolicyCreateIfMissing = "create_if_missing";$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::string
kDataPolicyResizeUpTo	host/libs/config/data_image.cpp	/^const std::string kDataPolicyResizeUpTo= "resize_up_to";$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::string
kDataPolicyUseExisting	host/libs/config/data_image.cpp	/^const std::string kDataPolicyUseExisting = "use_existing";$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::string
kDataService	host/commands/modem_simulator/modem_service.h	/^  kDataService    = 2,$/;"	e	enum:cuttlefish::ModemServiceType
kDefaultEmergencyMode	host/commands/modem_simulator/nvram_config.cpp	/^const bool  kDefaultEmergencyMode         = false;$/;"	v	namespace:cuttlefish	typeref:typename:const bool
kDefaultLocation	host/libs/allocd/utils.h	/^constexpr char kDefaultLocation[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kDefaultModemTechnoloy	host/commands/modem_simulator/nvram_config.cpp	/^const int   kDefaultModemTechnoloy        = 0x10;  \/\/ LTE$/;"	v	namespace:cuttlefish	typeref:typename:const int
kDefaultNetworkSelectionMode	host/commands/modem_simulator/nvram_config.cpp	/^const int   kDefaultNetworkSelectionMode  = 0;     \/\/ AUTOMATIC$/;"	v	namespace:cuttlefish	typeref:typename:const int
kDefaultNumBootDevices	host/libs/vm_manager/vm_manager.h	/^  static const int kDefaultNumBootDevices = 2;$/;"	m	class:cuttlefish::vm_manager::VmManager	typeref:typename:const int
kDefaultNumHvcs	host/libs/vm_manager/vm_manager.h	/^  static const int kDefaultNumHvcs = 7;$/;"	m	class:cuttlefish::vm_manager::VmManager	typeref:typename:const int
kDefaultOperatorNumeric	host/commands/modem_simulator/nvram_config.cpp	/^const std::string kDefaultOperatorNumeric = "";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string
kDefaultPinCode	host/commands/modem_simulator/sim_service.cpp	/^static const std::string kDefaultPinCode = "1234";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kDefaultPreferredNetworkMode	host/commands/modem_simulator/nvram_config.cpp	/^const int   kDefaultPreferredNetworkMode  = 0x13;  \/\/ LTE | WCDMA | GSM$/;"	v	namespace:cuttlefish	typeref:typename:const int
kDefaultPukCode	host/commands/modem_simulator/sim_service.cpp	/^static const std::string kDefaultPukCode = "12345678";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kDefaultTargetBuildProp	host/commands/assemble_cvd/super_image_mixer.cc	/^const std::set<std::string> kDefaultTargetBuildProp = {$/;"	v	namespace:cuttlefish::__anonae6530d30111	typeref:typename:const std::set<std::string>
kDefaultTargetImages	host/commands/assemble_cvd/super_image_mixer.cc	/^const std::set<std::string> kDefaultTargetImages = {$/;"	v	namespace:cuttlefish::__anonae6530d30111	typeref:typename:const std::set<std::string>
kDefaultUuidPrefix	host/libs/config/cuttlefish_config.h	/^constexpr char kDefaultUuidPrefix[] = "699acfc4-c8c4-11e7-882b-5065f31dc1";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kDeprecatedBootCompleted	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kDeprecatedBootCompleted[] = "deprecated_boot_completed";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kDeviceIdField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kDeviceIdField = "device_id";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kDeviceInfoField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kDeviceInfoField = "device_info";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kDeviceInfoType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kDeviceInfoType = "device_info";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kDeviceMessageType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kDeviceMessageType = "device_msg";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kDeviceName	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^constexpr auto kDeviceName = "device@3.4\/external\/0";$/;"	v	namespace:android::hardware::camera::provider::V2_7::implementation::__anona6e38b1b0111	typeref:typename:auto
kDisplayConfigs	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kDisplayConfigs[] = "display_configs";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kDisplayHelp	host/commands/assemble_cvd/flags.cc	/^constexpr const char kDisplayHelp[] =$/;"	v	typeref:typename:const char[]
kDisplayPowerModeChangedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kDisplayPowerModeChangedMessage[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kDisplaysField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kDisplaysField = "displays";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kDomToLinuxMapping	host/frontend/webrtc/lib/keyboard.cpp	/^static const std::map<std::string, uint16_t> kDomToLinuxMapping = {$/;"	v	typeref:typename:const std::map<std::string,uint16_t>	file:
kDpi	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kDpi[] = "dpi";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kDpiField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kDpiField = "dpi";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kDynamicPartitions	host/commands/assemble_cvd/misc_info.cc	/^static const std::string kDynamicPartitions = "dynamic_partition_list";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kE2eTestFailed	host/commands/run_cvd/runner_defs.h	/^  kE2eTestFailed = 16,$/;"	e	enum:cuttlefish::RunnerExitCodes
kEVDOSignalStrength	host/commands/modem_simulator/network_service.cpp	/^const std::pair<int, int> kEVDOSignalStrength = std::make_pair(4, 120);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kEbtablesLegacyName	host/libs/allocd/alloc_utils.h	/^constexpr char kEbtablesLegacyName[] = "ebtables-legacy";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kEbtablesName	host/libs/allocd/alloc_utils.h	/^constexpr char kEbtablesName[] = "ebtables";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kEdgeMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kEdgeMode = ANDROID_EDGE_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kEfiSystemPartition	host/libs/image_aggregator/image_aggregator.h	/^  kEfiSystemPartition,$/;"	e	enum:cuttlefish::ImagePartitionType
kEglLib	host/libs/graphics_detector/graphics_detector.cpp	/^constexpr const char kEglLib[] = "libEGL.so.1";$/;"	v	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:const char[]
kEmergencyMode	host/commands/modem_simulator/nvram_config.cpp	/^const char* kEmergencyMode        = "emergency_mode";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kEnableAudio	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableAudio[] = "enable_audio";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEnableGnssGrpcProxy	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableGnssGrpcProxy[] = "enable_gnss_grpc_proxy";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEnableMetrics	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableMetrics[] = "enable_metrics";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEnableMinimalMode	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableMinimalMode[] = "enable_minimal_mode";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEnableSandbox	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableSandbox[] = "enable_sandbox";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEnableVehicleHalServer	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableVehicleHalServer[] = "enable_vehicle_hal_server";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEnableWebRTC	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kEnableWebRTC[] = "enable_webrtc";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEntries	host/commands/secure_env/fragile_tpm_storage.cpp	/^static constexpr char kEntries[] = "entries";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kEntries	host/commands/secure_env/insecure_fallback_storage.cpp	/^static constexpr char kEntries[] = "entries";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kError	host/commands/run_cvd/runner_defs.h	/^  kError = 'E',$/;"	e	enum:cuttlefish::LauncherResponse
kEthernetConnectedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kEthernetConnectedMessage[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kEthernetIp	host/libs/allocd/alloc_utils.h	/^constexpr char kEthernetIp[] = "192.168.98";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kEthernetTapName	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kEthernetTapName[] = "ethernet_tap_name";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kExposureCompensation	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kExposureCompensation = 0;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kExtraBootconfigArgs	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kExtraBootconfigArgs[] = "extra_bootconfig_args";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kExtraKernelCmdline	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kExtraKernelCmdline[] = "extra_kernel_cmdline";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kFaceDetectMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kFaceDetectMode = ANDROID_STATISTICS_FACE_DETECT_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kFacing	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kFacing = ANDROID_LENS_FACING_EXTERNAL;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kFailed	host/frontend/webrtc/lib/client_handler.h	/^      kFailed,$/;"	e	enum:cuttlefish::webrtc_streaming::ClientHandler::State
kFetcherConfigFile	host/commands/assemble_cvd/assemble_cvd.cc	/^std::string kFetcherConfigFile = "fetcher_config.json";$/;"	v	namespace:cuttlefish::__anon1e335d460111	typeref:typename:std::string
kFinalResponseError	host/commands/modem_simulator/unittest/service_test.cpp	/^  const std::vector<std::string> kFinalResponseError = {$/;"	m	class:ModemServiceTest	typeref:typename:const std::vector<std::string>	file:
kFinalResponseSuccess	host/commands/modem_simulator/unittest/service_test.cpp	/^  const std::vector<std::string> kFinalResponseSuccess = {"OK", "CONNECT", "> "};$/;"	m	class:ModemServiceTest	typeref:typename:const std::vector<std::string>	file:
kFlagConsumed	common/libs/utils/flag_parser.h	/^    kFlagConsumed,              \/* Flag processed; consume one argument. *\/$/;"	e	enum:cuttlefish::Flag::FlagProcessResult
kFlagConsumedWithFollowing	common/libs/utils/flag_parser.h	/^    kFlagConsumedWithFollowing, \/* Flag processed; consume 2 arguments. *\/$/;"	e	enum:cuttlefish::Flag::FlagProcessResult
kFlagConsumesFollowing	common/libs/utils/flag_parser.h	/^  kFlagConsumesFollowing,$/;"	e	enum:cuttlefish::FlagAliasMode
kFlagError	common/libs/utils/flag_parser.h	/^    kFlagError,$/;"	e	enum:cuttlefish::Flag::FlagProcessResult
kFlagExact	common/libs/utils/flag_parser.h	/^  kFlagExact,$/;"	e	enum:cuttlefish::FlagAliasMode
kFlagPrefix	common/libs/utils/flag_parser.h	/^  kFlagPrefix,$/;"	e	enum:cuttlefish::FlagAliasMode
kFlagSkip	common/libs/utils/flag_parser.h	/^    kFlagSkip,                  \/* Flag skipped; consume no arguments. *\/$/;"	e	enum:cuttlefish::Flag::FlagProcessResult
kFlags	host/libs/config/fetcher_config.cpp	/^const char* kFlags = "flags";$/;"	v	namespace:cuttlefish::__anonf7286d770111	typeref:typename:const char *
kFlashInfo	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kFlashInfo = ANDROID_FLASH_INFO_AVAILABLE_FALSE;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kFlashMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kFlashMode = ANDROID_FLASH_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kFocusDistanceCalibration	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kFocusDistanceCalibration =$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kFooterSizeBytes	host/commands/modem_simulator/sim_service.cpp	/^constexpr int kFooterSizeBytes = 14;$/;"	v	namespace:cuttlefish	typeref:typename:int
kForwardPath	host/frontend/webrtc_operator/server.cpp	/^const constexpr auto kForwardPath = "\/forward";$/;"	v	namespace:__anon477f946a0111	typeref:typename:const auto
kForwardType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kForwardType = "forward";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kFragments	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kFragments[] = "fragments";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGSMSignalStrength	host/commands/modem_simulator/network_service.cpp	/^const std::pair<int, int> kGSMSignalStrength = std::make_pair(4, 30);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kGdbPort	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kGdbPort[] = "gdb_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGetNodes	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kGetNodes = 7,$/;"	e	enum:cuttlefish::WmediumdMessageType
kGlLib	host/libs/graphics_detector/graphics_detector.cpp	/^constexpr const char kGlLib[] = "libOpenGL.so.0";$/;"	v	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:const char[]
kGles1Lib	host/libs/graphics_detector/graphics_detector.cpp	/^constexpr const char kGles1Lib[] = "libGLESv1_CM.so.1";$/;"	v	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:const char[]
kGles2Lib	host/libs/graphics_detector/graphics_detector.cpp	/^constexpr const char kGles2Lib[] = "libGLESv2.so.2";$/;"	v	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:const char[]
kGnssFilePath	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kGnssFilePath[] = "gnss_file_path";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGnssGrpcProxyServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kGnssGrpcProxyServerPort[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGoogleDynamicPartitions	host/commands/assemble_cvd/misc_info.cc	/^static constexpr const char* kGoogleDynamicPartitions =$/;"	v	namespace:cuttlefish	typeref:typename:const char *	file:
kGpuCaptureBinary	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kGpuCaptureBinary[] = "gpu_capture_binary";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGpuMode	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kGpuMode[] = "gpu_mode";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGpuModeAuto	host/libs/config/cuttlefish_config.cpp	/^const char* const kGpuModeAuto = "auto";$/;"	v	namespace:cuttlefish	typeref:typename:const char * const
kGpuModeDrmVirgl	host/libs/config/cuttlefish_config.cpp	/^const char* const kGpuModeDrmVirgl = "drm_virgl";$/;"	v	namespace:cuttlefish	typeref:typename:const char * const
kGpuModeGfxStream	host/libs/config/cuttlefish_config.cpp	/^const char* const kGpuModeGfxStream = "gfxstream";$/;"	v	namespace:cuttlefish	typeref:typename:const char * const
kGpuModeGuestSwiftshader	host/libs/config/cuttlefish_config.cpp	/^const char* const kGpuModeGuestSwiftshader = "guest_swiftshader";$/;"	v	namespace:cuttlefish	typeref:typename:const char * const
kGreenColor	host/commands/run_cvd/reporting.cpp	/^static constexpr char kGreenColor[] = "\\033[1;32m";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kGrubBlobTable	host/libs/config/data_image.cpp	/^const std::pair<std::string, std::string> kGrubBlobTable[] = {$/;"	v	namespace:cuttlefish::__anoned36ed9d0111	typeref:typename:const std::pair<std::string,std::string>[]
kGuestAuditSecurity	host/libs/config/cuttlefish_config.cpp	/^const char* kGuestAuditSecurity = "guest_audit_security";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kGuestBootCompleted	host/commands/run_cvd/boot_state_machine.cc	/^  static const int kGuestBootCompleted = 1 << 0;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:const int	file:
kGuestBootFailed	host/commands/run_cvd/boot_state_machine.cc	/^  static const int kGuestBootFailed = 1 << 1;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:const int	file:
kGuestEnforceSecurity	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kGuestEnforceSecurity[] = "guest_enforce_security";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kHalAbort	host/libs/confui/server_common.h	/^  kHalAbort,$/;"	e	enum:cuttlefish::confui::FsmInput
kHalFormats	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kHalFormats[] = {HAL_PIXEL_FORMAT_BLOB,$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kHalStart	host/libs/confui/server_common.h	/^  kHalStart,$/;"	e	enum:cuttlefish::confui::FsmInput
kHalStop	host/libs/confui/server_common.h	/^  kHalStop,$/;"	e	enum:cuttlefish::confui::FsmInput
kHalUnknown	host/libs/confui/server_common.h	/^  kHalUnknown$/;"	e	enum:cuttlefish::confui::FsmInput
kHandle	host/commands/secure_env/fragile_tpm_storage.cpp	/^static constexpr char kHandle[] = "handle";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kHardwareField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kHardwareField = "hardware";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kHardwarelevel	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kHardwarelevel = ANDROID_INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kHelpBin	host/commands/cvd/main.cc	/^constexpr char kHelpBin[] = "help_placeholder";  \/\/ Unused, prints kHelpMessage.$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:char[]
kHelpMessage	host/commands/cvd/main.cc	/^constexpr char kHelpMessage[] = R"(Cuttlefish Virtual Device (CVD) CLI.$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:char[]
kHostBugreportBin	host/commands/cvd/main.cc	/^constexpr char kHostBugreportBin[] = "cvd_internal_host_bugreport";$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:char[]
kHostPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kHostPort[] = "adb_host_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kHostToolsVersion	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kHostToolsVersion[] = "host_tools_version";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kHotPixelMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kHotPixelMode = ANDROID_HOT_PIXEL_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kInSession	host/libs/confui/server_common.h	/^  kInSession = 2,$/;"	e	enum:cuttlefish::confui::MainLoopState
kIncorrectUTF8	common/libs/confui/protocol_types.h	/^  static constexpr char kIncorrectUTF8[] = "msg_incorrect_utf8";$/;"	m	struct:cuttlefish::confui::HostError	typeref:typename:char[]
kInformationalPatterns	host/commands/kernel_log_monitor/kernel_log_server.cc	/^} kInformationalPatterns[] = {$/;"	v	namespace:__anonfa7764770111	typeref:struct:__anonfa7764770111::__anonfa7764770208[]
kInfraConfigPath	host/frontend/webrtc_operator/server.cpp	/^const constexpr auto kInfraConfigPath = "\/infra_config";$/;"	v	namespace:__anon477f946a0111	typeref:typename:const auto
kInit	host/libs/confui/server_common.h	/^  kInit = 1,$/;"	e	enum:cuttlefish::confui::MainLoopState
kInitRamFsConcatError	host/commands/run_cvd/runner_defs.h	/^  kInitRamFsConcatError = 22,$/;"	e	enum:cuttlefish::RunnerExitCodes
kInitramfsImg	host/commands/assemble_cvd/assemble_cvd.cc	/^const std::string kInitramfsImg = "initramfs.img";$/;"	v	namespace:cuttlefish::__anon1e335d460111	typeref:typename:const std::string
kInputChannelLabel	host/frontend/webrtc/lib/client_handler.cpp	/^static constexpr auto kInputChannelLabel = "input-channel";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anond0fc42ea0111	typeref:typename:auto	file:
kInsecure	host/frontend/webrtc/lib/ws_connection.h	/^    kInsecure,$/;"	e	enum:WsConnection::Security
kInstanceDir	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kInstanceDir[] = "instance_dir";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kInstanceDirCreationError	host/commands/run_cvd/runner_defs.h	/^  kInstanceDirCreationError = 4,$/;"	e	enum:cuttlefish::RunnerExitCodes
kInstances	host/commands/modem_simulator/nvram_config.cpp	/^const char* kInstances            = "instances";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kInstances	host/libs/config/cuttlefish_config.cpp	/^const char* kInstances = "instances";$/;"	v	namespace:cuttlefish::__anon2cec80f10111	typeref:typename:const char *
kInstances	host/libs/config/cuttlefish_config_instance.cpp	/^const char* kInstances = "instances";$/;"	v	namespace:cuttlefish::__anon3442b2250111	typeref:typename:const char *
kInterfaceDown	guest/hals/ril/reference-ril/reference-ril.c	/^    kInterfaceDown,$/;"	e	enum:InterfaceState	file:
kInterfaceUp	guest/hals/ril/reference-ril/reference-ril.c	/^    kInterfaceUp,$/;"	e	enum:InterfaceState	file:
kInternalDirName	host/libs/config/cuttlefish_config.h	/^constexpr char kInternalDirName[] = "internal";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kInvalid	host/libs/confui/server_common.h	/^  kInvalid = 9$/;"	e	enum:cuttlefish::confui::MainLoopState
kInvalid	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kInvalid = 0,$/;"	e	enum:cuttlefish::WmediumdMessageType
kInvalidHostConfiguration	host/commands/metrics/metrics_defs.h	/^  kInvalidHostConfiguration=2,$/;"	e	enum:cuttlefish::MetricsExitCodes
kInvalidHostConfiguration	host/commands/run_cvd/runner_defs.h	/^  kInvalidHostConfiguration = 2,$/;"	e	enum:cuttlefish::RunnerExitCodes
kIsTouchField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kIsTouchField = "is_touch";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kJpegAvailableThumbnailSizes	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kJpegAvailableThumbnailSizes[] = {0, 0, 240, 180};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kJpegOrientation	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kJpegOrientation = 0;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kJpegQuality	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kJpegQuality = 90;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kKernelDecompressError	host/commands/run_cvd/runner_defs.h	/^  kKernelDecompressError = 17,$/;"	e	enum:cuttlefish::RunnerExitCodes
kKernelDefaultPath	host/commands/assemble_cvd/assemble_cvd.cc	/^const std::string kKernelDefaultPath = "kernel";$/;"	v	namespace:cuttlefish::__anon1e335d460111	typeref:typename:const std::string
kKernelLoadedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kKernelLoadedMessage[] = "] Linux version";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kKey	host/commands/secure_env/fragile_tpm_storage.cpp	/^static constexpr char kKey[] = "key";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kKey	host/commands/secure_env/insecure_fallback_storage.cpp	/^static constexpr char kKey[] = "key";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kKeyValuePair	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  kKeyValuePair,  \/\/ <stage> <key>=<value>$/;"	e	enum:__anonfa7764770111::EventFormat	file:
kKeyboardServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kKeyboardServerPort[] = "keyboard_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kKgdb	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kKgdb[] = "kgdb";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kKnownMissingAidl	tests/hal/hal_implementation_test.cpp	/^static const std::set<VersionedAidlPackage> kKnownMissingAidl = {$/;"	v	typeref:typename:const std::set<VersionedAidlPackage>	file:
kKnownMissingHidl	tests/hal/hal_implementation_test.cpp	/^static const std::set<std::string> kKnownMissingHidl = {$/;"	v	typeref:typename:const std::set<std::string>	file:
kLTESignalStrength	host/commands/modem_simulator/network_service.cpp	/^const std::pair<int, int> kLTESignalStrength = std::make_pair(4, 30);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kLensMinFocusDistance	guest/hals/camera/vsock_camera_metadata.cpp	/^const float kLensMinFocusDistance = 0.0f;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const float
kLensShadingMapMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kLensShadingMapMode =$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kLinuxDmabufVersion	host/libs/wayland/wayland_dmabuf.cpp	/^constexpr uint32_t kLinuxDmabufVersion = 2;$/;"	v	namespace:wayland::__anon8f5be4990111	typeref:typename:uint32_t
kLinuxFilesystem	host/libs/image_aggregator/image_aggregator.h	/^  kLinuxFilesystem = 0,$/;"	e	enum:cuttlefish::ImagePartitionType
kListDevicesUriPath	host/frontend/webrtc_operator/server.cpp	/^constexpr auto kListDevicesUriPath = "\/devices";$/;"	v	namespace:__anon477f946a0111	typeref:typename:auto
kLocalChannelId	host/frontend/webrtc_operator/assets/js/adb.js	/^const kLocalChannelId = 666;$/;"	C
kLogAlignment	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^constexpr int kLogAlignment = 6;  \/\/ multiple of 2^6$/;"	v	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:int
kLogcatSerialMode	host/libs/config/cuttlefish_config.h	/^constexpr char kLogcatSerialMode[] = "serial";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kLogcatServerError	host/commands/run_cvd/runner_defs.h	/^  kLogcatServerError = 18,$/;"	e	enum:cuttlefish::RunnerExitCodes
kLogcatVsockMode	host/libs/config/cuttlefish_config.h	/^constexpr char kLogcatVsockMode[] = "vsock";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kMacAddrStringSize	host/commands/wmediumd_control/main.cpp	/^const int kMacAddrStringSize = 17;$/;"	v	typeref:typename:const int
kMax	host/libs/confui/cbor.h	/^  const std::uint32_t kMax = static_cast<std::uint32_t>(MessageSize::MAX);$/;"	m	class:cuttlefish::confui::Cbor	typeref:typename:const std::uint32_t
kMaxCommandLength	host/commands/modem_simulator/channel_monitor.cpp	/^constexpr int32_t kMaxCommandLength = 4096;$/;"	v	namespace:cuttlefish	typeref:typename:int32_t
kMaxDisks	host/libs/vm_manager/vm_manager.h	/^  static const int kMaxDisks = 3;$/;"	m	class:cuttlefish::vm_manager::VmManager	typeref:typename:const int
kMaxFaceCount	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kMaxFaceCount = 0;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kMaxIfaceNameId	host/libs/allocd/alloc_utils.h	/^constexpr uint32_t kMaxIfaceNameId = 63;$/;"	v	namespace:cuttlefish	typeref:typename:uint32_t
kMaxLatency	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kMaxLatency = ANDROID_SYNC_MAX_LATENCY_UNKNOWN;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kMaxLogicalChannels	host/commands/modem_simulator/sim_service.cpp	/^constexpr int kMaxLogicalChannels = 3;$/;"	v	namespace:cuttlefish	typeref:typename:int
kMaxMessageLength	common/libs/confui/protocol_types.h	/^constexpr const ssize_t kMaxMessageLength = packet::kMaxPayloadLength;$/;"	v	namespace:cuttlefish::confui	typeref:typename:const ssize_t
kMaxNumberSizeBytes	host/commands/modem_simulator/sim_service.cpp	/^constexpr int kMaxNumberSizeBytes = 11;$/;"	v	namespace:cuttlefish	typeref:typename:int
kMaxPacketSize	common/frontend/socket_vsock_proxy/main.cpp	/^constexpr std::size_t kMaxPacketSize = 8192;$/;"	v	typeref:typename:std::size_t
kMaxPayloadLength	common/libs/confui/packet_types.h	/^constexpr const ssize_t kMaxPayloadLength = 10000;$/;"	v	namespace:cuttlefish::confui::packet	typeref:typename:const ssize_t
kMemoryMb	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kMemoryMb[] = "memory_mb";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kMessageTooLongError	common/libs/confui/protocol_types.h	/^  static constexpr char kMessageTooLongError[] = "msg_too_long_error";$/;"	m	struct:cuttlefish::confui::HostError	typeref:typename:char[]
kMetricsBinary	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kMetricsBinary[] = "metrics_binary";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kMetricsError	host/commands/metrics/metrics_defs.h	/^  kMetricsError=1,$/;"	e	enum:cuttlefish::MetricsExitCodes
kMinHeaderVersion	host/libs/allocd/utils.cpp	/^constexpr uint16_t kMinHeaderVersion = 1;$/;"	v	namespace:cuttlefish	typeref:typename:uint16_t
kMiscInfoPath	host/commands/assemble_cvd/super_image_mixer.cc	/^const std::string kMiscInfoPath = "META\/misc_info.txt";$/;"	v	namespace:cuttlefish::__anonae6530d30111	typeref:typename:const std::string
kMiscService	host/commands/modem_simulator/modem_service.h	/^  kMiscService    = 7,$/;"	e	enum:cuttlefish::ModemServiceType
kMobileBridgeName	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kMobileBridgeName[] = "mobile_bridge_name";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kMobileIp	host/libs/allocd/alloc_utils.h	/^constexpr char kMobileIp[] = "192.168.97";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kMobileNetworkConnectedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kMobileNetworkConnectedMessage[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kMobileTapName	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kMobileTapName[] = "mobile_tap_name";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kMode	host/libs/config/adb/config.cpp	/^  static constexpr char kMode[] = "mode";$/;"	m	class:cuttlefish::__anone963d72d0111::AdbConfigFragmentImpl	typeref:typename:char[]	file:
kModemSimulatorId	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kModemSimulatorId[] = "modem_simulator_host_id";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kModemSimulatorInstanceNumber	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kModemSimulatorInstanceNumber[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kModemSimulatorPorts	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kModemSimulatorPorts[] = "modem_simulator_ports";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kModemSimulatorServerError	host/commands/run_cvd/runner_defs.h	/^  kModemSimulatorServerError = 25,$/;"	e	enum:cuttlefish::RunnerExitCodes
kModemSimulatorSimType	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kModemSimulatorSimType[] = "modem_simulator_sim_type";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kModemTechnoloy	host/commands/modem_simulator/nvram_config.cpp	/^const char* kModemTechnoloy       = "modem_technoloy";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kMonitorCreationFailed	host/commands/run_cvd/runner_defs.h	/^  kMonitorCreationFailed = 13,$/;"	e	enum:cuttlefish::RunnerExitCodes
kNRSignalStrength	host/commands/modem_simulator/network_service.cpp	/^const std::pair<int, int> kNRSignalStrength = std::make_pair(45, 135);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kNetlink	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kNetlink = 4,$/;"	e	enum:cuttlefish::WmediumdMessageType
kNetmask	host/libs/allocd/resource.h	/^  static constexpr char kNetmask[] = "\/24";$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:char[]
kNetmask	host/libs/allocd/resource.h	/^  static constexpr char kNetmask[] = "\/30";$/;"	m	class:cuttlefish::MobileIface	typeref:typename:char[]
kNetworkSelectionMode	host/commands/modem_simulator/nvram_config.cpp	/^const char* kNetworkSelectionMode = "network_selection_mode";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kNetworkService	host/commands/modem_simulator/modem_service.h	/^  kNetworkService = 1,$/;"	e	enum:cuttlefish::ModemServiceType
kNew	host/frontend/webrtc/lib/client_handler.h	/^      kNew,$/;"	e	enum:cuttlefish::webrtc_streaming::ClientHandler::State
kNo	host/libs/config/cuttlefish_config.h	/^    kNo,$/;"	e	enum:cuttlefish::CuttlefishConfig::Answer
kNoAction	host/libs/config/data_image.cpp	/^  enum class DataImageAction { kNoAction, kCreateImage, kResizeImage };$/;"	e	enum:cuttlefish::InitializeDataImageImpl::DataImageAction	file:
kNoiseReductionMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kNoiseReductionMode = ANDROID_NOISE_REDUCTION_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kOemHookEnabled	guest/hals/ril/reference-libril/ril_service.cpp	/^constexpr bool kOemHookEnabled = false;$/;"	v	typeref:typename:bool
kOemHookEnabled	guest/hals/ril/reference-libril/ril_service.cpp	/^constexpr bool kOemHookEnabled = true;$/;"	v	typeref:typename:bool
kOperationTableSize	host/commands/secure_env/secure_env.cpp	/^constexpr size_t kOperationTableSize = 16;$/;"	v	namespace:cuttlefish::__anon0a6d9b510111	typeref:typename:size_t
kOperatorNumeric	host/commands/modem_simulator/nvram_config.cpp	/^const char* kOperatorNumeric      = "operator_numeric";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kOpticalStabilizationMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kOpticalStabilizationMode =$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kOrientation	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kOrientation = 0;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kPartialResultCount	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kPartialResultCount = 1;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kPayloadField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kPayloadField = "payload";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kPipeIOError	host/commands/run_cvd/runner_defs.h	/^  kPipeIOError = 10,$/;"	e	enum:cuttlefish::RunnerExitCodes
kPlanePadding	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^constexpr int kPlanePadding = 1024;$/;"	v	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:int
kPollPath	host/frontend/webrtc_operator/server.cpp	/^const constexpr auto kPollPath = "\/poll_messages";$/;"	v	namespace:__anon477f946a0111	typeref:typename:const auto
kPollType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kPollType = "client_poll";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kPowerwash	host/commands/run_cvd/runner_defs.h	/^  kPowerwash = 'P',$/;"	e	enum:cuttlefish::LauncherAction
kPreferredNetworkMode	host/commands/modem_simulator/nvram_config.cpp	/^const char* kPreferredNetworkMode = "preferred_network_mode";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kPrioFilesCleanupError	host/commands/run_cvd/runner_defs.h	/^  kPrioFilesCleanupError = 5,$/;"	e	enum:cuttlefish::RunnerExitCodes
kProcessGroupError	host/commands/run_cvd/runner_defs.h	/^  kProcessGroupError = 12,$/;"	e	enum:cuttlefish::RunnerExitCodes
kProtectedVm	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kProtectedVm[] = "protected_vm";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kProtocolName	host/frontend/webrtc/lib/ws_connection.cpp	/^constexpr char kProtocolName[] = "cf-webrtc-device";$/;"	v	namespace:__anon14ee93270111	typeref:typename:char[]
kProtocols	host/frontend/webrtc/lib/ws_connection.cpp	/^const struct lws_protocols kProtocols[2] = {$/;"	v	namespace:__anon14ee93270111	typeref:typename:const struct lws_protocols[2]
kQemuBinaryDir	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kQemuBinaryDir[] = "qemu_binary_dir";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kQemuVncServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kQemuVncServerPort[] = "qemu_vnc_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRead	host/commands/modem_simulator/sms_service.h	/^    enum SmsStatus { kUnread = 0, kRead = 1, kUnsent = 2, kSent = 3 };$/;"	e	enum:cuttlefish::SmsService::SmsMessage::SmsStatus
kRecordScreen	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kRecordScreen[] = "record_screen";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRecvFlags	host/libs/allocd/utils.h	/^static constexpr int kRecvFlags = 0;$/;"	v	namespace:cuttlefish	typeref:typename:int
kRefreshRateHz	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kRefreshRateHz[] = "refresh_rate_hz";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRegister	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kRegister = 2,$/;"	e	enum:cuttlefish::WmediumdMessageType
kRegisterDeviceUriPath	host/frontend/webrtc_operator/server.cpp	/^constexpr auto kRegisterDeviceUriPath = "\/register_device";$/;"	v	namespace:__anon477f946a0111	typeref:typename:auto
kRegisterType	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kRegisterType = "register";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kRegistrationRetries	host/frontend/webrtc/lib/streamer.cpp	/^constexpr int kRegistrationRetries = 3;$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:int
kReloadConfig	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kReloadConfig = 9,$/;"	e	enum:cuttlefish::WmediumdMessageType
kReloadCurrentConfig	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kReloadCurrentConfig = 10,$/;"	e	enum:cuttlefish::WmediumdMessageType
kRemotePortRange	host/commands/modem_simulator/modem_service.cpp	/^const std::pair<int, int> ModemService::kRemotePortRange =$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::pair<int,int>
kRemotePortRange	host/commands/modem_simulator/modem_service.h	/^  static const std::pair<int, int> kRemotePortRange;$/;"	m	class:cuttlefish::ModemService	typeref:typename:const std::pair<int,int>
kRequestMaxNumInputStreams	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kRequestMaxNumInputStreams = 0;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kRequestMaxNumOutputStreams	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kRequestMaxNumOutputStreams[] = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kRequestPipelineMaxDepth	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kRequestPipelineMaxDepth = 4;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kRequestSequenceNumber	common/libs/net/netlink_request.cpp	/^uint32_t kRequestSequenceNumber = 0;$/;"	v	namespace:cuttlefish::__anonf2157dfa0111	typeref:typename:uint32_t
kResetColor	host/commands/run_cvd/reporting.cpp	/^static constexpr char kResetColor[] = "\\033[0m";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kResizeImage	host/libs/config/data_image.cpp	/^  enum class DataImageAction { kNoAction, kCreateImage, kResizeImage };$/;"	e	enum:cuttlefish::InitializeDataImageImpl::DataImageAction	file:
kRestart	host/commands/run_cvd/runner_defs.h	/^  kRestart = 'R',$/;"	e	enum:cuttlefish::LauncherAction
kRestartSubprocesses	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kRestartSubprocesses[] = "restart_subprocesses";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRetries	common/libs/device_config/guest_device_config.cpp	/^static constexpr int kRetries = 5;$/;"	v	namespace:cuttlefish::__anon4ec25d870111	typeref:typename:int	file:
kRetry	host/frontend/webrtc/lib/ws_connection.cpp	/^const lws_retry_bo_t kRetry = {$/;"	v	namespace:__anon14ee93270111	typeref:typename:const lws_retry_bo_t
kRetryDelaySeconds	common/libs/device_config/guest_device_config.cpp	/^static constexpr int kRetryDelaySeconds = 5;$/;"	v	namespace:cuttlefish::__anon4ec25d870111	typeref:typename:int	file:
kRetryFirstIntervalMs	host/frontend/webrtc/lib/streamer.cpp	/^constexpr int kRetryFirstIntervalMs = 1000;$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:int
kRilDns	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kRilDns[] = "ril_dns";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRootcanalConfigFile	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kRootcanalConfigFile[] = "rootcanal_config_file";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRootcanalDefaultCommandsFile	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kRootcanalDefaultCommandsFile[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRootcanalHciPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kRootcanalHciPort[] = "rootcanal_hci_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRootcanalLinkPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kRootcanalLinkPort[] = "rootcanal_link_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRootcanalTestPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kRootcanalTestPort[] = "rootcanal_test_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRtpTicksPerMs	host/frontend/webrtc/lib/local_recorder.cpp	/^constexpr double kRtpTicksPerMs = kRtpTicksPerSecond \/ 1000.;$/;"	v	namespace:cuttlefish::webrtc_streaming	typeref:typename:double
kRtpTicksPerNs	host/frontend/webrtc/lib/local_recorder.cpp	/^constexpr double kRtpTicksPerNs = kRtpTicksPerUs \/ 1000.;$/;"	v	namespace:cuttlefish::webrtc_streaming	typeref:typename:double
kRtpTicksPerSecond	host/frontend/webrtc/lib/local_recorder.cpp	/^constexpr double kRtpTicksPerSecond = 90000.;$/;"	v	namespace:cuttlefish::webrtc_streaming	typeref:typename:double
kRtpTicksPerUs	host/frontend/webrtc/lib/local_recorder.cpp	/^constexpr double kRtpTicksPerUs = kRtpTicksPerMs \/ 1000.;$/;"	v	namespace:cuttlefish::webrtc_streaming	typeref:typename:double
kRunAsDaemon	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kRunAsDaemon[] = "run_as_daemon";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRunModemSimulator	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kRunModemSimulator[] = "enable_modem_simulator";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kRunnerBin	host/commands/start/main.cc	/^std::string kRunnerBin = cuttlefish::HostBinaryPath("run_cvd");$/;"	v	namespace:__anon8e1e78490111	typeref:typename:std::string
kSRIAndMMSIndicator	host/commands/modem_simulator/pdu_parser.cpp	/^static const std::string kSRIAndMMSIndicator              = "24";  \/* SRI is 1 && MMS is 1*\/$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kScalerAvailableMaxDigitalZoom	guest/hals/camera/vsock_camera_metadata.cpp	/^const float kScalerAvailableMaxDigitalZoom[] = {1};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const float[]
kScreenChangedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kScreenChangedMessage[] = "VIRTUAL_DEVICE_SCREEN_CHANGED";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kSeatVersion	host/libs/wayland/wayland_seat.cpp	/^constexpr const uint32_t kSeatVersion = 6;$/;"	v	namespace:wayland::__anona9f16c970111	typeref:typename:const uint32_t
kSeccompDir	host/commands/assemble_cvd/flags.cc	/^static const std::string kSeccompDir = std::string("usr\/share\/crosvm\/") +$/;"	v	typeref:typename:const std::string	file:
kSeccompPolicyDir	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSeccompPolicyDir[] = "seccomp_policy_dir";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSecureHals	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSecureHals[] = "secure_hals";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSelectError	host/commands/modem_simulator/channel_monitor.h	/^  kSelectError = 1,$/;"	e	enum:cuttlefish::ModemSimulatorExitCodes
kSendFlags	host/libs/allocd/utils.h	/^static constexpr int kSendFlags = 0;$/;"	v	namespace:cuttlefish	typeref:typename:int
kSent	host/commands/modem_simulator/sms_service.h	/^    enum SmsStatus { kUnread = 0, kRead = 1, kUnsent = 2, kSent = 3 };$/;"	e	enum:cuttlefish::SmsService::SmsMessage::SmsStatus
kSerialNumber	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kSerialNumber[] = "serial_number";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kServerError	host/commands/modem_simulator/channel_monitor.h	/^  kServerError = 2,$/;"	e	enum:cuttlefish::ModemSimulatorExitCodes
kServerError	host/commands/run_cvd/runner_defs.h	/^  kServerError = 14,$/;"	e	enum:cuttlefish::RunnerExitCodes
kServersField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kServersField = "ice_servers";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kSessionId	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kSessionId[] = "session_id";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSetControl	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kSetControl = 5,$/;"	e	enum:cuttlefish::WmediumdMessageType
kSetSnr	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kSetSnr = 8,$/;"	e	enum:cuttlefish::WmediumdMessageType
kSetupWizardMode	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSetupWizardMode[] = "setupwizard_mode";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSharedDirName	host/libs/config/cuttlefish_config.h	/^constexpr char kSharedDirName[] = "shared";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kSigServerAddress	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSigServerAddress[] = "webrtc_sig_server_addr";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSigServerHeadersPath	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSigServerHeadersPath[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSigServerPath	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSigServerPath[] = "webrtc_sig_server_path";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSigServerPort	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSigServerPort[] = "webrtc_sig_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSigServerSecure	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSigServerSecure[] = "webrtc_sig_server_secure";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSigServerStrict	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSigServerStrict[] = "webrtc_sig_server_strict";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSimPinMaxRetryTimes	host/commands/modem_simulator/sim_service.cpp	/^constexpr int kSimPinMaxRetryTimes = 3;$/;"	v	namespace:cuttlefish	typeref:typename:int
kSimPinSizeRange	host/commands/modem_simulator/sim_service.cpp	/^const std::pair<int, int> kSimPinSizeRange(4, 8);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kSimPukMaxRetryTimes	host/commands/modem_simulator/sim_service.cpp	/^constexpr int kSimPukMaxRetryTimes = 10;$/;"	v	namespace:cuttlefish	typeref:typename:int
kSimPukSize	host/commands/modem_simulator/sim_service.cpp	/^constexpr int kSimPukSize = 8;$/;"	v	namespace:cuttlefish	typeref:typename:int
kSimService	host/commands/modem_simulator/modem_service.h	/^  kSimService     = 0,$/;"	e	enum:cuttlefish::ModemServiceType
kSimType	host/commands/modem_simulator/nvram_config.cpp	/^const char* kSimType              = "sim_type";$/;"	v	namespace:cuttlefish	typeref:typename:const char *
kSize	guest/hals/ril/reference-ril/reference-ril.c	/^#define kSize /;"	d	file:
kSmsService	host/commands/modem_simulator/modem_service.h	/^  kSmsService     = 4,$/;"	e	enum:cuttlefish::ModemServiceType
kSmt	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kSmt[] = "smt";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kSocketMode	host/libs/allocd/alloc_utils.h	/^constexpr int kSocketMode = 0666;$/;"	v	namespace:cuttlefish	typeref:typename:int
kSocketProxyServerError	host/commands/run_cvd/runner_defs.h	/^  kSocketProxyServerError = 26,$/;"	e	enum:cuttlefish::RunnerExitCodes
kStageTable	host/commands/kernel_log_monitor/kernel_log_server.cc	/^} kStageTable[] = {$/;"	v	namespace:__anonfa7764770111	typeref:struct:__anonfa7764770111::__anonfa7764770308[]
kStart	common/libs/confui/protocol_types.h	/^  kStart = 111,   \/\/ start rendering, send confirmation msg, & wait respond$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kStartAp	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kStartAp[] = "start_ap";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kStartBin	host/commands/cvd/main.cc	/^constexpr char kStartBin[] = "cvd_internal_start";$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:char[]
kStartSigServer	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kStartSigServer[] = "webrtc_start_sig_server";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kStartWmediumd	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kStartWmediumd[] = "start_wmediumd";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kStatus	host/commands/run_cvd/runner_defs.h	/^  kStatus = 'I',$/;"	e	enum:cuttlefish::LauncherAction
kStatusBin	host/commands/cvd/main.cc	/^constexpr char kStatusBin[] = "cvd_internal_status";$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:char[]
kStatusReportIndicator	host/commands/modem_simulator/pdu_parser.cpp	/^static const std::string kStatusReportIndicator           = "06";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kStdErr	common/libs/utils/subprocess.h	/^    kStdErr = 2,$/;"	e	enum:cuttlefish::Subprocess::StdIOChannel
kStdIn	common/libs/utils/subprocess.h	/^    kStdIn = 0,$/;"	e	enum:cuttlefish::Subprocess::StdIOChannel
kStdOut	common/libs/utils/subprocess.h	/^    kStdOut = 1,$/;"	e	enum:cuttlefish::Subprocess::StdIOChannel
kStkService	host/commands/modem_simulator/modem_service.h	/^  kStkService     = 6,$/;"	e	enum:cuttlefish::ModemServiceType
kStop	common/libs/confui/protocol_types.h	/^  kStop = 112,    \/\/ start rendering, send confirmation msg, & wait respond$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kStop	host/commands/run_cvd/runner_defs.h	/^  kStop = 'X',$/;"	e	enum:cuttlefish::LauncherAction
kStopBin	host/commands/cvd/main.cc	/^constexpr char kStopBin[] = "cvd_internal_stop";$/;"	v	namespace:cuttlefish::__anon483fb9980111	typeref:typename:char[]
kStopCrash	common/libs/utils/subprocess.h	/^  kStopCrash,   \/* Attempted to stop the subprocess cleanly, but that failed. *\/$/;"	e	enum:cuttlefish::StopperResult
kStopFailure	common/libs/utils/subprocess.h	/^  kStopFailure, \/* Failed to stop the subprocess. *\/$/;"	e	enum:cuttlefish::StopperResult
kStopSuccess	common/libs/utils/subprocess.h	/^  kStopSuccess, \/* The subprocess exited in the expected way. *\/$/;"	e	enum:cuttlefish::StopperResult
kStreamIdField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kStreamIdField = "stream_id";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kStrict	host/frontend/webrtc/lib/ws_connection.h	/^    kStrict,$/;"	e	enum:WsConnection::Security
kStunPrefix	host/frontend/webrtc_operator/server_config.cpp	/^  constexpr auto kStunPrefix = "stun:";$/;"	v	namespace:cuttlefish::__anonc6b6781f0111	typeref:typename:auto
kSuccess	host/commands/metrics/metrics_defs.h	/^  kSuccess=0,$/;"	e	enum:cuttlefish::MetricsExitCodes
kSuccess	host/commands/modem_simulator/channel_monitor.h	/^  kSuccess = 0,$/;"	e	enum:cuttlefish::ModemSimulatorExitCodes
kSuccess	host/commands/run_cvd/runner_defs.h	/^  kSuccess = 'S',$/;"	e	enum:cuttlefish::LauncherResponse
kSuccess	host/commands/run_cvd/runner_defs.h	/^  kSuccess = 0,$/;"	e	enum:cuttlefish::RunnerExitCodes
kSupService	host/commands/modem_simulator/modem_service.h	/^  kSupService     = 5,$/;"	e	enum:cuttlefish::ModemServiceType
kSuperPartitionGroups	host/commands/assemble_cvd/misc_info.cc	/^static constexpr const char* kSuperPartitionGroups = "super_partition_groups";$/;"	v	namespace:cuttlefish	typeref:typename:const char *	file:
kSurfacelessContextExt	host/libs/graphics_detector/graphics_detector.cpp	/^constexpr const char kSurfacelessContextExt[] = "EGL_KHR_surfaceless_context";$/;"	v	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:const char[]
kSystemError	common/libs/confui/protocol_types.h	/^  static constexpr char kSystemError[] = "system_error";$/;"	m	struct:cuttlefish::confui::HostError	typeref:typename:char[]
kTapDeviceInUse	host/commands/run_cvd/runner_defs.h	/^  kTapDeviceInUse = 23,$/;"	e	enum:cuttlefish::RunnerExitCodes
kTargetArch	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kTargetArch[] = "target_arch";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kTemplateToIntent	guest/hals/camera/vsock_camera_metadata.cpp	/^const std::map<RequestTemplate, uint8_t> kTemplateToIntent = {$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const std::map<RequestTemplate,uint8_t>
kTerminated	host/libs/confui/server_common.h	/^  kTerminated = 8,$/;"	e	enum:cuttlefish::confui::MainLoopState
kTestPatternMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kTestPatternMode = ANDROID_SENSOR_TEST_PATTERN_MODE_OFF;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t
kTestPatternModes	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kTestPatternModes[] = {ANDROID_SENSOR_TEST_PATTERN_MODE_OFF};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kThumbnailSize	guest/hals/camera/vsock_camera_metadata.cpp	/^const int32_t kThumbnailSize[] = {240, 180};$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const int32_t[]
kTimestampSource	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kTimestampSource = ANDROID_SENSOR_INFO_TIMESTAMP_SOURCE_UNKNOWN;$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kTombstoneDirCreationError	host/commands/run_cvd/runner_defs.h	/^  kTombstoneDirCreationError = 21,$/;"	e	enum:cuttlefish::RunnerExitCodes
kTombstoneReceiverPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kTombstoneReceiverPort[] = "tombstone_receiver_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kTombstoneServerError	host/commands/run_cvd/runner_defs.h	/^  kTombstoneServerError = 20,$/;"	e	enum:cuttlefish::RunnerExitCodes
kTouchEvent	common/libs/confui/protocol_types.h	/^  constexpr static const auto kTouchEvent = "user_touch";$/;"	m	struct:cuttlefish::confui::UserResponse	typeref:typename:const auto
kTouchServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kTouchServerPort[] = "touch_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kTpmDevice	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kTpmDevice[] = "tpm_device";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kTpmPassthroughError	host/commands/run_cvd/runner_defs.h	/^  kTpmPassthroughError = 24,$/;"	e	enum:cuttlefish::RunnerExitCodes
kTxStart	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kTxStart = 6,$/;"	e	enum:cuttlefish::WmediumdMessageType
kTypeField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kTypeField = "message_type";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kUDHIAndSRIAndMMSIndicator	host/commands/modem_simulator/pdu_parser.cpp	/^static const std::string kUDHIAndSRIAndMMSIndicator       = "64";  \/* UDHI is 1 && SRI is 1 && /;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kUIError	common/libs/confui/protocol_types.h	/^  static constexpr char kUIError[] = "ui_error";$/;"	m	struct:cuttlefish::confui::HostError	typeref:typename:char[]
kUngetSize	common/libs/fs/shared_fd_stream.h	/^  static constexpr const ptrdiff_t kUngetSize = 128;$/;"	m	class:cuttlefish::SharedFDStreambuf	typeref:typename:const ptrdiff_t
kUniqueKey	host/commands/secure_env/json_serializable.cpp	/^static constexpr char kUniqueKey[] = "JsonSerializable";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kUniqueKey	host/commands/secure_env/tpm_key_blob_maker.cpp	/^static constexpr char kUniqueKey[] = "TpmKeyBlobMaker";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kUnknown	common/libs/confui/protocol_types.h	/^  constexpr static const auto kUnknown = "user_unknown";$/;"	m	struct:cuttlefish::confui::UserResponse	typeref:typename:const auto
kUnknown	common/libs/confui/protocol_types.h	/^  kUnknown = 100,$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kUnknown	host/libs/config/cuttlefish_config.h	/^    kUnknown = 0,$/;"	e	enum:cuttlefish::CuttlefishConfig::Answer
kUnknownAction	host/commands/run_cvd/runner_defs.h	/^  kUnknownAction = 'U',$/;"	e	enum:cuttlefish::LauncherResponse
kUnread	host/commands/modem_simulator/sms_service.h	/^    enum SmsStatus { kUnread = 0, kRead = 1, kUnsent = 2, kSent = 3 };$/;"	e	enum:cuttlefish::SmsService::SmsMessage::SmsStatus
kUnregister	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  kUnregister = 3,$/;"	e	enum:cuttlefish::WmediumdMessageType
kUnsent	host/commands/modem_simulator/sms_service.h	/^    enum SmsStatus { kUnread = 0, kRead = 1, kUnsent = 2, kSent = 3 };$/;"	e	enum:cuttlefish::SmsService::SmsMessage::SmsStatus
kUrlsField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kUrlsField = "urls";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kUsbV1SocketError	host/commands/run_cvd/runner_defs.h	/^  kUsbV1SocketError = 15,$/;"	e	enum:cuttlefish::RunnerExitCodes
kUseAllocd	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kUseAllocd[] = "use_allocd";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kUserAbort	common/libs/confui/protocol_types.h	/^  constexpr static const auto kUserAbort = "user_abort";$/;"	m	struct:cuttlefish::confui::UserResponse	typeref:typename:const auto
kUserEvent	host/libs/confui/server_common.h	/^  kUserEvent = 1,$/;"	e	enum:cuttlefish::confui::FsmInput
kUserInputEvent	common/libs/confui/protocol_types.h	/^  kUserInputEvent = 200,$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kUserTouchEvent	common/libs/confui/protocol_types.h	/^  kUserTouchEvent = 201$/;"	e	enum:cuttlefish::confui::ConfUiCmd
kUserdataFormat	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kUserdataFormat[] = "userdata_format";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kUsernameField	host/frontend/webrtc_operator/constants/signaling_constants.h	/^constexpr auto kUsernameField = "username";$/;"	v	namespace:cuttlefish::webrtc_signaling	typeref:typename:auto
kUuid	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kUuid[] = "uuid";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVMCreationError	host/commands/run_cvd/runner_defs.h	/^  kVMCreationError = 9,$/;"	e	enum:cuttlefish::RunnerExitCodes
kValue	host/commands/secure_env/insecure_fallback_storage.cpp	/^static constexpr char kValue[] = "value";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVehicleHalServerPort	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kVehicleHalServerPort[] = "vehicle_hal_server_port";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVhciDev	guest/commands/bt_vhci_forwarder/main.cpp	/^constexpr const char* kVhciDev = "\/dev\/vhci";$/;"	v	typeref:typename:const char *
kVhostNet	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kVhostNet[] = "vhost_net";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVhostUserMac80211Hwsim	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kVhostUserMac80211Hwsim[] = "vhost_user_mac80211_hwsim";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVideoStabilizationMode	guest/hals/camera/vsock_camera_metadata.cpp	/^const uint8_t kVideoStabilizationMode =$/;"	v	namespace:android::hardware::camera::device::V3_4::implementation::__anonc140734a0111	typeref:typename:const uint8_t
kVirtualDeviceBootFailed	host/commands/run_cvd/runner_defs.h	/^  kVirtualDeviceBootFailed = 11,$/;"	e	enum:cuttlefish::RunnerExitCodes
kVirtualDiskPaths	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kVirtualDiskPaths[] = "virtual_disk_paths";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVmManager	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kVmManager[] = "vm_manager";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVsocUserPrefix	host/libs/config/cuttlefish_config.h	/^constexpr char kVsocUserPrefix[] = "vsoc-";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kVsockGuestCid	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kVsockGuestCid[] = "vsock_guest_cid";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kVulkanLib	host/libs/graphics_detector/graphics_detector.cpp	/^constexpr const char kVulkanLib[] = "libvulkan.so.1";$/;"	v	namespace:cuttlefish::__anon29a199ff0111	typeref:typename:const char[]
kWCDMASignalStrength	host/commands/modem_simulator/network_service.cpp	/^const std::pair<int, int> kWCDMASignalStrength = std::make_pair(4, 30);$/;"	v	namespace:cuttlefish	typeref:typename:const std::pair<int,int>
kWaitStop	host/libs/confui/server_common.h	/^  kWaitStop = 3,  \/\/ wait ack after sending confirm\/cancel$/;"	e	enum:cuttlefish::confui::MainLoopState
kWebRTCAssetsDir	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWebRTCAssetsDir[] = "webrtc_assets_dir";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWebRTCCertsDir	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWebRTCCertsDir[] = "webrtc_certs_dir";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWebRTCEnableADBWebSocket	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWebRTCEnableADBWebSocket[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWebrtcDeviceId	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kWebrtcDeviceId[] = "webrtc_device_id";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWebrtcTcpPortRange	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWebrtcTcpPortRange[] = "webrtc_tcp_port_range";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWebrtcUdpPortRange	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWebrtcUdpPortRange[] = "webrtc_udp_port_range";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWifiConnectedMessage	host/libs/config/cuttlefish_config.h	/^constexpr char kWifiConnectedMessage[] =$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kWifiMacPrefix	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kWifiMacPrefix[] = "wifi_mac_prefix";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWifiTapName	host/libs/config/cuttlefish_config_instance.cpp	/^static constexpr char kWifiTapName[] = "wifi_tap_name";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWirelessIp	host/libs/allocd/alloc_utils.h	/^constexpr char kWirelessIp[] = "192.168.96";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
kWithoutServiceCenterAddress	host/commands/modem_simulator/pdu_parser.cpp	/^static const std::string kWithoutServiceCenterAddress     = "00";$/;"	v	namespace:cuttlefish	typeref:typename:const std::string	file:
kWmediumdApiServerSocket	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWmediumdApiServerSocket[] = "wmediumd_api_server_socket";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kWmediumdConfig	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kWmediumdConfig[] = "wmediumd_config";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kXRes	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kXRes[] = "x_res";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kXResField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kXResField = "x_res";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kYRes	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kYRes[] = "y_res";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kYResField	host/frontend/webrtc/lib/streamer.cpp	/^constexpr auto kYResField = "y_res";$/;"	v	namespace:cuttlefish::webrtc_streaming::__anonab9390d10111	typeref:typename:auto
kYes	host/libs/config/cuttlefish_config.h	/^    kYes,$/;"	e	enum:cuttlefish::CuttlefishConfig::Answer
keepaliveStatusInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::keepaliveStatusInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
kenableHostBluetooth	host/libs/config/cuttlefish_config.cpp	/^static constexpr char kenableHostBluetooth[] = "enable_host_bluetooth";$/;"	v	namespace:cuttlefish	typeref:typename:char[]	file:
kernel_log_events_handler_	host/frontend/webrtc/connection_observer.cpp	/^  cuttlefish::KernelLogEventsHandler* kernel_log_events_handler_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:cuttlefish::KernelLogEventsHandler *	file:
kernel_log_events_handler_	host/frontend/webrtc/connection_observer.h	/^  KernelLogEventsHandler* kernel_log_events_handler_;$/;"	m	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:KernelLogEventsHandler *
kernel_log_events_pipe_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD kernel_log_events_pipe_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:SharedFD	file:
kernel_log_fd_	host/frontend/webrtc/kernel_log_events_handler.h	/^  SharedFD kernel_log_fd_;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:SharedFD
kernel_log_pipe_	host/commands/run_cvd/launch.cc	/^  SharedFD kernel_log_pipe_;$/;"	m	class:cuttlefish::SecureEnvironment	typeref:typename:SharedFD	file:
kernel_log_pipe_	host/libs/config/adb/launch.cpp	/^  SharedFD kernel_log_pipe_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:SharedFD	file:
kernel_log_pipe_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::kernel_log_pipe_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
kernel_log_pipe_provider_	host/commands/run_cvd/boot_state_machine.cc	/^  KernelLogPipeProvider& kernel_log_pipe_provider_;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:KernelLogPipeProvider &	file:
kernel_log_pipe_provider_	host/commands/run_cvd/launch.cc	/^  KernelLogPipeProvider& kernel_log_pipe_provider_;$/;"	m	class:cuttlefish::SecureEnvironment	typeref:typename:KernelLogPipeProvider &	file:
kernel_log_subscription_id_	host/frontend/webrtc/connection_observer.cpp	/^  int kernel_log_subscription_id_ = -1;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:int	file:
kernel_path_	host/libs/config/data_image.cpp	/^  std::string kernel_path_;$/;"	m	class:cuttlefish::InitializeEspImageImpl	typeref:typename:std::string	file:
key	common/libs/utils/flag_parser.h	/^  std::string key;$/;"	m	struct:cuttlefish::FlagMatch	typeref:typename:std::string
keyIdentifier	guest/hals/ril/reference-libril/ril.h	/^    char* keyIdentifier;       \/* The keyIdentifier Attribute value pair that helps$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:char *
keyIdentifier	guest/hals/ril/reference-libril/ril.h	/^  char * keyIdentifier;               \/* The keyIdentifier Attribute value pair that helps$/;"	m	struct:__anon0bfbaecf2a08	typeref:typename:char *
keyType	guest/hals/ril/reference-libril/ril.h	/^    RIL_PublicKeyType keyType; \/* Public key type *\/$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:RIL_PublicKeyType
key_	host/commands/secure_env/soft_gatekeeper.h	/^    std::unique_ptr<uint8_t[]> key_;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:std::unique_ptr<uint8_t[]>
key_blob_maker_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::unique_ptr<TpmKeyBlobMaker> key_blob_maker_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::unique_ptr<TpmKeyBlobMaker>
key_factories_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::map<keymaster_algorithm_t, std::unique_ptr<keymaster::KeyFactory>> key_factories_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::map<keymaster_algorithm_t,std::unique_ptr<keymaster::KeyFactory>>
keyboard-capture-control	host/frontend/webrtc_operator/assets/client.html	/^            <div id="keyboard-capture-control" title="Capture Keyboard"><\/div>$/;"	I
keyboard_client	host/frontend/webrtc/connection_observer.h	/^  SharedFD keyboard_client;$/;"	m	struct:cuttlefish::InputSockets	typeref:typename:SharedFD
keyboard_destroy_resource_callback	host/libs/wayland/wayland_seat.cpp	/^void keyboard_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
keyboard_implementation	host/libs/wayland/wayland_seat.cpp	/^const struct wl_keyboard_interface keyboard_implementation = {$/;"	v	namespace:wayland::__anona9f16c970111	typeref:typename:const struct wl_keyboard_interface
keyboard_release	host/libs/wayland/wayland_seat.cpp	/^void keyboard_release(wl_client*, wl_resource* keyboard) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
keyboard_server	host/frontend/webrtc/connection_observer.h	/^  SharedFD keyboard_server;$/;"	m	struct:cuttlefish::InputSockets	typeref:typename:SharedFD
keyboard_server_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD keyboard_server_;$/;"	m	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:SharedFD	file:
keyboard_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::keyboard_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
keyboard_socket_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::keyboard_socket_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
keymaster	common/libs/security/keymaster_channel.h	/^namespace keymaster {$/;"	n
keymaster	guest/hals/keymaster/remote/remote_keymaster.cpp	/^namespace keymaster {$/;"	n	file:
keymaster	guest/hals/keymaster/remote/remote_keymaster.h	/^namespace keymaster {$/;"	n
keymaster	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^namespace keymaster {$/;"	n	file:
keymaster	guest/hals/keymaster/remote/remote_keymaster4_device.h	/^namespace keymaster {$/;"	n
keymaster	guest/hals/keymint/remote/remote_keymaster.cpp	/^namespace keymaster {$/;"	n	file:
keymaster	guest/hals/keymint/remote/remote_keymaster.h	/^namespace keymaster {$/;"	n
keymaster	guest/hals/keymint/remote/remote_keymint_operation.h	/^namespace keymaster {$/;"	n
keymaster	guest/hals/keymint/remote/remote_secure_clock.h	/^namespace keymaster {$/;"	n
keymaster	guest/hals/keymint/remote/remote_shared_secret.h	/^namespace keymaster {$/;"	n
keymaster_	host/commands/secure_env/keymaster_responder.h	/^  keymaster::AndroidKeymaster& keymaster_;$/;"	m	class:cuttlefish::KeymasterResponder	typeref:typename:keymaster::AndroidKeymaster &
keymaster_message	common/libs/security/keymaster_channel.h	/^struct keymaster_message {$/;"	s	namespace:keymaster
keymint	guest/hals/keymint/remote/remote_keymint_device.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware::security	file:
keymint	guest/hals/keymint/remote/remote_keymint_device.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware::security
keymint	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware::security	file:
keymint	guest/hals/keymint/remote/remote_keymint_operation.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware::security
keymint	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware::security	file:
keymint	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware::security
kgdb	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::kgdb() const { return (*dictionary_)[kKgdb].asBool(); }$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
khronos_boolean_enum_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^} khronos_boolean_enum_t;$/;"	t	typeref:enum:__anon5c4f198b0103
khronos_float_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef          float         khronos_float_t;$/;"	t	typeref:typename:float
khronos_int16_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef signed   short int     khronos_int16_t;$/;"	t	typeref:typename:signed short int
khronos_int32_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef __int32                 khronos_int32_t;$/;"	t	typeref:typename:__int32
khronos_int32_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef int                     khronos_int32_t;$/;"	t	typeref:typename:int
khronos_int32_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef int32_t                 khronos_int32_t;$/;"	t	typeref:typename:int32_t
khronos_int64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef __int64                 khronos_int64_t;$/;"	t	typeref:typename:__int64
khronos_int64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef int64_t                 khronos_int64_t;$/;"	t	typeref:typename:int64_t
khronos_int64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef long int                khronos_int64_t;$/;"	t	typeref:typename:long int
khronos_int64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef long long int           khronos_int64_t;$/;"	t	typeref:typename:long long int
khronos_int8_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef signed   char          khronos_int8_t;$/;"	t	typeref:typename:signed char
khronos_intptr_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t	typeref:typename:signed long int
khronos_intptr_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t	typeref:typename:signed long long int
khronos_ssize_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t	typeref:typename:signed long int
khronos_ssize_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t	typeref:typename:signed long long int
khronos_stime_nanoseconds_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef khronos_int64_t        khronos_stime_nanoseconds_t;$/;"	t	typeref:typename:khronos_int64_t
khronos_uint16_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t	typeref:typename:unsigned short int
khronos_uint32_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef uint32_t                khronos_uint32_t;$/;"	t	typeref:typename:uint32_t
khronos_uint32_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned __int32        khronos_uint32_t;$/;"	t	typeref:typename:unsigned __int32
khronos_uint32_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned int            khronos_uint32_t;$/;"	t	typeref:typename:unsigned int
khronos_uint64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef uint64_t                khronos_uint64_t;$/;"	t	typeref:typename:uint64_t
khronos_uint64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned __int64        khronos_uint64_t;$/;"	t	typeref:typename:unsigned __int64
khronos_uint64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned long int       khronos_uint64_t;$/;"	t	typeref:typename:unsigned long int
khronos_uint64_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned long long int  khronos_uint64_t;$/;"	t	typeref:typename:unsigned long long int
khronos_uint8_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t	typeref:typename:unsigned char
khronos_uintptr_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_uintptr_t;$/;"	t	typeref:typename:unsigned long int
khronos_uintptr_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned long long int khronos_uintptr_t;$/;"	t	typeref:typename:unsigned long long int
khronos_usize_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned long  int     khronos_usize_t;$/;"	t	typeref:typename:unsigned long int
khronos_usize_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef unsigned long long int khronos_usize_t;$/;"	t	typeref:typename:unsigned long long int
khronos_utime_nanoseconds_t	host/libs/graphics_detector/include/KHR/khrplatform.h	/^typedef khronos_uint64_t       khronos_utime_nanoseconds_t;$/;"	t	typeref:typename:khronos_uint64_t
klog_write	common/libs/net/netlink_request_test.cpp	/^extern "C" void klog_write(int \/* level *\/, const char* \/* format *\/, ...) {}$/;"	f	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:void
kmBlob2hidlVec	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline hidl_vec<uint8_t> kmBlob2hidlVec(const keymaster_blob_t& blob) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hidl_vec<uint8_t>
kmBlob2hidlVec	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline hidl_vec<uint8_t> kmBlob2hidlVec(const keymaster_key_blob_t& blob) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hidl_vec<uint8_t>
kmBuffer2hidlVec	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline hidl_vec<uint8_t> kmBuffer2hidlVec(const ::keymaster::Buffer& buf) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hidl_vec<uint8_t>
kmCertChain2Hidl	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline static hidl_vec<hidl_vec<uint8_t>> kmCertChain2Hidl($/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hidl_vec<hidl_vec<uint8_t>>	file:
kmParamSet2Hidl	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^static inline hidl_vec<KeyParameter> kmParamSet2Hidl(const keymaster_key_param_set_t& set) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hidl_vec<KeyParameter>	file:
knownMissing	tests/hal/hal_implementation_test.cpp	/^  bool knownMissing;$/;"	m	struct:AidlPackageCheck	typeref:typename:bool	file:
l1_size	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 l1_size;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
l1_table_offset	host/libs/image_aggregator/image_aggregator.cc	/^  Be64 l1_table_offset;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be64	file:
label	host/libs/image_aggregator/image_aggregator.h	/^  std::string label;$/;"	m	struct:cuttlefish::ImagePartition	typeref:typename:std::string
label	host/libs/image_aggregator/image_aggregator.h	/^  std::string label;$/;"	m	struct:cuttlefish::MultipleImagePartition	typeref:typename:std::string
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5808	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5908	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5a08	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5b08	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5f08	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
lac	guest/hals/ril/reference-libril/ril.h	/^    int lac;    \/* 16-bit Location Area Code, 0..65535, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int
lang_id_	host/libs/confui/host_renderer.h	/^  std::string lang_id_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::string
last_active_call_index_	host/commands/modem_simulator/call_service.h	/^  int32_t last_active_call_index_;$/;"	m	class:cuttlefish::CallService	typeref:typename:int32_t
last_buffer_	host/frontend/webrtc/display_handler.h	/^  std::shared_ptr<webrtc_streaming::VideoFrameBuffer> last_buffer_;$/;"	m	class:cuttlefish::DisplayHandler	typeref:typename:std::shared_ptr<webrtc_streaming::VideoFrameBuffer>
last_buffer_display_	host/frontend/webrtc/display_handler.h	/^  std::uint32_t last_buffer_display_ = 0;$/;"	m	class:cuttlefish::DisplayHandler	typeref:typename:std::uint32_t
last_buffer_mutex_	host/frontend/webrtc/display_handler.h	/^  std::mutex last_buffer_mutex_;$/;"	m	class:cuttlefish::DisplayHandler	typeref:typename:std::mutex
last_file_id_	host/commands/modem_simulator/sim_service.h	/^  std::string last_file_id_;$/;"	m	class:cuttlefish::SimService	typeref:typename:std::string
last_hop_capacity_kbps	guest/hals/ril/reference-libril/ril.h	/^  unsigned int last_hop_capacity_kbps; \/* last-hop cellular capacity: kilobits\/second. *\/$/;"	m	struct:__anon0bfbaecf2408	typeref:typename:unsigned int
last_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t last_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptPartitionEntry	typeref:typename:std::uint64_t	file:
last_modified_time	host/commands/fetcher/build_api.h	/^  unsigned long last_modified_time;$/;"	m	class:cuttlefish::Artifact	typeref:typename:unsigned long
last_subscriber_id_	host/frontend/webrtc/kernel_log_events_handler.h	/^  int last_subscriber_id_ = 0;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:int
last_tombstone_name	host/commands/tombstone_receiver/main.cpp	/^static std::string last_tombstone_name = "";$/;"	v	namespace:cuttlefish	typeref:typename:std::string	file:
last_usable_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t last_usable_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint64_t	file:
latency_bytes	host/libs/audio_connector/shm_layout.h	/^  Le32 latency_bytes;$/;"	m	struct:cuttlefish::virtio_snd_pcm_status	typeref:typename:Le32
latest_credential	host/commands/fetcher/credential_source.h	/^  std::string latest_credential;$/;"	m	class:cuttlefish::GceMetadataCredentialSource	typeref:typename:std::string
latest_request_settings_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  common::V1_0::helper::CameraMetadata latest_request_settings_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:common::V1_0::helper::CameraMetadata
latitude	guest/hals/ril/reference-libril/ril.h	/^    int latitude;       \/* Latitude is a decimal number as specified in 3GPP2 C.S0005-A v6.0.$/;"	m	struct:__anon0bfbaecf5c08	typeref:typename:int
latitude	guest/hals/ril/reference-libril/ril.h	/^    int latitude;       \/* Latitude is a decimal number as specified in 3GPP2 C.S0005-A v6.0.$/;"	m	struct:__anon0bfbaecf7c08	typeref:typename:int
launchComponent	host/commands/run_cvd/launch.cc	/^fruit::Component<PublicDeps, KernelLogPipeProvider> launchComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<PublicDeps,KernelLogPipeProvider>
launchModemComponent	host/commands/run_cvd/launch_modem.cpp	/^launchModemComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig,const CuttlefishConfig::InstanceSpecific>>
launchStreamerComponent	host/commands/run_cvd/launch_streamer.cpp	/^launchStreamerComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig,KernelLogPipeProvider,const CuttlefishConfig::InstanceSpecific,const CustomActionConfigProvider>>
launch_cvd	tools/upload_to_gce_and_run.py	/^def launch_cvd(args):$/;"	f
launch_cvd	tools/upload_via_ssh.py	/^def launch_cvd(args):$/;"	f
launch_cvd_flags	host/commands/metrics/proto/cf_metrics_event.proto	/^  repeated string launch_cvd_flags = 11;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:string
launch_instance	tools/create_base_image.go	/^var launch_instance string$/;"	v	package:main	typeref:typename:string
launcher_log_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::launcher_log_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
launcher_monitor_socket_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::launcher_monitor_socket_path()$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
layout_	host/libs/confui/host_renderer.h	/^  teeui::layout_t<teeui::ConfUILayout> layout_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::layout_t<teeui::ConfUILayout>
lceDataInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::lceDataInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
lce_status	guest/hals/ril/reference-libril/ril.h	/^  char lce_status;                 \/* LCE service status:$/;"	m	struct:__anon0bfbaecf2308	typeref:typename:char
lce_suspended	guest/hals/ril/reference-libril/ril.h	/^  unsigned char lce_suspended;         \/* LCE report going to be suspended? (e.g., radio$/;"	m	struct:__anon0bfbaecf2408	typeref:typename:unsigned char
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline ErrorCode legacy_enum_conversion(const keymaster_error_t value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:ErrorCode
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline SecurityLevel legacy_enum_conversion(const keymaster_security_level_t value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:SecurityLevel
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline Tag legacy_enum_conversion(const keymaster_tag_t value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:Tag
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline hw_authenticator_type_t legacy_enum_conversion(const HardwareAuthenticatorType value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:hw_authenticator_type_t
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline keymaster_key_format_t legacy_enum_conversion(const KeyFormat value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:keymaster_key_format_t
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline keymaster_purpose_t legacy_enum_conversion(const KeyPurpose value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:keymaster_purpose_t
legacy_enum_conversion	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline keymaster_tag_t legacy_enum_conversion(const Tag value) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:keymaster_tag_t
len	common/libs/fs/shared_fd.h	/^  size_t len() const { return len_; }$/;"	f	class:cuttlefish::ScopedMMap	typeref:typename:size_t
len	common/libs/utils/network.cpp	/^  std::uint8_t len;$/;"	m	struct:cuttlefish::Dhcp4MessageTypeOption	typeref:typename:std::uint8_t	file:
len	common/libs/utils/network.cpp	/^  std::uint8_t len;$/;"	m	struct:cuttlefish::Dhcp4ServerIdentifier	typeref:typename:std::uint8_t	file:
len	guest/hals/ril/reference-libril/ril.h	/^  char len;$/;"	m	struct:__anon0bfbaecf8308	typeref:typename:char
len	host/libs/allocd/request.h	/^  uint16_t len;      \/\/\/ length in bytes of the message payload$/;"	m	struct:cuttlefish::RequestHeader	typeref:typename:uint16_t
len	host/libs/audio_connector/buffers.h	/^  uint32_t len() const { return len_; }$/;"	f	class:cuttlefish::ShmBuffer	typeref:typename:uint32_t
len_	common/libs/fs/shared_fd.h	/^  size_t len_;$/;"	m	class:cuttlefish::ScopedMMap	typeref:typename:size_t
len_	host/libs/audio_connector/buffers.h	/^  const uint32_t len_;$/;"	m	class:cuttlefish::ShmBuffer	typeref:typename:const uint32_t
len_allowed_carriers	guest/hals/ril/reference-libril/ril.h	/^  int32_t len_allowed_carriers;         \/* length of array allowed_carriers *\/$/;"	m	struct:__anon0bfbaecf2708	typeref:typename:int32_t
len_allowed_carriers	guest/hals/ril/reference-libril/ril.h	/^  int32_t len_allowed_carriers;         \/* length of array allowed_carriers *\/$/;"	m	struct:__anon0bfbaecf2908	typeref:typename:int32_t
len_excluded_carriers	guest/hals/ril/reference-libril/ril.h	/^  int32_t len_excluded_carriers;        \/* length of array excluded_carriers *\/$/;"	m	struct:__anon0bfbaecf2708	typeref:typename:int32_t
len_excluded_carriers	guest/hals/ril/reference-libril/ril.h	/^  int32_t len_excluded_carriers;        \/* length of array excluded_carriers *\/$/;"	m	struct:__anon0bfbaecf2908	typeref:typename:int32_t
length	host/commands/secure_env/in_process_tpm.cpp	/^  uint32_t length;$/;"	m	struct:cuttlefish::tpm_message_header	typeref:typename:uint32_t	file:
length	host/libs/image_aggregator/cdisk_spec.proto	/^  uint64 length = 3;$/;"	f	message:CompositeDisk	typeref:typename:uint64
lid_switch_open	host/libs/config/custom_actions.h	/^  std::optional<bool> lid_switch_open;$/;"	m	struct:cuttlefish::DeviceState	typeref:typename:std::optional<bool>
lid_switch_open	shared/config/config_foldable.json	/^                                        "lid_switch_open": false,$/;"	b	object:custom_actions.0.device_states.0
lid_switch_open	shared/config/config_foldable.json	/^                                        "lid_switch_open": true,$/;"	b	object:custom_actions.1.device_states.0
line	guest/hals/ril/reference-ril/atchannel.h	/^    char *line;$/;"	m	struct:ATLine	typeref:typename:char *
lineCtrl	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_LineControlInfoRecord       lineCtrl;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_LineControlInfoRecord
lineCtrlPolarityIncluded	guest/hals/ril/reference-libril/ril.h	/^  char lineCtrlPolarityIncluded;$/;"	m	struct:__anon0bfbaecf8608	typeref:typename:char
lineCtrlPowerDenial	guest/hals/ril/reference-libril/ril.h	/^  char lineCtrlPowerDenial;$/;"	m	struct:__anon0bfbaecf8608	typeref:typename:char
lineCtrlReverse	guest/hals/ril/reference-libril/ril.h	/^  char lineCtrlReverse;$/;"	m	struct:__anon0bfbaecf8608	typeref:typename:char
lineCtrlToggle	guest/hals/ril/reference-libril/ril.h	/^  char lineCtrlToggle;$/;"	m	struct:__anon0bfbaecf8608	typeref:typename:char
line_	host/commands/kernel_log_monitor/kernel_log_server.h	/^  std::string line_;$/;"	m	class:monitor::KernelLogServer	typeref:typename:std::string
linux_buffer_params_add	host/libs/wayland/wayland_dmabuf.cpp	/^void linux_buffer_params_add(wl_client*,$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
linux_buffer_params_create	host/libs/wayland/wayland_dmabuf.cpp	/^void linux_buffer_params_create(wl_client* client,$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
linux_buffer_params_create_immed	host/libs/wayland/wayland_dmabuf.cpp	/^void linux_buffer_params_create_immed(wl_client* client,$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
linux_buffer_params_destroy	host/libs/wayland/wayland_dmabuf.cpp	/^void linux_buffer_params_destroy(wl_client*, wl_resource* params) {$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
linux_dmabuf_create_params	host/libs/wayland/wayland_dmabuf.cpp	/^void linux_dmabuf_create_params(wl_client* client,$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
linux_dmabuf_destroy	host/libs/wayland/wayland_dmabuf.cpp	/^void linux_dmabuf_destroy(wl_client*, wl_resource* dmabuf) {$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
list1_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list1_length = 0x10;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint16_t	file:
list1_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list1_length = 0x18;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
list1_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list1_length = 0xc;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
list1_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list1_type = kList1Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint16_t	file:
list1_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list1_type = kList1Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
list1_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list1_type = kList1Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
list2_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list2_length = 0xc;  \/\/ Note, this only covers until kValue1.$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
list2_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list2_length = 0xc;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint16_t	file:
list2_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list2_length = 0xc;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
list2_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list2_type = kList2Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90608	typeref:typename:const uint16_t	file:
list2_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list2_type = kList2Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90708	typeref:typename:const uint16_t	file:
list2_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list2_type = kList2Tag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90808	typeref:typename:const uint16_t	file:
listMutex	guest/hals/ril/reference-libril/ril_event.cpp	/^static pthread_mutex_t listMutex;$/;"	v	typeref:typename:pthread_mutex_t	file:
list_length	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list_length = 0xc;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90508	typeref:typename:const uint16_t	file:
list_type	common/libs/net/netlink_request_test.cpp	/^    const uint16_t list_type = kListTag;$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90508	typeref:typename:const uint16_t	file:
listen_event	guest/hals/ril/reference-libril/ril_ex.h	/^    struct ril_event* listen_event;$/;"	m	struct:SocketListenParam	typeref:struct:ril_event *
listener_state_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    ListenerState listener_state_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:ListenerState
listener_state_	guest/hals/confirmationui/guest_session.h	/^    ListenerState& listener_state_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:ListenerState &
listener_state_condv_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::condition_variable listener_state_condv_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::condition_variable
listener_state_condv_	guest/hals/confirmationui/guest_session.h	/^    std::condition_variable& listener_state_condv_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::condition_variable &
listener_state_lock_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    std::mutex listener_state_lock_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:std::mutex
listener_state_lock_	guest/hals/confirmationui/guest_session.h	/^    std::mutex& listener_state_lock_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::mutex &
lists_	common/libs/net/netlink_request.h	/^  std::vector<std::pair<nlattr*, int32_t>> lists_;$/;"	m	class:cuttlefish::NetlinkRequest	typeref:typename:std::vector<std::pair<nlattr *,int32_t>>
loader	host/frontend/webrtc_operator/assets/client.html	/^      <div id="loader"><\/div>$/;"	I
local	guest/hals/ril/reference-libril/ril_internal.h	/^    char local;         \/\/ responses to local commands do not go back to command process$/;"	m	struct:android::RequestInfo	typeref:typename:char
locale_	common/libs/confui/protocol_types.h	/^  std::string locale_;$/;"	m	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::string
locale_	guest/hals/confirmationui/guest_session.h	/^    std::string locale_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::string
locale_	host/libs/confui/session.h	/^  std::string locale_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::string
location	host/libs/allocd/resource_manager.h	/^  std::string location = kDefaultLocation;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:std::string
lock	common/libs/fs/shared_fd.cpp	/^SharedFD WeakFD::lock() const {$/;"	f	class:cuttlefish::WeakFD	typeref:typename:SharedFD
lock_	host/commands/modem_simulator/thread_looper.h	/^  std::mutex lock_;$/;"	m	class:cuttlefish::ThreadLooper	typeref:typename:std::mutex
lock_status	host/commands/modem_simulator/sim_service.h	/^    LockStatus lock_status;  \/\/ Ignore class$/;"	m	struct:cuttlefish::SimService::FacilityLock	typeref:typename:LockStatus
log_event	host/commands/metrics/proto/clientanalytics.proto	/^  repeated LogEvent log_event = 3;$/;"	f	message:LogRequest	typeref:typename:LogEvent
log_fd_	host/commands/kernel_log_monitor/kernel_log_server.h	/^  cuttlefish::SharedFD log_fd_;$/;"	m	class:monitor::KernelLogServer	typeref:typename:cuttlefish::SharedFD
log_pipe_provider_	host/commands/run_cvd/launch_streamer.cpp	/^  KernelLogPipeProvider& log_pipe_provider_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:KernelLogPipeProvider &	file:
log_pipe_provider_	host/libs/config/adb/launch.cpp	/^  KernelLogPipeProvider& log_pipe_provider_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:KernelLogPipeProvider &	file:
log_source	host/commands/metrics/proto/clientanalytics.proto	/^  optional int32 log_source = 2;$/;"	f	message:LogRequest	typeref:typename:int32
logcat_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::logcat_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
logcat_pipe_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::logcat_pipe_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
logicalModemList	guest/hals/ril/reference-libril/ril.h	/^    RIL_ModemInfo logicalModemList[MAX_LOGICAL_MODEM_NUM];$/;"	m	struct:__anon0bfbaecfbc08	typeref:typename:RIL_ModemInfo[]
logicalModemUuid	guest/hals/ril/reference-libril/ril.h	/^    char logicalModemUuid[MAX_UUID_LENGTH]; \/\/ A UUID typically "com.xxxx.lmX where X is the l/;"	m	struct:__anon0bfbaecf0a08	typeref:typename:char[]
logicalSlotId	guest/hals/ril/reference-libril/ril.h	/^    int logicalSlotId;$/;"	m	struct:__anon0bfbaecfb908	typeref:typename:int
logical_channels_	host/commands/modem_simulator/sim_service.h	/^  std::vector<LogicalChannel> logical_channels_;$/;"	m	class:cuttlefish::SimService	typeref:typename:std::vector<LogicalChannel>
long_name	host/commands/modem_simulator/network_service.h	/^    std::string long_name;$/;"	m	struct:cuttlefish::NetworkService::NetworkOperator	typeref:typename:std::string
longitude	guest/hals/ril/reference-libril/ril.h	/^    int longitude;      \/* Longitude is a decimal number as specified in 3GPP2 C.S0005-A v6.0.$/;"	m	struct:__anon0bfbaecf5c08	typeref:typename:int
longitude	guest/hals/ril/reference-libril/ril.h	/^    int longitude;      \/* Longitude is a decimal number as specified in 3GPP2 C.S0005-A v6.0.$/;"	m	struct:__anon0bfbaecf7c08	typeref:typename:int
lookup_addr	tools/tombstone_to_line.py	/^def lookup_addr(args, object_path, address):$/;"	f
looper_thread_	host/commands/modem_simulator/thread_looper.h	/^  std::thread looper_thread_;$/;"	m	class:cuttlefish::ThreadLooper	typeref:typename:std::thread
lte	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoLte     lte;$/;"	m	union:__anon0bfbaecf6e08::__anon0bfbaecf6f0a	typeref:typename:RIL_CellInfoLte
lte	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoLte_v12     lte;$/;"	m	union:__anon0bfbaecf7008::__anon0bfbaecf710a	typeref:typename:RIL_CellInfoLte_v12
lte	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoLte_v12     lte;$/;"	m	union:__anon0bfbaecf7208::__anon0bfbaecf730a	typeref:typename:RIL_CellInfoLte_v12
lte_cqi	host/commands/modem_simulator/network_service.h	/^    int lte_cqi;    \/* The current Channel Quality Indicator.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
lte_rsrp	host/commands/modem_simulator/network_service.h	/^    int lte_rsrp;   \/* The current Reference Signal Receive Power in dBm multiplied by -1.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
lte_rsrq	host/commands/modem_simulator/network_service.h	/^    int lte_rsrq;   \/* The current Reference Signal Receive Quality in dB multiplied by -1.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
lte_rssi	host/commands/modem_simulator/network_service.h	/^    int lte_rssi;   \/* Refer gsm_rssi *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
lte_rssnr	host/commands/modem_simulator/network_service.h	/^    int lte_rssnr;  \/* The current reference signal signal-to-noise ratio in 0.1 dB units.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
lte_ta	host/commands/modem_simulator/network_service.h	/^    int lte_ta;     \/* timing advance in micro seconds for a one way trip from cell to device.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
lws_context	host/frontend/webrtc/lib/ws_connection.cpp	/^  struct lws_context* lws_context() {$/;"	f	class:WsConnectionContextImpl	typeref:struct:lws_context *	file:
lws_context_	host/frontend/webrtc/lib/ws_connection.cpp	/^  struct lws_context* lws_context_;$/;"	m	class:WsConnectionContextImpl	typeref:struct:lws_context *	file:
mBluetoothChecker	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private BluetoothChecker mBluetoothChecker = null;$/;"	f	class:GceService	file:
mBroadcastReceiver	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private final GceBroadcastReceiver mBroadcastReceiver = new GceBroadcastReceiver();$/;"	f	class:GceService	file:
mConnChecker	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private ConnectivityChecker mConnChecker;$/;"	f	class:GceService	file:
mConnManager	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private final ConnectivityManager mConnManager;$/;"	f	class:GceWifiManager	file:
mConnManager	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private ConnectivityManager mConnManager;$/;"	f	class:RilE2eTests	file:
mConnManager	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private ConnectivityManager mConnManager;$/;"	f	class:WifiE2eTests	file:
mConnected	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private final GceFuture<Boolean> mConnected = new GceFuture<Boolean>("Connectivity");$/;"	f	class:ConnectivityChecker	file:
mContext	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private final Context mContext;$/;"	f	class:ConnectivityChecker	file:
mContext	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private final Context mContext;$/;"	f	class:GceWifiManager	file:
mContext	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private Context mContext;$/;"	f	class:RilE2eTests	file:
mContext	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private Context mContext;$/;"	f	class:WifiE2eTests	file:
mCounterOemHook	guest/hals/ril/reference-libril/ril_service.cpp	/^volatile int32_t mCounterOemHook[1];$/;"	v	typeref:typename:volatile int32_t[1]
mCounterOemHook	guest/hals/ril/reference-libril/ril_service.cpp	/^volatile int32_t mCounterOemHook[SIM_COUNT];$/;"	v	typeref:typename:volatile int32_t[]
mCounterRadio	guest/hals/ril/reference-libril/ril_service.cpp	/^volatile int32_t mCounterRadio[1];$/;"	v	typeref:typename:volatile int32_t[1]
mCounterRadio	guest/hals/ril/reference-libril/ril_service.cpp	/^volatile int32_t mCounterRadio[SIM_COUNT];$/;"	v	typeref:typename:volatile int32_t[]
mCounterRadioConfig	guest/hals/ril/reference-libril/ril_config.cpp	/^volatile int32_t mCounterRadioConfig;$/;"	v	typeref:typename:volatile int32_t
mEnabled	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^    private final GceFuture<Boolean> mEnabled = new GceFuture<Boolean>("Bluetooth");$/;"	f	class:BluetoothChecker	file:
mEventReporter	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private final EventReporter mEventReporter;$/;"	f	class:ConnectivityChecker	file:
mEventReporter	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private final EventReporter mEventReporter = new EventReporter();$/;"	f	class:GceService	file:
mEventReporter	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private final EventReporter mEventReporter;$/;"	f	class:GceWifiManager	file:
mExecutor	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private final JobExecutor mExecutor = new JobExecutor();$/;"	f	class:GceService	file:
mExecutor	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    private final ScheduledExecutorService mExecutor;$/;"	f	class:JobExecutor	file:
mHci	guest/hals/bt/remote/remote_bluetooth.cpp	/^  sp<IBluetoothHci> mHci;$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothDeathRecipient	typeref:typename:sp<IBluetoothHci>	file:
mJobExecutor	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private final JobExecutor mJobExecutor;$/;"	f	class:GceWifiManager	file:
mKmsgStream	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private FileOutputStream mKmsgStream = null;$/;"	f	class:EventReporter	file:
mKmsgWriter	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private PrintWriter mKmsgWriter = null;$/;"	f	class:EventReporter	file:
mMessageList	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    private List<String> mMessageList = new ArrayList<String>();$/;"	f	class:EventReporter	file:
mMonitorWifiJob	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private final MonitorWifiJob mMonitorWifiJob;$/;"	f	class:GceWifiManager	file:
mMostRecentAction	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private String mMostRecentAction = null;$/;"	f	class:GceService	file:
mName	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    private final String mName;$/;"	f	class:GceFuture	file:
mOemHookIndication	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<IOemHookIndication> mOemHookIndication;$/;"	m	struct:OemHookImpl	typeref:typename:sp<IOemHookIndication>	file:
mOemHookResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<IOemHookResponse> mOemHookResponse;$/;"	m	struct:OemHookImpl	typeref:typename:sp<IOemHookResponse>	file:
mPreviousDpi	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private int mPreviousDpi;$/;"	f	class:GceService	file:
mPreviousRotation	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private int mPreviousRotation;$/;"	f	class:GceService	file:
mPreviousScreenBounds	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private Point mPreviousScreenBounds;$/;"	f	class:GceService	file:
mRadioConfigIndication	guest/hals/ril/reference-libril/ril_config.cpp	/^    sp<V1_0::IRadioConfigIndication> mRadioConfigIndication;$/;"	m	struct:RadioConfigImpl	typeref:typename:sp<V1_0::IRadioConfigIndication>	file:
mRadioConfigIndicationV1_2	guest/hals/ril/reference-libril/ril_config.cpp	/^    sp<V1_2::IRadioConfigIndication> mRadioConfigIndicationV1_2;$/;"	m	struct:RadioConfigImpl	typeref:typename:sp<V1_2::IRadioConfigIndication>	file:
mRadioConfigResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^    sp<V1_0::IRadioConfigResponse> mRadioConfigResponse;$/;"	m	struct:RadioConfigImpl	typeref:typename:sp<V1_0::IRadioConfigResponse>	file:
mRadioConfigResponseV1_1	guest/hals/ril/reference-libril/ril_config.cpp	/^    sp<V1_1::IRadioConfigResponse> mRadioConfigResponseV1_1;$/;"	m	struct:RadioConfigImpl	typeref:typename:sp<V1_1::IRadioConfigResponse>	file:
mRadioConfigResponseV1_2	guest/hals/ril/reference-libril/ril_config.cpp	/^    sp<V1_2::IRadioConfigResponse> mRadioConfigResponseV1_2;$/;"	m	struct:RadioConfigImpl	typeref:typename:sp<V1_2::IRadioConfigResponse>	file:
mRadioConfigResponseV1_3	guest/hals/ril/reference-libril/ril_config.cpp	/^    sp<V1_3::IRadioConfigResponse> mRadioConfigResponseV1_3;$/;"	m	struct:RadioConfigImpl	typeref:typename:sp<V1_3::IRadioConfigResponse>	file:
mRadioIndication	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<IRadioIndication> mRadioIndication;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<IRadioIndication>	file:
mRadioIndicationV1_1	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_1::IRadioIndication> mRadioIndicationV1_1;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_1::IRadioIndication>	file:
mRadioIndicationV1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_2::IRadioIndication> mRadioIndicationV1_2;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_2::IRadioIndication>	file:
mRadioIndicationV1_3	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_3::IRadioIndication> mRadioIndicationV1_3;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_3::IRadioIndication>	file:
mRadioIndicationV1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_4::IRadioIndication> mRadioIndicationV1_4;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_4::IRadioIndication>	file:
mRadioIndicationV1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_5::IRadioIndication> mRadioIndicationV1_5;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_5::IRadioIndication>	file:
mRadioIndicationV1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_6::IRadioIndication> mRadioIndicationV1_6;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_6::IRadioIndication>	file:
mRadioResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<IRadioResponse> mRadioResponse;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<IRadioResponse>	file:
mRadioResponseV1_1	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_1::IRadioResponse> mRadioResponseV1_1;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_1::IRadioResponse>	file:
mRadioResponseV1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_2::IRadioResponse> mRadioResponseV1_2;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_2::IRadioResponse>	file:
mRadioResponseV1_3	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_3::IRadioResponse> mRadioResponseV1_3;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_3::IRadioResponse>	file:
mRadioResponseV1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_4::IRadioResponse> mRadioResponseV1_4;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_4::IRadioResponse>	file:
mRadioResponseV1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_5::IRadioResponse> mRadioResponseV1_5;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_5::IRadioResponse>	file:
mRadioResponseV1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^    sp<V1_6::IRadioResponse> mRadioResponseV1_6;$/;"	m	struct:RadioImpl_1_6	typeref:typename:sp<V1_6::IRadioResponse>	file:
mReportedWifiNotConnected	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        private boolean mReportedWifiNotConnected = false;$/;"	f	class:GceWifiManager.MonitorWifiJob	file:
mSimCardPowerState	guest/hals/ril/reference-libril/ril_service.cpp	/^    V1_1::CardPowerState mSimCardPowerState;$/;"	m	struct:RadioImpl_1_6	typeref:typename:V1_1::CardPowerState	file:
mSlotId	guest/hals/ril/reference-libril/ril_config.cpp	/^    int32_t mSlotId;$/;"	m	struct:RadioConfigImpl	typeref:typename:int32_t	file:
mSlotId	guest/hals/ril/reference-libril/ril_service.cpp	/^    int32_t mSlotId;$/;"	m	struct:OemHookImpl	typeref:typename:int32_t	file:
mSlotId	guest/hals/ril/reference-libril/ril_service.cpp	/^    int32_t mSlotId;$/;"	m	struct:RadioImpl_1_6	typeref:typename:int32_t	file:
mStartedJobs	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    private final Set<String> mStartedJobs;$/;"	f	class:JobExecutor	file:
mTag	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^    private final String mTag;$/;"	f	class:JobBase	file:
mTeleManager	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private TelephonyManager mTeleManager;$/;"	f	class:RilE2eTests	file:
mWifiManager	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private GceWifiManager mWifiManager = null;$/;"	f	class:GceService	file:
mWifiManager	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    private final WifiManager mWifiManager;$/;"	f	class:GceWifiManager	file:
mWifiManager	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    private WifiManager mWifiManager;$/;"	f	class:RilE2eTests	file:
mWifiManager	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private WifiManager mWifiManager;$/;"	f	class:WifiE2eTests	file:
mWifiReady	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        private final GceFuture<Boolean> mWifiReady =$/;"	f	class:GceWifiManager.MonitorWifiJob	file:
mWindowManager	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private WindowManager mWindowManager;$/;"	f	class:GceService	file:
m_	common/libs/concurrency/thread_safe_queue.h	/^  std::mutex m_;$/;"	m	class:cuttlefish::ThreadSafeQueue	typeref:typename:std::mutex
mac_address	common/libs/utils/network.h	/^  std::uint8_t mac_address[6];$/;"	m	struct:cuttlefish::DnsmasqDhcp4Lease	typeref:typename:std::uint8_t[6]
magic	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 magic;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
magic_cookie	common/libs/utils/network.cpp	/^  std::uint8_t magic_cookie[4];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[4]	file:
main	common/frontend/socket_vsock_proxy/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	guest/commands/bt_vhci_forwarder/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	guest/commands/dlkm_loader/dlkm_loader.cpp	/^int main(void) {$/;"	f	typeref:typename:int
main	guest/commands/rename_netiface/main.cpp	/^int main(int argc, char *argv[]) {$/;"	f	typeref:typename:int
main	guest/commands/sensor_injection/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	guest/commands/setup_wifi/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	guest/commands/vsoc_input_service/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	guest/hals/bt/remote/service.cpp	/^int main(int \/* argc *\/, char** \/* argv *\/) {$/;"	f	typeref:typename:int
main	guest/hals/camera/external-service.cpp	/^int main() {$/;"	f	typeref:typename:int
main	guest/hals/confirmationui/service.cpp	/^int main() {$/;"	f	typeref:typename:int
main	guest/hals/gatekeeper/remote/service.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	guest/hals/health/storage/service.cpp	/^int main() {$/;"	f	typeref:typename:int
main	guest/hals/keymaster/remote/service4.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	guest/hals/keymint/remote/service.cpp	/^int main(int, char** argv) {$/;"	f	typeref:typename:int
main	guest/hals/ril/reference-ril/reference-ril.c	/^int main (int argc, char **argv)$/;"	f	typeref:typename:int
main	guest/hals/rild/rild_cuttlefish.c	/^int main(int argc, char **argv) {$/;"	f	typeref:typename:int
main	guest/monitoring/tombstone_transmit/tombstone_producer.cpp	/^int __attribute__((noreturn)) main() {$/;"	f	typeref:typename:int
main	guest/monitoring/tombstone_transmit/tombstone_transmit.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	guest/services/suspend_blocker/suspend_blocker.cpp	/^int main() {$/;"	f	typeref:typename:int
main	host/commands/append_squashfs_overlay/src/main.rs	/^fn main() -> Result<()> {$/;"	f
main	host/commands/assemble_cvd/assemble_cvd.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/bt_connector/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/config_server/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/console_forwarder/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/cvd/main.cc	/^int main(int argc, char** argv) { return cuttlefish::CvdMain(argc, argv); }$/;"	f	typeref:typename:int
main	host/commands/fetcher/fetch_cvd.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/health/health.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/host_bugreport/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/kernel_log_monitor/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/log_tee/log_tee.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/logcat_receiver/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/metrics/metrics.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/modem_simulator/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/modem_simulator/unittest/main_test.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/powerwash_cvd/powerwash_cvd.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/restart_cvd/restart_cvd.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/run_cvd/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/secure_env/secure_env.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/start/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/status/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/stop/main.cc	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/tombstone_receiver/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/commands/wmediumd_control/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/example_custom_actions/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/frontend/adb_connector/main.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	host/frontend/webrtc/main.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/frontend/webrtc_operator/server.cpp	/^int main(int argc, char** argv) {$/;"	f	typeref:typename:int
main	host/libs/allocd/allocd.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	host/libs/allocd/test/client.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	host/libs/graphics_detector/detect_graphics.cpp	/^int main(int argc, char* argv[]) {$/;"	f	typeref:typename:int
main	tools/create_base_image.go	/^func main() {$/;"	f	package:main
main	tools/create_base_image.go	/^package main$/;"	p
main	tools/create_base_image_hostlib.sh	/^main() {$/;"	f
main	tools/flash-blk-dev.sh	/^main()$/;"	f
main	tools/upload_to_gce_and_run.py	/^def main():$/;"	f
main	tools/upload_via_ssh.py	/^def main():$/;"	f
mainLoop	guest/hals/ril/reference-ril/reference-ril.c	/^mainLoop(void *param __unused)$/;"	f	typeref:typename:void *	file:
main_loop_thread_	host/libs/confui/host_server.h	/^  std::thread main_loop_thread_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:std::thread
make	host/commands/fetcher/credential_source.cc	/^std::unique_ptr<CredentialSource> FixedCredentialSource::make($/;"	f	class:cuttlefish::FixedCredentialSource	typeref:typename:std::unique_ptr<CredentialSource>
make	host/commands/fetcher/credential_source.cc	/^std::unique_ptr<CredentialSource> GceMetadataCredentialSource::make($/;"	f	class:cuttlefish::GceMetadataCredentialSource	typeref:typename:std::unique_ptr<CredentialSource>
makeSafeCallback	host/commands/modem_simulator/thread_looper.h	/^std::function<void()> makeSafeCallback($/;"	f	namespace:cuttlefish	typeref:typename:std::function<void ()>
makeSafeCallback	host/commands/modem_simulator/thread_looper.h	/^std::function<void()> makeSafeCallback(T *me, std::function<void(T *)> f) {$/;"	f	namespace:cuttlefish	typeref:typename:std::function<void ()>
makeSendSmsResult	guest/hals/ril/reference-libril/ril_service.cpp	/^SendSmsResult makeSendSmsResult(RadioResponseInfo& responseInfo, int serial, int responseType,$/;"	f	typeref:typename:SendSmsResult
makeSendSmsResult_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^SendSmsResult makeSendSmsResult_1_6($/;"	f	typeref:typename:SendSmsResult
make_argv	guest/hals/rild/rild_cuttlefish.c	/^static int make_argv(char * args, char ** argv) {$/;"	f	typeref:typename:int	file:
make_device	recovery/recovery_ui.cpp	/^Device* make_device() {$/;"	f	typeref:typename:Device *
managed_resources_	host/libs/allocd/resource_manager.h	/^  std::map<uint32_t, std::shared_ptr<StaticResource>> managed_resources_;$/;"	m	class:cuttlefish::Session	typeref:typename:std::map<uint32_t,std::shared_ptr<StaticResource>>
managed_sessions_	host/libs/allocd/resource_manager.h	/^  std::map<uint32_t, std::shared_ptr<Session>> managed_sessions_;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:std::map<uint32_t,std::shared_ptr<Session>>
mapNetworkRegistrationResponse	guest/hals/ril/reference-ril/reference-ril.c	/^static int mapNetworkRegistrationResponse(int in_response) {$/;"	f	typeref:typename:int	file:
mapRadioAccessNetworkToTech	guest/hals/ril/reference-ril/reference-ril.c	/^int mapRadioAccessNetworkToTech(RIL_RadioAccessNetworks network) {$/;"	f	typeref:typename:int
map_mutex_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::mutex map_mutex_;$/;"	m	class:WsConnectionContextImpl	typeref:typename:std::mutex	file:
match	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  std::string_view match;   \/\/ Substring to match in the kernel logs$/;"	m	struct:__anonfa7764770111::__anonfa7764770208	typeref:typename:std::string_view	file:
match_data	guest/hals/ril/reference-libril/ril.h	/^    const char * match_data;$/;"	m	struct:__anon0bfbaecf2608	typeref:typename:const char *
match_mode	host/commands/modem_simulator/modem_service.h	/^  MatchMode match_mode;$/;"	m	class:cuttlefish::CommandHandler	typeref:typename:MatchMode
match_type	guest/hals/ril/reference-libril/ril.h	/^    RIL_CarrierMatchType match_type;   \/* Specify match type for the carrier.$/;"	m	struct:__anon0bfbaecf2608	typeref:typename:RIL_CarrierMatchType
maxActiveData	guest/hals/ril/reference-libril/ril.h	/^    int maxActiveData;$/;"	m	struct:__anon0bfbaecfbc08	typeref:typename:int
maxActiveInternetData	guest/hals/ril/reference-libril/ril.h	/^    int maxActiveInternetData;$/;"	m	struct:__anon0bfbaecfbc08	typeref:typename:int
maxConns	guest/hals/ril/reference-libril/ril.h	/^    int maxConns;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
maxConns	guest/hals/ril/reference-libril/ril.h	/^    int maxConns;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
maxConnsTime	guest/hals/ril/reference-libril/ril.h	/^    int maxConnsTime;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
maxConnsTime	guest/hals/ril/reference-libril/ril.h	/^    int maxConnsTime;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
maxData	guest/hals/ril/reference-libril/ril.h	/^   int maxData;$/;"	m	struct:__anon0bfbaecf9108	typeref:typename:int
maxDataCalls	guest/hals/ril/reference-libril/ril.h	/^    int32_t maxDataCalls;                 \/\/ The maximum number of simultaneous Data Calls tha/;"	m	struct:__anon0bfbaecf8008	typeref:typename:int32_t
maxKeepaliveIntervalMillis	guest/hals/ril/reference-libril/ril.h	/^    int maxKeepaliveIntervalMillis;          \/* Maximum milliseconds between two packets *\/$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:int
maxSearchTime	guest/hals/ril/reference-libril/ril.h	/^    int32_t maxSearchTime;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:int32_t
maxStandby	guest/hals/ril/reference-libril/ril.h	/^   int maxStandby;$/;"	m	struct:__anon0bfbaecf9108	typeref:typename:int
maxVoice	guest/hals/ril/reference-libril/ril.h	/^   int maxVoice;$/;"	m	struct:__anon0bfbaecf9108	typeref:typename:int
max_blob_size_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  unsigned int max_blob_size_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:unsigned int
max_elements_	common/libs/concurrency/thread_safe_queue.h	/^  std::size_t max_elements_{};$/;"	m	class:cuttlefish::ThreadSafeQueue	typeref:typename:std::size_t
max_elements_handler_	common/libs/concurrency/thread_safe_queue.h	/^  QueueFullHandler max_elements_handler_{};$/;"	m	class:cuttlefish::ThreadSafeQueue	typeref:typename:QueueFullHandler
max_message_size_	common/libs/utils/unix_sockets.h	/^  std::uint32_t max_message_size_;$/;"	m	class:cuttlefish::UnixMessageSocket	typeref:typename:std::uint32_t
maximum_object_slots_	host/commands/secure_env/tpm_resource_manager.h	/^  const std::uint32_t maximum_object_slots_;$/;"	m	class:cuttlefish::TpmResourceManager	typeref:typename:const std::uint32_t
mcc	guest/hals/ril/reference-libril/ril.h	/^    char* mcc;                 \/* MCC of the Carrier. *\/$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:char *
mcc	guest/hals/ril/reference-libril/ril.h	/^    const char * mcc;$/;"	m	struct:__anon0bfbaecf2608	typeref:typename:const char *
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;           \/* 3-digit Mobile Country Code, in range[0, 999]; This value must$/;"	m	struct:__anon0bfbaecf6108	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5a08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5b08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5d08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5e08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5f08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf5808	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf5908	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^    int mcc;    \/* 3-digit Mobile Country Code, 0..999, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:int
mcc	guest/hals/ril/reference-libril/ril.h	/^  char * mcc;                         \/* MCC of the Carrier. *\/$/;"	m	struct:__anon0bfbaecf2a08	typeref:typename:char *
mccMncs	guest/hals/ril/reference-libril/ril.h	/^    char **mccMncs;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:char **
mccMncsNumbers	guest/hals/ril/reference-libril/ril.h	/^    uint32_t mccMncsNumbers;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:uint32_t
md5	host/commands/fetcher/build_api.h	/^  std::string md5;$/;"	m	class:cuttlefish::Artifact	typeref:typename:std::string
measurement_file_read_thread_	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::thread measurement_file_read_thread_;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::thread	file:
members_	host/commands/secure_env/composite_serialization.h	/^  std::vector<keymaster::Serializable*> members_;$/;"	m	class:cuttlefish::CompositeSerializable	typeref:typename:std::vector<keymaster::Serializable * >
memfd_create_wrapper	common/libs/fs/shared_fd.cpp	/^int memfd_create_wrapper(const char* name, unsigned int flags) {$/;"	f	namespace:cuttlefish::__anond70c3a4f0111	typeref:typename:int
memory_mb	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::memory_mb() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
memory_mb	shared/config/config_auto.json	/^	"memory_mb" : 4096$/;"	n
memory_mb	shared/config/config_foldable.json	/^	"memory_mb" : 4096,$/;"	n
memory_mb	shared/config/config_phone.json	/^	"memory_mb" : 2048$/;"	n
memory_mb	shared/config/config_tablet.json	/^	"memory_mb" : 4096$/;"	n
memory_mb	shared/config/config_tv.json	/^	"memory_mb" : 2048$/;"	n
memsetAndFreeStrings	guest/hals/ril/reference-libril/ril_service.cpp	/^void memsetAndFreeStrings(int numPointers, ...) {$/;"	f	typeref:typename:void
merge_fs	host/commands/append_squashfs_overlay/src/main.rs	/^fn merge_fs(src: &Path, overlay: &Path, dest: &Path, overwrite: bool) -> Result<()> {$/;"	f
message	guest/hals/ril/reference-libril/ril.h	/^    } message;$/;"	m	struct:__anon0bfbaecf1808	typeref:union:__anon0bfbaecf1808::__anon0bfbaecf190a
message	host/commands/modem_simulator/sms_service.h	/^    std::string message;$/;"	m	struct:cuttlefish::SmsService::SmsMessage	typeref:typename:std::string
message	host/frontend/webrtc_operator/assets/js/app.js	/^        let message = {$/;"	c	class:DeviceControlApp.getCustomDeviceStateButtonCb
messageRef	guest/hals/ril/reference-libril/ril.h	/^    int                       messageRef;  \/* Valid field if retry is set to nonzero.$/;"	m	struct:__anon0bfbaecf1808	typeref:typename:int
messageRef	guest/hals/ril/reference-libril/ril.h	/^    int messageRef;   \/* TP-Message-Reference for GSM,$/;"	m	struct:__anon0bfbaecf1a08	typeref:typename:int
message_	common/libs/confui/protocol_types.h	/^  std::vector<std::uint8_t> message_;$/;"	m	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:std::vector<std::uint8_t>
message_	host/libs/confui/session.h	/^  std::vector<std::uint8_t> message_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::vector<std::uint8_t>
message_id_	host/commands/modem_simulator/sms_service.h	/^  int message_id_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:int
message_loop_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::thread message_loop_;$/;"	m	class:WsConnectionContextImpl	typeref:typename:std::thread	file:
message_reference_	host/commands/modem_simulator/pdu_parser.h	/^  std::string message_reference_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:std::string
message_reference_	host/commands/modem_simulator/sms_service.h	/^  int message_reference_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:int
message_sender_	host/frontend/webrtc/lib/camera_controller.h	/^  std::function<bool(const Json::Value& msg)> message_sender_;$/;"	m	class:cuttlefish::CameraController	typeref:typename:std::function<bool (const Json::Value & msg)>
message_type	common/libs/utils/network.cpp	/^  Dhcp4MessageTypeOption message_type;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:Dhcp4MessageTypeOption	file:
message_type	common/libs/utils/network.cpp	/^  std::uint8_t message_type;$/;"	m	struct:cuttlefish::Dhcp4MessageTypeOption	typeref:typename:std::uint8_t	file:
message_version	guest/hals/keymaster/remote/remote_keymaster.h	/^    uint32_t message_version() { return kDefaultMessageVersion; }$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:uint32_t
message_version	guest/hals/keymint/remote/remote_keymaster.h	/^  uint32_t message_version() { return message_version_; }$/;"	f	class:keymaster::RemoteKeymaster	typeref:typename:uint32_t
message_version_	guest/hals/keymint/remote/remote_keymaster.h	/^  const uint32_t message_version_;$/;"	m	class:keymaster::RemoteKeymaster	typeref:typename:const uint32_t
messages_	host/frontend/webrtc_operator/client_handler.cpp	/^  std::vector<Json::Value> messages_;$/;"	m	class:cuttlefish::PollConnectionHandler	typeref:typename:std::vector<Json::Value>	file:
messages_on_sim_card_	host/commands/modem_simulator/sms_service.h	/^  std::map<int, SmsMessage> messages_on_sim_card_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:std::map<int,SmsMessage>
metadata	host/commands/kernel_log_monitor/utils.h	/^  Json::Value metadata;$/;"	m	struct:monitor::ReadEventResult	typeref:typename:Json::Value
metadata_	guest/hals/camera/vsock_camera_device_3_4.h	/^  VsockCameraMetadata metadata_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:VsockCameraMetadata
metadata_level	common/libs/utils/tee_logging.h	/^  MetadataLevel metadata_level;$/;"	m	struct:cuttlefish::SeverityTarget	typeref:typename:MetadataLevel
metrics_binary	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::metrics_binary() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
metrics_event	host/commands/metrics/proto/cf_log.proto	/^  optional MetricsEvent metrics_event = 5;$/;"	f	message:cuttlefish.CuttlefishLogEvent	typeref:typename:MetricsEvent
mic-capture-control	host/frontend/webrtc_operator/assets/client.html	/^            <div id="mic-capture-control" title="Capture Microphone"><\/div>$/;"	I
micSenders	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #micSenders = [];$/;"	M	class:DeviceConnection
midDrag	host/frontend/webrtc_operator/assets/js/controls.js	/^    midDrag: false,$/;"	p	class:createModalButton.modalOffsets
mids	host/commands/modem_simulator/sms_service.h	/^    std::string mids;$/;"	m	struct:cuttlefish::SmsService::BroadcastConfig	typeref:typename:std::string
misc_path_	host/libs/config/data_image.cpp	/^  MiscImagePath& misc_path_;$/;"	m	class:cuttlefish::InitializeMiscImageImpl	typeref:typename:MiscImagePath &	file:
misc_service_	host/commands/modem_simulator/modem_simulator.h	/^  MiscService* misc_service_{nullptr};$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:MiscService *
misc_service_	host/commands/modem_simulator/network_service.h	/^  MiscService* misc_service_ = nullptr;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:MiscService *
mkv_mutex_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::mutex mkv_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Impl	typeref:typename:std::mutex	file:
mnc	guest/hals/ril/reference-libril/ril.h	/^    char* mnc;                 \/* MNC of the Carrier. *\/$/;"	m	struct:__anon0bfbaecf2c08	typeref:typename:char *
mnc	guest/hals/ril/reference-libril/ril.h	/^    const char * mnc;$/;"	m	struct:__anon0bfbaecf2608	typeref:typename:const char *
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;           \/* 2 or 3-digit Mobile Network Code, in range [0, 999], This value must /;"	m	struct:__anon0bfbaecf6108	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5808	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5908	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5a08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5b08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5d08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5e08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^    int mnc;    \/* 2 or 3-digit Mobile Network Code, 0..999;$/;"	m	struct:__anon0bfbaecf5f08	typeref:typename:int
mnc	guest/hals/ril/reference-libril/ril.h	/^  char * mnc ;                        \/* MNC of the Carrier. *\/$/;"	m	struct:__anon0bfbaecf2a08	typeref:typename:char *
mnc_digit	guest/hals/ril/reference-libril/ril.h	/^    int mnc_digit;\/*2 or 3-digit*\/$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:int
mnc_digit	guest/hals/ril/reference-libril/ril.h	/^    int mnc_digit;\/*2 or 3-digit*\/$/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
mnc_digit	guest/hals/ril/reference-libril/ril.h	/^    int mnc_digit;\/*2 or 3-digit*\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
mnc_digit	guest/hals/ril/reference-libril/ril.h	/^    int mnc_digit;\/*2 or 3-digit*\/$/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int
mobile_bridge_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::mobile_bridge_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
mobile_tap	host/commands/assemble_cvd/alloc.h	/^  IfaceData mobile_tap;$/;"	m	struct:cuttlefish::IfaceConfig	typeref:typename:IfaceData
mobile_tap_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::mobile_tap_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
modalOffsets	host/frontend/webrtc_operator/assets/js/controls.js	/^  let modalOffsets = {$/;"	c	class:createModalButton
mode	common/libs/utils/flag_parser.h	/^  FlagAliasMode mode;$/;"	m	struct:cuttlefish::FlagAlias	typeref:typename:FlagAliasMode
mode	host/commands/modem_simulator/sms_service.h	/^    int mode;$/;"	m	struct:cuttlefish::SmsService::BroadcastConfig	typeref:typename:int
mode	host/commands/modem_simulator/sup_service.h	/^    int mode;                 \/\/ 0: disable; 1: enable; 2: query status$/;"	m	struct:cuttlefish::SupService::CallWaitingInfo	typeref:typename:int
mode_flag_	host/libs/config/adb/flags.cpp	/^  Flag mode_flag_;$/;"	m	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:Flag	file:
mode_help	host/libs/config/adb/flags.cpp	/^  static constexpr char mode_help[] =$/;"	m	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:char[]	file:
mode_mtx_	host/libs/confui/host_mode_ctrl.h	/^  std::mutex mode_mtx_;$/;"	m	class:cuttlefish::HostModeCtrl	typeref:typename:std::mutex
mode_mtx_	host/libs/screen_connector/screen_connector_ctrl.h	/^  std::mutex mode_mtx_;$/;"	m	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:std::mutex
modem	guest/hals/ril/reference-libril/ril.h	/^     RIL_HardwareConfig_Modem modem;$/;"	m	union:__anon0bfbaecf9308::__anon0bfbaecf940a	typeref:typename:RIL_HardwareConfig_Modem
modem	host/commands/modem_simulator/cf_device_config.cpp	/^namespace modem {$/;"	n	namespace:cuttlefish	file:
modem	host/commands/modem_simulator/device_config.h	/^namespace modem {$/;"	n	namespace:cuttlefish
modemCognitive	guest/hals/ril/reference-libril/ril.h	/^    int modemCognitive;         \/* indicating the APN setting was sent to the modem through$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:int
modemId	guest/hals/ril/reference-libril/ril.h	/^    int modemId;$/;"	m	struct:__anon0bfbaecfbb08	typeref:typename:int
modemResetInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::modemResetInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
modemUuid	guest/hals/ril/reference-libril/ril.h	/^   char modemUuid[MAX_UUID_LENGTH];$/;"	m	struct:__anon0bfbaecf9208	typeref:typename:char[]
modem_	host/commands/modem_simulator/channel_monitor.h	/^  ModemSimulator* modem_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:ModemSimulator *
modem_id_	host/commands/modem_simulator/modem_simulator.h	/^  int32_t modem_id_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:int32_t
modem_radio_capability_	host/commands/modem_simulator/network_service.h	/^  int modem_radio_capability_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:int
modem_services_	host/commands/modem_simulator/modem_simulator.h	/^  std::map<ModemServiceType, std::unique_ptr<ModemService>> modem_services_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:std::map<ModemServiceType,std::unique_ptr<ModemService>>
modem_side_	host/commands/modem_simulator/unittest/service_test.cpp	/^  static Client* modem_side_;$/;"	m	class:ModemServiceTest	typeref:typename:Client *	file:
modem_side_	host/commands/modem_simulator/unittest/service_test.cpp	/^Client* ModemServiceTest::modem_side_ = nullptr;$/;"	m	class:ModemServiceTest	typeref:typename:Client *
modem_simulator_	host/commands/modem_simulator/unittest/service_test.cpp	/^  static ModemSimulator* modem_simulator_;$/;"	m	class:ModemServiceTest	typeref:typename:ModemSimulator *	file:
modem_simulator_	host/commands/modem_simulator/unittest/service_test.cpp	/^ModemSimulator* ModemServiceTest::modem_simulator_ = nullptr;$/;"	m	class:ModemServiceTest	typeref:typename:ModemSimulator *
modem_simulator_host_id	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::modem_simulator_host_id() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
modem_simulator_instance_number	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::modem_simulator_instance_number() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
modem_simulator_ports	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::modem_simulator_ports() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
modem_simulator_sim_type	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::modem_simulator_sim_type() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
modem_technoloy	host/commands/modem_simulator/nvram_config.cpp	/^int NvramConfig::InstanceSpecific::modem_technoloy() const {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:int
modes_	host/libs/config/adb/data.cpp	/^  std::set<AdbMode> modes_;$/;"	m	class:cuttlefish::AdbConfigImpl	typeref:typename:std::set<AdbMode>	file:
monitor	host/commands/kernel_log_monitor/kernel_log_server.cc	/^namespace monitor {$/;"	n	file:
monitor	host/commands/kernel_log_monitor/kernel_log_server.h	/^namespace monitor {$/;"	n
monitor	host/commands/kernel_log_monitor/utils.cc	/^namespace monitor {$/;"	n	file:
monitor	host/commands/kernel_log_monitor/utils.h	/^namespace monitor {$/;"	n
monitor_	host/commands/run_cvd/process_monitor.h	/^  pid_t monitor_;$/;"	m	class:cuttlefish::ProcessMonitor	typeref:typename:pid_t
monitor_socket_	host/commands/run_cvd/process_monitor.h	/^  SharedFD monitor_socket_;$/;"	m	class:cuttlefish::ProcessMonitor	typeref:typename:SharedFD
monitor_thread_	host/commands/modem_simulator/channel_monitor.h	/^  std::thread monitor_thread_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:std::thread
monitored_processes_	host/commands/run_cvd/process_monitor.h	/^  std::vector<MonitorEntry> monitored_processes_;$/;"	m	class:cuttlefish::ProcessMonitor	typeref:typename:std::vector<MonitorEntry>
mouseCtx	host/frontend/webrtc_operator/assets/js/app.js	/^    let mouseCtx = {$/;"	c	class:DeviceControlApp.startMouseTracking
mouseDownOffsetX	host/frontend/webrtc_operator/assets/js/controls.js	/^    mouseDownOffsetX: null,$/;"	p	class:createModalButton.modalOffsets
mouseDownOffsetY	host/frontend/webrtc_operator/assets/js/controls.js	/^    mouseDownOffsetY: null,$/;"	p	class:createModalButton.modalOffsets
msg	common/libs/net/netlink_client.cpp	/^  struct msghdr msg {};$/;"	s	function:cuttlefish::__anon61381e100111::NetlinkClientImpl::CheckResponse	file:
msg_len	guest/hals/confirmationui/include/TrustyIpc.h	/^    uint32_t msg_len;$/;"	m	struct:confirmationui_msg_args	typeref:typename:uint32_t
msg_queue	host/libs/msg_queue/README.md	/^# msg_queue$/;"	c
msgid	host/libs/msg_queue/msg_queue.h	/^  int msgid;$/;"	m	class:cuttlefish::SysVMessageQueue	typeref:typename:int
mtap	host/libs/allocd/request.h	/^  mtap,         \/\/ mobile tap$/;"	e	enum:cuttlefish::IfaceType
mtu	guest/hals/ril/reference-libril/ril.h	/^    int             mtu;        \/* MTU received from network$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:int
mtu	guest/hals/ril/reference-libril/ril.h	/^    int mtu;                    \/* maximum transmission unit (MTU) size in bytes *\/$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:int
mtu	guest/hals/ril/reference-libril/ril.h	/^    int mtu;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
mtuV4	guest/hals/ril/reference-libril/ril.h	/^    int             mtuV4;      \/* MTU received from network for IPv4.$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:int
mtuV6	guest/hals/ril/reference-libril/ril.h	/^    int             mtuV6;      \/* MTU received from network for IPv6.$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:int
mtx	host/frontend/webrtc/audio_handler.h	/^    std::mutex mtx;$/;"	m	struct:cuttlefish::AudioHandler::StreamDesc	typeref:typename:std::mutex
mtx_	common/libs/concurrency/semaphore.h	/^  std::mutex mtx_;$/;"	m	class:cuttlefish::Semaphore	typeref:typename:std::mutex
mtx_	host/libs/confui/host_utils.h	/^  std::mutex mtx_;$/;"	m	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:std::mutex
multiSimPolicy	guest/hals/ril/reference-libril/ril.h	/^  RIL_SimLockMultiSimPolicy multiSimPolicy; \/* multisim policy *\/$/;"	m	struct:__anon0bfbaecf2908	typeref:typename:RIL_SimLockMultiSimPolicy
multiplexer_	host/libs/screen_connector/screen_connector_multiplexer.h	/^  Multiplexer multiplexer_;$/;"	m	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:Multiplexer
multitouch_slot	host/frontend/webrtc/connection_observer.cpp	/^struct multitouch_slot {$/;"	s	namespace:cuttlefish	file:
mustShell	tools/create_base_image.go	/^func mustShell(cmd string) string {$/;"	f	package:main	typeref:typename:string
mute_on_	host/commands/modem_simulator/call_service.h	/^  bool mute_on_;$/;"	m	class:cuttlefish::CallService	typeref:typename:bool
mutex_	guest/hals/camera/stream_buffer_cache.h	/^  std::mutex mutex_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:std::mutex
mutex_	guest/hals/camera/vsock_camera_provider_2_7.h	/^  std::mutex mutex_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:std::mutex
mutex_	host/commands/fetcher/curl_wrapper.cc	/^  std::mutex mutex_;$/;"	m	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	typeref:typename:std::mutex	file:
mutex_instance	guest/hals/ril/reference-libril/rilSocketQueue.h	/^    pthread_mutex_t mutex_instance;$/;"	m	class:Ril_queue	typeref:typename:pthread_mutex_t
mvnoMatchData	guest/hals/ril/reference-libril/ril.h	/^    char *mvnoMatchData;        \/* MVNO match data. Can be anything defined by the carrier.$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
mvnoMatchData	guest/hals/ril/reference-libril/ril.h	/^    char *mvnoMatchData;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
mvnoType	guest/hals/ril/reference-libril/ril.h	/^    char *mvnoType;             \/* the MVNO type: possible values are "imsi", "gid", "spn" *\/$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
mvnoType	guest/hals/ril/reference-libril/ril.h	/^    char *mvnoType;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
myiccfile	host/commands/modem_simulator/unittest/service_test.cpp	/^static const char *myiccfile =$/;"	v	typeref:typename:const char *	file:
name	apex/com.google.aosp_cf_x86_64_phone.rros/apex_manifest.json	/^  "name": "com.google.aosp_cf_x86_64_phone.rros",$/;"	s
name	apex/com.google.cf.bt/manifest.json	/^  "name": "com.google.cf.bt",$/;"	s
name	apex/com.google.cf.input.config/apex_manifest.json	/^  "name": "com.android.input.config",$/;"	s
name	apex/com.google.cf.rild/apex_manifest.json	/^  "name": "com.google.cf.rild",$/;"	s
name	apex/com.google.cf.wifi/apex_manifest.json	/^  "name": "com.android.wifi.hal",$/;"	s
name	common/libs/utils/flag_parser.h	/^  std::string name;$/;"	m	struct:cuttlefish::FlagAlias	typeref:typename:std::string
name	guest/hals/ril/reference-libril/RilSocket.h	/^        const char* name;$/;"	m	class:RilSocket	typeref:typename:const char *
name	guest/hals/ril/reference-libril/ril.h	/^    char *          name;               \/* Remote party name *\/$/;"	m	struct:__anon0bfbaecf4208	typeref:typename:char *
name	guest/hals/ril/reference-libril/ril.h	/^    char *          name;               \/* Remote party name *\/$/;"	m	struct:__anon0bfbaecf4308	typeref:typename:char *
name	guest/hals/ril/reference-libril/ril.h	/^    char *          name;       \/* Remote party name *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char *
name	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_InfoRecName name;$/;"	m	struct:__anon0bfbaecf8908	typeref:typename:RIL_CDMA_InfoRecName
name	host/commands/assemble_cvd/alloc.h	/^  std::string name;$/;"	m	struct:cuttlefish::IfaceData	typeref:typename:std::string
name	host/commands/fetcher/build_api.h	/^  std::string name;$/;"	m	class:cuttlefish::Artifact	typeref:typename:std::string
name	host/libs/vm_manager/crosvm_manager.h	/^  static std::string name() { return "crosvm"; }$/;"	f	class:cuttlefish::vm_manager::CrosvmManager	typeref:typename:std::string
name	host/libs/vm_manager/qemu_manager.h	/^  static std::string name() { return "qemu_cli"; }$/;"	f	class:cuttlefish::vm_manager::QemuManager	typeref:typename:std::string
name	tests/hal/hal_implementation_test.cpp	/^  std::string name;$/;"	m	struct:VersionedAidlPackage	typeref:typename:std::string	file:
name2id_	host/libs/confui/host_utils.h	/^  std::map<std::string, std::thread::id> name2id_;$/;"	m	class:cuttlefish::confui::thread::ThreadTracer	typeref:typename:std::map<std::string,std::thread::id>
namePresentation	guest/hals/ril/reference-libril/ril.h	/^    int             namePresentation; \/* 0=Allowed, 1=Restricted, 2=Not Specified\/Unknown 3=Pa/;"	m	struct:__anon0bfbaecf1108	typeref:typename:int
name_	common/libs/net/network_interface.h	/^  std::string name_;$/;"	m	class:cuttlefish::NetworkInterface	typeref:typename:std::string
name_	host/commands/start/flag_forwarder.cc	/^  std::string name_;$/;"	m	class:SubprocessFlag	typeref:typename:std::string	file:
name_	host/libs/allocd/resource.h	/^  std::string name_{};$/;"	m	class:cuttlefish::StaticResource	typeref:typename:std::string
nanos	host/commands/metrics/proto/common.proto	/^  required int32 nanos = 2;$/;"	f	message:Duration	typeref:typename:int32
nanos	host/commands/metrics/proto/common.proto	/^  required int32 nanos = 2;$/;"	f	message:Timestamp	typeref:typename:int32
nb_snapshots	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 nb_snapshots;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
nci	guest/hals/ril/reference-libril/ril.h	/^    uint64_t nci;      \/* NR Cell Identity in range [0, 68719476735] (36 bits) described in 3GP/;"	m	struct:__anon0bfbaecf6108	typeref:typename:uint64_t
net2modem	guest/hals/ril/reference-ril/reference-ril.c	/^static int net2modem[] = {$/;"	v	typeref:typename:int[]	file:
net2pmask	guest/hals/ril/reference-ril/reference-ril.c	/^static int32_t net2pmask[] = {$/;"	v	typeref:typename:int32_t[]	file:
netlink_fd_	common/libs/net/netlink_client.cpp	/^  SharedFD netlink_fd_;$/;"	m	class:cuttlefish::__anon61381e100111::NetlinkClientImpl	typeref:typename:SharedFD	file:
networkId	guest/hals/ril/reference-libril/ril.h	/^    int networkId;      \/* Network Id 0..65535, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf5c08	typeref:typename:int
networkId	guest/hals/ril/reference-libril/ril.h	/^    int networkId;      \/* Network Id 0..65535, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf7c08	typeref:typename:int
networkModePossible	guest/hals/ril/reference-ril/reference-ril.c	/^static int networkModePossible(ModemInfo *mdm, int nm)$/;"	f	typeref:typename:int	file:
networkScanResultInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::networkScanResultInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
networkStateChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::networkStateChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
network_infos	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfo_v12* network_infos;    \/\/ List of network information$/;"	m	struct:__anon0bfbaecfb308	typeref:typename:RIL_CellInfo_v12 *
network_infos_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t network_infos_length;      \/\/ Total length of RIL_CellInfo$/;"	m	struct:__anon0bfbaecfb308	typeref:typename:uint32_t
network_selection_mode	host/commands/modem_simulator/nvram_config.cpp	/^int NvramConfig::InstanceSpecific::network_selection_mode() const {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:int
network_service_	host/commands/modem_simulator/call_service.h	/^  NetworkService* network_service_;$/;"	m	class:cuttlefish::CallService	typeref:typename:NetworkService *
network_service_	host/commands/modem_simulator/modem_simulator.h	/^  NetworkService* network_service_{nullptr};$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:NetworkService *
network_service_	host/commands/modem_simulator/sim_service.h	/^  NetworkService* network_service_;$/;"	m	class:cuttlefish::SimService	typeref:typename:NetworkService *
network_thread_	host/frontend/webrtc/lib/streamer.cpp	/^  std::unique_ptr<rtc::Thread> network_thread_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::unique_ptr<rtc::Thread>	file:
network_type	host/commands/modem_simulator/network_service.h	/^    AccessTechnoloy network_type;$/;"	m	struct:cuttlefish::NetworkService::NetworkRegistrationStatus	typeref:typename:AccessTechnoloy
newBroadcastSmsInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::newBroadcastSmsInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
newSmsInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::newSmsInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
newSmsOnSimInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::newSmsOnSimInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
newSmsStatusReportInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::newSmsStatusReportInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
new_action	host/commands/kernel_log_monitor/main.cc	/^  struct sigaction new_action {$/;"	s	function:main	file:
new_action	host/commands/logcat_receiver/main.cpp	/^  struct sigaction new_action {$/;"	s	function:main	file:
new_item_	common/libs/concurrency/thread_safe_queue.h	/^  std::condition_variable new_item_;$/;"	m	class:cuttlefish::ThreadSafeQueue	typeref:typename:std::condition_variable
new_tombstone_create_notifier	guest/monitoring/tombstone_transmit/tombstone_transmit.cpp	/^static int new_tombstone_create_notifier(void) {$/;"	f	typeref:typename:int	file:
next	guest/hals/ril/reference-libril/RilSapSocket.h	/^            RilSapSocketList *next;$/;"	m	struct:RilSapSocket::RilSapSocketList	typeref:typename:RilSapSocketList *
next	guest/hals/ril/reference-libril/ril_event.h	/^    struct ril_event *next;$/;"	m	struct:ril_event	typeref:struct:ril_event *
nextTok	guest/hals/ril/reference-ril/at_tok.c	/^static char * nextTok(char **p_cur)$/;"	f	typeref:typename:char *	file:
next_disk_offset_	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t next_disk_offset_;$/;"	m	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:std::uint64_t	file:
next_frame_	guest/hals/camera/vsock_frame_provider.h	/^  std::vector<char> next_frame_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::vector<char>
next_frame_mutex_	host/frontend/webrtc/display_handler.h	/^  std::mutex next_frame_mutex_;$/;"	m	class:cuttlefish::DisplayHandler	typeref:typename:std::mutex
next_request_wait_millis	host/commands/metrics/proto/clientanalytics.proto	/^  optional int64 next_request_wait_millis = 1;$/;"	f	message:LogResponse	typeref:typename:int64
next_serial_	host/commands/modem_simulator/thread_looper.h	/^  std::atomic<Serial> next_serial_;$/;"	m	class:cuttlefish::ThreadLooper	typeref:typename:std::atomic<Serial>
next_tombstone_path	host/commands/tombstone_receiver/main.cpp	/^static std::string next_tombstone_path(const std::string& tombstone_dir) {$/;"	f	namespace:cuttlefish	typeref:typename:std::string	file:
nfds	guest/hals/ril/reference-libril/ril_event.cpp	/^static int nfds = 0;$/;"	v	typeref:typename:int	file:
ngran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_NgranBands ngran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfab08::__anon0bfbaecfac0a	typeref:typename:RIL_NgranBands[]
ngran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_NgranBands ngran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfae08::__anon0bfbaecfaf0a	typeref:typename:RIL_NgranBands[]
nitzTimeReceived	guest/hals/ril/reference-libril/ril_service.cpp	/^int64_t nitzTimeReceived[1];$/;"	v	typeref:typename:int64_t[1]
nitzTimeReceived	guest/hals/ril/reference-libril/ril_service.cpp	/^int64_t nitzTimeReceived[SIM_COUNT];$/;"	v	typeref:typename:int64_t[]
nitzTimeReceivedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::nitzTimeReceivedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
nl_client_	common/libs/net/network_interface_manager.h	/^  std::unique_ptr<NetlinkClient> nl_client_;$/;"	m	class:cuttlefish::NetworkInterfaceManager	typeref:typename:std::unique_ptr<NetlinkClient>
nmea	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^  string nmea = 1;$/;"	f	message:gnss_grpc_proxy.SendNmeaRequest	typeref:typename:string
nmea_file_read_thread_	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::thread nmea_file_read_thread_;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::thread	file:
node1_mac_	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  uint8_t node1_mac_[6];$/;"	m	class:cuttlefish::WmediumdMessageSetSnr	typeref:typename:uint8_t[6]
node2_mac_	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  uint8_t node2_mac_[6];$/;"	m	class:cuttlefish::WmediumdMessageSetSnr	typeref:typename:uint8_t[6]
noopRemoveWarning	guest/hals/ril/reference-ril/reference-ril.c	/^static void *noopRemoveWarning( void *a ) { return a; }$/;"	f	typeref:typename:void *	file:
notificationType	guest/hals/ril/reference-libril/ril.h	/^    int     notificationType;   \/*$/;"	m	struct:__anon0bfbaecf3108	typeref:typename:int
notifyDeviceStateChange	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<void> VsockCameraProvider::notifyDeviceStateChange($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<void>
notifyError	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::notifyError(uint32_t frame_number,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
notifyShutter	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::notifyShutter(uint32_t frame_number,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
nr	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoNr          nr;$/;"	m	union:__anon0bfbaecf7208::__anon0bfbaecf730a	typeref:typename:RIL_CellInfoNr
nr_csi_rsrp	host/commands/modem_simulator/network_service.h	/^    int32_t nr_csi_rsrp;  \/* CSI reference signal received power, multiplied by -1.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int32_t
nr_csi_rsrq	host/commands/modem_simulator/network_service.h	/^    int32_t nr_csi_rsrq;  \/* CSI reference signal received quality, multiplied by -1.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int32_t
nr_csi_sinr	host/commands/modem_simulator/network_service.h	/^    int32_t nr_csi_sinr;  \/* CSI signal-to-noise and interference ratio.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int32_t
nr_ss_rsrp	host/commands/modem_simulator/network_service.h	/^    int32_t nr_ss_rsrp;   \/* SS reference signal received power, multiplied by -1.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int32_t
nr_ss_rsrq	host/commands/modem_simulator/network_service.h	/^    int32_t nr_ss_rsrq;   \/* SS reference signal received quality, multiplied by -1.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int32_t
nr_ss_sinr	host/commands/modem_simulator/network_service.h	/^    int32_t nr_ss_sinr;   \/* SS signal-to-noise and interference ratio.$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int32_t
nrarfcn	guest/hals/ril/reference-libril/ril.h	/^    int32_t nrarfcn;   \/* NR Absolute Radio Frequency Channel Number, in range [0, 3279165].$/;"	m	struct:__anon0bfbaecf6108	typeref:typename:int32_t
null_ptr_	common/libs/concurrency/multiplexer.h	/^  QueuePtr null_ptr_;$/;"	m	class:cuttlefish::Multiplexer	typeref:typename:QueuePtr
numOfLiveModems	guest/hals/ril/reference-libril/ril.h	/^    int numOfLiveModems;$/;"	m	struct:__anon0bfbaecfbd08	typeref:typename:int
numValidIndexes	guest/hals/ril/reference-libril/ril.h	/^  int numValidIndexes; \/* This gives the number of valid values in cfInfo.$/;"	m	struct:__anon0bfbaecf9808	typeref:typename:int
num_applications	guest/hals/ril/reference-libril/ril.h	/^  int           num_applications;                \/* value <= RIL_CARD_MAX_APPS *\/$/;"	m	struct:__anon0bfbaecf3908	typeref:typename:int
num_applications	guest/hals/ril/reference-libril/ril.h	/^  int           num_applications;                \/* value <= RIL_CARD_MAX_APPS *\/$/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:int
num_partition_entries	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint32_t num_partition_entries;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint32_t	file:
num_sectors	host/libs/config/mbr.h	/^  std::uint32_t num_sectors;$/;"	m	struct:MbrPartitionEntry	typeref:typename:std::uint32_t
num_tombstones_in_last_second	host/commands/tombstone_receiver/main.cpp	/^static uint num_tombstones_in_last_second = 0;$/;"	v	namespace:cuttlefish	typeref:typename:uint	file:
number	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_NumberInfoRecord            number;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_NumberInfoRecord
number	guest/hals/ril/reference-libril/ril.h	/^    char *          number;             \/* Remote party number *\/$/;"	m	struct:__anon0bfbaecf4208	typeref:typename:char *
number	guest/hals/ril/reference-libril/ril.h	/^    char *          number;             \/* Remote party number *\/$/;"	m	struct:__anon0bfbaecf4308	typeref:typename:char *
number	guest/hals/ril/reference-libril/ril.h	/^    char *          number;      \/* "number" from TS 27.007 7.11. May be NULL *\/$/;"	m	struct:__anon0bfbaecf2108	typeref:typename:char *
number	guest/hals/ril/reference-libril/ril.h	/^    char *          number;     \/* Remote party number *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:char *
number	guest/hals/ril/reference-libril/ril.h	/^    char *  number;             \/* "number" from 27.007 7.17$/;"	m	struct:__anon0bfbaecf3108	typeref:typename:char *
number	host/commands/modem_simulator/call_service.h	/^    std::string number;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:std::string
number	host/commands/modem_simulator/sup_service.h	/^    std::string number; \/\/ "number" from TS 27.007 7.11. May be NULL$/;"	m	struct:cuttlefish::SupService::CallForwardInfo	typeref:typename:std::string
numberOfInfoRecs	guest/hals/ril/reference-libril/ril.h	/^  char numberOfInfoRecs;$/;"	m	struct:__anon0bfbaecf8b08	typeref:typename:char
numberPresentation	guest/hals/ril/reference-libril/ril.h	/^    int             numberPresentation; \/* 0=Allowed, 1=Restricted, 2=Not Specified\/Unknown *\/$/;"	m	struct:__anon0bfbaecf4208	typeref:typename:int
numberPresentation	guest/hals/ril/reference-libril/ril.h	/^    int             numberPresentation; \/* 0=Allowed, 1=Restricted, 2=Not Specified\/Unknown *\/$/;"	m	struct:__anon0bfbaecf4308	typeref:typename:int
numberPresentation	guest/hals/ril/reference-libril/ril.h	/^    int             numberPresentation; \/* 0=Allowed, 1=Restricted, 2=Not Specified\/Unknown 3=/;"	m	struct:__anon0bfbaecf1108	typeref:typename:int
number_of_ones	common/libs/device_config/host_device_config.cpp	/^uint8_t number_of_ones(unsigned long val) {$/;"	f	namespace:cuttlefish::__anonf277137d0111	typeref:typename:uint8_t
number_plan	guest/hals/ril/reference-libril/ril.h	/^    int             number_plan;        \/* 0=Unknown, 1=ISDN, 3=Data, 4=Telex, 8=Nat'l, 9=Priva/;"	m	struct:__anon0bfbaecf4308	typeref:typename:int
number_plan	guest/hals/ril/reference-libril/ril.h	/^  char number_plan;$/;"	m	struct:__anon0bfbaecf8308	typeref:typename:char
number_type	guest/hals/ril/reference-libril/ril.h	/^    int             number_type;        \/* 0=Unknown, 1=International, 2=National,$/;"	m	struct:__anon0bfbaecf4308	typeref:typename:int
number_type	guest/hals/ril/reference-libril/ril.h	/^  char number_type;$/;"	m	struct:__anon0bfbaecf8308	typeref:typename:char
number_type	host/commands/modem_simulator/sup_service.h	/^    int number_type;    \/\/ From 27.007 +CCFC\/+CLCK "class"$/;"	m	struct:cuttlefish::SupService::CallForwardInfo	typeref:typename:int
numeric	host/commands/modem_simulator/network_service.h	/^    std::string numeric;$/;"	m	struct:cuttlefish::NetworkService::NetworkOperator	typeref:typename:std::string
nvReadItem	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::nvReadItem(int32_t serial, NvItem itemId) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
nvReadItemResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::nvReadItemResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
nvResetConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::nvResetConfig(int32_t serial, ResetNvType resetType) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
nvResetConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::nvResetConfigResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
nvWriteCdmaPrl	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::nvWriteCdmaPrl(int32_t serial, const hidl_vec<uint8_t>& prl) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
nvWriteCdmaPrlResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::nvWriteCdmaPrlResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
nvWriteItem	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::nvWriteItem(int32_t serial, const NvWriteItem& item) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
nvWriteItemResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::nvWriteItemResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
observer_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::shared_ptr<ConnectionObserver> observer_;$/;"	m	class:cuttlefish::webrtc_streaming::AdbChannelHandler	typeref:typename:std::shared_ptr<ConnectionObserver>	file:
observer_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::shared_ptr<ConnectionObserver> observer_;$/;"	m	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler	typeref:typename:std::shared_ptr<ConnectionObserver>	file:
observer_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::shared_ptr<ConnectionObserver> observer_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraChannelHandler	typeref:typename:std::shared_ptr<ConnectionObserver>	file:
observer_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::shared_ptr<ConnectionObserver> observer_;$/;"	m	class:cuttlefish::webrtc_streaming::ControlChannelHandler	typeref:typename:std::shared_ptr<ConnectionObserver>	file:
observer_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::shared_ptr<ConnectionObserver> observer_;$/;"	m	class:cuttlefish::webrtc_streaming::InputChannelHandler	typeref:typename:std::shared_ptr<ConnectionObserver>	file:
observer_	host/frontend/webrtc/lib/client_handler.h	/^  std::shared_ptr<ConnectionObserver> observer_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::shared_ptr<ConnectionObserver>
observer_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::weak_ptr<WsConnectionObserver> observer_;$/;"	m	class:WsConnectionImpl	typeref:typename:std::weak_ptr<WsConnectionObserver>	file:
observers_mutex_	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  std::mutex observers_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:std::mutex
oemHookRawInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::oemHookRawInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
oemHookService	guest/hals/ril/reference-libril/ril_service.cpp	/^sp<OemHookImpl> oemHookService[1];$/;"	v	typeref:typename:sp<OemHookImpl>[1]
oemHookService	guest/hals/ril/reference-libril/ril_service.cpp	/^sp<OemHookImpl> oemHookService[SIM_COUNT];$/;"	v	typeref:typename:sp<OemHookImpl>[]
offset	common/libs/net/netlink_request_test.cpp	/^  size_t offset = sizeof(nlmsghdr);$/;"	v	namespace:cuttlefish::__anon1ff2f3d90111	typeref:typename:size_t
offset	host/libs/image_aggregator/cdisk_spec.proto	/^  uint64 offset = 2;$/;"	f	message:ComponentDisk	typeref:typename:uint64
offset	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t offset;$/;"	m	struct:cuttlefish::__anon02806fd80111::PartitionInfo	typeref:typename:std::uint64_t	file:
ok	host/frontend/webrtc/lib/utils.h	/^  bool ok() const { return !error_.has_value(); }$/;"	f	class:cuttlefish::webrtc_streaming::ValidationResult	typeref:typename:bool
onATReaderClosed	guest/hals/ril/reference-ril/reference-ril.c	/^static void onATReaderClosed()$/;"	f	typeref:typename:void	file:
onATTimeout	guest/hals/ril/reference-ril/reference-ril.c	/^static void onATTimeout()$/;"	f	typeref:typename:void	file:
onAdbMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #onAdbMessage;$/;"	M	class:DeviceConnection
onAdbMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  onAdbMessage(cb) {$/;"	m	class:DeviceConnection
onAnswer	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async #onAnswer(answer) {$/;"	m	class:Controller
onBind	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public IBinder onBind(Intent intent) {$/;"	m	class:GceService
onBluetoothMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #onBluetoothMessage;$/;"	M	class:DeviceConnection
onBluetoothMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  onBluetoothMessage(cb) {$/;"	m	class:DeviceConnection
onCameraCaptureToggle	host/frontend/webrtc_operator/assets/js/app.js	/^  #onCameraCaptureToggle(enabled) {$/;"	m	class:DeviceControlApp
onCancel	guest/hals/ril/reference-libril/ril.h	/^    RIL_Cancel onCancel;$/;"	m	struct:__anon0bfbaecfbf08	typeref:typename:RIL_Cancel
onCancel	guest/hals/ril/reference-ril/reference-ril.c	/^static void onCancel (RIL_Token t __unused)$/;"	f	typeref:typename:void	file:
onCommand	host/frontend/webrtc_operator/assets/js/controls.js	/^  let onCommand =$/;"	f	function:cmdConsole
onConfigurationChanged	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public void onConfigurationChanged(Configuration config) {$/;"	m	class:GceService
onConnectionStateChange	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  onConnectionStateChange(cb) {$/;"	m	class:DeviceConnection
onContinueDrag	host/frontend/webrtc_operator/assets/js/app.js	/^    function onContinueDrag(e) {$/;"	f	function:DeviceControlApp.startMouseTracking
onControlMessage	host/frontend/webrtc_operator/assets/js/app.js	/^  #onControlMessage(message) {$/;"	m	class:DeviceControlApp
onControlMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #onControlMessage;$/;"	M	class:DeviceConnection
onControlMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  onControlMessage(cb) {$/;"	m	class:DeviceConnection
onControlPanelButton	host/frontend/webrtc_operator/assets/js/app.js	/^  #onControlPanelButton(e) {$/;"	m	class:DeviceControlApp
onCreate	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public void onCreate() {$/;"	m	class:GceService
onCustomShellButton	host/frontend/webrtc_operator/assets/js/app.js	/^  #onCustomShellButton(shell_command, e) {$/;"	m	class:DeviceControlApp
onDataCallListChanged	guest/hals/ril/reference-ril/reference-ril.c	/^static void onDataCallListChanged(void *param __unused)$/;"	f	typeref:typename:void	file:
onDependencyFailed	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/BluetoothChecker.java	/^    public void onDependencyFailed(Exception e) {$/;"	m	class:BluetoothChecker
onDependencyFailed	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    public void onDependencyFailed(Exception e) {$/;"	m	class:ConnectivityChecker
onDependencyFailed	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public void onDependencyFailed(Exception e) {$/;"	m	class:EventReporter
onDependencyFailed	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^        public void onDependencyFailed(Exception e) {$/;"	m	class:GceWifiManager.MonitorWifiJob
onDependencyFailed	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceWifiManager.java	/^    public void onDependencyFailed(Exception e) {$/;"	m	class:GceWifiManager
onDependencyFailed	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^    public abstract void onDependencyFailed(Exception exception);$/;"	m	class:JobBase
onDependencyStraggling	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public void onDependencyStraggling(ArrayList<GceFuture<?>> deps) {$/;"	m	class:EventReporter
onDependencyStraggling	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobBase.java	/^    public void onDependencyStraggling(ArrayList<GceFuture<?>> stragglingDependencies) {$/;"	m	class:JobBase
onDestroy	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public void onDestroy() {$/;"	m	class:GceService
onDeviceDisplayLoaded	host/frontend/webrtc_operator/assets/js/app.js	/^  #onDeviceDisplayLoaded() {$/;"	m	class:DeviceControlApp
onDeviceMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #onDeviceMessage(message) {$/;"	m	class:Controller
onDeviceMsg	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  onDeviceMsg(cb) {$/;"	m	class:PollingConnector
onDeviceMsg	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  onDeviceMsg(cb) {$/;"	m	class:WebsocketConnector
onDeviceMsgCb	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #onDeviceMsgCb = msg =>$/;"	M	class:PollingConnector
onDeviceMsgCb	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #onDeviceMsgCb = msg =>$/;"	M	class:WebsocketConnector
onEndDrag	host/frontend/webrtc_operator/assets/js/app.js	/^    function onEndDrag(e) {$/;"	f	function:DeviceControlApp.startMouseTracking
onIccSlotStatus	guest/hals/ril/reference-ril/reference-ril.c	/^void onIccSlotStatus(RIL_Token t) {$/;"	f	typeref:typename:void
onIceCandidate	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #onIceCandidate(iceCandidate) {$/;"	m	class:Controller
onKeyEvent	host/frontend/webrtc_operator/assets/js/app.js	/^  #onKeyEvent(e) {$/;"	m	class:DeviceControlApp
onKeyboardCaptureToggle	host/frontend/webrtc_operator/assets/js/app.js	/^  #onKeyboardCaptureToggle(enabled) {$/;"	m	class:DeviceControlApp
onMicCaptureToggle	host/frontend/webrtc_operator/assets/js/app.js	/^  #onMicCaptureToggle(enabled) {$/;"	m	class:DeviceControlApp
onNewCommandConnect	guest/hals/ril/reference-libril/ril.cpp	/^void onNewCommandConnect(RIL_SOCKET_ID socket_id) {$/;"	f	namespace:android	typeref:typename:void
onOffer	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async #onOffer(desc) {$/;"	m	class:Controller
onRadioPowerOn	guest/hals/ril/reference-ril/reference-ril.c	/^static void onRadioPowerOn()$/;"	f	typeref:typename:void	file:
onReaderClosed	guest/hals/ril/reference-ril/atchannel.c	/^static void onReaderClosed()$/;"	f	typeref:typename:void	file:
onReceive	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceBroadcastReceiver.java	/^    public void onReceive(Context context, Intent intent) {$/;"	m	class:GceBroadcastReceiver
onRequest	guest/hals/ril/reference-libril/ril.h	/^    RIL_RequestFunc onRequest;$/;"	m	struct:__anon0bfbaecfbf08	typeref:typename:RIL_RequestFunc
onRequest	guest/hals/ril/reference-ril/reference-ril.c	/^onRequest (int request, void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
onRequestComplete	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::onRequestComplete(RIL_Token t, RIL_Errno e, void *response,$/;"	f	class:RilSapSocket	typeref:typename:void
onRotateButton	host/frontend/webrtc_operator/assets/js/app.js	/^  #onRotateButton(e) {$/;"	m	class:DeviceControlApp
onSIMReady	guest/hals/ril/reference-ril/reference-ril.c	/^static void onSIMReady()$/;"	f	typeref:typename:void	file:
onStartCommand	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    public int onStartCommand(Intent intent, int flags, int startId) {$/;"	m	class:GceService
onStartDrag	host/frontend/webrtc_operator/assets/js/app.js	/^    function onStartDrag(e) {$/;"	f	function:DeviceControlApp.startMouseTracking
onStateRequest	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioStateRequest onStateRequest;$/;"	m	struct:__anon0bfbaecfbf08	typeref:typename:RIL_RadioStateRequest
onSupplementaryServiceIndicationInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::onSupplementaryServiceIndicationInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
onSupports	guest/hals/ril/reference-ril/reference-ril.c	/^onSupports (int requestCode __unused)$/;"	f	typeref:typename:int	file:
onUnsolicited	guest/hals/ril/reference-ril/reference-ril.c	/^static void onUnsolicited (const char *s, const char *sms_pdu)$/;"	f	typeref:typename:void	file:
onUnsolicitedResponse	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::onUnsolicitedResponse(int unsolResponse, void *data, size_t datalen) {$/;"	f	class:RilSapSocket	typeref:typename:void
onUpdatePhysicalChannelconfigs	host/commands/modem_simulator/data_service.cpp	/^void DataService::onUpdatePhysicalChannelconfigs(int modem_tech, int freq,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
onUssdInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::onUssdInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
onVideoCaptureToggle	host/frontend/webrtc_operator/assets/js/app.js	/^  #onVideoCaptureToggle(enabled) {$/;"	m	class:DeviceControlApp
onWebsocketMessage	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #onWebsocketMessage(message) {$/;"	m	class:WebsocketConnector
on_close_	host/libs/graphics_detector/graphics_detector.cpp	/^  std::function<void()> on_close_;$/;"	m	class:cuttlefish::__anon29a199ff0111::Closer	typeref:typename:std::function<void ()>	file:
on_connection_changed_cb_	host/frontend/webrtc/lib/client_handler.h	/^  std::function<void(bool)> on_connection_changed_cb_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::function<void (bool)>
on_consumed_	host/libs/audio_connector/buffers.h	/^  OnConsumedCb on_consumed_;$/;"	m	class:cuttlefish::ShmBuffer	typeref:typename:OnConsumedCb
on_error_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::function<void(webrtc::RTCError error)> on_error_;$/;"	m	class:cuttlefish::webrtc_streaming::__anond0fc42ea0111::CvdOnSetRemoteDescription	typeref:typename:std::function<void (webrtc::RTCError error)>	file:
on_next_frame_cnt_	host/libs/screen_connector/screen_connector.h	/^  unsigned long long int on_next_frame_cnt_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:unsigned long long int
on_next_frame_cnt_	host/libs/screen_connector/screen_connector_multiplexer.h	/^  unsigned long long int on_next_frame_cnt_;$/;"	m	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:unsigned long long int
onframe_mutex_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::mutex onframe_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::mutex
op	common/libs/utils/network.cpp	/^  std::uint8_t op;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t	file:
opHandle_	guest/hals/keymint/remote/remote_keymint_operation.h	/^  keymaster_operation_handle_t opHandle_;$/;"	m	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation	typeref:typename:keymaster_operation_handle_t
open	guest/hals/camera/vsock_camera_device_3_4.cpp	/^Return<void> VsockCameraDevice::open(const sp<ICameraDeviceCallback>& callback,$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:Return<void>
openLogicalChannel	host/commands/modem_simulator/unittest/service_test.cpp	/^  int openLogicalChannel(std::string& name) {$/;"	f	class:ModemServiceTest	typeref:typename:int	file:
openSocket	host/commands/bt_connector/main.cpp	/^void openSocket(cuttlefish::SharedFD* fd, int port) {$/;"	f	typeref:typename:void
oper_selection_mode_	host/commands/modem_simulator/network_service.h	/^  OperatorSelectionMode oper_selection_mode_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:OperatorSelectionMode
operator !=	common/libs/fs/shared_fd.h	/^  bool operator!=(const SharedFD& rhs) const { return value_ != rhs.value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
operator ()	common/libs/security/gatekeeper_channel.cpp	/^void GatekeeperCommandDestroyer::operator()(GatekeeperRawMessage* ptr) {$/;"	f	class:cuttlefish::GatekeeperCommandDestroyer	typeref:typename:void
operator ()	common/libs/security/keymaster_channel.cpp	/^void KeymasterCommandDestroyer::operator()(keymaster_message* ptr) {$/;"	f	class:cuttlefish::KeymasterCommandDestroyer	typeref:typename:void
operator ()	common/libs/utils/tee_logging.cpp	/^void TeeLogger::operator()($/;"	f	class:cuttlefish::TeeLogger	typeref:typename:void
operator ()	guest/hals/camera/vsock_camera_device_session_3_4.h	/^    bool operator()(const ReadVsockRequest& lhs, const ReadVsockRequest& rhs) {$/;"	f	struct:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::VsockRequestComparator	typeref:typename:bool
operator ()	host/commands/fetcher/build_api.cc	/^  void operator()(DIR* dir) {$/;"	f	struct:cuttlefish::CloseDir	typeref:typename:void	file:
operator ()	host/commands/secure_env/tpm_hmac.h	/^  void operator()(void* data) { Esys_Free(data); }$/;"	f	struct:cuttlefish::EsysDeleter	typeref:typename:void
operator ()	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^  bool operator()($/;"	f	class:cuttlefish::CompareHmacSharingParams	typeref:typename:bool	file:
operator ()	host/libs/graphics_detector/graphics_detector.cpp	/^  void operator()(void* library) { dlclose(library); }$/;"	f	struct:cuttlefish::__anon29a199ff0111::LibraryCloser	typeref:typename:void	file:
operator *	common/libs/fs/shared_fd.h	/^  FileInstance& operator*() { return *value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:FileInstance &
operator *	common/libs/fs/shared_fd.h	/^  const FileInstance& operator*() const { return *value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:const FileInstance &
operator *	host/commands/modem_simulator/command_parser.h	/^  const std::string_view& operator*() const { return command_; }$/;"	f	class:cuttlefish::CommandParser	typeref:typename:const std::string_view &
operator ->	common/libs/fs/shared_fd.h	/^  std::shared_ptr<FileInstance> operator->() const { return value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:std::shared_ptr<FileInstance>
operator ->	host/commands/modem_simulator/command_parser.h	/^  const std::string_view* operator->() const { return &command_; }$/;"	f	class:cuttlefish::CommandParser	typeref:typename:const std::string_view *
operator <	common/libs/fs/shared_fd.h	/^  bool operator<(const SharedFD& rhs) const { return value_ < rhs.value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
operator <	tests/hal/hal_implementation_test.cpp	/^  bool operator<(const VersionedAidlPackage& rhs) const {$/;"	f	struct:VersionedAidlPackage	typeref:typename:bool	file:
operator <<	common/libs/utils/flag_parser.cpp	/^std::ostream& operator<<(std::ostream& out, const Flag& flag) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	common/libs/utils/flag_parser.cpp	/^std::ostream& operator<<(std::ostream& out, const FlagAlias& alias) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	common/libs/utils/network.cpp	/^std::ostream& operator<<(std::ostream& out, const DnsmasqDhcp4Lease& lease) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	host/commands/fetcher/build_api.cc	/^std::ostream& operator<<(std::ostream& out, const Build& build) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	host/commands/fetcher/build_api.cc	/^std::ostream& operator<<(std::ostream& out, const DeviceBuild& build) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	host/commands/fetcher/build_api.cc	/^std::ostream& operator<<(std::ostream& out, const DirectoryBuild& build) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	host/libs/config/fetcher_config.cpp	/^std::ostream& operator<<(std::ostream& os, const CvdFile& cvd_file) {$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <<	host/libs/graphics_detector/graphics_detector.cpp	/^std::ostream& operator<<(std::ostream& stream,$/;"	f	namespace:cuttlefish	typeref:typename:std::ostream &
operator <=	common/libs/fs/shared_fd.h	/^  bool operator<=(const SharedFD& rhs) const { return value_ <= rhs.value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
operator <=	host/commands/modem_simulator/thread_looper.cpp	/^bool ThreadLooper::Event::operator<=(const Event &other) const {$/;"	f	class:cuttlefish::ThreadLooper::Event	typeref:typename:bool
operator =	common/libs/utils/subprocess.cpp	/^Subprocess& Subprocess::operator=(Subprocess&& other) {$/;"	f	class:cuttlefish::Subprocess	typeref:typename:Subprocess &
operator =	common/libs/utils/tcp_socket.h	/^  ClientSocket& operator=(ClientSocket&& other) {$/;"	f	class:cuttlefish::ClientSocket	typeref:typename:ClientSocket &
operator =	common/libs/utils/unix_sockets.cpp	/^ControlMessage& ControlMessage::operator=(ControlMessage&& existing) {$/;"	f	class:cuttlefish::ControlMessage	typeref:typename:ControlMessage &
operator =	guest/hals/camera/cached_stream_buffer.cpp	/^CachedStreamBuffer& CachedStreamBuffer::operator=($/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:CachedStreamBuffer &
operator ==	common/libs/fs/shared_fd.h	/^  bool operator==(const SharedFD& rhs) const { return value_ == rhs.value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
operator ==	host/commands/modem_simulator/channel_monitor.cpp	/^bool Client::operator==(const Client& other) const {$/;"	f	class:cuttlefish::Client	typeref:typename:bool
operator ==	host/commands/modem_simulator/command_parser.h	/^  bool operator==(const std::string &rhs) const { return command_ == rhs; }$/;"	f	class:cuttlefish::CommandParser	typeref:typename:bool
operator ==	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^bool operator==(const HmacSharingParameters& a,$/;"	f	namespace:cuttlefish::__anon0281e17c0111	typeref:typename:bool
operator ==	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^inline bool operator==(const keymaster_blob_t& a, const keymaster_blob_t& b) {$/;"	f	namespace:cuttlefish::__anon0281e17c0111	typeref:typename:bool
operator >	common/libs/fs/shared_fd.h	/^  bool operator>(const SharedFD& rhs) const { return value_ > rhs.value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
operator >=	common/libs/fs/shared_fd.h	/^  bool operator>=(const SharedFD& rhs) const { return value_ >= rhs.value_; }$/;"	f	class:cuttlefish::SharedFD	typeref:typename:bool
operator []	host/commands/modem_simulator/command_parser.h	/^  std::string_view::const_reference& operator[](int index) const { return command_[index]; }$/;"	f	class:cuttlefish::CommandParser	typeref:typename:std::string_view::const_reference &
operator []	host/libs/confui/host_renderer.h	/^  auto& operator[](const int idx) { return teeui_frame_[idx]; }$/;"	f	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:auto &
operator bool	common/libs/fs/shared_fd.h	/^  operator bool() const { return ptr_ != MAP_FAILED; }$/;"	f	class:cuttlefish::ScopedMMap
operatorNames	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityOperatorNames operatorNames;$/;"	m	struct:__anon0bfbaecf6108	typeref:typename:RIL_CellIdentityOperatorNames
operatorNames	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityOperatorNames operatorNames;$/;"	m	struct:__anon0bfbaecf7808	typeref:typename:RIL_CellIdentityOperatorNames
operatorNames	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityOperatorNames operatorNames;$/;"	m	struct:__anon0bfbaecf7908	typeref:typename:RIL_CellIdentityOperatorNames
operatorNames	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityOperatorNames operatorNames;$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:RIL_CellIdentityOperatorNames
operatorNames	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityOperatorNames operatorNames;$/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:RIL_CellIdentityOperatorNames
operatorNames	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellIdentityOperatorNames operatorNames;$/;"	m	struct:__anon0bfbaecf7c08	typeref:typename:RIL_CellIdentityOperatorNames
operatorNumeric	guest/hals/ril/reference-libril/ril.h	/^  char *operatorNumeric;$/;"	m	struct:__anon0bfbaecfa608	typeref:typename:char *
operator_config_	host/frontend/webrtc/lib/streamer.cpp	/^  OperatorServerConfig operator_config_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:OperatorServerConfig	file:
operator_list_	host/commands/modem_simulator/network_service.h	/^  std::vector<NetworkOperator> operator_list_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:std::vector<NetworkOperator>
operator_numeric	host/commands/modem_simulator/nvram_config.cpp	/^std::string NvramConfig::InstanceSpecific::operator_numeric() const {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:std::string
operator_observer_	host/frontend/webrtc/lib/streamer.cpp	/^  std::weak_ptr<OperatorObserver> operator_observer_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::weak_ptr<OperatorObserver>	file:
operator_server	host/frontend/webrtc/lib/streamer.h	/^  } operator_server;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig	typeref:struct:cuttlefish::webrtc_streaming::StreamerConfig::__anonbc3851b60108
operator_state	host/commands/modem_simulator/network_service.h	/^    OperatorState operator_state;$/;"	m	struct:cuttlefish::NetworkService::NetworkOperator	typeref:typename:OperatorState
options	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^const cricket::AudioOptions AudioTrackSourceImpl::options() const {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:const cricket::AudioOptions
ordinal	host/commands/secure_env/in_process_tpm.cpp	/^  uint32_t ordinal;$/;"	m	struct:cuttlefish::tpm_message_header	typeref:typename:uint32_t	file:
originator_address_	host/commands/modem_simulator/pdu_parser.h	/^  std::string originator_address_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:std::string
os_composite_disk_config	host/commands/assemble_cvd/disk_flags.cc	/^std::vector<ImagePartition> os_composite_disk_config() {$/;"	f	namespace:cuttlefish	typeref:typename:std::vector<ImagePartition>
os_composite_disk_path	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::os_composite_disk_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
os_patchlevel_	host/commands/secure_env/tpm_key_blob_maker.h	/^  uint32_t os_patchlevel_;$/;"	m	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:uint32_t
os_patchlevel_	host/commands/secure_env/tpm_keymaster_context.h	/^  uint32_t os_patchlevel_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:uint32_t
os_type	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional OsType os_type = 5;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:OsType
os_version	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional string os_version = 6;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:string
os_version_	host/commands/secure_env/tpm_key_blob_maker.h	/^  uint32_t os_version_;$/;"	m	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:uint32_t
os_version_	host/commands/secure_env/tpm_keymaster_context.h	/^  uint32_t os_version_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:uint32_t
other_side_closed_	common/libs/utils/tcp_socket.h	/^  bool other_side_closed_{};$/;"	m	class:cuttlefish::ClientSocket	typeref:typename:bool
out_buffer_	host/libs/websocket/websocket_handler.h	/^  std::string out_buffer_ = {};$/;"	m	class:cuttlefish::DynHandler	typeref:typename:std::string
output_	common/libs/security/gatekeeper_channel.h	/^  SharedFD output_;$/;"	m	class:cuttlefish::GatekeeperChannel	typeref:typename:SharedFD
output_	common/libs/security/keymaster_channel.h	/^  SharedFD output_;$/;"	m	class:cuttlefish::KeymasterChannel	typeref:typename:SharedFD
overflow	common/libs/fs/shared_fd_stream.cpp	/^int SharedFDStreambuf::overflow(int c) {$/;"	f	class:cuttlefish::SharedFDStreambuf	typeref:typename:int
p	host/commands/secure_env/soft_gatekeeper.h	/^    static const uint32_t p = 1;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:const uint32_t
p1	guest/hals/ril/reference-libril/ril.h	/^    int p1;$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:int
p1	guest/hals/ril/reference-libril/ril.h	/^    int p1;$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:int
p1	guest/hals/ril/reference-libril/ril.h	/^    int p1;$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:int
p2	guest/hals/ril/reference-libril/ril.h	/^    int p2;        \/* P2 parameter (described in ISO 7816-4)$/;"	m	struct:__anon0bfbaecfa308	typeref:typename:int
p2	guest/hals/ril/reference-libril/ril.h	/^    int p2;$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:int
p2	guest/hals/ril/reference-libril/ril.h	/^    int p2;$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:int
p2	guest/hals/ril/reference-libril/ril.h	/^    int p2;$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:int
p2p_disabled	shared/config/wpa_supplicant_overlay.conf	/^p2p_disabled=1$/;"	k
p3	guest/hals/ril/reference-libril/ril.h	/^    int p3;         \/* A negative P3 implies a 4 byte APDU. *\/$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:int
p3	guest/hals/ril/reference-libril/ril.h	/^    int p3;$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:int
p3	guest/hals/ril/reference-libril/ril.h	/^    int p3;$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:int
pCI	guest/hals/ril/reference-libril/ril_internal.h	/^    CommandInfo *pCI;$/;"	m	struct:android::RequestInfo	typeref:typename:CommandInfo *
pData	host/libs/graphics_detector/include/EGL/eglext.h	/^    void  *pData;$/;"	m	struct:EGLClientPixmapHI	typeref:typename:void *
p_callback	guest/hals/ril/reference-libril/ril.cpp	/^    RIL_TimedCallback p_callback;$/;"	m	struct:android::UserCallbackInfo	typeref:typename:RIL_TimedCallback	file:
p_command_handler	host/commands/modem_simulator/modem_service.h	/^  std::optional<p_func> p_command_handler;$/;"	m	class:cuttlefish::CommandHandler	typeref:typename:std::optional<p_func>
p_func	host/commands/modem_simulator/modem_service.h	/^using p_func = std::function<void(const Client&, std::string&)>;  \/\/ Partial match$/;"	t	namespace:cuttlefish
p_intermediates	guest/hals/ril/reference-ril/atchannel.h	/^    ATLine  *p_intermediates; \/* any intermediate responses *\/$/;"	m	struct:__anon512a2c1f0208	typeref:typename:ATLine *
p_next	guest/hals/ril/reference-libril/RilSapSocket.h	/^        struct SapSocketRequest* p_next;$/;"	m	struct:RilSapSocket::SapSocketRequest	typeref:struct:SapSocketRequest *
p_next	guest/hals/ril/reference-libril/ril.cpp	/^    struct UserCallbackInfo *p_next;$/;"	m	struct:android::UserCallbackInfo	typeref:struct:UserCallbackInfo *	file:
p_next	guest/hals/ril/reference-libril/ril_internal.h	/^    struct RequestInfo *p_next;$/;"	m	struct:android::RequestInfo	typeref:struct:RequestInfo *
p_next	guest/hals/ril/reference-ril/atchannel.h	/^    struct ATLine *p_next;$/;"	m	struct:ATLine	typeref:struct:ATLine *
p_rs	guest/hals/ril/reference-libril/ril_ex.h	/^    RecordStream *p_rs;$/;"	m	struct:SocketListenParam	typeref:typename:RecordStream *
packageSource	tools/create_base_image.go	/^func packageSource(url string, branch string, version string, subdir string) {$/;"	f	package:main
package_source	tools/create_base_image_hostlib.sh	/^package_source() {$/;"	f
packet	common/libs/confui/packet.cpp	/^namespace packet {$/;"	n	namespace:cuttlefish::confui	file:
packet	common/libs/confui/packet.h	/^namespace packet {$/;"	n	namespace:cuttlefish::confui
packet	common/libs/confui/packet_types.cpp	/^namespace packet {$/;"	n	namespace:cuttlefish::confui	file:
packet	common/libs/confui/packet_types.h	/^namespace packet {$/;"	n	namespace:cuttlefish::confui
padding	host/libs/audio_connector/shm_layout.h	/^  uint8_t padding;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:uint8_t
padding	host/libs/audio_connector/shm_layout.h	/^  uint8_t padding[5];$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:uint8_t[5]
padding	host/libs/audio_connector/shm_layout.h	/^  uint8_t padding[7];$/;"	m	struct:cuttlefish::virtio_snd_jack_info	typeref:typename:uint8_t[7]
param	guest/hals/ril/reference-libril/ril_event.h	/^    void *param;$/;"	m	struct:ril_event	typeref:typename:void *
params_destroy_resource_callback	host/libs/wayland/wayland_dmabuf.cpp	/^void params_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anon8f5be4990111	typeref:typename:void
parent_key_fn_	host/commands/secure_env/encrypted_serializable.h	/^  std::function<TpmObjectSlot(TpmResourceManager&)> parent_key_fn_;$/;"	m	class:cuttlefish::EncryptedSerializable	typeref:typename:std::function<TpmObjectSlot (TpmResourceManager &)>
parse	host/libs/allocd/request.h	/^  std::optional<Json::Value> parse(std::string msg) {$/;"	f	class:cuttlefish::JsonRequestReader	typeref:typename:std::optional<Json::Value>
parseProactiveCmdInd	guest/hals/ril/reference-ril/reference-ril.c	/^static int parseProactiveCmdInd(char *response) {$/;"	f	typeref:typename:int	file:
parseRegistrationState	guest/hals/ril/reference-ril/reference-ril.c	/^static int parseRegistrationState(char *str, int *type, int *items, int **response)$/;"	f	typeref:typename:int	file:
parseSimResponseLine	guest/hals/ril/reference-ril/reference-ril.c	/^static int parseSimResponseLine(char* line, RIL_SIM_IO_Response* response) {$/;"	f	typeref:typename:int	file:
parse_int	host/commands/modem_simulator/command_parser.cpp	/^static int parse_int(const std::string& snumber, int base) {$/;"	f	namespace:cuttlefish	typeref:typename:int	file:
parse_technology_response	guest/hals/ril/reference-ril/reference-ril.c	/^int parse_technology_response( const char *response, int *current, int32_t *preferred )$/;"	f	typeref:typename:int
parser	tools/tombstone_to_line.py	/^  parser = common_arg_parser()$/;"	v
partition_alignment	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t partition_alignment[3072];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptBeginning	typeref:typename:std::uint8_t[3072]	file:
partition_entries_crc32	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint32_t partition_entries_crc32;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint32_t	file:
partition_entries_lba	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t partition_entries_lba;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint64_t	file:
partition_entry_size	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint32_t partition_entry_size;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint32_t	file:
partition_name	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint16_t partition_name[36]; \/\/ UTF-16LE$/;"	m	struct:cuttlefish::__anon02806fd80111::GptPartitionEntry	typeref:typename:std::uint16_t[36]	file:
partition_type	host/libs/config/mbr.h	/^  std::uint8_t partition_type;$/;"	m	struct:MbrPartitionEntry	typeref:typename:std::uint8_t
partition_type_guid	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t partition_type_guid[16];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptPartitionEntry	typeref:typename:std::uint8_t[16]	file:
partitions	host/libs/config/mbr.h	/^  MbrPartitionEntry partitions[4];$/;"	m	struct:MasterBootRecord	typeref:typename:MbrPartitionEntry[4]
partitions_	host/libs/image_aggregator/image_aggregator.cc	/^  std::vector<PartitionInfo> partitions_;$/;"	m	class:cuttlefish::__anon02806fd80111::CompositeDiskBuilder	typeref:typename:std::vector<PartitionInfo>	file:
password	guest/hals/ril/reference-libril/ril.h	/^    char *password;             \/* the password for APN, or NULL *\/$/;"	m	struct:__anon0bfbaecfc008	typeref:typename:char *
password	guest/hals/ril/reference-libril/ril.h	/^    char *password;             \/* the password for APN, or NULL *\/$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
password	guest/hals/ril/reference-libril/ril.h	/^    char* password;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:char *
password	guest/hals/ril/reference-libril/ril.h	/^    char* password;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
path	guest/hals/ril/reference-libril/ril.h	/^    char *path;     \/* "pathid" from TS 27.007 +CRSM command.$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:char *
path	guest/hals/ril/reference-libril/ril.h	/^    char *path;     \/* "pathid" from TS 27.007 +CRSM command.$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:char *
path	host/frontend/webrtc/lib/streamer.h	/^    std::string path;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig::__anonbc3851b60108	typeref:typename:std::string
path_	host/frontend/webrtc/lib/ws_connection.cpp	/^  const std::string path_;$/;"	m	class:WsConnectionImpl	typeref:typename:const std::string	file:
path_	host/libs/config/config_flag.cpp	/^  std::string path_;$/;"	m	class:cuttlefish::__anon2e549bd00111::SystemImageDirFlagImpl	typeref:typename:std::string	file:
path_	host/libs/config/data_image.cpp	/^  std::string path_;$/;"	m	class:cuttlefish::FixedDataImagePath	typeref:typename:std::string	file:
path_	host/libs/config/data_image.cpp	/^  std::string path_;$/;"	m	class:cuttlefish::FixedMiscImagePath	typeref:typename:std::string	file:
paths	host/commands/fetcher/build_api.h	/^  std::vector<std::string> paths;$/;"	m	struct:cuttlefish::DirectoryBuild	typeref:typename:std::vector<std::string>
patterns	tools/tombstone_to_line.py	/^patterns = [$/;"	v
payload	common/libs/security/gatekeeper_channel.h	/^    uint8_t payload[0];$/;"	m	struct:gatekeeper::GatekeeperRawMessage	typeref:typename:uint8_t[0]
payload	common/libs/security/keymaster_channel.h	/^    uint8_t payload[0];$/;"	m	struct:keymaster::keymaster_message	typeref:typename:uint8_t[0]
payload_length_	common/libs/confui/packet_types.h	/^  std::uint32_t payload_length_;$/;"	m	struct:cuttlefish::confui::packet::PayloadHeader	typeref:typename:std::uint32_t
payload_size	common/libs/security/gatekeeper_channel.h	/^    uint32_t payload_size;$/;"	m	struct:gatekeeper::GatekeeperRawMessage	typeref:typename:uint32_t
payload_size	common/libs/security/keymaster_channel.h	/^    uint32_t payload_size;$/;"	m	struct:keymaster::keymaster_message	typeref:typename:uint32_t
pbackfail	common/libs/fs/shared_fd_stream.cpp	/^int SharedFDStreambuf::pbackfail(int c) {$/;"	f	class:cuttlefish::SharedFDStreambuf	typeref:typename:int
pc	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #pc;$/;"	M	class:Controller
pc	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #pc;$/;"	M	class:DeviceConnection
pc_config	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  let pc_config = {iceServers: []};$/;"	c	class:Connect
pc_config	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  let pc_config = {iceServers: []};$/;"	c	class:createPeerConnection
pci	guest/hals/ril/reference-libril/ril.h	/^    int pci;    \/* physical cell id 0..503, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5d08	typeref:typename:int
pci	guest/hals/ril/reference-libril/ril.h	/^    int pci;    \/* physical cell id 0..503; this value must be reported *\/$/;"	m	struct:__anon0bfbaecf5e08	typeref:typename:int
pci	guest/hals/ril/reference-libril/ril.h	/^    int pci;    \/* physical cell id 0..503; this value must be reported *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
pci	guest/hals/ril/reference-libril/ril.h	/^    uint32_t pci;      \/* Physical cell id in range [0, 1007] described in 3GPP TS 38.331. This/;"	m	struct:__anon0bfbaecf6108	typeref:typename:uint32_t
pcoDataInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::pcoDataInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
pco_id	guest/hals/ril/reference-libril/ril.h	/^    int pco_id;                 \/* The protocol ID for this box.  Note that only IDs from$/;"	m	struct:__anon0bfbaecfc308	typeref:typename:int
pcscf	guest/hals/ril/reference-libril/ril.h	/^    char *          pcscf;      \/* the Proxy Call State Control Function address$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:char *
pcscf	guest/hals/ril/reference-libril/ril.h	/^    char *          pcscf;    \/* the Proxy Call State Control Function address$/;"	m	struct:__anon0bfbaecf1408	typeref:typename:char *
pcscf	guest/hals/ril/reference-libril/ril.h	/^    char *          pcscf;    \/* the Proxy Call State Control Function address$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:char *
pctx	build/cvd-host-package.go	/^var pctx = android.NewPackageContext("android\/soong\/cuttlefish")$/;"	v	package:cuttlefish
pdp_context_	host/commands/modem_simulator/data_service.h	/^  std::vector<PDPContext> pdp_context_;$/;"	m	class:cuttlefish::DataService	typeref:typename:std::vector<PDPContext>
pdu	guest/hals/ril/reference-libril/ril.h	/^    char * pdu;     \/* PDU of message to write, as an ASCII hex string less the SMSC address,$/;"	m	struct:__anon0bfbaecf1b08	typeref:typename:char *
pdu_type_	host/commands/modem_simulator/pdu_parser.h	/^  std::string pdu_type_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:std::string
peer_connection_	host/frontend/webrtc/lib/client_handler.h	/^  rtc::scoped_refptr<webrtc::PeerConnectionInterface> peer_connection_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:rtc::scoped_refptr<webrtc::PeerConnectionInterface>
peer_connection_factory_	host/frontend/webrtc/lib/streamer.cpp	/^      peer_connection_factory_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:rtc::scoped_refptr<webrtc::PeerConnectionFactoryInterface>	file:
pendingResponseQueue	guest/hals/ril/reference-libril/RilSapSocket.h	/^    Ril_queue<SapSocketRequest> pendingResponseQueue;$/;"	m	class:RilSapSocket	typeref:typename:Ril_queue<SapSocketRequest>
pending_add_	host/libs/allocd/resource_manager.h	/^  std::map<uint32_t, std::shared_ptr<StaticResource>> pending_add_;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:std::map<uint32_t,std::shared_ptr<StaticResource>>
pending_buffer	host/libs/wayland/wayland_surface.h	/^    struct wl_resource* pending_buffer = nullptr;$/;"	m	struct:wayland::Surface::State	typeref:struct:wl_resource *
pending_connection_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::future<bool> pending_connection_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::future<bool>
pending_ice_candidates_	host/frontend/webrtc/lib/client_handler.h	/^      pending_ice_candidates_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::vector<std::unique_ptr<webrtc::IceCandidateInterface>>
pending_list	guest/hals/ril/reference-libril/ril_event.cpp	/^static struct ril_event pending_list;$/;"	v	typeref:struct:ril_event	file:
pending_requests_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^      pending_requests_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::priority_queue<ReadVsockRequest,std::vector<ReadVsockRequest>,VsockRequestComparator>
percentd_	host/commands/modem_simulator/network_service.h	/^  double percentd_{0.8};$/;"	m	class:cuttlefish::NetworkService	typeref:typename:double
period_bytes	host/libs/audio_connector/commands.h	/^  uint32_t period_bytes() const { return period_bytes_; }$/;"	f	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:uint32_t
period_bytes	host/libs/audio_connector/shm_layout.h	/^  Le32 period_bytes;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:Le32
period_bytes_	host/libs/audio_connector/commands.h	/^  const uint32_t period_bytes_;$/;"	m	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:const uint32_t
persist	guest/hals/ril/reference-libril/ril_event.h	/^    bool persist;$/;"	m	struct:ril_event	typeref:typename:bool
persistent_bootconfig_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::persistent_bootconfig_path()$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
persistent_composite_disk_config	host/commands/assemble_cvd/disk_flags.cc	/^std::vector<ImagePartition> persistent_composite_disk_config($/;"	f	namespace:cuttlefish	typeref:typename:std::vector<ImagePartition>
persistent_composite_disk_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::persistent_composite_disk_path()$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
persoSubstate	guest/hals/ril/reference-libril/ril.h	/^    RIL_PersoSubstateV1_5 persoSubstate;$/;"	m	struct:__anon0bfbaecf3e08	typeref:typename:RIL_PersoSubstateV1_5
perso_substate	guest/hals/ril/reference-libril/ril.h	/^  RIL_PersoSubstate perso_substate; \/* applicable only if app_state ==$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:RIL_PersoSubstate
phase	guest/hals/ril/reference-libril/ril.h	/^    int phase;              \/\/ CONFIGURED, START, APPLY, FINISH$/;"	m	struct:__anon0bfbaecf0a08	typeref:typename:int
photoSettings	host/frontend/webrtc_operator/assets/js/app.js	/^      const photoSettings = {$/;"	c	class:DeviceControlApp.takePhoto
physicalSlotId	guest/hals/ril/reference-libril/ril.h	/^    uint32_t physicalSlotId;$/;"	m	struct:__anon0bfbaecf3b08	typeref:typename:uint32_t
pi	guest/hals/ril/reference-libril/ril.h	/^  char pi;$/;"	m	struct:__anon0bfbaecf8308	typeref:typename:char
pid	common/libs/utils/subprocess.h	/^  pid_t pid() const { return pid_; }$/;"	f	class:cuttlefish::Subprocess	typeref:typename:pid_t
pid_	common/libs/utils/subprocess.h	/^  pid_t pid_ = -1;$/;"	m	class:cuttlefish::Subprocess	typeref:typename:pid_t
pin1	guest/hals/ril/reference-libril/ril.h	/^  RIL_PinState     pin1;$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:RIL_PinState
pin1_replaced	guest/hals/ril/reference-libril/ril.h	/^  int              pin1_replaced;   \/* applicable to USIM, CSIM & ISIM *\/$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:int
pin1_status_	host/commands/modem_simulator/sim_service.h	/^  PinStatus pin1_status_;$/;"	m	class:cuttlefish::SimService	typeref:typename:PinStatus
pin2	guest/hals/ril/reference-libril/ril.h	/^    char *pin2;     \/* May be NULL*\/$/;"	m	struct:__anon0bfbaecf1d08	typeref:typename:char *
pin2	guest/hals/ril/reference-libril/ril.h	/^    char *pin2;     \/* May be NULL*\/$/;"	m	struct:__anon0bfbaecf1e08	typeref:typename:char *
pin2	guest/hals/ril/reference-libril/ril.h	/^  RIL_PinState     pin2;$/;"	m	struct:__anon0bfbaecf3808	typeref:typename:RIL_PinState
pin2_status_	host/commands/modem_simulator/sim_service.h	/^  PinStatus pin2_status_;$/;"	m	class:cuttlefish::SimService	typeref:typename:PinStatus
pin_	host/commands/modem_simulator/sim_service.h	/^    std::string pin_;$/;"	m	struct:cuttlefish::SimService::PinStatus	typeref:typename:std::string
pin_remaining_times_	host/commands/modem_simulator/sim_service.h	/^    int pin_remaining_times_;$/;"	m	struct:cuttlefish::SimService::PinStatus	typeref:typename:int
pipe_	host/commands/run_cvd/launch.cc	/^  SharedFD pipe_;$/;"	m	class:cuttlefish::LogcatReceiver	typeref:typename:SharedFD	file:
pipe_fd_	host/commands/kernel_log_monitor/kernel_log_server.h	/^  cuttlefish::SharedFD pipe_fd_;$/;"	m	class:monitor::KernelLogServer	typeref:typename:cuttlefish::SharedFD
pipe_message	common/libs/fs/shared_fd_test.cpp	/^char pipe_message[] = "Testing the pipe";$/;"	v	namespace:cuttlefish	typeref:typename:char[]
playing_	host/frontend/webrtc/lib/audio_device.h	/^  std::atomic<bool> playing_ = false;$/;"	m	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:std::atomic<bool>
pointer_destroy_resource_callback	host/libs/wayland/wayland_seat.cpp	/^void pointer_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
pointer_implementation	host/libs/wayland/wayland_seat.cpp	/^const struct wl_pointer_interface pointer_implementation = {$/;"	v	namespace:wayland::__anona9f16c970111	typeref:typename:const struct wl_pointer_interface
pointer_release	host/libs/wayland/wayland_seat.cpp	/^void pointer_release(wl_client*, wl_resource* pointer) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
pointer_set_cursor	host/libs/wayland/wayland_seat.cpp	/^void pointer_set_cursor(wl_client*,$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
pollMessages	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async #pollMessages() {$/;"	m	class:PollingConnector
pollSIMState	guest/hals/ril/reference-ril/reference-ril.c	/^static void pollSIMState (void *param __unused)$/;"	f	typeref:typename:void	file:
poll_store_	host/frontend/webrtc_operator/client_handler.h	/^  PollConnectionStore* poll_store_;$/;"	m	class:cuttlefish::ClientDynHandler	typeref:typename:PollConnectionStore *
pollerSchedule	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #pollerSchedule;$/;"	M	class:PollingConnector
pool	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^std::multimap<int, std::vector<uint8_t>> pool;$/;"	v	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:std::multimap<int,std::vector<uint8_t>>
pool_mutex	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^std::mutex pool_mutex;$/;"	v	namespace:cuttlefish::__anonfb30483e0111	typeref:typename:std::mutex
populateResponseInfo	guest/hals/ril/reference-libril/ril_service.cpp	/^void populateResponseInfo(RadioResponseInfo& responseInfo, int serial, int responseType,$/;"	f	typeref:typename:void
populateResponseInfo_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^void populateResponseInfo_1_6($/;"	f	typeref:typename:void
popup_destroy_resource_callback	host/libs/wayland/wayland_shell.cpp	/^void popup_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
port	host/frontend/webrtc/lib/streamer.h	/^    int port;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig::__anonbc3851b60108	typeref:typename:int
port_	host/frontend/webrtc/lib/camera_streamer.h	/^  unsigned int port_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:unsigned int
port_	host/frontend/webrtc/lib/ws_connection.cpp	/^  const int port_;$/;"	m	class:WsConnectionImpl	typeref:typename:const int	file:
positioner_destroy_resource_callback	host/libs/wayland/wayland_shell.cpp	/^void positioner_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
positions	host/libs/audio_connector/shm_layout.h	/^  uint8_t positions[VIRTIO_SND_CHMAP_MAX_SIZE];$/;"	m	struct:cuttlefish::virtio_snd_chmap_info	typeref:typename:uint8_t[]
powerReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::powerReq(int32_t token, bool state) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
powerState	guest/hals/ril/reference-libril/ril.h	/^    RIL_DcPowerStates           powerState; \/\/ Current power state$/;"	m	struct:__anon0bfbaecf9c08	typeref:typename:RIL_DcPowerStates
preferredNetworkMode	guest/hals/ril/reference-ril/reference-ril.c	/^    int32_t preferredNetworkMode;$/;"	m	struct:__anon70d7df6f0108	typeref:typename:int32_t	file:
preferred_network_mode	host/commands/modem_simulator/nvram_config.cpp	/^int NvramConfig::InstanceSpecific::preferred_network_mode() const {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:int
preferred_network_mode_	host/commands/modem_simulator/network_service.h	/^  int preferred_network_mode_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:int
prefix	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  std::string_view prefix;  \/\/ Prefix value to output, describing the entry$/;"	m	struct:__anonfa7764770111::__anonfa7764770208	typeref:typename:std::string_view	file:
prefix_len_	common/libs/net/network_interface.h	/^  int prefix_len_ = 24;$/;"	m	class:cuttlefish::NetworkInterface	typeref:typename:int
prefix_to_mac	guest/commands/setup_wifi/main.cpp	/^static std::array<unsigned char, 6> prefix_to_mac($/;"	f	typeref:typename:std::array<unsigned char,6>	file:
prefixlen	common/libs/device_config/device_config.proto	/^    int32 prefixlen = 5;$/;"	f	message:cuttlefish.DeviceConfig.RILConfig	typeref:typename:int32
prepareCarrierRestrictions	guest/hals/ril/reference-libril/ril_service.cpp	/^int prepareCarrierRestrictions(RIL_CarrierRestrictions &request, bool allAllowed,$/;"	f	typeref:typename:int
prepareCarrierRestrictionsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^void prepareCarrierRestrictionsResponse(hidl_vec<Carrier>& allowedCarriers,$/;"	f	typeref:typename:void
prepareNetworkScanRequest_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^int prepareNetworkScanRequest_1_2(RIL_NetworkScanRequest &scan_request,$/;"	f	typeref:typename:int
prepareNetworkScanRequest_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^int prepareNetworkScanRequest_1_5(RIL_NetworkScanRequest_v1_5 &scan_request,$/;"	f	typeref:typename:int
present	host/commands/health/health.cpp	/^int present() {$/;"	f	typeref:typename:int
presentation_status	host/commands/modem_simulator/sup_service.h	/^    int presentation_status;  \/\/ sets \/ shows the result code presentation status to the TE,$/;"	m	struct:cuttlefish::SupService::CallWaitingInfo	typeref:typename:int
prev	guest/hals/ril/reference-libril/ril_event.h	/^    struct ril_event *prev;$/;"	m	struct:ril_event	typeref:struct:ril_event *
previous_cached_gnss_raw	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::string previous_cached_gnss_raw;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::string	file:
printBuf	guest/hals/ril/reference-libril/ril.cpp	/^    static char printBuf[PRINTBUF_SIZE];$/;"	v	namespace:android	typeref:typename:char[]	file:
printList	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::printList() {$/;"	f	class:RilSapSocket	typeref:typename:void
printReadies	guest/hals/ril/reference-libril/ril_event.cpp	/^#define printReadies(/;"	d	file:
printReadies	guest/hals/ril/reference-libril/ril_event.cpp	/^static void printReadies(fd_set * rfds)$/;"	f	typeref:typename:void	file:
printRequest	guest/hals/ril/reference-libril/ril_internal.h	/^    #define printRequest(/;"	d
printResponse	guest/hals/ril/reference-libril/ril_internal.h	/^    #define printResponse /;"	d
printTombstoneListStats	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    public static void printTombstoneListStats(List<String> tList) {$/;"	m	class:TombstoneTransmitTest
probeForModemMode	guest/hals/ril/reference-ril/reference-ril.c	/^static void probeForModemMode(ModemInfo *info)$/;"	f	typeref:typename:void	file:
proc	host/commands/run_cvd/process_monitor.h	/^  std::unique_ptr<Subprocess> proc;$/;"	m	struct:cuttlefish::MonitorEntry	typeref:typename:std::unique_ptr<Subprocess>
process	tools/tombstone_to_line.py	/^def process(in_file, out_file, args):$/;"	f
processCaptureRequest	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::processCaptureRequest($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
processCaptureRequest_3_4	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Return<void> VsockCameraDeviceSession::processCaptureRequest_3_4($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Return<void>
processCommandsCallback	guest/hals/ril/reference-libril/ril_ex.h	/^    void (*processCommandsCallback)(int fd, short flags, void *param);$/;"	m	struct:SocketListenParam	typeref:typename:void (*)(int fd,short flags,void * param)
processLine	guest/hals/ril/reference-ril/atchannel.c	/^static void processLine(const char *line)$/;"	f	typeref:typename:void	file:
processName	guest/hals/ril/reference-libril/ril_ex.h	/^    const char* processName;$/;"	m	struct:SocketListenParam	typeref:typename:const char *
processOneCaptureRequest	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^Status VsockCameraDeviceSession::processOneCaptureRequest($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:Status
processReadReadies	guest/hals/ril/reference-libril/ril_event.cpp	/^static void processReadReadies(fd_set * rfds, int n)$/;"	f	typeref:typename:void	file:
processRequestLoop	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::processRequestLoop($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
processResponse	guest/hals/ril/reference-libril/sap_service.cpp	/^void processResponse(MsgHeader *rsp, RilSapSocket *sapSocket, MsgType msgType) {$/;"	f	typeref:typename:void
processResponse	guest/hals/ril/reference-libril/sap_service.cpp	/^void sap::processResponse(MsgHeader *rsp, RilSapSocket *sapSocket) {$/;"	f	class:sap	typeref:typename:void
processTimeouts	guest/hals/ril/reference-libril/ril_event.cpp	/^static void processTimeouts()$/;"	f	typeref:typename:void	file:
processUnsolResponse	guest/hals/ril/reference-libril/sap_service.cpp	/^void sap::processUnsolResponse(MsgHeader *rsp, RilSapSocket *sapSocket) {$/;"	f	class:sap	typeref:typename:void
processWakeupCallback	guest/hals/ril/reference-libril/ril.cpp	/^static void processWakeupCallback(int fd, short flags, void *param) {$/;"	f	namespace:android	typeref:typename:void	file:
process_all	tools/tombstone_to_line.py	/^def process_all(args):$/;"	f
process_file	tools/tombstone_to_line.py	/^def process_file(path, args):$/;"	f
process_leader_	host/commands/run_cvd/boot_state_machine.cc	/^  ProcessLeader& process_leader_;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:ProcessLeader &	file:
process_requests_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::atomic<bool> process_requests_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::atomic<bool>
product	host/commands/fetcher/build_api.h	/^  std::string product;$/;"	m	struct:cuttlefish::DeviceBuild	typeref:typename:std::string
product	host/commands/fetcher/build_api.h	/^  std::string product;$/;"	m	struct:cuttlefish::DirectoryBuild	typeref:typename:std::string
product_id_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  const uint16_t product_id_;$/;"	m	class:cuttlefish_input_service::VirtualDeviceBase	typeref:typename:const uint16_t
profileId	guest/hals/ril/reference-libril/ril.h	/^    int profileId;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
profileId	guest/hals/ril/reference-libril/ril.h	/^    int profileId;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
promptUserConfirmation	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^Return<ResponseCode> TrustyConfirmationUI::promptUserConfirmation($/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:Return<ResponseCode>
prompt_result_	guest/hals/confirmationui/TrustyConfirmationUI.h	/^    ResponseCode prompt_result_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI	typeref:typename:ResponseCode
prompt_text_	common/libs/confui/protocol_types.h	/^  std::string prompt_text_;$/;"	m	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::string
prompt_text_	guest/hals/confirmationui/guest_session.h	/^    std::string prompt_text_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::string
prompt_text_	host/libs/confui/cbor.h	/^  std::string prompt_text_;$/;"	m	class:cuttlefish::confui::Cbor	typeref:typename:std::string
prompt_text_	host/libs/confui/host_renderer.h	/^  std::string prompt_text_;  \/\/ confirmation ui message$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::string
prompt_text_	host/libs/confui/session.h	/^  std::string prompt_text_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::string
protected_vm	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::protected_vm() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
protective_mbr	host/libs/image_aggregator/image_aggregator.cc	/^  MasterBootRecord protective_mbr;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptBeginning	typeref:typename:MasterBootRecord	file:
protocol	guest/hals/ril/reference-libril/ril.h	/^    char *protocol;             \/* one of the PDP_type values in TS 27.007 section 10.1.1 used /;"	m	struct:__anon0bfbaecfc008	typeref:typename:char *
protocol	guest/hals/ril/reference-libril/ril.h	/^    char *protocol;             \/* one of the PDP_type values in TS 27.007 section 10.1.1 used /;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
protocol	guest/hals/ril/reference-libril/ril.h	/^    char* protocol;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:char *
protocol	guest/hals/ril/reference-libril/ril.h	/^    char* protocol;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
protocol_id_	host/commands/modem_simulator/pdu_parser.h	/^  std::string protocol_id_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:std::string
protocol_name_	host/libs/websocket/websocket_server.h	/^  std::string protocol_name_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:std::string
provider	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera	file:
provider	guest/hals/camera/vsock_camera_provider_2_7.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera
provider	guest/hals/camera/vsock_camera_server.cpp	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera	file:
provider	guest/hals/camera/vsock_camera_server.h	/^namespace android::hardware::camera::provider::V2_7::implementation {$/;"	n	namespace:android::hardware::camera
psc	guest/hals/ril/reference-libril/ril.h	/^    int psc;    \/* 9-bit UMTS Primary Scrambling Code described in TS 25.331, 0..511, INT_MAX i/;"	m	struct:__anon0bfbaecf5a08	typeref:typename:int
psc	guest/hals/ril/reference-libril/ril.h	/^    int psc;    \/* 9-bit UMTS Primary Scrambling Code described in TS 25.331, 0..511, INT_MAX i/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
psc	guest/hals/ril/reference-libril/ril.h	/^    int psc;    \/* 9-bit UMTS Primary Scrambling Code described in TS 25.331, 0..511; this valu/;"	m	struct:__anon0bfbaecf5b08	typeref:typename:int
pstore_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::pstore_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
ptr_	common/libs/fs/shared_fd.h	/^  void* ptr_ = MAP_FAILED;$/;"	m	class:cuttlefish::ScopedMMap	typeref:typename:void *
public_area_	host/commands/secure_env/primary_key_builder.h	/^  TPMT_PUBLIC public_area_;$/;"	m	class:cuttlefish::PrimaryKeyBuilder	typeref:typename:TPMT_PUBLIC
puk_	host/commands/modem_simulator/sim_service.h	/^    std::string puk_;$/;"	m	struct:cuttlefish::SimService::PinStatus	typeref:typename:std::string
puk_remaining_times_	host/commands/modem_simulator/sim_service.h	/^    int puk_remaining_times_;$/;"	m	struct:cuttlefish::SimService::PinStatus	typeref:typename:int
pullLceData	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::pullLceData(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
pullLceDataResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::pullLceDataResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
putPDP	guest/hals/ril/reference-ril/reference-ril.c	/^static void putPDP(int cid) {$/;"	f	typeref:typename:void	file:
putRequestToQueue	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::putRequestToQueue($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
q_empty_	host/libs/screen_connector/screen_connector_queue.h	/^  std::condition_variable q_empty_;$/;"	m	class:cuttlefish::ScreenConnectorQueue	typeref:typename:std::condition_variable
q_max_size_	host/libs/screen_connector/screen_connector_queue.h	/^  const int q_max_size_;$/;"	m	class:cuttlefish::ScreenConnectorQueue	typeref:typename:const int
q_mutex_	host/libs/screen_connector/screen_connector_queue.h	/^  std::unique_ptr<std::mutex> q_mutex_;$/;"	m	class:cuttlefish::ScreenConnectorQueue	typeref:typename:std::unique_ptr<std::mutex>
qemu_binary_dir	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::qemu_binary_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
qemu_open_modem_port	guest/hals/ril/reference-ril/misc.c	/^int qemu_open_modem_port() {$/;"	f	typeref:typename:int
qemu_vnc_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::qemu_vnc_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
query_ctec	guest/hals/ril/reference-ril/reference-ril.c	/^int query_ctec(ModemInfo *mdm __unused, int *current, int32_t *preferred)$/;"	f	typeref:typename:int
query_nvidia	tools/create_base_image_gce.sh	/^query_nvidia() {$/;"	f
query_supported_techs	guest/hals/ril/reference-ril/reference-ril.c	/^int query_supported_techs( ModemInfo *mdm __unused, int *supported )$/;"	f	typeref:typename:int
queue_	host/commands/modem_simulator/thread_looper.h	/^  std::deque<Event> queue_;$/;"	m	class:cuttlefish::ThreadLooper	typeref:typename:std::deque<Event>
queue_empty_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::condition_variable queue_empty_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::condition_variable
queue_mutex_	host/commands/secure_env/in_process_tpm.cpp	/^  std::mutex queue_mutex_;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:std::mutex	file:
queues_	common/libs/concurrency/multiplexer.h	/^  std::vector<QueuePtr> queues_;$/;"	m	class:cuttlefish::Multiplexer	typeref:typename:std::vector<QueuePtr>
r	host/commands/secure_env/soft_gatekeeper.h	/^    static const uint32_t r = 8;$/;"	m	class:gatekeeper::SoftGateKeeper	typeref:typename:const uint32_t
radioCapabilityIndicationInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::radioCapabilityIndicationInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
radioConfigService	guest/hals/ril/reference-libril/ril_config.cpp	/^sp<RadioConfigImpl> radioConfigService;$/;"	v	typeref:typename:sp<RadioConfigImpl>
radioService	guest/hals/ril/reference-libril/ril_service.cpp	/^sp<RadioImpl_1_6> radioService[1];$/;"	v	typeref:typename:sp<RadioImpl_1_6>[1]
radioService	guest/hals/ril/reference-libril/ril_service.cpp	/^sp<RadioImpl_1_6> radioService[SIM_COUNT];$/;"	v	typeref:typename:sp<RadioImpl_1_6>[]
radioServiceRwlock	guest/hals/ril/reference-libril/ril_service.cpp	/^static pthread_rwlock_t radioServiceRwlock = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	typeref:typename:pthread_rwlock_t	file:
radioServiceRwlock2	guest/hals/ril/reference-libril/ril_service.cpp	/^static pthread_rwlock_t radioServiceRwlock2 = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	typeref:typename:pthread_rwlock_t	file:
radioServiceRwlock3	guest/hals/ril/reference-libril/ril_service.cpp	/^static pthread_rwlock_t radioServiceRwlock3 = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	typeref:typename:pthread_rwlock_t	file:
radioServiceRwlock4	guest/hals/ril/reference-libril/ril_service.cpp	/^static pthread_rwlock_t radioServiceRwlock4 = PTHREAD_RWLOCK_INITIALIZER;$/;"	v	typeref:typename:pthread_rwlock_t	file:
radioStateChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::radioStateChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
radioStateToString	guest/hals/ril/reference-libril/ril.cpp	/^radioStateToString(RIL_RadioState s) {$/;"	f	namespace:android	typeref:typename:const char *
radio_1_6	guest/hals/ril/reference-libril/ril_service.h	/^namespace radio_1_6 {$/;"	n
radio_access_network	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessNetworks radio_access_network; \/\/ The type of network to scan.$/;"	m	struct:__anon0bfbaecfab08	typeref:typename:RIL_RadioAccessNetworks
radio_access_network	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessNetworks_v1_5 radio_access_network; \/\/ The type of network to scan.$/;"	m	struct:__anon0bfbaecfae08	typeref:typename:RIL_RadioAccessNetworks_v1_5
radio_state_	host/commands/modem_simulator/network_service.h	/^  RadioState radio_state_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:RadioState
random_source_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::unique_ptr<TpmRandomSource> random_source_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::unique_ptr<TpmRandomSource>
rat	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioTechnology rat;              \/\/ indicates the available data radio technology,$/;"	m	struct:__anon0bfbaecf8008	typeref:typename:RIL_RadioTechnology
rat	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioTechnology rat;              \/\/ indicates the available voice radio technology,$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:RIL_RadioTechnology
rat	guest/hals/ril/reference-libril/ril.h	/^    int rat;                \/\/ RIL_RadioAccessFamily for the radio$/;"	m	struct:__anon0bfbaecf0a08	typeref:typename:int
rat	guest/hals/ril/reference-libril/ril.h	/^   uint32_t rat; \/* bitset - ref. RIL_RadioTechnology. *\/$/;"	m	struct:__anon0bfbaecf9108	typeref:typename:uint32_t
rate	host/libs/audio_connector/commands.h	/^  uint8_t rate() const { return rate_; }$/;"	f	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:uint8_t
rate	host/libs/audio_connector/shm_layout.h	/^  uint8_t rate;$/;"	m	struct:cuttlefish::virtio_snd_pcm_set_params	typeref:typename:uint8_t
rate_	host/libs/audio_connector/commands.h	/^  const uint8_t rate_;$/;"	m	struct:cuttlefish::StreamSetParamsCommand	typeref:typename:const uint8_t
rates	host/libs/audio_connector/shm_layout.h	/^  Le64 rates;    \/* 1 << VIRTIO_SND_PCM_RATE_XXX *\/$/;"	m	struct:cuttlefish::virtio_snd_pcm_info	typeref:typename:Le64
raw_frame_	host/libs/confui/host_renderer.h	/^  std::shared_ptr<TeeUiFrameWrapper> raw_frame_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:std::shared_ptr<TeeUiFrameWrapper>
readFds	guest/hals/ril/reference-libril/ril_event.cpp	/^static fd_set readFds;$/;"	v	typeref:typename:fd_set	file:
readSettingsFromJson	guest/hals/camera/vsock_camera_server.cpp	/^bool readSettingsFromJson(VsockCameraDevice::Settings& settings,$/;"	f	namespace:android::hardware::camera::provider::V2_7::implementation::__anon29cd72800111	typeref:typename:bool
read_buffer_	common/libs/fs/shared_fd_stream.h	/^  std::unique_ptr<char[]> read_buffer_ = nullptr;$/;"	m	class:cuttlefish::SharedFDStreambuf	typeref:typename:std::unique_ptr<char[]>
read_mutex_	common/libs/utils/vsock_connection.h	/^  std::recursive_mutex read_mutex_;$/;"	m	class:cuttlefish::VsockConnection	typeref:typename:std::recursive_mutex
read_only	host/libs/image_aggregator/image_aggregator.h	/^  bool read_only;$/;"	m	struct:cuttlefish::ImagePartition	typeref:typename:bool
read_only	host/libs/image_aggregator/image_aggregator.h	/^  bool read_only;$/;"	m	struct:cuttlefish::MultipleImagePartition	typeref:typename:bool
read_pipe_	host/commands/modem_simulator/channel_monitor.h	/^  cuttlefish::SharedFD read_pipe_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:cuttlefish::SharedFD
read_set_	host/frontend/webrtc/adb_handler.h	/^  SharedFDSet read_set_;$/;"	m	struct:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:SharedFDSet
read_set_	host/frontend/webrtc/bluetooth_handler.h	/^  SharedFDSet read_set_;$/;"	m	struct:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:SharedFDSet
read_thread_	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    std::thread read_thread_;$/;"	m	class:GnssGrpcProxyServiceImpl	typeref:typename:std::thread	file:
read_thread_	host/frontend/webrtc/adb_handler.h	/^  std::thread read_thread_;$/;"	m	struct:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:std::thread
read_thread_	host/frontend/webrtc/bluetooth_handler.h	/^  std::thread read_thread_;$/;"	m	struct:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:std::thread
read_thread_	host/frontend/webrtc/kernel_log_events_handler.h	/^  std::thread read_thread_;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:std::thread
read_write_capability	host/libs/image_aggregator/cdisk_spec.proto	/^  ReadWriteCapability read_write_capability = 3;$/;"	f	message:ComponentDisk	typeref:typename:ReadWriteCapability
readerLoop	guest/hals/ril/reference-ril/atchannel.c	/^static void *readerLoop(void *arg __unused)$/;"	f	typeref:typename:void *	file:
reader_builder	host/libs/allocd/request.h	/^  Json::CharReaderBuilder reader_builder;$/;"	m	class:cuttlefish::JsonRequestReader	typeref:typename:Json::CharReaderBuilder
reader_thread_	guest/hals/camera/vsock_frame_provider.h	/^  std::thread reader_thread_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::thread
reader_thread_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::thread reader_thread_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::thread
readline	guest/hals/ril/reference-ril/atchannel.c	/^static const char *readline()$/;"	f	typeref:typename:const char *	file:
reason	guest/hals/ril/reference-libril/ril.h	/^    int             reason;      \/* from TS 27.007 7.11 "reason" *\/$/;"	m	struct:__anon0bfbaecf2108	typeref:typename:int
reason	host/commands/modem_simulator/sup_service.h	/^    Reason reason;$/;"	m	struct:cuttlefish::SupService::CallForwardInfo	typeref:typename:Reason
reasonDataDenied	guest/hals/ril/reference-libril/ril.h	/^    int32_t reasonDataDenied;             \/\/ if registration state is 3 (Registration$/;"	m	struct:__anon0bfbaecf8008	typeref:typename:int32_t
reasonForDenial	guest/hals/ril/reference-libril/ril.h	/^    int32_t reasonForDenial;              \/\/ reasonForDenial if registration state is 3$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:int32_t
reboot_notification_	host/commands/run_cvd/boot_state_machine.cc	/^  SharedFD reboot_notification_;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:SharedFD	file:
rec	guest/hals/ril/reference-libril/ril.h	/^  } rec;$/;"	m	struct:__anon0bfbaecf8908	typeref:union:__anon0bfbaecf8908::__anon0bfbaecf8a0a
receive_buffer_	host/frontend/webrtc/lib/client_handler.cpp	/^  std::vector<char> receive_buffer_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraChannelHandler	typeref:typename:std::vector<char>	file:
receive_buffer_	host/frontend/webrtc_operator/signal_handler.h	/^  std::vector<uint8_t> receive_buffer_;$/;"	m	class:cuttlefish::SignalHandler	typeref:typename:std::vector<uint8_t>
record-video-control	host/frontend/webrtc_operator/assets/client.html	/^            <div id="record-video-control" title="Capture Display as Webm"><\/div>$/;"	I
record_screen	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::record_screen() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
recording	host/frontend/webrtc_operator/assets/js/app.js	/^  #recording = {};$/;"	M	class:DeviceControlApp
recording_	host/frontend/webrtc/lib/audio_device.h	/^  std::atomic<bool> recording_ = false;$/;"	m	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:std::atomic<bool>
redir	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_RedirectingNumberInfoRecord redir;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_RedirectingNumberInfoRecord
redirectingNumber	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_NumberInfoRecord redirectingNumber;$/;"	m	struct:__anon0bfbaecf8508	typeref:typename:RIL_CDMA_NumberInfoRecord
redirectingReason	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_RedirectingReason redirectingReason;$/;"	m	struct:__anon0bfbaecf8508	typeref:typename:RIL_CDMA_RedirectingReason
redirects_	common/libs/utils/subprocess.h	/^  std::map<Subprocess::StdIOChannel, int> redirects_{};$/;"	m	class:cuttlefish::Command	typeref:typename:std::map<Subprocess::StdIOChannel,int>
refcount_table_clusters	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 refcount_table_clusters;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
refcount_table_offset	host/libs/image_aggregator/image_aggregator.cc	/^  Be64 refcount_table_offset;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be64	file:
refresh-list	host/frontend/webrtc_operator/assets/index.html	/^        <h1>Available devices <span id='refresh-list'>&#8635;<\/span><\/h1>$/;"	I
refresh_rate_hz	common/libs/device_config/device_config.proto	/^    int32 refresh_rate_hz = 4;$/;"	f	message:cuttlefish.DeviceConfig.DisplayConfig	typeref:typename:int32
refresh_rate_hz	host/libs/config/cuttlefish_config.h	/^    int refresh_rate_hz;$/;"	m	struct:cuttlefish::CuttlefishConfig::DisplayConfig	typeref:typename:int
regState	guest/hals/ril/reference-libril/ril.h	/^    RIL_RegState regState;                \/\/ Valid reg states are RIL_NOT_REG_AND_NOT_SEARCHIN/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:RIL_RegState
regState	guest/hals/ril/reference-libril/ril.h	/^    RIL_RegState regState;                \/\/ Valid reg states are RIL_NOT_REG_AND_NOT_SEARCHIN/;"	m	struct:__anon0bfbaecf8008	typeref:typename:RIL_RegState
region	host/libs/wayland/wayland_surface.h	/^    Region region;$/;"	m	struct:wayland::Surface::State	typeref:typename:Region
region_add	host/libs/wayland/wayland_compositor.cpp	/^void region_add(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
region_destroy	host/libs/wayland/wayland_compositor.cpp	/^void region_destroy(wl_client*, wl_resource* region_resource) {$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
region_implementation	host/libs/wayland/wayland_compositor.cpp	/^const struct wl_region_interface region_implementation = {$/;"	v	namespace:wayland::__anon473d11590111	typeref:typename:const struct wl_region_interface
region_subtract	host/libs/wayland/wayland_compositor.cpp	/^void region_subtract(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
registerBroadcastReceivers	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceService.java	/^    private void registerBroadcastReceivers() {$/;"	m	class:GceService	file:
registerConfigService	guest/hals/ril/reference-libril/ril_config.cpp	/^void radio_1_6::registerConfigService(RIL_RadioFunctions *callbacks, CommandInfo *commands) {$/;"	f	class:radio_1_6	typeref:typename:void
registerService	guest/hals/ril/reference-libril/ril_service.cpp	/^void radio_1_6::registerService(RIL_RadioFunctions *callbacks, CommandInfo *commands) {$/;"	f	class:radio_1_6	typeref:typename:void
registerService	guest/hals/ril/reference-libril/sap_service.cpp	/^void sap::registerService(const RIL_RadioFunctions *callbacks) {$/;"	f	class:sap	typeref:typename:void
registered	guest/hals/ril/reference-libril/ril.h	/^  int                       registered;     \/* !0 if this cell is registered 0 if not registere/;"	m	struct:__anon0bfbaecf7208	typeref:typename:int
registered	guest/hals/ril/reference-libril/ril.h	/^  int               registered;     \/* !0 if this cell is registered 0 if not registered *\/$/;"	m	struct:__anon0bfbaecf6e08	typeref:typename:int
registered	guest/hals/ril/reference-libril/ril.h	/^  int               registered;     \/* !0 if this cell is registered 0 if not registered *\/$/;"	m	struct:__anon0bfbaecf7008	typeref:typename:int
registerer_	host/commands/start/flag_forwarder.cc	/^  gflags::FlagRegisterer registerer_;$/;"	m	class:DynamicFlag	typeref:typename:gflags::FlagRegisterer	file:
registration_retries_left_	host/frontend/webrtc/lib/streamer.cpp	/^  int registration_retries_left_ = kRegistrationRetries;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:int	file:
registration_state	host/commands/modem_simulator/network_service.h	/^    RegistrationState registration_state;$/;"	m	struct:cuttlefish::NetworkService::NetworkRegistrationStatus	typeref:typename:RegistrationState
registry_	host/frontend/webrtc_operator/client_handler.h	/^  DeviceRegistry* registry_;$/;"	m	class:cuttlefish::ClientWSHandlerFactory	typeref:typename:DeviceRegistry *
registry_	host/frontend/webrtc_operator/client_handler.h	/^  DeviceRegistry* registry_;$/;"	m	class:cuttlefish::ConnectHandler	typeref:typename:DeviceRegistry *
registry_	host/frontend/webrtc_operator/device_handler.h	/^  DeviceRegistry* registry_;$/;"	m	class:cuttlefish::DeviceHandlerFactory	typeref:typename:DeviceRegistry *
registry_	host/frontend/webrtc_operator/device_list_handler.h	/^  DeviceRegistry& registry_;$/;"	m	class:cuttlefish::DeviceListHandler	typeref:typename:DeviceRegistry &
registry_	host/frontend/webrtc_operator/signal_handler.h	/^  DeviceRegistry* registry_;$/;"	m	class:cuttlefish::SignalHandler	typeref:typename:DeviceRegistry *
rejectCall	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::rejectCall(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
rejectCallResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::rejectCallResponse(int slotId, int responseType,$/;"	f	class:radio_1_6	typeref:typename:int
release	guest/hals/camera/cached_stream_buffer.cpp	/^int CachedStreamBuffer::release() { return g_importer.unlock(buffer_); }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:int
releasePduSessionId	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::releasePduSessionId(int32_t serial, int32_t id) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
releasePduSessionIdResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::releasePduSessionIdResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
releaseWakeLock	guest/hals/ril/reference-libril/ril.cpp	/^releaseWakeLock() {$/;"	f	namespace:android	typeref:typename:void
remote	guest/hals/bt/remote/remote_bluetooth.cpp	/^namespace remote {$/;"	n	namespace:android::hardware::bluetooth::V1_1	file:
remote	guest/hals/bt/remote/remote_bluetooth.h	/^namespace remote {$/;"	n	namespace:android::hardware::bluetooth::V1_1
remote	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^bool AudioTrackSourceImpl::remote() const { return false; }$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:bool
remote_client	host/commands/modem_simulator/call_service.h	/^    std::optional<cuttlefish::SharedFD> remote_client;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:std::optional<cuttlefish::SharedFD>
remote_clients_	host/commands/modem_simulator/channel_monitor.h	/^  std::vector<std::unique_ptr<Client>> remote_clients_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:std::vector<std::unique_ptr<Client>>
remote_description_added_	host/frontend/webrtc/lib/client_handler.h	/^  bool remote_description_added_ = false;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:bool
remote_provisioning_context_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::unique_ptr<TpmRemoteProvisioningContext> remote_provisioning_context_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::unique_ptr<TpmRemoteProvisioningContext>
remove	guest/hals/camera/stream_buffer_cache.cpp	/^void StreamBufferCache::remove(uint64_t buffer_id) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:void
removeFromList	guest/hals/ril/reference-libril/ril_event.cpp	/^static void removeFromList(struct ril_event * ev)$/;"	f	typeref:typename:void	file:
removeInvalidClients	host/commands/modem_simulator/channel_monitor.cpp	/^static void removeInvalidClients(std::vector<std::unique_ptr<Client>>& clients) {$/;"	f	namespace:cuttlefish	typeref:typename:void	file:
removeLastChar	guest/hals/ril/reference-libril/ril_internal.h	/^    #define removeLastChar /;"	d
removeStreamsExcept	guest/hals/camera/stream_buffer_cache.cpp	/^void StreamBufferCache::removeStreamsExcept(std::set<int32_t> streams_to_keep) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:void
removeWatch	guest/hals/ril/reference-libril/ril_event.cpp	/^static void removeWatch(struct ril_event * ev, int index)$/;"	f	typeref:typename:void	file:
render_confui_cnt_	host/libs/screen_connector/screen_connector.h	/^  unsigned long long int render_confui_cnt_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:unsigned long long int
renderer_	host/libs/confui/session.h	/^  std::unique_ptr<ConfUiRenderer> renderer_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::unique_ptr<ConfUiRenderer>
renegotiateConnection	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async renegotiateConnection() {$/;"	m	class:Controller
reply	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.proto	/^  string reply = 1;$/;"	f	message:gnss_grpc_proxy.SendNmeaReply	typeref:typename:string
reportBootStarted	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public void reportBootStarted() {$/;"	m	class:EventReporter
reportIntent	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceBroadcastReceiver.java	/^    private void reportIntent(Context context, String intentType) {$/;"	m	class:GceBroadcastReceiver	file:
reportMessage	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public void reportMessage(String message) {$/;"	m	class:EventReporter
reportPhysicalChannelConfigs	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::reportPhysicalChannelConfigs(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
reportScreenChanged	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/EventReporter.java	/^    public void reportScreenChanged(int width, int height, int dpi, int rotation) {$/;"	m	class:EventReporter
reportSmsMemoryStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::reportSmsMemoryStatus(int32_t serial, bool available) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
reportSmsMemoryStatusResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::reportSmsMemoryStatusResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
reportStkServiceIsRunning	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::reportStkServiceIsRunning(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
reportStkServiceIsRunningResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::reportStkServiceIsRunningResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
reportedEthernetConnectivity	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private static boolean reportedEthernetConnectivity = false;$/;"	f	class:ConnectivityChecker	file:
reportedMobileConnectivity	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/ConnectivityChecker.java	/^    private static boolean reportedMobileConnectivity = false;$/;"	f	class:ConnectivityChecker	file:
repository_branch	tools/create_base_image.go	/^var repository_branch string$/;"	v	package:main	typeref:typename:string
repository_url	tools/create_base_image.go	/^var repository_url string$/;"	v	package:main	typeref:typename:string
requestCallSelection	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCallSelection($/;"	f	typeref:typename:void	file:
requestCdmaBaseBandVersion	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaBaseBandVersion(int request __unused, void *data __unused,$/;"	f	typeref:typename:void	file:
requestCdmaGetRoamingPreference	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaGetRoamingPreference(int request __unused, void *data __unused,$/;"	f	typeref:typename:void	file:
requestCdmaGetSubscriptionSource	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaGetSubscriptionSource(int request __unused, void *data,$/;"	f	typeref:typename:void	file:
requestCdmaPrlVersion	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaPrlVersion(int request __unused, void *data __unused,$/;"	f	typeref:typename:void	file:
requestCdmaSendSMS	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaSendSMS(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestCdmaSetRoamingPreference	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaSetRoamingPreference(int request __unused, void *data,$/;"	f	typeref:typename:void	file:
requestCdmaSetSubscriptionSource	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaSetSubscriptionSource(int request __unused, void *data,$/;"	f	typeref:typename:void	file:
requestCdmaSubscription	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestCdmaSubscription(int request __unused, void *data __unused,$/;"	f	typeref:typename:void	file:
requestChangeBarringPassword	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestChangeBarringPassword(char **data, size_t datalen, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestChangeSimPin	guest/hals/ril/reference-ril/reference-ril.c	/^static void  requestChangeSimPin(int request, void*  data, size_t  datalen, RIL_Token  t)$/;"	f	typeref:typename:void	file:
requestChangeSimPin2	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestChangeSimPin2(void *data, size_t datalen, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestDataCallList	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestDataCallList(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestDeactivateDataCall	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestDeactivateDataCall(void *data, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestDevice	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async requestDevice(deviceId) {$/;"	m	class:Connector
requestDevice	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async requestDevice(deviceId) {$/;"	m	class:PollingConnector
requestDevice	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async requestDevice(deviceId) {$/;"	m	class:WebsocketConnector
requestDeviceIdentity	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestDeviceIdentity(int request __unused, void *data __unused,$/;"	f	typeref:typename:void	file:
requestDial	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestDial(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestEccDial	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestEccDial(void *data, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestEnterSimPin	guest/hals/ril/reference-ril/reference-ril.c	/^static void  requestEnterSimPin(int request, void*  data, size_t  datalen, RIL_Token  t)$/;"	f	typeref:typename:void	file:
requestExitEmergencyMode	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestExitEmergencyMode(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestFacilityLock	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestFacilityLock(int request, char **data,$/;"	f	typeref:typename:void	file:
requestGetActivityInfo	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetActivityInfo(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetCellInfoList	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetCellInfoList(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetCurrentCalls	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetCurrentCalls(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetHardwareConfig	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetHardwareConfig(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetMute	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetMute(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetPreferredNetworkType	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetPreferredNetworkType(int request __unused, void *data __unused,$/;"	f	typeref:typename:void	file:
requestGetRadioCapability	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetRadioCapability(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetSmsBroadcastConfig	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetSmsBroadcastConfig(void *data, size_t datalen,$/;"	f	typeref:typename:void	file:
requestGetSmscAddress	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetSmscAddress(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestGetTtyMode	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestGetTtyMode(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestHangup	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestHangup(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestIccSimAuthentication	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::requestIccSimAuthentication(int32_t serial, int32_t authContext,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
requestIccSimAuthenticationResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::requestIccSimAuthenticationResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
requestImsSendSMS	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestImsSendSMS(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestIsimAuthentication	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::requestIsimAuthentication(int32_t serial, const hidl_string& challen/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
requestIsimAuthenticationResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::requestIsimAuthenticationResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
requestJpeg	guest/hals/camera/vsock_frame_provider.cpp	/^void VsockFrameProvider::requestJpeg() {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:void
requestNumber	guest/hals/ril/reference-libril/ril.cpp	/^    int requestNumber;$/;"	m	struct:android::__anonf9a2982a0108	typeref:typename:int	file:
requestNumber	guest/hals/ril/reference-libril/ril_internal.h	/^    int requestNumber;$/;"	m	struct:android::CommandInfo	typeref:typename:int
requestOperator	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestOperator(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestOrSendDataCallList	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestOrSendDataCallList(int cid, RIL_Token *t)$/;"	f	typeref:typename:void	file:
requestQueryCallForward	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestQueryCallForward(RIL_CallForwardInfo *data,$/;"	f	typeref:typename:void	file:
requestQueryCallWaiting	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestQueryCallWaiting(void *data, size_t datalen, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestQueryClip	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestQueryClip(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestQueryClir	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestQueryClir(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestQueryNetworkSelectionMode	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestQueryNetworkSelectionMode($/;"	f	typeref:typename:void	file:
requestRadioPower	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestRadioPower(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestRegistrationState	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestRegistrationState(int request, void *data __unused,$/;"	f	typeref:typename:void	file:
requestSIM_IO	guest/hals/ril/reference-ril/reference-ril.c	/^static void  requestSIM_IO(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSMSAcknowledge	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSMSAcknowledge(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestScreenState	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestScreenState(void *data, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSendSMS	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSendSMS(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSendUSSD	guest/hals/ril/reference-ril/reference-ril.c	/^static void  requestSendUSSD(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSetCallForward	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetCallForward(RIL_CallForwardInfo *data,$/;"	f	typeref:typename:void	file:
requestSetCallWaiting	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetCallWaiting(void *data, size_t datalen, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestSetCellInfoListRate	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetCellInfoListRate(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSetClir	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetClir(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSetMute	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetMute(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSetNetworlSelectionManual	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetNetworlSelectionManual(void *data, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestSetPreferredNetworkType	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetPreferredNetworkType(int request, void *data,$/;"	f	typeref:typename:void	file:
requestSetRadioCapability	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetRadioCapability(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSetSmsBroadcastConfig	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetSmsBroadcastConfig(void *data, size_t datalen,$/;"	f	typeref:typename:void	file:
requestSetSmscAddress	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetSmscAddress(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSetSuppServiceNotifications	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetSuppServiceNotifications(void *data, size_t datalen,$/;"	f	typeref:typename:void	file:
requestSetupDataCall	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSetupDataCall(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestShutdown	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::requestShutdown(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
requestShutdown	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestShutdown(RIL_Token t)$/;"	f	typeref:typename:void	file:
requestShutdownResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::requestShutdownResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
requestSignalStrength	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSignalStrength(void *data __unused, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSimAuthentication	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSimAuthentication(int authContext, char* authData, RIL_Token t) {$/;"	f	typeref:typename:void	file:
requestSimCloseChannel	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSimCloseChannel(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSimOpenChannel	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSimOpenChannel(void *data, size_t datalen, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestSimTransmitApduChannel	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestSimTransmitApduChannel(void *data,$/;"	f	typeref:typename:void	file:
requestStkSendEnvelope	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestStkSendEnvelope(void *data, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestStkServiceIsRunning	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestStkServiceIsRunning(RIL_Token t)$/;"	f	typeref:typename:void	file:
requestStksendTerminalResponse	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestStksendTerminalResponse(void *data, RIL_Token t)$/;"	f	typeref:typename:void	file:
requestToString	guest/hals/ril/reference-libril/ril.cpp	/^requestToString(int request) {$/;"	f	namespace:android	typeref:typename:const char *
requestTransmitApduBasic	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestTransmitApduBasic( void *data, size_t datalen,$/;"	f	typeref:typename:void	file:
requestType	guest/hals/ril/reference-libril/ril.h	/^  RIL_SsRequestType requestType;$/;"	m	struct:__anon0bfbaecf9908	typeref:typename:RIL_SsRequestType
requestWriteSmsToSim	guest/hals/ril/reference-ril/reference-ril.c	/^static void requestWriteSmsToSim(void *data, size_t datalen __unused, RIL_Token t)$/;"	f	typeref:typename:void	file:
request_	common/libs/net/netlink_request.h	/^  std::vector<char> request_;$/;"	m	class:cuttlefish::NetlinkRequest	typeref:typename:std::vector<char>
request_available_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::condition_variable request_available_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::condition_variable
request_mutex_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::mutex request_mutex_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::mutex
request_processor_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::thread request_processor_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::thread
request_queue_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::unique_ptr<MessageQueue<uint8_t, kSynchronizedReadWrite>> request_queue_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::unique_ptr<MessageQueue<uint8_t,kSynchronizedReadWrite>>
request_time_ms	host/commands/metrics/proto/clientanalytics.proto	/^  optional int64 request_time_ms = 4;$/;"	f	message:LogRequest	typeref:typename:int64
resendIncallMuteInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::resendIncallMuteInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
resendLastNITZTimeData	guest/hals/ril/reference-libril/ril.cpp	/^static void resendLastNITZTimeData(RIL_SOCKET_ID socket_id) {$/;"	f	namespace:android	typeref:typename:void	file:
reserved	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint32_t reserved;$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint32_t	file:
resetSimReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::resetSimReq(int32_t token) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
resizeDeviceDisplays	host/frontend/webrtc_operator/assets/js/app.js	/^  #resizeDeviceDisplays() {$/;"	m	class:DeviceControlApp
resolution_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::atomic<Resolution> resolution_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::atomic<Resolution>
resource_	host/commands/secure_env/tpm_resource_manager.h	/^    ESYS_TR resource_;$/;"	m	class:cuttlefish::TpmResourceManager::ObjectSlot	typeref:typename:ESYS_TR
resource_id	host/commands/assemble_cvd/alloc.h	/^  uint32_t resource_id;$/;"	m	struct:cuttlefish::IfaceData	typeref:typename:uint32_t
resource_manager_	host/commands/secure_env/encrypted_serializable.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::EncryptedSerializable	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/fragile_tpm_storage.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::FragileTpmStorage	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/hmac_serializable.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::HmacSerializable	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/insecure_fallback_storage.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::InsecureFallbackStorage	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/tpm_gatekeeper.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::TpmGatekeeper	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/tpm_key_blob_maker.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/tpm_keymaster_context.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/tpm_keymaster_enforcement.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/tpm_remote_provisioning_context.h	/^  TpmResourceManager& resource_manager_;$/;"	m	class:cuttlefish::TpmRemoteProvisioningContext	typeref:typename:TpmResourceManager &
resource_manager_	host/commands/secure_env/tpm_resource_manager.h	/^    TpmResourceManager* resource_manager_;$/;"	m	class:cuttlefish::TpmResourceManager::ObjectSlot	typeref:typename:TpmResourceManager *
resoure_cv_	common/libs/concurrency/semaphore.h	/^  std::condition_variable resoure_cv_;$/;"	m	class:cuttlefish::Semaphore	typeref:typename:std::condition_variable
responseAcknowledgement	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::responseAcknowledgement() {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
responseFunction	guest/hals/ril/reference-libril/ril.cpp	/^    int (*responseFunction) (int slotId, int responseType, int token,$/;"	m	struct:android::__anonf9a2982a0108	typeref:typename:int (*)(int slotId,int responseType,int token,RIL_Errno e,void * response,size_t responselen)	file:
responseFunction	guest/hals/ril/reference-libril/ril_internal.h	/^    int(*responseFunction) (int slotId, int responseType, int token,$/;"	m	struct:android::CommandInfo	typeref:typename:int (*)(int slotId,int responseType,int token,RIL_Errno e,void * response,size_t responselen)
responseIccIo	guest/hals/ril/reference-libril/ril_service.cpp	/^IccIoResult responseIccIo(RadioResponseInfo& responseInfo, int serial, int responseType,$/;"	f	typeref:typename:IccIoResult
responseInt	guest/hals/ril/reference-libril/ril_service.cpp	/^int responseInt(RadioResponseInfo& responseInfo, int serial, int responseType, RIL_Errno e,$/;"	f	typeref:typename:int
responseIntOrEmpty	guest/hals/ril/reference-libril/ril_service.cpp	/^int responseIntOrEmpty(RadioResponseInfo& responseInfo, int serial, int responseType, RIL_Errno /;"	f	typeref:typename:int
responseInt_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^int responseInt_1_6(::android::hardware::radio::V1_6::RadioResponseInfo &responseInfo, int seria/;"	f	typeref:typename:int
responseLceStatusInfo	guest/hals/ril/reference-libril/ril_service.cpp	/^LceStatusInfo responseLceStatusInfo(RadioResponseInfo& responseInfo, int serial, int responseTyp/;"	f	typeref:typename:LceStatusInfo
responseRadioCapability	guest/hals/ril/reference-libril/ril_service.cpp	/^void responseRadioCapability(RadioResponseInfo& responseInfo, int serial,$/;"	f	typeref:typename:void
response_	common/libs/confui/protocol_types.h	/^  UserResponse::type response_;     \/\/ plain format$/;"	m	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:UserResponse::type
response_	common/libs/confui/protocol_types.h	/^  UserResponse::type response_;$/;"	m	class:cuttlefish::confui::ConfUiUserSelectionMessage	typeref:typename:UserResponse::type
response_	common/libs/confui/protocol_types.h	/^  UserResponse::type response_;$/;"	m	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:UserResponse::type
restart_subprocesses	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::restart_subprocesses() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
restart_subprocesses_	host/commands/run_cvd/process_monitor.h	/^  bool restart_subprocesses_;$/;"	m	class:cuttlefish::ProcessMonitor	typeref:typename:bool
restrictedStateChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::restrictedStateChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
result	guest/hals/ril/reference-libril/ril.h	/^    RIL_SimRefreshResult result;$/;"	m	struct:__anon0bfbaecf4108	typeref:typename:RIL_SimRefreshResult
result	guest/hals/ril/reference-libril/ril.h	/^  RIL_Errno result;$/;"	m	struct:__anon0bfbaecf9908	typeref:typename:RIL_Errno
result_queue_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::shared_ptr<MessageQueue<uint8_t, kSynchronizedReadWrite>> result_queue_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::shared_ptr<MessageQueue<uint8_t,kSynchronizedReadWrite>>
retry	guest/hals/ril/reference-libril/ril.h	/^    unsigned char             retry;       \/* 0 == not retry, nonzero == retry *\/$/;"	m	struct:__anon0bfbaecf1808	typeref:typename:unsigned char
retry_	host/libs/websocket/websocket_server.h	/^  lws_retry_bo_t retry_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:lws_retry_bo_t
retry_attempts_	host/commands/fetcher/curl_wrapper.cc	/^  int retry_attempts_;$/;"	m	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:int	file:
retry_delay_	host/commands/fetcher/curl_wrapper.cc	/^  std::chrono::milliseconds retry_delay_;$/;"	m	class:cuttlefish::__anondfffca8d0111::CurlServerErrorRetryingWrapper	typeref:typename:std::chrono::milliseconds	file:
retry_interval_ms_	host/frontend/webrtc/lib/streamer.cpp	/^  int retry_interval_ms_ = kRetryFirstIntervalMs;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:int	file:
reverseIntermediates	guest/hals/ril/reference-ril/atchannel.c	/^static void reverseIntermediates(ATResponse *p_response)$/;"	f	typeref:typename:void	file:
revision	host/commands/fetcher/build_api.h	/^  std::string revision;$/;"	m	class:cuttlefish::Artifact	typeref:typename:std::string
revision	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t revision[4];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint8_t[4]	file:
rilConnectedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::rilConnectedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
rilEventAddWakeup	guest/hals/ril/reference-libril/ril.cpp	/^static void rilEventAddWakeup(struct ril_event *ev) {$/;"	f	namespace:android	typeref:typename:void	file:
rilModel	guest/hals/ril/reference-libril/ril.h	/^   int rilModel;$/;"	m	struct:__anon0bfbaecf9108	typeref:typename:int
rilSocketId	guest/hals/ril/reference-libril/sap_service.cpp	/^    RIL_SOCKET_ID rilSocketId;$/;"	m	struct:SapImpl	typeref:typename:RIL_SOCKET_ID	file:
rilSocketIdToString	guest/hals/ril/reference-libril/ril.cpp	/^rilSocketIdToString(RIL_SOCKET_ID socket_id)$/;"	f	namespace:android	typeref:typename:const char *
ril_address_and_prefix	host/commands/modem_simulator/cf_device_config.cpp	/^std::string DeviceConfig::ril_address_and_prefix() {$/;"	f	class:cuttlefish::modem::DeviceConfig	typeref:typename:std::string
ril_broadcast	common/libs/device_config/host_device_config.cpp	/^  std::string ril_broadcast;$/;"	m	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:std::string	file:
ril_config	common/libs/device_config/device_config.proto	/^  RILConfig ril_config = 1;$/;"	f	message:cuttlefish.DeviceConfig	typeref:typename:RILConfig
ril_dns	common/libs/device_config/host_device_config.cpp	/^  std::string ril_dns;$/;"	m	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:std::string	file:
ril_dns	host/commands/modem_simulator/cf_device_config.cpp	/^std::string DeviceConfig::ril_dns() {$/;"	f	class:cuttlefish::modem::DeviceConfig	typeref:typename:std::string
ril_dns	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::ril_dns() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
ril_event	guest/hals/ril/reference-libril/ril_event.h	/^struct ril_event {$/;"	s
ril_event_add	guest/hals/ril/reference-libril/ril_event.cpp	/^void ril_event_add(struct ril_event * ev)$/;"	f	typeref:typename:void
ril_event_cb	guest/hals/ril/reference-libril/ril_event.h	/^typedef void (*ril_event_cb)(int fd, short events, void *userdata);$/;"	t	typeref:typename:void (*)(int fd,short events,void * userdata)
ril_event_del	guest/hals/ril/reference-libril/ril_event.cpp	/^void ril_event_del(struct ril_event * ev)$/;"	f	typeref:typename:void
ril_event_init	guest/hals/ril/reference-libril/ril_event.cpp	/^void ril_event_init()$/;"	f	typeref:typename:void
ril_event_loop	guest/hals/ril/reference-libril/ril_event.cpp	/^void ril_event_loop()$/;"	f	typeref:typename:void
ril_event_set	guest/hals/ril/reference-libril/ril_event.cpp	/^void ril_event_set(struct ril_event * ev, int fd, bool persist, ril_event_cb func, void * param)$/;"	f	typeref:typename:void
ril_gateway	common/libs/device_config/host_device_config.cpp	/^  std::string ril_gateway;$/;"	m	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:std::string	file:
ril_gateway	host/commands/modem_simulator/cf_device_config.cpp	/^std::string DeviceConfig::ril_gateway() {$/;"	f	class:cuttlefish::modem::DeviceConfig	typeref:typename:std::string
ril_ipaddr	common/libs/device_config/host_device_config.cpp	/^  std::string ril_ipaddr;$/;"	m	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:std::string	file:
ril_prefixlen	common/libs/device_config/host_device_config.cpp	/^  uint8_t ril_prefixlen = -1;$/;"	m	class:cuttlefish::__anonf277137d0111::NetConfig	typeref:typename:uint8_t	file:
ril_side_	host/commands/modem_simulator/unittest/service_test.cpp	/^  static Client* ril_side_;$/;"	m	class:ModemServiceTest	typeref:typename:Client *	file:
ril_side_	host/commands/modem_simulator/unittest/service_test.cpp	/^Client* ModemServiceTest::ril_side_ = nullptr;$/;"	m	class:ModemServiceTest	typeref:typename:Client *
ril_timer_add	guest/hals/ril/reference-libril/ril_event.cpp	/^void ril_timer_add(struct ril_event * ev, struct timeval * tv)$/;"	f	typeref:typename:void
rilc_thread_pool	guest/hals/ril/reference-libril/ril_service.cpp	/^void rilc_thread_pool() {$/;"	f	typeref:typename:void
roamingIndicator	guest/hals/ril/reference-libril/ril.h	/^    int32_t roamingIndicator;             \/\/ TSB-58 Roaming Indicator if registered$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:int32_t
roamingProtocol	guest/hals/ril/reference-libril/ril.h	/^    char *roamingProtocol;      \/* one of the PDP_type values in TS 27.007 section 10.1.1 used /;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
roamingProtocol	guest/hals/ril/reference-libril/ril.h	/^    char *roamingProtocol;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
room_cv_	common/libs/concurrency/semaphore.h	/^  std::condition_variable room_cv_;$/;"	m	class:cuttlefish::Semaphore	typeref:typename:std::condition_variable
rootCanalAddPayload	host/frontend/webrtc_operator/assets/js/rootcanal.js	/^function rootCanalAddPayload(array, pos, payload) {$/;"	f
rootCanalAddString	host/frontend/webrtc_operator/assets/js/rootcanal.js	/^function rootCanalAddString(array, pos, val) {$/;"	f
rootCanalAddU8	host/frontend/webrtc_operator/assets/js/rootcanal.js	/^function rootCanalAddU8(array, pos, val) {$/;"	f
rootCanalCalculateMessageSize	host/frontend/webrtc_operator/assets/js/rootcanal.js	/^function rootCanalCalculateMessageSize(name, args) {$/;"	f
rootcanal_config_file	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::rootcanal_config_file() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
rootcanal_default_commands_file	host/libs/config/cuttlefish_config_instance.cpp	/^CuttlefishConfig::InstanceSpecific::rootcanal_default_commands_file() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
rootcanal_hci_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::rootcanal_hci_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
rootcanal_link_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::rootcanal_link_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
rootcanal_socket_	host/frontend/webrtc/bluetooth_handler.h	/^  SharedFD rootcanal_socket_;$/;"	m	struct:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:SharedFD
rootcanal_test_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::rootcanal_test_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
routing	guest/hals/ril/reference-libril/ril.h	/^    RIL_EmergencyCallRouting     routing;$/;"	m	struct:__anon0bfbaecfb708	typeref:typename:RIL_EmergencyCallRouting
rscp	guest/hals/ril/reference-libril/ril.h	/^    int rscp;    \/* The Received Signal Code Power in dBm multipled by -1.$/;"	m	struct:__anon0bfbaecf4d08	typeref:typename:int
rsrp	guest/hals/ril/reference-libril/ril.h	/^    int rsrp;            \/* The current Reference Signal Receive Power in dBm multipled by -1.$/;"	m	struct:__anon0bfbaecf4b08	typeref:typename:int
rsrp	guest/hals/ril/reference-libril/ril.h	/^    int rsrp;            \/* The current Reference Signal Receive Power in dBm multipled by -1.$/;"	m	struct:__anon0bfbaecf4c08	typeref:typename:int
rsrq	guest/hals/ril/reference-libril/ril.h	/^    int rsrq;            \/* The current Reference Signal Receive Quality in dB multiplied by -1/;"	m	struct:__anon0bfbaecf4b08	typeref:typename:int
rsrq	guest/hals/ril/reference-libril/ril.h	/^    int rsrq;            \/* The current Reference Signal Receive Quality in dB multiplied by -1/;"	m	struct:__anon0bfbaecf4c08	typeref:typename:int
rssi	guest/hals/ril/reference-libril/ril.h	/^   int    rssi;        \/* Received RSSI in GSM,$/;"	m	struct:__anon0bfbaecf2208	typeref:typename:int
rssnr	guest/hals/ril/reference-libril/ril.h	/^    int rssnr;           \/* The current reference signal signal-to-noise ratio in 0.1 dB units.$/;"	m	struct:__anon0bfbaecf4b08	typeref:typename:int
rssnr	guest/hals/ril/reference-libril/ril.h	/^    int rssnr;           \/* The current reference signal signal-to-noise ratio in 0.1 dB units.$/;"	m	struct:__anon0bfbaecf4c08	typeref:typename:int
runCvdComponent	host/commands/run_cvd/main.cc	/^fruit::Component<ServerLoop> runCvdComponent($/;"	f	namespace:cuttlefish::__anonadab6e0c0111	typeref:typename:fruit::Component<ServerLoop>
run_as_daemon	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::run_as_daemon() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
run_connector_	host/libs/config/adb/data.cpp	/^  bool run_connector_;$/;"	m	class:cuttlefish::AdbConfigImpl	typeref:typename:bool	file:
run_help	host/libs/config/adb/flags.cpp	/^  static constexpr char run_help[] =$/;"	m	class:cuttlefish::__anon459bf0e40111::AdbConfigFlagImpl	typeref:typename:char[]	file:
running_	guest/hals/camera/vsock_frame_provider.h	/^  std::atomic<bool> running_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::atomic<bool>
running_	host/frontend/webrtc/kernel_log_events_handler.h	/^  std::atomic<bool> running_;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:std::atomic<bool>
rx_mode_time_ms	guest/hals/ril/reference-libril/ril.h	/^  uint32_t rx_mode_time_ms;$/;"	m	struct:__anon0bfbaecf9f08	typeref:typename:uint32_t
rx_shm_	host/libs/audio_connector/server.h	/^  ScopedMMap rx_shm_;$/;"	m	class:cuttlefish::AudioClientConnection	typeref:typename:ScopedMMap
rx_socket_	host/libs/audio_connector/server.h	/^  SharedFD rx_socket_;$/;"	m	class:cuttlefish::AudioClientConnection	typeref:typename:SharedFD
sATBuffer	guest/hals/ril/reference-ril/reference-ril.c	/^static char sATBuffer[MAX_AT_RESPONSE+1];$/;"	v	typeref:typename:char[]	file:
sATBufferCur	guest/hals/ril/reference-ril/reference-ril.c	/^static char *sATBufferCur = NULL;$/;"	v	typeref:typename:char *	file:
sFD	guest/hals/ril/reference-ril/reference-ril.c	/^static int sFD;     \/* file desc of AT channel *\/$/;"	v	typeref:typename:int	file:
sMdmInfo	guest/hals/ril/reference-ril/reference-ril.c	/^static ModemInfo *sMdmInfo;$/;"	v	typeref:typename:ModemInfo *	file:
sOnRequestComplete	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::sOnRequestComplete (RIL_Token t,$/;"	f	class:RilSapSocket	typeref:typename:void
sOnUnsolicitedResponse	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^void RilSapSocket::sOnUnsolicitedResponse(int unsolResponse,$/;"	f	class:RilSapSocket	typeref:typename:void
sState	guest/hals/ril/reference-ril/reference-ril.c	/^static RIL_RadioState sState = RADIO_STATE_UNAVAILABLE;$/;"	v	typeref:typename:RIL_RadioState	file:
s_ATBuffer	guest/hals/ril/reference-ril/atchannel.c	/^static char s_ATBuffer[MAX_AT_RESPONSE+1];$/;"	v	typeref:typename:char[]	file:
s_ATBufferCur	guest/hals/ril/reference-ril/atchannel.c	/^static char *s_ATBufferCur = s_ATBuffer;$/;"	v	typeref:typename:char *	file:
s_PDP	guest/hals/ril/reference-ril/reference-ril.c	/^struct PDPInfo s_PDP[] = {$/;"	v	typeref:struct:PDPInfo[]
s_callbacks	guest/hals/ril/reference-libril/ril.cpp	/^RIL_RadioFunctions s_callbacks = {0, NULL, NULL, NULL, NULL, NULL};$/;"	v	namespace:android	typeref:typename:RIL_RadioFunctions
s_callbacks	guest/hals/ril/reference-ril/reference-ril.c	/^static const RIL_RadioFunctions s_callbacks = {$/;"	v	typeref:typename:const RIL_RadioFunctions	file:
s_cell_info_rate_ms	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_cell_info_rate_ms = INT_MAX;$/;"	v	typeref:typename:int	file:
s_cid	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_cid = 0;$/;"	v	typeref:typename:int	file:
s_closed	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_closed = 0;$/;"	v	typeref:typename:int	file:
s_commandcond	guest/hals/ril/reference-ril/atchannel.c	/^static pthread_cond_t s_commandcond = PTHREAD_COND_INITIALIZER;$/;"	v	typeref:typename:pthread_cond_t	file:
s_commandmutex	guest/hals/ril/reference-ril/atchannel.c	/^static pthread_mutex_t s_commandmutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
s_commands	guest/hals/ril/reference-libril/ril.cpp	/^static CommandInfo s_commands[] = {$/;"	v	namespace:android	typeref:typename:CommandInfo[]	file:
s_commands	guest/hals/ril/reference-libril/ril_service.cpp	/^static CommandInfo *s_commands;$/;"	v	typeref:typename:CommandInfo *	file:
s_configCommands	guest/hals/ril/reference-libril/ril.cpp	/^static CommandInfo s_configCommands[] = {$/;"	v	namespace:android	typeref:typename:CommandInfo[]	file:
s_configCommands	guest/hals/ril/reference-libril/ril_config.cpp	/^static CommandInfo *s_configCommands;$/;"	v	typeref:typename:CommandInfo *	file:
s_configUnsolResponses	guest/hals/ril/reference-libril/ril.cpp	/^static UnsolResponseInfo s_configUnsolResponses[] = {$/;"	v	namespace:android	typeref:typename:UnsolResponseInfo[]	file:
s_device_path	guest/hals/ril/reference-ril/reference-ril.c	/^static const char * s_device_path = NULL;$/;"	v	typeref:typename:const char *	file:
s_device_socket	guest/hals/ril/reference-ril/reference-ril.c	/^static int          s_device_socket = 0;$/;"	v	typeref:typename:int	file:
s_expectAnswer	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_expectAnswer = 0;$/;"	v	typeref:typename:int	file:
s_fd	guest/hals/ril/reference-ril/atchannel.c	/^static int s_fd = -1;    \/* fd of the AT channel *\/$/;"	v	typeref:typename:int	file:
s_fdWakeupRead	guest/hals/ril/reference-libril/ril.cpp	/^static int s_fdWakeupRead;$/;"	v	namespace:android	typeref:typename:int	file:
s_fdWakeupWrite	guest/hals/ril/reference-libril/ril.cpp	/^static int s_fdWakeupWrite;$/;"	v	namespace:android	typeref:typename:int	file:
s_finalResponsesError	guest/hals/ril/reference-ril/atchannel.c	/^static const char * s_finalResponsesError[] = {$/;"	v	typeref:typename:const char * []	file:
s_finalResponsesSuccess	guest/hals/ril/reference-ril/atchannel.c	/^static const char * s_finalResponsesSuccess[] = {$/;"	v	typeref:typename:const char * []	file:
s_ims_cause_perm_failure	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_cause_perm_failure = 0; \/\/ 1==causes sms over ims to permanent fail$/;"	v	typeref:typename:int	file:
s_ims_cause_retry	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_cause_retry = 0;        \/\/ 1==causes sms over ims to temp fail$/;"	v	typeref:typename:int	file:
s_ims_format	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_format    = 1;          \/\/ FORMAT_3GPP(1) vs FORMAT_3GPP2(2);$/;"	v	typeref:typename:int	file:
s_ims_gsm_fail	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_gsm_fail    = 0;        \/\/ 1==causes sms over gsm to permanent fail$/;"	v	typeref:typename:int	file:
s_ims_gsm_retry	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_gsm_retry   = 0;        \/\/ 1==causes sms over gsm to temp fail$/;"	v	typeref:typename:int	file:
s_ims_registered	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_registered  = 0;        \/\/ 0==unregistered$/;"	v	typeref:typename:int	file:
s_ims_services	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_ims_services    = 1;        \/\/ & 0x1 == sms over ims supported$/;"	v	typeref:typename:int	file:
s_incomingOrWaitingLine	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_incomingOrWaitingLine = -1;$/;"	v	typeref:typename:int	file:
s_lac	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_lac = 0;$/;"	v	typeref:typename:int	file:
s_lastNITZTimeData	guest/hals/ril/reference-libril/ril.cpp	/^static void *s_lastNITZTimeData = NULL;$/;"	v	namespace:android	typeref:typename:void *	file:
s_lastNITZTimeDataSize	guest/hals/ril/reference-libril/ril.cpp	/^static size_t s_lastNITZTimeDataSize;$/;"	v	namespace:android	typeref:typename:size_t	file:
s_last_activity_info_query	guest/hals/ril/reference-ril/reference-ril.c	/^static uint64_t s_last_activity_info_query = 0;$/;"	v	typeref:typename:uint64_t	file:
s_last_wake_timeout_info	guest/hals/ril/reference-libril/ril.cpp	/^static UserCallbackInfo *s_last_wake_timeout_info = NULL;$/;"	v	namespace:android	typeref:typename:UserCallbackInfo *	file:
s_mcc	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_mcc = 0;$/;"	v	typeref:typename:int	file:
s_mnc	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_mnc = 0;$/;"	v	typeref:typename:int	file:
s_mncLength	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_mncLength = 2;$/;"	v	typeref:typename:int	file:
s_modem_simulator_port	guest/hals/ril/reference-ril/reference-ril.c	/^static uint32_t s_modem_simulator_port = -1;$/;"	v	typeref:typename:uint32_t	file:
s_networkMask	guest/hals/ril/reference-ril/reference-ril.c	/^static NetworkTypeBitmap s_networkMask[] = {$/;"	v	typeref:typename:NetworkTypeBitmap[]	file:
s_nvram_config	host/commands/modem_simulator/nvram_config.cpp	/^std::unique_ptr<NvramConfig> NvramConfig::s_nvram_config;$/;"	m	class:cuttlefish::NvramConfig	typeref:typename:std::unique_ptr<NvramConfig>
s_nvram_config	host/commands/modem_simulator/nvram_config.h	/^  static std::unique_ptr<NvramConfig> s_nvram_config;$/;"	m	class:cuttlefish::NvramConfig	typeref:typename:std::unique_ptr<NvramConfig>
s_onReaderClosed	guest/hals/ril/reference-ril/atchannel.c	/^static void (*s_onReaderClosed)(void) = NULL;$/;"	v	typeref:typename:void (*)(void)	file:
s_onTimeout	guest/hals/ril/reference-ril/atchannel.c	/^static void (*s_onTimeout)(void) = NULL;$/;"	v	typeref:typename:void (*)(void)	file:
s_pendingRequests	guest/hals/ril/reference-libril/ril.cpp	/^static RequestInfo *s_pendingRequests = NULL;$/;"	v	namespace:android	typeref:typename:RequestInfo *	file:
s_pendingRequestsMutex	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_mutex_t s_pendingRequestsMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_mutex_t	file:
s_pendingRequestsMutex_socket2	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_mutex_t s_pendingRequestsMutex_socket2  = PTHREAD_MUTEX_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_mutex_t	file:
s_pendingRequestsMutex_socket3	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_mutex_t s_pendingRequestsMutex_socket3  = PTHREAD_MUTEX_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_mutex_t	file:
s_pendingRequestsMutex_socket4	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_mutex_t s_pendingRequestsMutex_socket4  = PTHREAD_MUTEX_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_mutex_t	file:
s_pendingRequests_socket2	guest/hals/ril/reference-libril/ril.cpp	/^static RequestInfo *s_pendingRequests_socket2          = NULL;$/;"	v	namespace:android	typeref:typename:RequestInfo *	file:
s_pendingRequests_socket3	guest/hals/ril/reference-libril/ril.cpp	/^static RequestInfo *s_pendingRequests_socket3          = NULL;$/;"	v	namespace:android	typeref:typename:RequestInfo *	file:
s_pendingRequests_socket4	guest/hals/ril/reference-libril/ril.cpp	/^static RequestInfo *s_pendingRequests_socket4          = NULL;$/;"	v	namespace:android	typeref:typename:RequestInfo *	file:
s_port	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_port = -1;$/;"	v	typeref:typename:int	file:
s_readerClosed	guest/hals/ril/reference-ril/atchannel.c	/^static int s_readerClosed;$/;"	v	typeref:typename:int	file:
s_registerCalled	guest/hals/ril/reference-libril/ril.cpp	/^static int s_registerCalled = 0;$/;"	v	namespace:android	typeref:typename:int	file:
s_repollCallsCount	guest/hals/ril/reference-ril/reference-ril.c	/^static int s_repollCallsCount = 0;$/;"	v	typeref:typename:int	file:
s_responsePrefix	guest/hals/ril/reference-ril/atchannel.c	/^static const char *s_responsePrefix = NULL;$/;"	v	typeref:typename:const char *	file:
s_rilEnv	guest/hals/rild/rild_cuttlefish.c	/^static struct RIL_Env s_rilEnv = {$/;"	v	typeref:struct:RIL_Env	file:
s_rilenv	guest/hals/ril/reference-ril/reference-ril.c	/^static const struct RIL_Env *s_rilenv;$/;"	v	typeref:typename:const struct RIL_Env *	file:
s_smsPDU	guest/hals/ril/reference-ril/atchannel.c	/^static const char *s_smsPDU = NULL;$/;"	v	typeref:typename:const char *	file:
s_smsUnsoliciteds	guest/hals/ril/reference-ril/atchannel.c	/^static const char * s_smsUnsoliciteds[] = {$/;"	v	typeref:typename:const char * []	file:
s_started	guest/hals/ril/reference-libril/ril.cpp	/^static int s_started = 0;$/;"	v	namespace:android	typeref:typename:int	file:
s_startupCond	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_cond_t s_startupCond = PTHREAD_COND_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_cond_t	file:
s_startupMutex	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_mutex_t s_startupMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_mutex_t	file:
s_state_cond	guest/hals/ril/reference-ril/reference-ril.c	/^static pthread_cond_t s_state_cond = PTHREAD_COND_INITIALIZER;$/;"	v	typeref:typename:pthread_cond_t	file:
s_state_mutex	guest/hals/ril/reference-ril/reference-ril.c	/^static pthread_mutex_t s_state_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
s_stkServiceRunning	guest/hals/ril/reference-ril/reference-ril.c	/^static bool s_stkServiceRunning = false;$/;"	v	typeref:typename:bool	file:
s_stkUnsolResponse	guest/hals/ril/reference-ril/reference-ril.c	/^static char *s_stkUnsolResponse = NULL;$/;"	v	typeref:typename:char *	file:
s_tid_dispatch	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_t s_tid_dispatch;$/;"	v	namespace:android	typeref:typename:pthread_t	file:
s_tid_mainloop	guest/hals/ril/reference-ril/reference-ril.c	/^pthread_t s_tid_mainloop;$/;"	v	typeref:typename:pthread_t
s_tid_reader	guest/hals/ril/reference-ril/atchannel.c	/^static pthread_t s_tid_reader;$/;"	v	typeref:typename:pthread_t	file:
s_type	guest/hals/ril/reference-ril/atchannel.c	/^static ATCommandType s_type;$/;"	v	typeref:typename:ATCommandType	file:
s_unsolHandler	guest/hals/ril/reference-ril/atchannel.c	/^static ATUnsolHandler s_unsolHandler;$/;"	v	typeref:typename:ATUnsolHandler	file:
s_unsolResponses	guest/hals/ril/reference-libril/ril.cpp	/^static UnsolResponseInfo s_unsolResponses[] = {$/;"	v	namespace:android	typeref:typename:UnsolResponseInfo[]	file:
s_vendorFunctions	guest/hals/ril/reference-libril/ril_service.cpp	/^RIL_RadioFunctions *s_vendorFunctions = NULL;$/;"	v	typeref:typename:RIL_RadioFunctions *
s_vendorFunctions_config	guest/hals/ril/reference-libril/ril_config.cpp	/^RIL_RadioFunctions *s_vendorFunctions_config = NULL;$/;"	v	typeref:typename:RIL_RadioFunctions *
s_wakeLockCountMutex	guest/hals/ril/reference-libril/ril.cpp	/^static pthread_mutex_t s_wakeLockCountMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	namespace:android	typeref:typename:pthread_mutex_t	file:
s_wakelock_count	guest/hals/ril/reference-libril/ril.cpp	/^int s_wakelock_count = 0;$/;"	v	namespace:android	typeref:typename:int
s_wakeupfd_event	guest/hals/ril/reference-libril/ril.cpp	/^static struct ril_event s_wakeupfd_event;$/;"	v	namespace:android	typeref:struct:ril_event	file:
s_writeMutex	guest/hals/ril/reference-ril/atchannel.c	/^static pthread_mutex_t s_writeMutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	typeref:typename:pthread_mutex_t	file:
salt	host/commands/secure_env/soft_gatekeeper.h	/^    uint64_t salt;$/;"	m	struct:gatekeeper::fast_hash_t	typeref:typename:uint64_t
sample_rate	host/frontend/webrtc/audio_handler.cpp	/^  int sample_rate() const override { return sample_rate_; }$/;"	f	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
sample_rate	host/frontend/webrtc/audio_handler.h	/^    int sample_rate = -1;$/;"	m	struct:cuttlefish::AudioHandler::StreamDesc	typeref:typename:int
sample_rate_	host/frontend/webrtc/audio_handler.cpp	/^  int sample_rate_;$/;"	m	class:cuttlefish::__anon2a3d92f70111::CvdAudioFrameBuffer	typeref:typename:int	file:
sap	guest/hals/ril/reference-libril/sap_service.h	/^namespace sap {$/;"	n
sapCallback	guest/hals/ril/reference-libril/sap_service.cpp	/^    sp<ISapCallback> sapCallback;$/;"	m	struct:SapImpl	typeref:typename:sp<ISapCallback>	file:
sapDecodeMessage	guest/hals/ril/reference-libril/sap_service.cpp	/^void *sapDecodeMessage(MsgId msgId, MsgType msgType, uint8_t *payloadPtr, size_t payloadLen) {$/;"	f	typeref:typename:void *
sapService	guest/hals/ril/reference-libril/sap_service.cpp	/^sp<SapImpl> sapService[1];$/;"	v	typeref:typename:sp<SapImpl>[1]
sapService	guest/hals/ril/reference-libril/sap_service.cpp	/^sp<SapImpl> sapService[SIM_COUNT];$/;"	v	typeref:typename:sp<SapImpl>[]
saved_params_	host/commands/secure_env/tpm_keymaster_enforcement.h	/^  keymaster::HmacSharingParameters saved_params_;$/;"	m	class:cuttlefish::TpmKeymasterEnforcement	typeref:typename:keymaster::HmacSharingParameters
saved_state_	host/libs/confui/session.h	/^  MainLoopState saved_state_;  \/\/ for restore\/suspend$/;"	m	class:cuttlefish::confui::Session	typeref:typename:MainLoopState
sc_android_queue_id_	host/libs/screen_connector/screen_connector_multiplexer.h	/^  int sc_android_queue_id_;$/;"	m	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:int
sc_android_src_	host/libs/screen_connector/screen_connector.h	/^  std::unique_ptr<WaylandScreenConnector> sc_android_src_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:std::unique_ptr<WaylandScreenConnector>
sc_confui_queue_id_	host/libs/screen_connector/screen_connector_multiplexer.h	/^  int sc_confui_queue_id_;$/;"	m	class:cuttlefish::ScreenConnectorInputMultiplexer	typeref:typename:int
sc_frame_multiplexer_	host/libs/screen_connector/screen_connector.h	/^  FrameMultiplexer sc_frame_multiplexer_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:FrameMultiplexer
sca	host/commands/modem_simulator/sms_service.h	/^    std::string sca;$/;"	m	struct:cuttlefish::SmsService::SmsServiceCenterAddress	typeref:typename:std::string
scaled_frame_	host/frontend/webrtc/lib/camera_streamer.h	/^  rtc::scoped_refptr<webrtc::I420Buffer> scaled_frame_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:rtc::scoped_refptr<webrtc::I420Buffer>
scanout_id	host/libs/wayland/wayland_surface.h	/^    std::optional<uint32_t> scanout_id;$/;"	m	struct:wayland::Surface::VirtioGpuMetadata	typeref:typename:std::optional<uint32_t>
schedule	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/JobExecutor.java	/^    public void schedule(final JobBase job, final GceFuture<?>... futures) {$/;"	m	class:JobExecutor
screen_connector_	host/frontend/webrtc/display_handler.h	/^  ScreenConnector& screen_connector_;$/;"	m	class:cuttlefish::DisplayHandler	typeref:typename:ScreenConnector &
screen_connector_	host/libs/confui/host_server.h	/^  ScreenConnectorFrameRenderer& screen_connector_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:ScreenConnectorFrameRenderer &
screen_connector_	host/libs/confui/session.h	/^  ScreenConnectorFrameRenderer& screen_connector_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:ScreenConnectorFrameRenderer &
sdcard_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::sdcard_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
seat_get_keyboard	host/libs/wayland/wayland_seat.cpp	/^void seat_get_keyboard(wl_client* client, wl_resource* seat, uint32_t id) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
seat_get_pointer	host/libs/wayland/wayland_seat.cpp	/^void seat_get_pointer(wl_client* client, wl_resource* seat, uint32_t id) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
seat_get_touch	host/libs/wayland/wayland_seat.cpp	/^void seat_get_touch(wl_client* client, wl_resource* seat, uint32_t id) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
seat_implementation	host/libs/wayland/wayland_seat.cpp	/^const struct wl_seat_interface seat_implementation = {$/;"	v	namespace:wayland::__anona9f16c970111	typeref:typename:const struct wl_seat_interface
seat_release	host/libs/wayland/wayland_seat.cpp	/^void seat_release(wl_client*, wl_resource* resource) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
seccomp_policy_dir	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::seccomp_policy_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
seconds	host/commands/metrics/proto/common.proto	/^  required int64 seconds = 1;$/;"	f	message:Duration	typeref:typename:int64
seconds	host/commands/metrics/proto/common.proto	/^  required int64 seconds = 1;$/;"	f	message:Timestamp	typeref:typename:int64
secs	common/libs/utils/network.cpp	/^  __be16 secs;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:__be16	file:
secure_hals	host/libs/config/cuttlefish_config.cpp	/^std::set<SecureHal> CuttlefishConfig::secure_hals() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::set<SecureHal>
secure_storage_	host/commands/secure_env/tpm_gatekeeper.h	/^  GatekeeperStorage& secure_storage_;$/;"	m	class:cuttlefish::TpmGatekeeper	typeref:typename:GatekeeperStorage &
secureclock	guest/hals/keymint/remote/remote_secure_clock.cpp	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl::android::hardware::security	file:
secureclock	guest/hals/keymint/remote/remote_secure_clock.h	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl::android::hardware::security
security	guest/hals/keymint/remote/remote_keymint_device.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware	file:
security	guest/hals/keymint/remote/remote_keymint_device.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware
security	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware	file:
security	guest/hals/keymint/remote/remote_keymint_operation.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware
security	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware	file:
security	guest/hals/keymint/remote/remote_remotely_provisioned_component.h	/^namespace aidl::android::hardware::security::keymint {$/;"	n	namespace:aidl::android::hardware
security	guest/hals/keymint/remote/remote_secure_clock.cpp	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl::android::hardware	file:
security	guest/hals/keymint/remote/remote_secure_clock.h	/^namespace aidl::android::hardware::security::secureclock {$/;"	n	namespace:aidl::android::hardware
security	guest/hals/keymint/remote/remote_shared_secret.cpp	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl::android::hardware	file:
security	guest/hals/keymint/remote/remote_shared_secret.h	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl::android::hardware
security	host/frontend/webrtc/lib/streamer.h	/^    WsConnection::Security security;$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig::__anonbc3851b60108	typeref:typename:WsConnection::Security
securityLevel_	guest/hals/keymint/remote/remote_keymint_device.h	/^  SecurityLevel securityLevel_;$/;"	m	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:SecurityLevel
security_	host/frontend/webrtc/lib/ws_connection.cpp	/^  const Security security_;$/;"	m	class:WsConnectionImpl	typeref:typename:const Security	file:
security_level	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^    keymaster_security_level_t security_level;$/;"	m	struct:cuttlefish::TpmKeymasterEnforcement::VerifyAuthorization::VerificationData	typeref:typename:keymaster_security_level_t	file:
segment_	host/frontend/webrtc/lib/local_recorder.cpp	/^  mkvmuxer::Segment segment_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Impl	typeref:typename:mkvmuxer::Segment	file:
selectDeviceCb	host/frontend/webrtc_operator/assets/js/index.js	/^  #selectDeviceCb;$/;"	M	class:DeviceListApp
selected	guest/hals/ril/reference-libril/ril.h	/^    unsigned char selected;$/;"	m	struct:__anon0bfbaecf4408	typeref:typename:unsigned char
sem_	host/libs/screen_connector/screen_connector_ctrl.h	/^  Semaphore sem_;$/;"	m	class:cuttlefish::ScreenConnectorCtrl	typeref:typename:Semaphore
sem_items_	common/libs/concurrency/multiplexer.h	/^  Semaphore sem_items_;$/;"	m	class:cuttlefish::Multiplexer	typeref:typename:Semaphore
send	guest/commands/bt_vhci_forwarder/main.cpp	/^ssize_t send(int fd_, uint8_t type, const uint8_t* data, size_t length) {$/;"	f	typeref:typename:ssize_t
send	guest/hals/bt/remote/remote_bluetooth.cpp	/^void BluetoothHci::send(test_vendor_lib::PacketType type,$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:void
send	host/frontend/webrtc_operator/assets/js/adb.js	/^    send: function(buffer) {$/;"	m	class:init_adb.adb_ws
sendAclData	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::sendAclData(const hidl_vec<uint8_t>& packet) {$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
sendAdbMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendAdbMessage(msg) {$/;"	m	class:DeviceConnection
sendBluetoothMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendBluetoothMessage(msg) {$/;"	m	class:DeviceConnection
sendBurstDtmf	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendBurstDtmf(int32_t serial, const hidl_string& dtmf, int32_t on,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendBurstDtmfResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendBurstDtmfResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendCDMAFeatureCode	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendCDMAFeatureCode(int32_t serial, const hidl_string& featureCode) /;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendCDMAFeatureCodeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendCDMAFeatureCodeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendCallStateChanged	guest/hals/ril/reference-ril/reference-ril.c	/^static void sendCallStateChanged(void *param __unused)$/;"	f	typeref:typename:void	file:
sendCameraData	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendCameraData(data) {$/;"	m	class:DeviceConnection
sendCameraResolution	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendCameraResolution(stream) {$/;"	m	class:DeviceConnection
sendCdmaSms	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendCdmaSms(int32_t serial, const CdmaSmsMessage& sms) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendCdmaSmsExpectMore	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendCdmaSmsExpectMore(int32_t serial, const CdmaSmsMessage& sms) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendCdmaSmsExpectMoreResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendCdmaSmsExpectMoreResponse(int slotId, int responseType, int serial, RIL_Errno/;"	f	class:radio_1_6	typeref:typename:int
sendCdmaSmsExpectMore_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendCdmaSmsExpectMore_1_6(int32_t serial, const CdmaSmsMessage& sms)/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendCdmaSmsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendCdmaSmsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendCdmaSms_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendCdmaSms_1_6(int32_t serial, const CdmaSmsMessage& sms) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendClientDescription	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async #sendClientDescription(desc) {$/;"	m	class:Controller
sendCmdAgainForOpenChannelWithP2	guest/hals/ril/reference-ril/reference-ril.c	/^static int sendCmdAgainForOpenChannelWithP2( char *data,$/;"	f	typeref:typename:int	file:
sendControlMessage	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendControlMessage(msg) {$/;"	m	class:DeviceConnection
sendDeviceState	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendDeviceState(int32_t serial, DeviceStateType deviceStateType,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendDeviceStateResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendDeviceStateResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendDtmf	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendDtmf(int32_t serial, const hidl_string& s) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendDtmfResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendDtmfResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendEnvelope	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendEnvelope(int32_t serial, const hidl_string& command) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendEnvelopeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendEnvelopeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendEnvelopeWithStatus	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendEnvelopeWithStatus(int32_t serial, const hidl_string& contents) /;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendEnvelopeWithStatusResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendEnvelopeWithStatusResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendErrorResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^void sendErrorResponse(RequestInfo *pRI, RIL_Errno err) {$/;"	f	typeref:typename:void
sendEventUpdate	host/frontend/webrtc_operator/assets/js/app.js	/^  #sendEventUpdate(ctx, e) {$/;"	m	class:DeviceControlApp
sendFailedResponse	guest/hals/ril/reference-libril/sap_service.cpp	/^void SapImpl::sendFailedResponse(MsgId msgId, int32_t token, int numPointers, ...) {$/;"	f	class:SapImpl	typeref:typename:void
sendGnssRawToSerial	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void sendGnssRawToSerial() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
sendHciCommand	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::sendHciCommand(const hidl_vec<uint8_t>& packet) {$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
sendIceCandidate	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async #sendIceCandidate(candidate) {$/;"	m	class:Controller
sendImsSms	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendImsSms(int32_t serial, const ImsSmsMessage& message) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendImsSmsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendImsSmsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendIsoData	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::sendIsoData(const hidl_vec<uint8_t>& packet) {$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
sendJsonInput	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #sendJsonInput(evt) {$/;"	m	class:DeviceConnection
sendKeyEvent	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendKeyEvent(code, type) {$/;"	m	class:DeviceConnection
sendMousePosition	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendMousePosition({x, y, down, display_label}) {$/;"	m	class:DeviceConnection
sendMultiTouch	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendMultiTouch({idArr, xArr, yArr, down, slotArr, display_label}) {$/;"	m	class:DeviceConnection
sendOnePhysChanCfgUpdate	host/commands/modem_simulator/data_service.cpp	/^void DataService::sendOnePhysChanCfgUpdate(int status, int bandwidth, int rat,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
sendOrQueueCameraData	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  sendOrQueueCameraData(data) {$/;"	m	class:DeviceConnection
sendRequestRaw	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> OemHookImpl::sendRequestRaw(int32_t serial, const hidl_vec<uint8_t>& data) {$/;"	f	class:OemHookImpl	typeref:typename:Return<void>
sendRequestRawResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendRequestRawResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendRequestStrings	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> OemHookImpl::sendRequestStrings(int32_t serial,$/;"	f	class:OemHookImpl	typeref:typename:Return<void>
sendRequestStringsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendRequestStringsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendSMSExpectMore	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendSMSExpectMore(int32_t serial, const GsmSmsMessage& message) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendScoData	guest/hals/bt/remote/remote_bluetooth.cpp	/^Return<void> BluetoothHci::sendScoData(const hidl_vec<uint8_t>& packet) {$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:Return<void>
sendSms	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendSms(int32_t serial, const GsmSmsMessage& message) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendSmsExpectMoreResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendSmsExpectMoreResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendSmsExpectMore_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendSmsExpectMore_1_6(int32_t serial, const GsmSmsMessage& message) /;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendSmsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendSmsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendSms_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendSms_1_6(int32_t serial, const GsmSmsMessage& message) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendTerminalResponseToSim	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendTerminalResponseToSim(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendTerminalResponseToSimResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendTerminalResponseToSimResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sendToDevice	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async sendToDevice(msg) {$/;"	m	class:Connector
sendToDevice	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async sendToDevice(msg) {$/;"	m	class:PollingConnector
sendToDevice	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async sendToDevice(msg) {$/;"	m	class:WebsocketConnector
sendToSerial	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    void sendToSerial() {$/;"	f	class:GnssGrpcProxyServiceImpl	typeref:typename:void	file:
sendUnsolImsNetworkStateChanged	guest/hals/ril/reference-ril/reference-ril.c	/^static void sendUnsolImsNetworkStateChanged()$/;"	f	typeref:typename:void	file:
sendUnsolNetworkScanResult	guest/hals/ril/reference-ril/reference-ril.c	/^void sendUnsolNetworkScanResult() {$/;"	f	typeref:typename:void
sendUssd	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::sendUssd(int32_t serial, const hidl_string& ussd) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
sendUssdResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::sendUssdResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
send_lock_	common/libs/utils/tcp_socket.h	/^  std::mutex send_lock_;$/;"	m	class:cuttlefish::ClientSocket	typeref:typename:std::mutex
send_serializer_mtx_	guest/hals/confirmationui/guest_session.h	/^    std::mutex send_serializer_mtx_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::mutex
send_to_client_	host/frontend/webrtc/adb_handler.h	/^  std::function<void(const uint8_t *, size_t)> send_to_client_;$/;"	m	struct:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:std::function<void (const uint8_t *,size_t)>
send_to_client_	host/frontend/webrtc/bluetooth_handler.h	/^  std::function<void(const uint8_t *, size_t)> send_to_client_;$/;"	m	struct:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:std::function<void (const uint8_t *,size_t)>
send_to_client_	host/frontend/webrtc/lib/client_handler.h	/^  std::function<void(const Json::Value&)> send_to_client_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:std::function<void (const Json::Value &)>
separateConnection	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::separateConnection(int32_t serial, int32_t gsmIndex) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
separateConnectionResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::separateConnectionResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
serial	host/commands/modem_simulator/thread_looper.h	/^      Serial serial;$/;"	m	struct:cuttlefish::ThreadLooper::Event	typeref:typename:Serial
serial_num_	host/libs/vm_manager/crosvm_builder.h	/^  int serial_num_;$/;"	m	class:cuttlefish::CrosvmBuilder	typeref:typename:int
serial_number	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::serial_number() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
server	host/example_custom_actions/custom_action_config.json	/^		"server":"cuttlefish_example_action_server",$/;"	s	object:1
server	host/libs/config/custom_actions.h	/^  std::optional<std::string> server;$/;"	m	struct:cuttlefish::CustomActionConfig	typeref:typename:std::optional<std::string>
serverConnector	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #serverConnector;$/;"	M	class:Controller
serverLoop	guest/hals/camera/vsock_camera_server.cpp	/^void VsockCameraServer::serverLoop(unsigned int port, unsigned int cid) {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:void
serverLoopComponent	host/commands/run_cvd/server_loop.cpp	/^serverLoopComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig,const CuttlefishConfig::InstanceSpecific>,ServerLoop>
server_	guest/hals/camera/vsock_camera_provider_2_7.h	/^  VsockCameraServer* server_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:VsockCameraServer *
server_	host/commands/modem_simulator/channel_monitor.h	/^  cuttlefish::SharedFD server_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:cuttlefish::SharedFD
server_	host/commands/run_cvd/server_loop.cpp	/^  SharedFD server_;$/;"	m	class:cuttlefish::__anon527e8bd40111::ServerLoopImpl	typeref:typename:SharedFD	file:
server_	host/libs/screen_connector/wayland_screen_connector.h	/^  std::unique_ptr<wayland::WaylandServer> server_;$/;"	m	class:cuttlefish::WaylandScreenConnector	typeref:typename:std::unique_ptr<wayland::WaylandServer>
server_config_	host/frontend/webrtc_operator/client_handler.h	/^  const ServerConfig& server_config_;$/;"	m	class:cuttlefish::ClientWSHandlerFactory	typeref:typename:const ServerConfig &
server_config_	host/frontend/webrtc_operator/client_handler.h	/^  const ServerConfig& server_config_;$/;"	m	class:cuttlefish::ConfigHandler	typeref:typename:const ServerConfig &
server_config_	host/frontend/webrtc_operator/device_handler.h	/^  const ServerConfig& server_config_;$/;"	m	class:cuttlefish::DeviceHandlerFactory	typeref:typename:const ServerConfig &
server_config_	host/frontend/webrtc_operator/signal_handler.h	/^  const ServerConfig& server_config_;$/;"	m	class:cuttlefish::SignalHandler	typeref:typename:const ServerConfig &
server_connection_	host/frontend/webrtc/lib/streamer.cpp	/^  std::shared_ptr<WsConnection> server_connection_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::shared_ptr<WsConnection>	file:
server_fd_	common/libs/utils/vsock_connection.h	/^  SharedFD server_fd_;$/;"	m	class:cuttlefish::VsockServerConnection	typeref:typename:SharedFD
server_identifier	common/libs/utils/network.cpp	/^  Dhcp4ServerIdentifier server_identifier;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:Dhcp4ServerIdentifier	file:
server_ip	common/libs/utils/network.cpp	/^  std::uint8_t server_ip[4];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[4]	file:
server_ip	common/libs/utils/network.cpp	/^  std::uint8_t server_ip[4];$/;"	m	struct:cuttlefish::Dhcp4ServerIdentifier	typeref:typename:std::uint8_t[4]	file:
server_name	common/libs/utils/network.cpp	/^  std::uint8_t server_name[64];$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:std::uint8_t[64]	file:
server_port_	host/libs/websocket/websocket_server.h	/^  int server_port_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:typename:int
server_ready_	host/libs/wayland/wayland_server.h	/^    bool server_ready_ = false;$/;"	m	class:wayland::WaylandServer	typeref:typename:bool
server_ready_cv_	host/libs/wayland/wayland_server.h	/^    std::condition_variable server_ready_cv_;$/;"	m	class:wayland::WaylandServer	typeref:typename:std::condition_variable
server_ready_mutex_	host/libs/wayland/wayland_server.h	/^    std::mutex server_ready_mutex_;$/;"	m	class:wayland::WaylandServer	typeref:typename:std::mutex
server_socket_	host/libs/audio_connector/server.h	/^  SharedFD server_socket_;$/;"	m	class:cuttlefish::AudioServer	typeref:typename:SharedFD
server_state_	host/libs/wayland/wayland_server.h	/^    std::unique_ptr<internal::WaylandServerState> server_state_;$/;"	m	class:wayland::WaylandServer	typeref:typename:std::unique_ptr<internal::WaylandServerState>
server_thread_	guest/hals/camera/vsock_camera_server.h	/^  std::thread server_thread_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:std::thread
server_thread_	host/frontend/webrtc/audio_handler.h	/^  std::thread server_thread_;$/;"	m	class:cuttlefish::AudioHandler	typeref:typename:std::thread
server_thread_	host/libs/wayland/wayland_server.h	/^    std::thread server_thread_;$/;"	m	class:wayland::WaylandServer	typeref:typename:std::thread
servers	host/frontend/webrtc/lib/streamer.cpp	/^  std::vector<webrtc::PeerConnectionInterface::IceServer> servers;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::OperatorServerConfig	typeref:typename:std::vector<webrtc::PeerConnectionInterface::IceServer>	file:
serviceClass	guest/hals/ril/reference-libril/ril.h	/^    int             serviceClass;\/* From 27.007 +CCFC\/+CLCK "class"$/;"	m	struct:__anon0bfbaecf2108	typeref:typename:int
serviceClass	guest/hals/ril/reference-libril/ril.h	/^  int serviceClass;$/;"	m	struct:__anon0bfbaecf9908	typeref:typename:int
serviceDied	guest/hals/bt/remote/remote_bluetooth.cpp	/^  void serviceDied($/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothDeathRecipient	typeref:typename:void	file:
serviceType	guest/hals/ril/reference-libril/ril.h	/^  RIL_SsServiceType serviceType;$/;"	m	struct:__anon0bfbaecf9908	typeref:typename:RIL_SsServiceType
service_id_	host/commands/modem_simulator/modem_service.h	/^  int32_t service_id_;$/;"	m	class:cuttlefish::ModemService	typeref:typename:int32_t
session	guest/hals/ril/reference-libril/ril.h	/^    int session;            \/\/ Unique session value defined by framework returned in all "resp/;"	m	struct:__anon0bfbaecf0a08	typeref:typename:int
sessionHandle	guest/hals/ril/reference-libril/ril.h	/^    uint32_t sessionHandle;$/;"	m	struct:__anon0bfbaecfc708	typeref:typename:uint32_t
session_	guest/hals/camera/vsock_camera_device_3_4.h	/^  sp<VsockCameraDeviceSession> session_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:sp<VsockCameraDeviceSession>
session_id	host/commands/assemble_cvd/alloc.h	/^  uint32_t session_id;$/;"	m	struct:cuttlefish::IfaceData	typeref:typename:uint32_t
session_id	host/commands/metrics/proto/cf_log.proto	/^  optional string session_id = 6;$/;"	f	message:cuttlefish.CuttlefishLogEvent	typeref:typename:string
session_id	host/commands/modem_simulator/sim_service.h	/^    int session_id;$/;"	m	struct:cuttlefish::SimService::LogicalChannel	typeref:typename:int
session_id	host/libs/config/cuttlefish_config_instance.cpp	/^uint32_t CuttlefishConfig::InstanceSpecific::session_id() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:uint32_t
session_id_	common/libs/confui/packet_types.h	/^  std::string session_id_;$/;"	m	struct:cuttlefish::confui::packet::ParsedPacket	typeref:typename:std::string
session_id_	common/libs/confui/protocol_types.h	/^  std::string session_id_;$/;"	m	class:cuttlefish::confui::ConfUiMessage	typeref:typename:std::string
session_id_	host/libs/allocd/resource_manager.h	/^  std::atomic_uint32_t session_id_ = 0;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:std::atomic_uint32_t
session_id_	host/libs/allocd/resource_manager.h	/^  uint32_t session_id_{};$/;"	m	class:cuttlefish::Session	typeref:typename:uint32_t
session_id_	host/libs/confui/session.h	/^  const std::string session_id_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:const std::string
session_name_	guest/hals/confirmationui/guest_session.h	/^    const std::string session_name_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:const std::string
sessionid	guest/hals/ril/reference-libril/ril.h	/^    int sessionid;  \/* "sessionid" from TS 27.007 +CGLA command. Should be$/;"	m	struct:__anon0bfbaecf1f08	typeref:typename:int
set	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public boolean set(T value) {$/;"	m	class:GceFuture
set	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public void set(Exception e) {$/;"	m	class:GceFuture
set	host/commands/secure_env/tpm_resource_manager.cpp	/^void TpmResourceManager::ObjectSlot::set(ESYS_TR resource) {$/;"	f	class:cuttlefish::TpmResourceManager::ObjectSlot	typeref:typename:void
setAllowedCarriers	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setAllowedCarriers(int32_t serial, bool allAllowed,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setAllowedCarriersResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setAllowedCarriersResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setAllowedCarriers_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setAllowedCarriers_1_4(int32_t  serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setAllowedNetworkTypesBitmap	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setAllowedNetworkTypesBitmap($/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setAllowedNetworkTypesBitmapResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setAllowedNetworkTypesBitmapResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setBandMode	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setBandMode(int32_t serial, RadioBandMode mode) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setBandModeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setBandModeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setBarringPassword	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setBarringPassword(int32_t serial, const hidl_string& facility,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setBarringPasswordResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setBarringPasswordResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCallForward	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCallForward(int32_t serial, const CallForwardInfo& callInfo) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCallForwardResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCallForwardResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCallWaiting	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCallWaiting(int32_t serial, bool enable, int32_t serviceClass) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCallWaitingResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCallWaitingResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCallback	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^Return<Status> VsockCameraProvider::setCallback($/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:Return<Status>
setCallback	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::setCallback(const ::android::sp<ISapCallback>& sapCallbackParam) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
setCarrierInfoForImsiEncryption	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCarrierInfoForImsiEncryption(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCarrierInfoForImsiEncryptionResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCarrierInfoForImsiEncryptionResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCarrierInfoForImsiEncryption_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCarrierInfoForImsiEncryption_1_6($/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCdmaBroadcastActivation	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCdmaBroadcastActivation(int32_t serial, bool activate) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCdmaBroadcastActivationResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCdmaBroadcastActivationResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCdmaBroadcastConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCdmaBroadcastConfig(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCdmaBroadcastConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCdmaBroadcastConfigResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCdmaRoamingPreference	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCdmaRoamingPreference(int32_t serial, CdmaRoamingType type) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCdmaRoamingPreferenceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCdmaRoamingPreferenceResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCdmaSubscriptionSource	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCdmaSubscriptionSource(int32_t serial, CdmaSubscriptionSource cdm/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCdmaSubscriptionSourceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCdmaSubscriptionSourceResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setCellInfoListRate	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setCellInfoListRate(int32_t serial, int32_t rate) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setCellInfoListRateResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setCellInfoListRateResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setClir	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setClir(int32_t serial, int32_t status) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setClirResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setClirResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setConnectedCallback	guest/hals/camera/vsock_camera_server.cpp	/^void VsockCameraServer::setConnectedCallback(callback_t callback) {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:void
setDataAllowed	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setDataAllowed(int32_t serial, bool allow) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setDataAllowedResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setDataAllowedResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setDataProfile	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setDataProfile(int32_t serial, const hidl_vec<DataProfileInfo>& prof/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setDataProfileResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setDataProfileResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setDataProfile_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setDataProfile_1_4(int32_t  serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setDataProfile_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setDataProfile_1_5(int32_t  serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setDataThrottling	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setDataThrottling(int32_t serial, V1_6::DataThrottlingAction dataThr/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setDataThrottlingResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setDataThrottlingResponse(int slotId, int responseType,$/;"	f	class:radio_1_6	typeref:typename:int
setDeviceStateDetailsText	host/frontend/webrtc_operator/assets/js/app.js	/^  setDeviceStateDetailsText(text) {$/;"	m	class:DeviceDetailsUpdater
setFacilityLockForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setFacilityLockForApp(int32_t serial, const hidl_string& facility,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setFacilityLockForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setFacilityLockForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setGsmBroadcastActivation	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setGsmBroadcastActivation(int32_t serial, bool activate) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setGsmBroadcastActivationResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setGsmBroadcastActivationResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setGsmBroadcastConfig	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setGsmBroadcastConfig(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setGsmBroadcastConfigData	guest/hals/ril/reference-ril/reference-ril.c	/^static void setGsmBroadcastConfigData(int from, int to, int id, int outStrSize, char *outStr) {$/;"	f	typeref:typename:void	file:
setGsmBroadcastConfigResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setGsmBroadcastConfigResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setHardwareConfiguration	guest/hals/ril/reference-ril/reference-ril.c	/^static void setHardwareConfiguration(int num, RIL_HardwareConfig *cfg)$/;"	f	typeref:typename:void	file:
setHardwareDetailsText	host/frontend/webrtc_operator/assets/js/app.js	/^  setHardwareDetailsText(text) {$/;"	m	class:DeviceDetailsUpdater
setHasDied	guest/hals/bt/remote/remote_bluetooth.cpp	/^  void setHasDied(bool has_died) { has_died_ = has_died; }$/;"	f	class:android::hardware::bluetooth::V1_1::remote::BluetoothDeathRecipient	typeref:typename:void	file:
setIndicationFilter	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setIndicationFilter(int32_t serial, int32_t indicationFilter) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setIndicationFilterResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setIndicationFilterResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setIndicationFilter_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setIndicationFilter_1_2(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setIndicationFilter_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setIndicationFilter_1_5(int32_t \/* serial *\/,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setInitialAttachApn	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setInitialAttachApn(int32_t serial, const DataProfileInfo& dataProfi/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setInitialAttachApnResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setInitialAttachApnResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setInitialAttachApn_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setInitialAttachApn_1_4(int32_t  serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setInitialAttachApn_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setInitialAttachApn_1_5(int32_t  serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setInterfaceState	guest/hals/ril/reference-ril/reference-ril.c	/^static RIL_Errno setInterfaceState(const char* interfaceName,$/;"	f	typeref:typename:RIL_Errno	file:
setLinkCapacityReportingCriteria	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setLinkCapacityReportingCriteria(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setLinkCapacityReportingCriteriaResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setLinkCapacityReportingCriteriaResponse(int slotId, int responseType, int serial/;"	f	class:radio_1_6	typeref:typename:int
setLinkCapacityReportingCriteria_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setLinkCapacityReportingCriteria_1_5(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setLocationUpdates	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setLocationUpdates(int32_t serial, bool enable) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setLocationUpdatesResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setLocationUpdatesResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setModemsConfig	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::setModemsConfig(int32_t serial, const V1_1::ModemsConfig& modemsCo/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
setModemsConfigResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::setModemsConfigResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
setMute	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setMute(int32_t serial, bool enable) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setMuteResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setMuteResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setNetworkSelectionModeAutomatic	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setNetworkSelectionModeAutomatic(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setNetworkSelectionModeAutomaticResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setNetworkSelectionModeAutomaticResponse(int slotId, int responseType, int serial/;"	f	class:radio_1_6	typeref:typename:int
setNetworkSelectionModeManual	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setNetworkSelectionModeManual(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setNetworkSelectionModeManualResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setNetworkSelectionModeManualResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setNetworkSelectionModeManual_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setNetworkSelectionModeManual_1_5(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setNitzTimeReceived	guest/hals/ril/reference-libril/ril_service.cpp	/^void radio_1_6::setNitzTimeReceived(int slotId, long timeReceived) {$/;"	f	class:radio_1_6	typeref:typename:void
setNrDualConnectivityState	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setNrDualConnectivityState(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setNrDualConnectivityStateResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setNrDualConnectivityStateResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
setPreferredDataModem	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::setPreferredDataModem(int32_t serial, uint8_t modemId) {$/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
setPreferredDataModemResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::setPreferredDataModemResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
setPreferredNetworkType	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setPreferredNetworkType(int32_t serial, PreferredNetworkType nwType)/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setPreferredNetworkTypeBitmap	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setPreferredNetworkTypeBitmap($/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setPreferredNetworkTypeBitmapResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setPreferredNetworkTypeBitmapResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setPreferredNetworkTypeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setPreferredNetworkTypeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setPreferredVoicePrivacy	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setPreferredVoicePrivacy(int32_t serial, bool enable) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setPreferredVoicePrivacyResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setPreferredVoicePrivacyResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setRadioCapability	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setRadioCapability(int32_t serial, const RadioCapability& rc) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setRadioCapabilityResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setRadioCapabilityResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setRadioPower	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setRadioPower(int32_t serial, bool on) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setRadioPowerResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setRadioPowerResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setRadioPower_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setRadioPower_1_5(int32_t serial, bool powerOn, bool forEmergencyCal/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setRadioPower_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setRadioPower_1_6(int32_t serial, bool powerOn, bool forEmergencyCal/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setRadioState	guest/hals/ril/reference-ril/reference-ril.c	/^setRadioState(RIL_RadioState newState)$/;"	f	typeref:typename:void	file:
setRadioTechnology	guest/hals/ril/reference-ril/reference-ril.c	/^setRadioTechnology(ModemInfo *mdm, int newtech)$/;"	f	typeref:typename:void	file:
setResponseFunctions	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::setResponseFunctions($/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
setResponseFunctions	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> OemHookImpl::setResponseFunctions($/;"	f	class:OemHookImpl	typeref:typename:Return<void>
setResponseFunctions	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setResponseFunctions($/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSignalStrengthReportingCriteria	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSignalStrengthReportingCriteria(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSignalStrengthReportingCriteriaResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setSignalStrengthReportingCriteriaResponse(int slotId, int responseType, int seri/;"	f	class:radio_1_6	typeref:typename:int
setSignalStrengthReportingCriteria_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSignalStrengthReportingCriteria_1_5(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSimCardPower	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSimCardPower(int32_t serial, bool powerUp) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSimCardPowerResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setSimCardPowerResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setSimCardPower_1_1	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSimCardPower_1_1(int32_t serial, const V1_1::CardPowerState state/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSimCardPower_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSimCardPower_1_6(int32_t serial, const V1_1::CardPowerState state/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSimSlotsMapping	guest/hals/ril/reference-libril/ril_config.cpp	/^Return<void> RadioConfigImpl::setSimSlotsMapping(int32_t serial, const hidl_vec<uint32_t>& slotM/;"	f	class:RadioConfigImpl	typeref:typename:Return<void>
setSimSlotsMappingResponse	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::setSimSlotsMappingResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
setSmscAddress	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSmscAddress(int32_t serial, const hidl_string& smsc) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSmscAddressResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setSmscAddressResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setSuppServiceNotifications	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSuppServiceNotifications(int32_t serial, bool enable) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSuppServiceNotificationsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setSuppServiceNotificationsResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setSystemSelectionChannels	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSystemSelectionChannels(int32_t serial, bool \/* specifyChannels /;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setSystemSelectionChannelsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setSystemSelectionChannelsResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
setSystemSelectionChannels_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setSystemSelectionChannels_1_5(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setTTYMode	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setTTYMode(int32_t serial, TtyMode mode) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setTTYModeResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setTTYModeResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setTerminalRaw	guest/commands/bt_vhci_forwarder/main.cpp	/^int setTerminalRaw(int fd_) {$/;"	f	typeref:typename:int
setTimespecRelative	guest/hals/ril/reference-ril/atchannel.c	/^static void setTimespecRelative(struct timespec *p_ts, long long msec)$/;"	f	typeref:typename:void	file:
setTorchMode	guest/hals/camera/vsock_camera_device_3_4.cpp	/^Return<Status> VsockCameraDevice::setTorchMode(TorchMode) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice	typeref:typename:Return<Status>
setTransferProtocolReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::setTransferProtocolReq(int32_t token, SapTransferProtocol transferProtocol/;"	f	class:SapImpl	typeref:typename:Return<void>
setU32LE	host/frontend/webrtc_operator/assets/js/adb.js	/^function setU32LE(array, offset, x) {$/;"	f
setUiccSubscription	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setUiccSubscription(int32_t serial, const SelectUiccSub& uiccSub) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setUiccSubscriptionResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setUiccSubscriptionResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setUp	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    public void setUp() throws Exception {$/;"	m	class:RilE2eTests
setUp	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    public void setUp() throws Exception {$/;"	m	class:WifiE2eTests
set_Ip_Addr	guest/hals/ril/reference-ril/reference-ril.c	/^static void set_Ip_Addr(const char *addr, const char* radioInterfaceName) {$/;"	f	typeref:typename:void	file:
set_adb_host_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_adb_host_port(int port) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_adb_ip_and_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_adb_ip_and_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_ap_kernel_image	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_ap_kernel_image(const std::string& ap_kernel_image) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_ap_rootfs_image	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_ap_rootfs_image(const std::string& ap_rootfs_image) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_assembly_dir	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_assembly_dir(const std::string& assembly_dir) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_audiocontrol_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_audiocontrol_server_port(int audiocontrol_se/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_blank_data_image_mb	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_blank_data_image_mb(int blank_data_image_mb) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_boot_slot	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_boot_slot(const std::string& boot_slot) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_bootconfig_supported	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_bootconfig_supported(bool bootconfig_supported) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_bootloader	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_bootloader(const std::string& bootloader) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_camera_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_camera_server_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_config_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_config_server_port(int config_server_port) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_confui_host_vsock_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_confui_host_vsock_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_console	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_console(bool console) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_cpus	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_cpus(int cpus) { (*dictionary_)[kCpus] = cpus; }$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_crosvm_binary	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_crosvm_binary(const std::string& crosvm_binary) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_cuttlefish_env_path	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_cuttlefish_env_path(const std::string& path) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_data_policy	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_data_policy(const std::string& data_policy) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_deprecated_boot_completed	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_deprecated_boot_completed($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_display_configs	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_display_configs($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_emergency_mode	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InstanceSpecific::set_emergency_mode(bool mode) {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:void
set_enable_audio	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_audio(bool enable) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_gnss_grpc_proxy	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_gnss_grpc_proxy($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_host_bluetooth	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_host_bluetooth(bool enable_host_bluetooth) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_metrics	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_metrics(std::string enable_metrics) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_minimal_mode	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_minimal_mode(bool enable_minimal_mode) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_modem_simulator	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_modem_simulator(bool enable_modem_simulator) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_sandbox	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_sandbox(const bool enable_sandbox) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_vehicle_hal_grpc_server	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_vehicle_hal_grpc_server($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_enable_webrtc	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_enable_webrtc(bool enable_webrtc) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_ethernet_tap_name	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_ethernet_tap_name($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_extra_bootconfig_args	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_extra_bootconfig_args($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_extra_kernel_cmdline	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_extra_kernel_cmdline($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_gdb_port	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_gdb_port(int port) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_gnss_file_path	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_gnss_file_path($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_gnss_grpc_proxy_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_gnss_grpc_proxy_server_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_gpu_capture_binary	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_gpu_capture_binary(const std::string& name) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_gpu_mode	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_gpu_mode(const std::string& name) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_guest_audit_security	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_guest_audit_security(bool guest_audit_security) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_guest_enforce_security	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_guest_enforce_security(bool guest_enforce_security) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_host_tools_version	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_host_tools_version($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_instance_dir	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_instance_dir($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_keyboard_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_keyboard_server_port(int keyboard_server_por/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_kgdb	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_kgdb(bool kgdb) { (*dictionary_)[kKgdb] = kgdb; }$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_memory_mb	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_memory_mb(int memory_mb) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_metrics_binary	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_metrics_binary(const std::string& metrics_binary) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_mobile_bridge_name	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_mobile_bridge_name($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_mobile_tap_name	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_mobile_tap_name($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_modem_simulator_host_id	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_modem_simulator_host_id($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_modem_simulator_instance_number	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_modem_simulator_instance_number($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_modem_simulator_ports	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_modem_simulator_ports($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_modem_simulator_sim_type	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_modem_simulator_sim_type(int sim_type) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_modem_technoloy	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InstanceSpecific::set_modem_technoloy(int technoloy) {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:void
set_network_selection_mode	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InstanceSpecific::set_network_selection_mode(int mode) {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:void
set_operator_numeric	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InstanceSpecific::set_operator_numeric(std::string& operator_numeric) {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:void
set_preferred_network_mode	host/commands/modem_simulator/nvram_config.cpp	/^void NvramConfig::InstanceSpecific::set_preferred_network_mode(int mode) {$/;"	f	class:cuttlefish::NvramConfig::InstanceSpecific	typeref:typename:void
set_protected_vm	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_protected_vm(bool protected_vm) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_qemu_binary_dir	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_qemu_binary_dir(const std::string& qemu_binary_dir) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_qemu_vnc_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_qemu_vnc_server_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_record_screen	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_record_screen(bool record_screen) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_restart_subprocesses	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_restart_subprocesses(bool restart_subprocesses) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_ril_dns	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_ril_dns(const std::string& ril_dns) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_rootcanal_config_file	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_rootcanal_config_file($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_rootcanal_default_commands_file	host/libs/config/cuttlefish_config_instance.cpp	/^    set_rootcanal_default_commands_file($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_rootcanal_hci_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_rootcanal_hci_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_rootcanal_link_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_rootcanal_link_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_rootcanal_test_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_rootcanal_test_port($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_run_as_daemon	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_run_as_daemon(bool run_as_daemon) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_seccomp_policy_dir	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_seccomp_policy_dir($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_secure_hals	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_secure_hals(const std::set<std::string>& hals) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_serial_number	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_serial_number($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_session_id	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_session_id($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_setupwizard_mode	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_setupwizard_mode(const std::string& mode) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_sig_server_address	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_sig_server_address(const std::string& addr) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_sig_server_headers_path	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_sig_server_headers_path(const std::string& path) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_sig_server_path	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_sig_server_path(const std::string& path) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_sig_server_port	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_sig_server_port(int port) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_sig_server_secure	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_sig_server_secure(bool secure) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_sig_server_strict	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_sig_server_strict(bool strict) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_smt	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_smt(bool smt) { (*dictionary_)[kSmt] = smt; }$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_start_ap	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_start_ap(bool start) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_start_webrtc_signaling_server	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_start_webrtc_signaling_server(bool start) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_start_wmediumd	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_start_wmediumd(bool start) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_target_arch	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_target_arch(Arch target_arch) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_tombstone_receiver_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_tombstone_receiver_port(int tombstone_receiv/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_touch_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_touch_server_port(int touch_server_port) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_tpm_device	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_tpm_device(const std::string& tpm_device) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_use_allocd	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_use_allocd($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_userdata_format	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_userdata_format(const std::string& userdata_format) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_uuid	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_uuid(const std::string& uuid) {$/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_vehicle_hal_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_vehicle_hal_server_port(int vehicle_hal_serv/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_vhost_net	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_vhost_net(bool vhost_net) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_vhost_user_mac80211_hwsim	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_vhost_user_mac80211_hwsim(const std::string& path) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_virtual_disk_paths	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_virtual_disk_paths($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_vm_manager	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_vm_manager(const std::string& name) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_vsock_guest_cid	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_vsock_guest_cid($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_webrtc_assets_dir	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_webrtc_assets_dir($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_webrtc_certs_dir	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_webrtc_certs_dir(const std::string& certs_dir) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_webrtc_device_id	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_webrtc_device_id($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_webrtc_enable_adb_websocket	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_webrtc_enable_adb_websocket(bool enable) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_webrtc_tcp_port_range	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_webrtc_tcp_port_range($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_webrtc_udp_port_range	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_webrtc_udp_port_range($/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_wifi_mac_prefix	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_wifi_mac_prefix($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_wifi_tap_name	host/libs/config/cuttlefish_config_instance.cpp	/^void CuttlefishConfig::MutableInstanceSpecific::set_wifi_tap_name($/;"	f	class:cuttlefish::CuttlefishConfig::MutableInstanceSpecific	typeref:typename:void
set_wmediumd_api_server_socket	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_wmediumd_api_server_socket(const std::string& path) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
set_wmediumd_config	host/libs/config/cuttlefish_config.cpp	/^void CuttlefishConfig::set_wmediumd_config(const std::string& config) {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:void
setter_	common/libs/utils/flag_parser.h	/^  std::optional<std::function<bool(const FlagMatch&)>> setter_;$/;"	m	class:cuttlefish::Flag	typeref:typename:std::optional<std::function<bool (const FlagMatch &)>>
settings	guest/hals/camera/vsock_camera_device_session_3_4.h	/^    common::V1_0::helper::CameraMetadata settings;$/;"	m	struct:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::ReadVsockRequest	typeref:typename:common::V1_0::helper::CameraMetadata
settings_	guest/hals/camera/vsock_camera_provider_2_7.h	/^  VsockCameraDevice::Settings settings_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider	typeref:typename:VsockCameraDevice::Settings
settings_	guest/hals/camera/vsock_camera_server.h	/^  VsockCameraDevice::Settings settings_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:VsockCameraDevice::Settings
settings_buffer_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::string settings_buffer_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::string
settings_mutex_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::mutex settings_mutex_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::mutex
settings_mutex_	guest/hals/camera/vsock_camera_server.h	/^  std::mutex settings_mutex_;$/;"	m	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:std::mutex
settings_mutex_	host/frontend/webrtc/lib/camera_streamer.h	/^  std::mutex settings_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::CameraStreamer	typeref:typename:std::mutex
setupDataCall	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setupDataCall(int32_t serial, RadioTechnology radioTechnology,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setupDataCallResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::setupDataCallResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
setupDataCall_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setupDataCall_1_2(int32_t serial, V1_2::AccessNetwork accessNetwork,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setupDataCall_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setupDataCall_1_4(int32_t serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setupDataCall_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setupDataCall_1_5(int32_t serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setupDataCall_1_6	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::setupDataCall_1_6(int32_t serial ,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
setupwizard_mode	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::setupwizard_mode() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
severity	common/libs/utils/tee_logging.h	/^  android::base::LogSeverity severity;$/;"	m	struct:cuttlefish::SeverityTarget	typeref:typename:android::base::LogSeverity
shared_fd_	common/libs/fs/shared_fd_stream.h	/^  SharedFD shared_fd_;$/;"	m	class:cuttlefish::SharedFDStreambuf	typeref:typename:SharedFD
sharedsecret	guest/hals/keymint/remote/remote_shared_secret.cpp	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl::android::hardware::security	file:
sharedsecret	guest/hals/keymint/remote/remote_shared_secret.h	/^namespace aidl::android::hardware::security::sharedsecret {$/;"	n	namespace:aidl::android::hardware::security
shell	tools/create_base_image.go	/^func shell(cmd string) (string, error) {$/;"	f	package:main	typeref:typename:(string, error)
shell_command	host/example_custom_actions/custom_action_config.json	/^		"shell_command":"am start -a android.intent.action.VIEW -d https:\/\/www.android.com\/",$/;"	s	object:0
shell_command	host/frontend/webrtc/lib/streamer.cpp	/^  std::optional<std::string> shell_command;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::ControlPanelButtonDescriptor	typeref:typename:std::optional<std::string>	file:
shell_command	host/libs/config/custom_actions.h	/^  std::optional<std::string> shell_command;$/;"	m	struct:cuttlefish::CustomActionConfig	typeref:typename:std::optional<std::string>
shield_color_	host/libs/confui/host_renderer.h	/^  teeui::Color shield_color_;$/;"	m	class:cuttlefish::confui::ConfUiRenderer	typeref:typename:teeui::Color
shm_len	guest/hals/confirmationui/include/TrustyIpc.h	/^    uint32_t shm_len;$/;"	m	struct:confirmationui_init_req	typeref:typename:uint32_t
short_name	host/commands/modem_simulator/network_service.h	/^    std::string short_name;$/;"	m	struct:cuttlefish::NetworkService::NetworkOperator	typeref:typename:std::string
showAdbConnected	host/frontend/webrtc_operator/assets/js/app.js	/^  #showAdbConnected() {$/;"	m	class:DeviceControlApp
showAdbError	host/frontend/webrtc_operator/assets/js/app.js	/^  #showAdbError() {$/;"	m	class:DeviceControlApp
showDeviceUI	host/frontend/webrtc_operator/assets/js/app.js	/^  #showDeviceUI() {$/;"	m	class:DeviceControlApp
showError	host/frontend/webrtc_operator/assets/js/app.js	/^function showError(msg) {$/;"	f
showHideModal	host/frontend/webrtc_operator/assets/js/controls.js	/^  function showHideModal(show) {$/;"	f	function:createModalButton
showWarning	host/frontend/webrtc_operator/assets/js/app.js	/^function showWarning(msg) {$/;"	f
showWebrtcError	host/frontend/webrtc_operator/assets/js/app.js	/^  #showWebrtcError() {$/;"	m	class:DeviceControlApp
shutdown_	host/frontend/webrtc/adb_handler.h	/^  SharedFD shutdown_;$/;"	m	struct:cuttlefish::webrtc_streaming::AdbHandler	typeref:typename:SharedFD
shutdown_	host/frontend/webrtc/bluetooth_handler.h	/^  SharedFD shutdown_;$/;"	m	struct:cuttlefish::webrtc_streaming::BluetoothHandler	typeref:typename:SharedFD
shutdown_socket_	host/libs/allocd/resource_manager.h	/^  cuttlefish::SharedFD shutdown_socket_;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:cuttlefish::SharedFD
si	guest/hals/ril/reference-libril/ril.h	/^  char si;$/;"	m	struct:__anon0bfbaecf8308	typeref:typename:char
sig_server_address	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::sig_server_address() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
sig_server_headers_path	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::sig_server_headers_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
sig_server_path	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::sig_server_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
sig_server_port	host/libs/config/cuttlefish_config.cpp	/^int CuttlefishConfig::sig_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:int
sig_server_secure	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::sig_server_secure() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
sig_server_strict	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::sig_server_strict() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
sign	host/libs/confui/sign.cc	/^std::optional<std::vector<std::uint8_t>> sign($/;"	f	namespace:cuttlefish::confui	typeref:typename:std::optional<std::vector<std::uint8_t>>
sign_	common/libs/confui/protocol_types.h	/^  std::vector<std::uint8_t> sign_;  \/\/ signed format$/;"	m	class:cuttlefish::confui::ConfUiCliResponseMessage	typeref:typename:std::vector<std::uint8_t>
signal	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalInfoRecord            signal;$/;"	m	union:__anon0bfbaecf8908::__anon0bfbaecf8a0a	typeref:typename:RIL_CDMA_SignalInfoRecord
signal	guest/hals/ril/reference-libril/ril.h	/^  char signal;       \/* as defined 3.7.5.5-3, 3.7.5.5-4 or 3.7.5.5-5 *\/$/;"	m	struct:__anon0bfbaecf1008	typeref:typename:char
signalInfoRecord	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalInfoRecord signalInfoRecord;$/;"	m	struct:__anon0bfbaecf4208	typeref:typename:RIL_CDMA_SignalInfoRecord
signalInfoRecord	guest/hals/ril/reference-libril/ril.h	/^    RIL_CDMA_SignalInfoRecord signalInfoRecord;$/;"	m	struct:__anon0bfbaecf4308	typeref:typename:RIL_CDMA_SignalInfoRecord
signalMeasurement	guest/hals/ril/reference-libril/ril.h	/^    SignalMeasurementType signalMeasurement;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:SignalMeasurementType
signalNoiseRatio	guest/hals/ril/reference-libril/ril.h	/^    int signalNoiseRatio; \/* Valid values are 0-8.  8 is the highest signal to noise ratio. *\/$/;"	m	struct:__anon0bfbaecf4a08	typeref:typename:int
signalStrength	guest/hals/ril/reference-libril/ril.h	/^    int signalStrength;  \/* Valid values are (0-31, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4608	typeref:typename:int
signalStrength	guest/hals/ril/reference-libril/ril.h	/^    int signalStrength;  \/* Valid values are (0-31, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4708	typeref:typename:int
signalStrength	guest/hals/ril/reference-libril/ril.h	/^    int signalStrength;  \/* Valid values are (0-31, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4808	typeref:typename:int
signalStrength	guest/hals/ril/reference-libril/ril.h	/^    int signalStrength;  \/* Valid values are (0-31, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4b08	typeref:typename:int
signalStrength	guest/hals/ril/reference-libril/ril.h	/^    int signalStrength;  \/* Valid values are (0-31, 99) as defined in TS 27.007 8.5 *\/$/;"	m	struct:__anon0bfbaecf4c08	typeref:typename:int
signalStrength	guest/hals/ril/reference-libril/ril.h	/^  RIL_NR_SignalStrength       signalStrength;$/;"	m	struct:__anon0bfbaecf6a08	typeref:typename:RIL_NR_SignalStrength
signalStrengthCdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_CDMA_SignalStrength   signalStrengthCdma;$/;"	m	struct:__anon0bfbaecf6608	typeref:typename:RIL_CDMA_SignalStrength
signalStrengthEvdo	guest/hals/ril/reference-libril/ril.h	/^  RIL_EVDO_SignalStrength   signalStrengthEvdo;$/;"	m	struct:__anon0bfbaecf6608	typeref:typename:RIL_EVDO_SignalStrength
signalStrengthGsm	guest/hals/ril/reference-libril/ril.h	/^  RIL_GSM_SignalStrength_v12 signalStrengthGsm;$/;"	m	struct:__anon0bfbaecf6308	typeref:typename:RIL_GSM_SignalStrength_v12
signalStrengthGsm	guest/hals/ril/reference-libril/ril.h	/^  RIL_GW_SignalStrength signalStrengthGsm;$/;"	m	struct:__anon0bfbaecf6208	typeref:typename:RIL_GW_SignalStrength
signalStrengthLte	guest/hals/ril/reference-libril/ril.h	/^  RIL_LTE_SignalStrength_v8  signalStrengthLte;$/;"	m	struct:__anon0bfbaecf6708	typeref:typename:RIL_LTE_SignalStrength_v8
signalStrengthLte	guest/hals/ril/reference-libril/ril.h	/^  RIL_LTE_SignalStrength_v8  signalStrengthLte;$/;"	m	struct:__anon0bfbaecf6808	typeref:typename:RIL_LTE_SignalStrength_v8
signalStrengthTdscdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_TD_SCDMA_SignalStrength signalStrengthTdscdma;$/;"	m	struct:__anon0bfbaecf6908	typeref:typename:RIL_TD_SCDMA_SignalStrength
signalStrengthWcdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_SignalStrengthWcdma signalStrengthWcdma;$/;"	m	struct:__anon0bfbaecf6408	typeref:typename:RIL_SignalStrengthWcdma
signalStrengthWcdma	guest/hals/ril/reference-libril/ril.h	/^  RIL_SignalStrengthWcdma signalStrengthWcdma;$/;"	m	struct:__anon0bfbaecf6508	typeref:typename:RIL_SignalStrengthWcdma
signalType	guest/hals/ril/reference-libril/ril.h	/^  char signalType;   \/* as defined 3.7.5.5-1 *\/$/;"	m	struct:__anon0bfbaecf1008	typeref:typename:char
signal_strength_	host/commands/modem_simulator/network_service.h	/^  SignalStrength signal_strength_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:SignalStrength
signal_thread_	host/frontend/webrtc/lib/streamer.cpp	/^  std::unique_ptr<rtc::Thread> signal_thread_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::unique_ptr<rtc::Thread>	file:
signature	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t signature[8];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptHeader	typeref:typename:std::uint8_t[8]	file:
signed_confirmation_	host/libs/confui/session.h	/^  std::vector<std::uint8_t> signed_confirmation_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::vector<std::uint8_t>
signing_key_fn_	host/commands/secure_env/hmac_serializable.h	/^  std::function<TpmObjectSlot(TpmResourceManager&)> signing_key_fn_;$/;"	m	class:cuttlefish::HmacSerializable	typeref:typename:std::function<TpmObjectSlot (TpmResourceManager &)>
sim	guest/hals/ril/reference-libril/ril.h	/^     RIL_HardwareConfig_Sim sim;$/;"	m	union:__anon0bfbaecf9308::__anon0bfbaecf940a	typeref:typename:RIL_HardwareConfig_Sim
simRefreshInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::simRefreshInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
simResponse	guest/hals/ril/reference-libril/ril.h	/^    char *simResponse;  \/* In hex string format ([a-fA-F0-9]*), except for SIM_AUTHENTICATION$/;"	m	struct:__anon0bfbaecf2008	typeref:typename:char *
simSlotsStatusChanged	guest/hals/ril/reference-libril/ril_config.cpp	/^int radio_1_6::simSlotsStatusChanged(int slotId, int indicationType, int token, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
simSmsStorageFullInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::simSmsStorageFullInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
simStatusChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::simStatusChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
sim_file_system_	host/commands/modem_simulator/sim_service.h	/^  SimFileSystem sim_file_system_;$/;"	m	class:cuttlefish::SimService	typeref:typename:SimFileSystem
sim_service_	host/commands/modem_simulator/call_service.h	/^  SimService* sim_service_;$/;"	m	class:cuttlefish::CallService	typeref:typename:SimService *
sim_service_	host/commands/modem_simulator/modem_simulator.h	/^  SimService* sim_service_{nullptr};$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:SimService *
sim_service_	host/commands/modem_simulator/network_service.h	/^  SimService* sim_service_ = nullptr;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:SimService *
sim_service_	host/commands/modem_simulator/sms_service.h	/^  SimService* sim_service_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:SimService *
sim_service_	host/commands/modem_simulator/stk_service.h	/^  SimService* sim_service_;$/;"	m	class:cuttlefish::StkService	typeref:typename:SimService *
sim_status_	host/commands/modem_simulator/sim_service.h	/^  SimStatus sim_status_;$/;"	m	class:cuttlefish::SimService	typeref:typename:SimStatus
sim_type	host/commands/modem_simulator/nvram_config.cpp	/^int NvramConfig::sim_type() const {$/;"	f	class:cuttlefish::NvramConfig	typeref:typename:int
sim_type_	host/commands/modem_simulator/nvram_config.h	/^  int sim_type_;$/;"	m	class:cuttlefish::NvramConfig	typeref:typename:int
simple_match	tools/tombstone_to_line.py	/^def simple_match(line, info, indent, out_file):$/;"	f
single_element_emplace	host/commands/run_cvd/launch.cc	/^std::vector<T> single_element_emplace(T&& element) {$/;"	f	namespace:cuttlefish::__anonf13e85620111	typeref:typename:std::vector<T>
sink_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::VideoSinkInterface<webrtc::VideoFrame> *sink_ = nullptr;$/;"	m	class:cuttlefish::webrtc_streaming::ClientVideoTrackImpl	typeref:typename:rtc::VideoSinkInterface<webrtc::VideoFrame> *	file:
sinks_	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  std::set<webrtc::AudioTrackSinkInterface*> sinks_;$/;"	m	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:std::set<webrtc::AudioTrackSinkInterface * >
sinks_mutex_	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  std::mutex sinks_mutex_;$/;"	m	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:std::mutex
size	host/commands/fetcher/build_api.h	/^  size_t size;$/;"	m	class:cuttlefish::Artifact	typeref:typename:size_t
size	host/frontend/webrtc/connection_observer.cpp	/^  std::size_t size() const override { return buffer_.size() * sizeof(T); }$/;"	f	struct:cuttlefish::InputEventBufferImpl	typeref:typename:std::size_t	file:
size	host/frontend/webrtc/lib/ws_connection.cpp	/^    size_t size() const { return buffer_.size() - LWS_PRE; }$/;"	f	struct:WsConnectionImpl::WsBuffer	typeref:typename:size_t	file:
size	host/libs/audio_connector/shm_layout.h	/^  Le32 size;  \/\/ unused$/;"	m	struct:cuttlefish::virtio_snd_query_info	typeref:typename:Le32
size	host/libs/confui/sign_utils.h	/^  size_t size() const { return size_; }$/;"	f	class:cuttlefish::confui::support::ByteBufferProxy	typeref:typename:size_t
size	host/libs/image_aggregator/image_aggregator.cc	/^  Be64 size;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be64	file:
size	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint64_t size;$/;"	m	struct:cuttlefish::__anon02806fd80111::PartitionInfo	typeref:typename:std::uint64_t	file:
size_	host/libs/confui/sign_utils.h	/^  size_t size_;$/;"	m	class:cuttlefish::confui::support::ByteBufferProxy	typeref:typename:size_t
skipNextComma	guest/hals/ril/reference-ril/at_tok.c	/^void skipNextComma(char **p_cur)$/;"	f	typeref:typename:void
skipWhiteSpace	guest/hals/ril/reference-ril/at_tok.c	/^static void skipWhiteSpace(char **p_cur)$/;"	f	typeref:typename:void	file:
sleepMsec	guest/hals/ril/reference-ril/atchannel.c	/^static void sleepMsec(long long msec)$/;"	f	typeref:typename:void	file:
sleep_mode_time_ms	guest/hals/ril/reference-libril/ril.h	/^  uint32_t sleep_mode_time_ms;$/;"	m	struct:__anon0bfbaecf9f08	typeref:typename:uint32_t
slot	host/frontend/webrtc/connection_observer.cpp	/^  int32_t slot;$/;"	m	struct:cuttlefish::multitouch_slot	typeref:typename:int32_t	file:
slotId	guest/hals/ril/reference-libril/sap_service.cpp	/^    int32_t slotId;$/;"	m	struct:SapImpl	typeref:typename:int32_t	file:
slotState	guest/hals/ril/reference-libril/ril.h	/^    RIL_SlotState slotState;$/;"	m	struct:__anon0bfbaecfb908	typeref:typename:RIL_SlotState
sms_service_	host/commands/modem_simulator/modem_simulator.h	/^  SmsService* sms_service_{nullptr};$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:SmsService *
sms_service_center_address_	host/commands/modem_simulator/sms_service.h	/^  SmsServiceCenterAddress sms_service_center_address_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:SmsServiceCenterAddress
sms_status_on_sim_	host/commands/modem_simulator/sms_service.h	/^  SmsMessage::SmsStatus sms_status_on_sim_;$/;"	m	class:cuttlefish::SmsService	typeref:typename:SmsMessage::SmsStatus
smsc	guest/hals/ril/reference-libril/ril.h	/^    char * smsc;    \/* SMSC address in GSM BCD format prefixed by a length byte$/;"	m	struct:__anon0bfbaecf1b08	typeref:typename:char *
smt	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::smt() const { return (*dictionary_)[kSmt].asBool(); }$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
snapshots_offset	host/libs/image_aggregator/image_aggregator.cc	/^  Be64 snapshots_offset;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be64	file:
snr_	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  uint8_t snr_;$/;"	m	class:cuttlefish::WmediumdMessageSetSnr	typeref:typename:uint8_t
sockaddr_vm	common/libs/fs/vm_sockets.h	/^struct sockaddr_vm {$/;"	s
socket	guest/hals/ril/reference-libril/RilSapSocket.h	/^            RilSapSocket* socket;$/;"	m	struct:RilSapSocket::RilSapSocketList	typeref:typename:RilSapSocket *
socketErrorIsRecoverable	common/frontend/socket_vsock_proxy/main.cpp	/^bool socketErrorIsRecoverable(int error) {$/;"	f	namespace:__anon913036200111	typeref:typename:bool
socketId	guest/hals/ril/reference-libril/RilSapSocket.h	/^        RIL_SOCKET_ID socketId;$/;"	m	struct:RilSapSocket::SapSocketRequest	typeref:typename:RIL_SOCKET_ID
socket_	common/frontend/socket_vsock_proxy/main.cpp	/^  cuttlefish::SharedFD socket_;$/;"	m	class:__anon913036200111::SocketReceiver	typeref:typename:cuttlefish::SharedFD	file:
socket_	common/frontend/socket_vsock_proxy/main.cpp	/^  cuttlefish::SharedFD socket_;$/;"	m	class:__anon913036200111::SocketSender	typeref:typename:cuttlefish::SharedFD	file:
socket_	common/libs/utils/unix_sockets.h	/^  SharedFD socket_;$/;"	m	class:cuttlefish::UnixMessageSocket	typeref:typename:SharedFD
socket_	host/commands/run_cvd/launch.cc	/^  SharedFD socket_;$/;"	m	class:cuttlefish::ConfigServer	typeref:typename:SharedFD	file:
socket_	host/commands/run_cvd/launch.cc	/^  SharedFD socket_;$/;"	m	class:cuttlefish::TombstoneReceiver	typeref:typename:SharedFD	file:
socket_flag_cv_	host/libs/confui/host_server.h	/^  std::condition_variable socket_flag_cv_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:std::condition_variable
socket_flag_mtx_	host/libs/confui/host_server.h	/^  std::mutex socket_flag_mtx_;$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:std::mutex
socket_id	guest/hals/ril/reference-libril/ril_ex.h	/^    RIL_SOCKET_ID socket_id;$/;"	m	struct:SocketListenParam	typeref:typename:RIL_SOCKET_ID
socket_id	guest/hals/ril/reference-libril/ril_internal.h	/^    RIL_SOCKET_ID socket_id;$/;"	m	struct:android::RequestInfo	typeref:typename:RIL_SOCKET_ID
sockets_	host/commands/run_cvd/launch_modem.cpp	/^  std::vector<SharedFD> sockets_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:std::vector<SharedFD>	file:
sockets_	host/commands/run_cvd/launch_streamer.cpp	/^  StreamerSockets& sockets_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:StreamerSockets &	file:
source	host/frontend/webrtc/lib/streamer.cpp	/^  rtc::scoped_refptr<webrtc::VideoTrackSourceInterface> source;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::DisplayDescriptor	typeref:typename:rtc::scoped_refptr<webrtc::VideoTrackSourceInterface>	file:
source	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^rtc::VideoSourceInterface<webrtc::VideoFrame> *VideoTrackSourceImpl::source() {$/;"	f	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:rtc::VideoSourceInterface<webrtc::VideoFrame> *
source	host/libs/config/fetcher_config.h	/^  FileSource source;$/;"	m	struct:cuttlefish::CvdFile	typeref:typename:FileSource
source	host/libs/image_aggregator/image_aggregator.cc	/^  MultipleImagePartition source;$/;"	m	struct:cuttlefish::__anon02806fd80111::PartitionInfo	typeref:typename:MultipleImagePartition	file:
sourceAddress	guest/hals/ril/reference-libril/ril.h	/^    char sourceAddress[MAX_INADDR_LEN];      \/* Source address in network-byte order *\/$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:char[]
sourcePort	guest/hals/ril/reference-libril/ril.h	/^    int sourcePort;                          \/* Source port if applicable, or 0x7FFFFFFF;$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:int
source_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::shared_ptr<webrtc::VideoTrackSourceInterface> source_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::shared_ptr<webrtc::VideoTrackSourceInterface>	file:
source_extension	host/commands/metrics/proto/clientanalytics.proto	/^  optional bytes source_extension = 6;$/;"	f	message:LogEvent	typeref:typename:bytes
source_image_family	tools/create_base_image.go	/^var source_image_family string$/;"	v	package:main	typeref:typename:string
source_image_project	tools/create_base_image.go	/^var source_image_project string$/;"	v	package:main	typeref:typename:string
source_match	tools/tombstone_to_line.py	/^def source_match(line, info, indent, out_file):$/;"	f
sources	guest/hals/ril/reference-libril/ril.h	/^    RIL_EmergencyNumberSource    sources;    \/* The bitfield of @1.4::EmergencyNumberSource(s).$/;"	m	struct:__anon0bfbaecfb708	typeref:typename:RIL_EmergencyNumberSource
sp_response	guest/hals/ril/reference-ril/atchannel.c	/^static ATResponse *sp_response = NULL;$/;"	v	typeref:typename:ATResponse *	file:
sparse_size	common/libs/utils/files.h	/^  off_t sparse_size;$/;"	m	struct:cuttlefish::FileSizes	typeref:typename:off_t
specifiers	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessSpecifier specifiers[MAX_RADIO_ACCESS_NETWORKS]; \/\/ Radio access networks$/;"	m	struct:__anon0bfbaecfad08	typeref:typename:RIL_RadioAccessSpecifier[]
specifiers	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessSpecifier_v1_5    specifiers[RIL_RADIO_ACCESS_SPECIFIER_MAX_SIZE];  \/\/ Radi/;"	m	struct:__anon0bfbaecfb108	typeref:typename:RIL_RadioAccessSpecifier_v1_5[]
specifiers	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioAccessSpecifier_v1_5 specifiers[RIL_RADIO_ACCESS_SPECIFIER_MAX_SIZE];$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:RIL_RadioAccessSpecifier_v1_5[]
specifiers_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t                         specifiers_length;  \/\/ Length of specifiers$/;"	m	struct:__anon0bfbaecfb108	typeref:typename:uint32_t
specifiers_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t specifiers_length;                                     \/\/ Length of specifiers$/;"	m	struct:__anon0bfbaecfad08	typeref:typename:uint32_t
specifiers_length	guest/hals/ril/reference-libril/ril.h	/^    uint32_t specifiers_length;  \/\/ Length of specifiers$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:uint32_t
specifyChannels	guest/hals/ril/reference-libril/ril.h	/^    int                              specifyChannels;$/;"	m	struct:__anon0bfbaecfb108	typeref:typename:int
split	guest/hals/ril/reference-libril/ril_service.cpp	/^hidl_vec<hidl_string> split(hidl_string str) {$/;"	f	typeref:typename:hidl_vec<hidl_string>
srvccStateNotifyInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::srvccStateNotifyInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
ssInfo	guest/hals/ril/reference-libril/ril.h	/^    int ssInfo[SS_INFO_MAX]; \/* This is the response data for most of the SS GET\/SET$/;"	m	union:__anon0bfbaecf9908::__anon0bfbaecf9a0a	typeref:typename:int[]
ssRsrp	guest/hals/ril/reference-libril/ril.h	/^  int32_t ssRsrp;   \/* SS reference signal received power, multiplied by -1.$/;"	m	struct:__anon0bfbaecf4e08	typeref:typename:int32_t
ssRsrq	guest/hals/ril/reference-libril/ril.h	/^  int32_t ssRsrq;   \/* SS reference signal received quality, multiplied by -1.$/;"	m	struct:__anon0bfbaecf4e08	typeref:typename:int32_t
ssSinr	guest/hals/ril/reference-libril/ril.h	/^  int32_t ssSinr;   \/* SS signal-to-noise and interference ratio.$/;"	m	struct:__anon0bfbaecf4e08	typeref:typename:int32_t
stage	host/commands/kernel_log_monitor/kernel_log_server.cc	/^  std::string_view stage;  \/\/ substring in the log identifying the stage$/;"	m	struct:__anonfa7764770111::__anonfa7764770308	typeref:typename:std::string_view	file:
start	guest/hals/camera/vsock_camera_server.cpp	/^void VsockCameraServer::start(unsigned int port, unsigned int cid) {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:void
start	guest/hals/camera/vsock_frame_provider.cpp	/^void VsockFrameProvider::start($/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:void
start	host/frontend/webrtc_operator/assets/js/app.js	/^  start() {$/;"	m	class:DeviceControlApp
start	host/frontend/webrtc_operator/assets/js/index.js	/^  start() {$/;"	m	class:DeviceListApp
startDtmf	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startDtmf(int32_t serial, const hidl_string& s) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startDtmfResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::startDtmfResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
startHandover	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startHandover(int32_t serial, int32_t callId) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startHandoverResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::startHandoverResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
startKeepalive	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startKeepalive(int32_t serial, const V1_1::KeepaliveRequest& keepali/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startKeepaliveResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::startKeepaliveResponse(int slotId, int responseType, int serial, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
startLceService	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startLceService(int32_t serial, int32_t reportInterval, bool pullMod/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startLceServiceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::startLceServiceResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
startMouseTracking	host/frontend/webrtc_operator/assets/js/app.js	/^  #startMouseTracking() {$/;"	m	class:DeviceControlApp
startNetworkScan	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startNetworkScan(int32_t serial, const V1_1::NetworkScanRequest& req/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startNetworkScanResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::startNetworkScanResponse(int slotId, int responseType, int serial, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
startNetworkScan_1_2	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startNetworkScan_1_2(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startNetworkScan_1_4	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startNetworkScan_1_4(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startNetworkScan_1_5	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::startNetworkScan_1_5(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
startPolling	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #startPolling() {$/;"	m	class:PollingConnector
startRequest	guest/hals/ril/reference-libril/ril_internal.h	/^    #define startRequest /;"	d
startResponse	guest/hals/ril/reference-libril/ril_internal.h	/^    #define startResponse /;"	d
startSensorInjection	guest/commands/sensor_injection/main.cpp	/^sp<ISensors> startSensorInjection() {$/;"	f	typeref:typename:sp<ISensors>
start_ap	host/libs/config/cuttlefish_config_instance.cpp	/^bool CuttlefishConfig::InstanceSpecific::start_ap() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:bool
start_id	host/libs/audio_connector/commands.h	/^  uint32_t start_id() const { return start_id_; }$/;"	f	class:cuttlefish::InfoCommand	typeref:typename:uint32_t
start_id	host/libs/audio_connector/shm_layout.h	/^  Le32 start_id;$/;"	m	struct:cuttlefish::virtio_snd_query_info	typeref:typename:Le32
start_id_	host/libs/audio_connector/commands.h	/^  const uint32_t start_id_;$/;"	m	class:cuttlefish::InfoCommand	typeref:typename:const uint32_t
start_time_	host/libs/confui/session.h	/^  std::unique_ptr<TimePoint> start_time_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::unique_ptr<TimePoint>
start_webrtc_sig_server	host/libs/config/cuttlefish_config_instance.cpp	/^bool CuttlefishConfig::InstanceSpecific::start_webrtc_sig_server() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:bool
start_wmediumd	host/libs/config/cuttlefish_config_instance.cpp	/^bool CuttlefishConfig::InstanceSpecific::start_wmediumd() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:bool
started_	common/libs/utils/subprocess.h	/^  bool started_ = false;$/;"	m	class:cuttlefish::Subprocess	typeref:typename:bool
state	guest/hals/ril/reference-libril/ril.h	/^    RIL_CallState   state;$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:RIL_CallState
state	guest/hals/ril/reference-libril/ril.h	/^  RIL_HardwareConfig_State state;$/;"	m	struct:__anon0bfbaecf9308	typeref:typename:RIL_HardwareConfig_State
state	guest/hals/ril/reference-ril/reference-ril.c	/^    enum PDPState state;$/;"	m	struct:PDPInfo	typeref:enum:PDPState	file:
state	host/commands/modem_simulator/data_service.h	/^    CidState state;$/;"	m	struct:cuttlefish::DataService::PDPContext	typeref:typename:CidState
state	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^AudioTrackSourceImpl::SourceState AudioTrackSourceImpl::state() const {$/;"	f	class:cuttlefish::webrtc_streaming::AudioTrackSourceImpl	typeref:typename:AudioTrackSourceImpl::SourceState
state_	host/commands/run_cvd/boot_state_machine.cc	/^  int state_;$/;"	m	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	typeref:typename:int	file:
state_	host/frontend/webrtc/lib/client_handler.h	/^  State state_ = State::kNew;$/;"	m	class:cuttlefish::webrtc_streaming::ClientHandler	typeref:typename:State
state_	host/libs/confui/session.h	/^  std::atomic<MainLoopState> state_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::atomic<MainLoopState>
state_	host/libs/wayland/wayland_surface.h	/^  State state_;$/;"	m	class:wayland::Surface	typeref:typename:State
state_mutex_	host/libs/wayland/wayland_surface.h	/^  std::mutex state_mutex_;$/;"	m	class:wayland::Surface	typeref:typename:std::mutex
static_mount_	host/libs/websocket/websocket_server.h	/^  struct lws_http_mount static_mount_;$/;"	m	class:cuttlefish::WebSocketServer	typeref:struct:lws_http_mount
status	guest/hals/ril/reference-libril/ril.h	/^    RIL_ScanStatus status;              \/\/ The status of the scan$/;"	m	struct:__anon0bfbaecfb308	typeref:typename:RIL_ScanStatus
status	guest/hals/ril/reference-libril/ril.h	/^    int             status;     \/* A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no erro/;"	m	struct:__anon0bfbaecf1308	typeref:typename:int
status	guest/hals/ril/reference-libril/ril.h	/^    int             status;     \/* A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no erro/;"	m	struct:__anon0bfbaecf1408	typeref:typename:int
status	guest/hals/ril/reference-libril/ril.h	/^    int             status;     \/* A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no erro/;"	m	struct:__anon0bfbaecf1508	typeref:typename:int
status	guest/hals/ril/reference-libril/ril.h	/^    int             status;     \/* A RIL_DataCallFailCause, 0 which is PDP_FAIL_NONE if no erro/;"	m	struct:__anon0bfbaecf1608	typeref:typename:int
status	guest/hals/ril/reference-libril/ril.h	/^    int             status;     \/*$/;"	m	struct:__anon0bfbaecf2108	typeref:typename:int
status	guest/hals/ril/reference-libril/ril.h	/^    int status;             \/\/ Return status and an input parameter for RC_PHASE_FINISH$/;"	m	struct:__anon0bfbaecf0a08	typeref:typename:int
status	guest/hals/ril/reference-libril/ril.h	/^    int status;     \/* Status of message.  See TS 27.005 3.1, "<stat>": *\/$/;"	m	struct:__anon0bfbaecf1b08	typeref:typename:int
status	host/commands/health/health.cpp	/^int status() {$/;"	f	typeref:typename:int
status	host/commands/modem_simulator/sms_service.h	/^    SmsStatus status;$/;"	m	struct:cuttlefish::SmsService::SmsMessage	typeref:typename:SmsStatus
status	host/commands/modem_simulator/sup_service.h	/^    CallForwardInfoStatus status;$/;"	m	struct:cuttlefish::SupService::CallForwardInfo	typeref:typename:CallForwardInfoStatus
status	host/commands/modem_simulator/sup_service.h	/^    ClirStatus status;$/;"	m	struct:cuttlefish::SupService::ClirStatusInfo	typeref:typename:ClirStatus
status	host/libs/audio_connector/commands.h	/^  AudioStatus status() const { return status_; }$/;"	f	class:cuttlefish::AudioCommand	typeref:typename:AudioStatus
status	host/libs/audio_connector/shm_layout.h	/^  Le32 status;$/;"	m	struct:cuttlefish::virtio_snd_pcm_status	typeref:typename:Le32
status	host/libs/audio_connector/shm_layout.h	/^  virtio_snd_pcm_status status;$/;"	m	struct:cuttlefish::IoStatusMsg	typeref:typename:virtio_snd_pcm_status
status	host/libs/config/mbr.h	/^  std::uint8_t status;$/;"	m	struct:MbrPartitionEntry	typeref:typename:std::uint8_t
status-div	host/frontend/webrtc_operator/assets/client.html	/^          <div id='status-div'>$/;"	I
status-message	host/frontend/webrtc_operator/assets/client.html	/^            <h3 id='status-message' class='connecting'>Connecting to device<\/h3>$/;"	I
status_	host/libs/audio_connector/commands.h	/^  AudioStatus status_ = AudioStatus::NOT_SET;$/;"	m	class:cuttlefish::AudioCommand	typeref:typename:AudioStatus
status_message_	common/libs/confui/protocol_types.h	/^  std::string status_message_;$/;"	m	class:cuttlefish::confui::ConfUiAckMessage	typeref:typename:std::string
status_sent_	host/libs/audio_connector/buffers.h	/^  bool status_sent_ = false;$/;"	m	class:cuttlefish::ShmBuffer	typeref:typename:bool
stereo_playout_enabled_	host/frontend/webrtc/lib/audio_device.h	/^  bool stereo_playout_enabled_ = true;$/;"	m	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
stereo_recording_enabled_	host/frontend/webrtc/lib/audio_device.h	/^  bool stereo_recording_enabled_ = true;$/;"	m	class:cuttlefish::webrtc_streaming::CfAudioDeviceModule	typeref:typename:bool
stkCallControlAlphaNotifyInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stkCallControlAlphaNotifyInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
stkCallSetupInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stkCallSetupInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
stkEventNotifyInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stkEventNotifyInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
stkProactiveCommandInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stkProactiveCommandInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
stkSessionEndInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stkSessionEndInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
stop	guest/hals/camera/vsock_camera_server.cpp	/^void VsockCameraServer::stop() {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer	typeref:typename:void
stop	guest/hals/camera/vsock_frame_provider.cpp	/^void VsockFrameProvider::stop() {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:void
stop	host/commands/run_cvd/process_monitor.cc	/^  bool stop;$/;"	m	struct:cuttlefish::ParentToChildMessage	typeref:typename:bool	file:
stopDtmf	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::stopDtmf(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
stopDtmfResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stopDtmfResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
stopKeepalive	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::stopKeepalive(int32_t serial, int32_t sessionHandle) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
stopKeepaliveResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stopKeepaliveResponse(int slotId, int responseType, int serial, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
stopLceService	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::stopLceService(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
stopLceServiceResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stopLceServiceResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
stopNetworkScan	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::stopNetworkScan(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
stopNetworkScanResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::stopNetworkScanResponse(int slotId, int responseType, int serial, RIL_Errno e,$/;"	f	class:radio_1_6	typeref:typename:int
stop_cvd	tools/upload_to_gce_and_run.py	/^def stop_cvd(args):$/;"	f
stop_cvd	tools/upload_via_ssh.py	/^def stop_cvd(args):$/;"	f
stopped_	host/commands/modem_simulator/thread_looper.h	/^  bool stopped_;$/;"	m	class:cuttlefish::ThreadLooper	typeref:typename:bool
stopper_	common/libs/utils/subprocess.h	/^  SubprocessStopper stopper_;$/;"	m	class:cuttlefish::Subprocess	typeref:typename:SubprocessStopper
storage	guest/hals/health/storage/Storage.cpp	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl::android::hardware::health	file:
storage	guest/hals/health/storage/Storage.h	/^namespace aidl::android::hardware::health::storage {$/;"	n	namespace:aidl::android::hardware::health
strStartsWith	guest/hals/ril/reference-ril/misc.c	/^int strStartsWith(const char *line, const char *prefix)$/;"	f	typeref:typename:int
streamId	guest/hals/camera/cached_stream_buffer.h	/^  int32_t streamId() const { return stream_id_; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:int32_t
streamPromiseResolvers	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #streamPromiseResolvers;$/;"	M	class:DeviceConnection
stream_cache_	guest/hals/camera/vsock_camera_device_session_3_4.h	/^  std::map<int32_t, Stream> stream_cache_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:std::map<int32_t,Stream>
stream_descs_	host/frontend/webrtc/audio_handler.h	/^  std::vector<StreamDesc> stream_descs_ = {};$/;"	m	class:cuttlefish::AudioHandler	typeref:typename:std::vector<StreamDesc>
stream_id	host/libs/audio_connector/buffers.cpp	/^uint32_t ShmBuffer::stream_id() const { return header_.stream_id.as_uint32_t(); }$/;"	f	class:cuttlefish::ShmBuffer	typeref:typename:uint32_t
stream_id	host/libs/audio_connector/commands.h	/^  uint32_t stream_id() const { return stream_id_; }$/;"	f	struct:cuttlefish::StreamControlCommand	typeref:typename:uint32_t
stream_id	host/libs/audio_connector/shm_layout.h	/^  Le32 stream_id;$/;"	m	struct:cuttlefish::virtio_snd_pcm_hdr	typeref:typename:Le32
stream_id	host/libs/audio_connector/shm_layout.h	/^  Le32 stream_id;$/;"	m	struct:cuttlefish::virtio_snd_pcm_xfer	typeref:typename:Le32
stream_id_	guest/hals/camera/cached_stream_buffer.h	/^  int32_t stream_id_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:int32_t
stream_id_	host/libs/audio_connector/commands.h	/^  const uint32_t stream_id_;$/;"	m	struct:cuttlefish::StreamControlCommand	typeref:typename:const uint32_t
streamer_callback_mutex_	host/libs/screen_connector/screen_connector.h	/^  std::mutex streamer_callback_mutex_; \/\/ mutex to set & read callback_from_streamer_$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:std::mutex
streamer_callback_set_cv_	host/libs/screen_connector/screen_connector.h	/^  std::condition_variable streamer_callback_set_cv_;$/;"	m	class:cuttlefish::ScreenConnector	typeref:typename:std::condition_variable
streams	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  #streams;$/;"	M	class:DeviceConnection
streams	host/libs/audio_connector/shm_layout.h	/^  uint32_t streams;$/;"	m	struct:cuttlefish::VioSConfig	typeref:typename:uint32_t
stun_servers_	host/frontend/webrtc_operator/server_config.h	/^  std::vector<std::string> stun_servers_;$/;"	m	class:cuttlefish::ServerConfig	typeref:typename:std::vector<std::string>
subcompositor_destroy	host/libs/wayland/wayland_subcompositor.cpp	/^void subcompositor_destroy(wl_client*, wl_resource* subcompositor) {$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subcompositor_destroy_resource_callback	host/libs/wayland/wayland_subcompositor.cpp	/^void subcompositor_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subcompositor_get_subsurface	host/libs/wayland/wayland_subcompositor.cpp	/^void subcompositor_get_subsurface(wl_client* client,$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subcompositor_implementation	host/libs/wayland/wayland_subcompositor.cpp	/^const struct wl_subcompositor_interface subcompositor_implementation = {$/;"	v	namespace:wayland::__anonebd60ce30111	typeref:typename:const struct wl_subcompositor_interface
subprocess_	host/commands/start/flag_forwarder.cc	/^  std::string subprocess_;$/;"	m	class:SubprocessFlag	typeref:typename:std::string	file:
subprocess_stopper_	common/libs/utils/subprocess.h	/^  SubprocessStopper subprocess_stopper_;$/;"	m	class:cuttlefish::Command	typeref:typename:SubprocessStopper
subprocesses_	host/commands/start/flag_forwarder.h	/^  std::set<std::string> subprocesses_;$/;"	m	class:FlagForwarder	typeref:typename:std::set<std::string>
subscribers_	host/commands/kernel_log_monitor/kernel_log_server.h	/^  std::vector<EventCallback> subscribers_;$/;"	m	class:monitor::KernelLogServer	typeref:typename:std::vector<EventCallback>
subscribers_	host/frontend/webrtc/kernel_log_events_handler.h	/^  std::map<int, std::function<void(const Json::Value&)>> subscribers_;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:std::map<int,std::function<void (const Json::Value &)>>
subscribers_mtx_	host/frontend/webrtc/kernel_log_events_handler.h	/^  std::mutex subscribers_mtx_;$/;"	m	struct:cuttlefish::KernelLogEventsHandler	typeref:typename:std::mutex
subscriptionStatusChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::subscriptionStatusChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
subscription_source	guest/hals/ril/reference-ril/reference-ril.c	/^    int subscription_source;$/;"	m	struct:__anon70d7df6f0108	typeref:typename:int	file:
subsurface_destroy	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_destroy(wl_client*, wl_resource* subsurface) {$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subsurface_destroy_resource_callback	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subsurface_implementation	host/libs/wayland/wayland_subcompositor.cpp	/^const struct wl_subsurface_interface subsurface_implementation = {$/;"	v	namespace:wayland::__anonebd60ce30111	typeref:typename:const struct wl_subsurface_interface
subsurface_place_above	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_place_above(wl_client*,$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subsurface_place_below	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_place_below(wl_client*,$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subsurface_set_desync	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_set_desync(wl_client*, wl_resource* subsurface) {$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subsurface_set_position	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_set_position(wl_client*,$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
subsurface_set_sync	host/libs/wayland/wayland_subcompositor.cpp	/^void subsurface_set_sync(wl_client*, wl_resource* subsurface) {$/;"	f	namespace:wayland::__anonebd60ce30111	typeref:typename:void
success	guest/hals/ril/reference-ril/atchannel.h	/^    int success;              \/* true if final response indicates$/;"	m	struct:__anon512a2c1f0208	typeref:typename:int
suggestedRetryTime	guest/hals/ril/reference-libril/ril.h	/^    int             suggestedRetryTime; \/* If status != 0, this fields indicates the suggested /;"	m	struct:__anon0bfbaecf1308	typeref:typename:int
suggestedRetryTime	guest/hals/ril/reference-libril/ril.h	/^    int             suggestedRetryTime; \/* If status != 0, this fields indicates the suggested /;"	m	struct:__anon0bfbaecf1408	typeref:typename:int
suggestedRetryTime	guest/hals/ril/reference-libril/ril.h	/^    int             suggestedRetryTime; \/* If status != 0, this fields indicates the suggested /;"	m	struct:__anon0bfbaecf1508	typeref:typename:int
suggestedRetryTime	guest/hals/ril/reference-libril/ril.h	/^    int             suggestedRetryTime; \/* If status != 0, this fields indicates the suggested /;"	m	struct:__anon0bfbaecf1608	typeref:typename:int
sul	host/frontend/webrtc/lib/ws_connection.cpp	/^    lws_sorted_usec_list_t sul = {};$/;"	m	struct:WsConnectionImpl::CreateConnectionSul	typeref:typename:lws_sorted_usec_list_t	file:
suppSvcNotifyInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::suppSvcNotifyInd(int slotId, int indicationType,$/;"	f	class:radio_1_6	typeref:typename:int
supplyIccPin2ForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::supplyIccPin2ForApp(int32_t serial, const hidl_string& pin2,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
supplyIccPin2ForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::supplyIccPin2ForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
supplyIccPinForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::supplyIccPinForApp(int32_t serial, const hidl_string& pin,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
supplyIccPinForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::supplyIccPinForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
supplyIccPuk2ForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::supplyIccPuk2ForApp(int32_t serial, const hidl_string& puk2,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
supplyIccPuk2ForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::supplyIccPuk2ForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
supplyIccPukForApp	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::supplyIccPukForApp(int32_t serial, const hidl_string& puk,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
supplyIccPukForAppResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::supplyIccPukForAppResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
supplyNetworkDepersonalization	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::supplyNetworkDepersonalization(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
supplyNetworkDepersonalizationResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::supplyNetworkDepersonalizationResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
supplySimDepersonalization	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::supplySimDepersonalization(int32_t serial,$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
supplySimDepersonalizationResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::supplySimDepersonalizationResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
support	host/libs/confui/sign_utils.h	/^namespace support {$/;"	n	namespace:cuttlefish::confui
supportedTechs	guest/hals/ril/reference-ril/reference-ril.c	/^    int supportedTechs; \/\/ Bitmask of supported Modem Technology bits$/;"	m	struct:__anon70d7df6f0108	typeref:typename:int	file:
supportedTypesBitmask	guest/hals/ril/reference-libril/ril.h	/^    int supportedTypesBitmask;  \/* supported APN types bitmask. See RIL_ApnTypes for the value /;"	m	struct:__anon0bfbaecfc108	typeref:typename:int
supportedTypesBitmask	guest/hals/ril/reference-libril/ril.h	/^    int supportedTypesBitmask;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
supported_algorithms_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::vector<keymaster_algorithm_t> supported_algorithms_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::vector<keymaster_algorithm_t>
supports	guest/hals/ril/reference-libril/ril.h	/^    RIL_Supports supports;$/;"	m	struct:__anon0bfbaecfbf08	typeref:typename:RIL_Supports
surface_attach	host/libs/wayland/wayland_compositor.cpp	/^void surface_attach(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_commit	host/libs/wayland/wayland_compositor.cpp	/^void surface_commit(wl_client*, wl_resource* surface_resource) {$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_damage	host/libs/wayland/wayland_compositor.cpp	/^void surface_damage(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_damage_buffer	host/libs/wayland/wayland_compositor.cpp	/^void surface_damage_buffer(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_destroy	host/libs/wayland/wayland_compositor.cpp	/^void surface_destroy(wl_client*, wl_resource* surface) {$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_destroy_resource_callback	host/libs/wayland/wayland_compositor.cpp	/^void surface_destroy_resource_callback(struct wl_resource* surface_resource) {$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_destroy_resource_callback	host/libs/wayland/wayland_shell.cpp	/^void surface_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
surface_frame	host/libs/wayland/wayland_compositor.cpp	/^void surface_frame(wl_client*, wl_resource* surface, uint32_t) {$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_implementation	host/libs/wayland/wayland_compositor.cpp	/^const struct wl_surface_interface surface_implementation = {$/;"	v	namespace:wayland::__anon473d11590111	typeref:typename:const struct wl_surface_interface
surface_set_buffer_scale	host/libs/wayland/wayland_compositor.cpp	/^void surface_set_buffer_scale(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_set_buffer_transform	host/libs/wayland/wayland_compositor.cpp	/^void surface_set_buffer_transform(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_set_input_region	host/libs/wayland/wayland_compositor.cpp	/^void surface_set_input_region(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surface_set_opaque_region	host/libs/wayland/wayland_compositor.cpp	/^void surface_set_opaque_region(wl_client*,$/;"	f	namespace:wayland::__anon473d11590111	typeref:typename:void
surfaces_	host/libs/wayland/wayland_server.cpp	/^  Surfaces surfaces_;$/;"	m	struct:wayland::internal::WaylandServerState	typeref:typename:Surfaces	file:
surfaces_	host/libs/wayland/wayland_surface.h	/^  Surfaces& surfaces_;$/;"	m	class:wayland::Surface	typeref:typename:Surfaces &
svm_cid	common/libs/fs/vm_sockets.h	/^  unsigned int svm_cid;$/;"	m	struct:sockaddr_vm	typeref:typename:unsigned int
svm_family	common/libs/fs/vm_sockets.h	/^  __kernel_sa_family_t svm_family;$/;"	m	struct:sockaddr_vm	typeref:typename:__kernel_sa_family_t
svm_port	common/libs/fs/vm_sockets.h	/^  unsigned int svm_port;$/;"	m	struct:sockaddr_vm	typeref:typename:unsigned int
svm_reserved1	common/libs/fs/vm_sockets.h	/^  unsigned short svm_reserved1;$/;"	m	struct:sockaddr_vm	typeref:typename:unsigned short
svm_zero	common/libs/fs/vm_sockets.h	/^  unsigned char svm_zero[sizeof(struct sockaddr) - sizeof(sa_family_t) - sizeof(unsigned short) /;"	m	struct:sockaddr_vm	typeref:typename:unsigned char[]
sw1	guest/hals/ril/reference-libril/ril.h	/^    int sw1;$/;"	m	struct:__anon0bfbaecf2008	typeref:typename:int
sw2	guest/hals/ril/reference-libril/ril.h	/^    int sw2;$/;"	m	struct:__anon0bfbaecf2008	typeref:typename:int
swap	common/libs/fs/shared_select.h	/^  void swap(SharedFDSet* rhs) {$/;"	f	class:cuttlefish::SharedFDSet	typeref:typename:void
switchWaitingOrHoldingAndActive	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::switchWaitingOrHoldingAndActive(int32_t serial) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
switchWaitingOrHoldingAndActiveResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::switchWaitingOrHoldingAndActiveResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
switches_client	host/frontend/webrtc/connection_observer.h	/^  SharedFD switches_client;$/;"	m	struct:cuttlefish::InputSockets	typeref:typename:SharedFD
switches_server	host/frontend/webrtc/connection_observer.h	/^  SharedFD switches_server;$/;"	m	struct:cuttlefish::InputSockets	typeref:typename:SharedFD
switches_server_	host/commands/run_cvd/launch_streamer.cpp	/^  SharedFD switches_server_;$/;"	m	class:cuttlefish::__anon6b0274e10111::WebRtcServer	typeref:typename:SharedFD	file:
switches_socket_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::switches_socket_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
systemId	guest/hals/ril/reference-libril/ril.h	/^    int systemId;       \/* CDMA System Id 0..32767, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5c08	typeref:typename:int
systemId	guest/hals/ril/reference-libril/ril.h	/^    int systemId;       \/* CDMA System Id 0..32767, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7c08	typeref:typename:int
systemIsInPrl	guest/hals/ril/reference-libril/ril.h	/^    int32_t systemIsInPrl;                \/\/ indicates whether the current system is in the$/;"	m	struct:__anon0bfbaecf7f08	typeref:typename:int32_t
system_image_dir_flag_	host/libs/config/config_flag.cpp	/^  SystemImageDirFlag& system_image_dir_flag_;$/;"	m	class:cuttlefish::__anon2e549bd00111::ConfigFlagImpl	typeref:typename:SystemImageDirFlag &	file:
tac	guest/hals/ril/reference-libril/ril.h	/^    int tac;    \/* 16-bit tracking area code, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5d08	typeref:typename:int
tac	guest/hals/ril/reference-libril/ril.h	/^    int tac;    \/* 16-bit tracking area code, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf5e08	typeref:typename:int
tac	guest/hals/ril/reference-libril/ril.h	/^    int tac;    \/* 16-bit tracking area code, INT_MAX if unknown  *\/$/;"	m	struct:__anon0bfbaecf7a08	typeref:typename:int
tac	guest/hals/ril/reference-libril/ril.h	/^    int32_t tac;       \/* 16-bit tracking area code, INT_MAX means invalid\/unreported. *\/$/;"	m	struct:__anon0bfbaecf6108	typeref:typename:int32_t
tag	host/commands/secure_env/in_process_tpm.cpp	/^  uint16_t tag;$/;"	m	struct:cuttlefish::tpm_message_header	typeref:typename:uint16_t	file:
takePhoto	host/frontend/webrtc_operator/assets/js/app.js	/^  #takePhoto() {$/;"	m	class:DeviceControlApp
target	common/libs/utils/tee_logging.h	/^  SharedFD target;$/;"	m	struct:cuttlefish::SeverityTarget	typeref:typename:SharedFD
target	host/commands/fetcher/build_api.h	/^  std::string target;$/;"	m	struct:cuttlefish::DeviceBuild	typeref:typename:std::string
target	host/commands/fetcher/build_api.h	/^  std::string target;$/;"	m	struct:cuttlefish::DirectoryBuild	typeref:typename:std::string
target_arch	host/commands/assemble_cvd/flags.h	/^  Arch target_arch;$/;"	m	struct:cuttlefish::KernelConfig	typeref:typename:Arch
target_arch	host/libs/config/cuttlefish_config.cpp	/^Arch CuttlefishConfig::target_arch() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:Arch
tcp_port_range	host/frontend/webrtc/lib/streamer.h	/^  std::pair<uint16_t, uint16_t> tcp_port_range = {15550, 15558};$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig	typeref:typename:std::pair<uint16_t,uint16_t>
tcp_port_range_	host/frontend/webrtc/lib/port_range_socket_factory.h	/^  std::pair<uint16_t, uint16_t> tcp_port_range_;$/;"	m	class:cuttlefish::webrtc_streaming::PortRangeSocketFactory	typeref:typename:std::pair<uint16_t,uint16_t>
tcp_server_	host/libs/config/adb/launch.cpp	/^  SharedFD tcp_server_;$/;"	m	class:cuttlefish::__anon7ea6a0320111::SocketVsockProxy	typeref:typename:SharedFD	file:
tcti_context_	host/commands/secure_env/in_process_tpm.cpp	/^  TSS2_TCTI_CONTEXT_COMMON_CURRENT tcti_context_;$/;"	m	class:cuttlefish::InProcessTpm::Impl	typeref:typename:TSS2_TCTI_CONTEXT_COMMON_CURRENT	file:
tdls_external_control	shared/config/wpa_supplicant_overlay.conf	/^tdls_external_control=1$/;"	k
tdscdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoTdscdma     tdscdma;$/;"	m	union:__anon0bfbaecf7008::__anon0bfbaecf710a	typeref:typename:RIL_CellInfoTdscdma
tdscdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoTdscdma     tdscdma;$/;"	m	union:__anon0bfbaecf7208::__anon0bfbaecf730a	typeref:typename:RIL_CellInfoTdscdma
tdscdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoTdscdma tdscdma;$/;"	m	union:__anon0bfbaecf6e08::__anon0bfbaecf6f0a	typeref:typename:RIL_CellInfoTdscdma
tdscdma_rscp	host/commands/modem_simulator/network_service.h	/^    int tdscdma_rscp;   \/* P-CCPCH RSCP as defined in TS 25.225 5.1.1$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
tearDown	tests/recovery/src/com/android/cuttlefish/tests/RebootRecoveryTest.java	/^    public void tearDown() throws Exception {$/;"	m	class:RebootRecoveryTest
tech	guest/hals/ril/reference-libril/ril.h	/^    RIL_RadioTechnologyFamily tech;$/;"	m	struct:__anon0bfbaecf1808	typeref:typename:RIL_RadioTechnologyFamily
techFromModemType	guest/hals/ril/reference-ril/reference-ril.c	/^static int techFromModemType(int mdmtype)$/;"	f	typeref:typename:int	file:
teeui	host/libs/confui/layouts/layout.h	/^namespace teeui {$/;"	n
teeui_frame_	host/libs/confui/host_renderer.h	/^  TeeUiFrame teeui_frame_;$/;"	m	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:TeeUiFrame
teleserviceType	guest/hals/ril/reference-libril/ril.h	/^  RIL_SsTeleserviceType teleserviceType;$/;"	m	struct:__anon0bfbaecf9908	typeref:typename:RIL_SsTeleserviceType
testBasicPhoneAttributes	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    public void testBasicPhoneAttributes() throws Exception {$/;"	m	class:RilE2eTests
testGfxstreamEnabled	tests/graphics/src/com/android/cuttlefish/tests/GfxstreamEnabledTest.java	/^    public void testGfxstreamEnabled() throws Exception {$/;"	m	class:GfxstreamEnabledTest
testPowerwash	tests/powerwash/src/com/android/cuttlefish/tests/PowerwashTest.java	/^    public void testPowerwash() throws Exception {$/;"	m	class:PowerwashTest
testRebootRecovery	tests/recovery/src/com/android/cuttlefish/tests/RebootRecoveryTest.java	/^    public void testRebootRecovery() throws Exception {$/;"	m	class:RebootRecoveryTest
testRilConnects	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    public void testRilConnects() throws Exception {$/;"	m	class:RilE2eTests
testSignalLevels	tests/ril/src/com/android/cuttlefish/ril/tests/RilE2eTests.java	/^    public void testSignalLevels() throws Exception {$/;"	m	class:RilE2eTests
testTombstoneTransmitIntegrity	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    public void testTombstoneTransmitIntegrity() throws Exception {$/;"	m	class:TombstoneTransmitTest
testTombstonesOfVaryingLengths	tests/src/com/android/tests/tombstoneTransmit/TombstoneTransmitTest.java	/^    public void testTombstonesOfVaryingLengths() throws Exception {$/;"	m	class:TombstoneTransmitTest
testWifiConnects	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    public void testWifiConnects() throws Exception {$/;"	m	class:WifiE2eTests
testWifiInitialization	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    public void testWifiInitialization() {$/;"	m	class:WifiE2eTests
text	common/libs/net/netlink_request_test.cpp	/^    char text[sizeof(kLongString)];  \/\/ sizeof includes padding 0.$/;"	m	struct:cuttlefish::TEST::__anon1ff2f3d90208	typeref:typename:char[]	file:
thread	host/libs/confui/host_utils.cc	/^namespace thread {$/;"	n	namespace:cuttlefish::confui	file:
thread	host/libs/confui/host_utils.h	/^namespace thread {$/;"	n	namespace:cuttlefish::confui
thread_looper_	host/commands/modem_simulator/modem_service.h	/^  ThreadLooper* thread_looper_;$/;"	m	class:cuttlefish::ModemService	typeref:typename:ThreadLooper *
thread_looper_	host/commands/modem_simulator/modem_simulator.h	/^  std::unique_ptr<ThreadLooper> thread_looper_;$/;"	m	class:cuttlefish::ModemSimulator	typeref:typename:std::unique_ptr<ThreadLooper>
threads_	common/libs/utils/subprocess.cpp	/^std::vector<std::thread*> threads_;$/;"	m	class:cuttlefish::ThreadJoiner	typeref:typename:std::vector<std::thread * >	file:
thresholdsDbm	guest/hals/ril/reference-libril/ril.h	/^    int32_t *thresholdsDbm;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:int32_t *
thresholdsDbmNumber	guest/hals/ril/reference-libril/ril.h	/^    int32_t thresholdsDbmNumber;$/;"	m	struct:__anon0bfbaecf5608	typeref:typename:int32_t
thresholdsDownlinkKbps	guest/hals/ril/reference-libril/ril.h	/^    int32_t *thresholdsDownlinkKbps;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t *
thresholdsDownlinkKbpsLength	guest/hals/ril/reference-libril/ril.h	/^    int32_t thresholdsDownlinkKbpsLength;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t
thresholdsUplinkKbps	guest/hals/ril/reference-libril/ril.h	/^    int32_t *thresholdsUplinkKbps;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t *
thresholdsUplinkKbpsLength	guest/hals/ril/reference-libril/ril.h	/^    int32_t thresholdsUplinkKbpsLength;$/;"	m	struct:__anon0bfbaecf5708	typeref:typename:int32_t
time	guest/hals/ril/reference-libril/ril.h	/^    uint64_t                    time;       \/\/ Time in nanos as returned by ril_nano_time$/;"	m	struct:__anon0bfbaecf9c08	typeref:typename:uint64_t
timeSeconds	guest/hals/ril/reference-libril/ril.h	/^    int             timeSeconds; \/* for CF no reply only *\/$/;"	m	struct:__anon0bfbaecf2108	typeref:typename:int
timeSeconds	host/commands/modem_simulator/sup_service.h	/^    int timeSeconds;    \/\/ for CF no reply only$/;"	m	struct:cuttlefish::SupService::CallForwardInfo	typeref:typename:int
timeStamp	guest/hals/ril/reference-libril/ril.h	/^  uint64_t          timeStamp;      \/* Time in nanos as returned by ril_nano_time *\/$/;"	m	struct:__anon0bfbaecf6e08	typeref:typename:uint64_t
timeStamp	guest/hals/ril/reference-libril/ril.h	/^  uint64_t          timeStamp;      \/* Time in nanos as returned by ril_nano_time *\/$/;"	m	struct:__anon0bfbaecf7008	typeref:typename:uint64_t
timeStampType	guest/hals/ril/reference-libril/ril.h	/^  RIL_TimeStampType timeStampType;  \/* type of time stamp represented by timeStamp *\/$/;"	m	struct:__anon0bfbaecf6e08	typeref:typename:RIL_TimeStampType
timeStampType	guest/hals/ril/reference-libril/ril.h	/^  RIL_TimeStampType timeStampType;  \/* type of time stamp represented by timeStamp *\/$/;"	m	struct:__anon0bfbaecf7008	typeref:typename:RIL_TimeStampType
timeout	guest/hals/ril/reference-libril/ril_event.h	/^    struct timeval timeout;$/;"	m	struct:ril_event	typeref:struct:timeval
timeoutMs	host/frontend/webrtc_operator/assets/js/adb.js	/^const timeoutMs = 3000;$/;"	C
timeout_serial	host/commands/modem_simulator/call_service.h	/^    std::optional<int32_t> timeout_serial;$/;"	m	struct:cuttlefish::CallService::CallStatus	typeref:typename:std::optional<int32_t>
timer_list	guest/hals/ril/reference-libril/ril_event.cpp	/^static struct ril_event timer_list;$/;"	v	typeref:struct:ril_event	file:
timeradd	guest/hals/ril/reference-libril/ril_event.cpp	/^#define timeradd(/;"	d	file:
timercmp	guest/hals/ril/reference-libril/ril_event.cpp	/^#define timercmp(/;"	d	file:
timersub	guest/hals/ril/reference-libril/ril_event.cpp	/^#define timersub(/;"	d	file:
timespec_to_ms	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^uint64_t timespec_to_ms(const struct timespec& tp) {$/;"	f	namespace:cuttlefish::__anon0281e17c0211	typeref:typename:uint64_t
timestamp	guest/hals/camera/vsock_camera_device_session_3_4.h	/^    nsecs_t timestamp;$/;"	m	struct:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession::ReadVsockRequest	typeref:typename:nsecs_t
timestamp	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^    uint64_t timestamp;$/;"	m	struct:cuttlefish::TpmKeymasterEnforcement::VerifyAuthorization::VerificationData	typeref:typename:uint64_t	file:
timestamp_	guest/hals/camera/vsock_frame_provider.h	/^  std::atomic<nsecs_t> timestamp_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::atomic<nsecs_t>
timestamp_ms	host/commands/metrics/proto/cf_log.proto	/^  optional Timestamp timestamp_ms = 1;$/;"	f	message:cuttlefish.CuttlefishLogEvent	typeref:typename:Timestamp
timezone_	host/commands/modem_simulator/misc_service.h	/^  std::string timezone_;$/;"	m	class:cuttlefish::MiscService	typeref:typename:std::string
timingAdvance	guest/hals/ril/reference-libril/ril.h	/^    int timingAdvance;   \/* Timing Advance in bit periods. 1 bit period = 48\/13 us.$/;"	m	struct:__anon0bfbaecf4708	typeref:typename:int
timingAdvance	guest/hals/ril/reference-libril/ril.h	/^    int timingAdvance;   \/* timing advance in micro seconds for a one way trip from cell to dev/;"	m	struct:__anon0bfbaecf4c08	typeref:typename:int
title	host/example_custom_actions/custom_action_config.json	/^				"title":"Do Not Disturb",$/;"	s	object:1.buttons.1
title	host/example_custom_actions/custom_action_config.json	/^				"title":"Quick Settings",$/;"	s	object:1.buttons.0
title	host/example_custom_actions/custom_action_config.json	/^			"title":"Web Page",$/;"	s	object:0.button
title	host/frontend/webrtc/lib/streamer.cpp	/^  std::string title;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::ControlPanelButtonDescriptor	typeref:typename:std::string	file:
title	host/libs/config/custom_actions.h	/^  std::string title;$/;"	m	struct:cuttlefish::ControlPanelButton	typeref:typename:std::string
title	shared/config/config_foldable.json	/^                                "title":"Device State Closed",$/;"	s	object:custom_actions.0.button
title	shared/config/config_foldable.json	/^                                "title":"Device State Opened",$/;"	s	object:custom_actions.1.button
tmp_debs=	tools/create_base_image_gce.sh	/^tmp_debs=()$/;"	f
tmp_test_dir	host/commands/modem_simulator/unittest/service_test.cpp	/^static const std::string tmp_test_dir = std::string(fs::temp_directory_path()) +$/;"	v	typeref:typename:const std::string	file:
toCodeScheme	guest/hals/ril/reference-libril/ril.h	/^    int toCodeScheme;$/;"	m	struct:__anon0bfbaecf4408	typeref:typename:int
toKeymasterError	guest/hals/keymint/remote/remote_remotely_provisioned_component.cpp	/^ndk::ScopedAStatus toKeymasterError(const KeymasterResponse& response) {$/;"	f	namespace:aidl::android::hardware::security::keymint::__anone2ec5ace0111	typeref:typename:ndk::ScopedAStatus
toServiceId	guest/hals/ril/reference-libril/ril.h	/^    int toServiceId;$/;"	m	struct:__anon0bfbaecf4408	typeref:typename:int
toString	guest/monitoring/cuttlefish_service/java/com/android/google/gce/gceservice/GceFuture.java	/^    public static String toString(ArrayList<GceFuture<?>> futures) {$/;"	m	class:GceFuture
toa	guest/hals/ril/reference-libril/ril.h	/^    int             toa;         \/* "type" from TS 27.007 7.11 *\/$/;"	m	struct:__anon0bfbaecf2108	typeref:typename:int
toa	guest/hals/ril/reference-libril/ril.h	/^    int             toa;        \/* type of address, eg 145 = intl *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:int
token	guest/hals/ril/reference-libril/RilSapSocket.h	/^        int token;$/;"	m	struct:RilSapSocket::SapSocketRequest	typeref:typename:int
token	guest/hals/ril/reference-libril/ril_internal.h	/^    int32_t token;      \/\/this is not RIL_Token$/;"	m	struct:android::RequestInfo	typeref:typename:int32_t
tombstone_dir_	host/commands/run_cvd/launch.cc	/^  std::string tombstone_dir_;$/;"	m	class:cuttlefish::TombstoneReceiver	typeref:typename:std::string	file:
tombstone_receiver_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::tombstone_receiver_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
ton	host/commands/modem_simulator/sup_service.h	/^    int ton;            \/\/ "type" from TS 27.007 7.11$/;"	m	struct:cuttlefish::SupService::CallForwardInfo	typeref:typename:int
toplevel_destroy_resource_callback	host/libs/wayland/wayland_shell.cpp	/^void toplevel_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
tosca	host/commands/modem_simulator/sms_service.h	/^    int tosca;$/;"	m	struct:cuttlefish::SmsService::SmsServiceCenterAddress	typeref:typename:int
total_instances_	host/commands/modem_simulator/nvram_config.h	/^  size_t total_instances_;$/;"	m	class:cuttlefish::NvramConfig	typeref:typename:size_t
total_len	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^  int total_len;$/;"	m	struct:android_wifi_priv_cmd	typeref:typename:int
touchIdSlotMap	host/frontend/webrtc_operator/assets/js/app.js	/^      touchIdSlotMap: new Map(),$/;"	p	class:DeviceControlApp.startMouseTracking.mouseCtx
touchSlots	host/frontend/webrtc_operator/assets/js/app.js	/^      touchSlots: [],$/;"	p	class:DeviceControlApp.startMouseTracking.mouseCtx
touch_clients	host/frontend/webrtc/connection_observer.h	/^  std::map<std::string, SharedFD> touch_clients;$/;"	m	struct:cuttlefish::InputSockets	typeref:typename:std::map<std::string,SharedFD>
touch_destroy_resource_callback	host/libs/wayland/wayland_seat.cpp	/^void touch_destroy_resource_callback(struct wl_resource*) {}$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
touch_enabled	host/frontend/webrtc/lib/streamer.cpp	/^  bool touch_enabled;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::DisplayDescriptor	typeref:typename:bool	file:
touch_implementation	host/libs/wayland/wayland_seat.cpp	/^const struct wl_touch_interface touch_implementation = {$/;"	v	namespace:wayland::__anona9f16c970111	typeref:typename:const struct wl_touch_interface
touch_release	host/libs/wayland/wayland_seat.cpp	/^void touch_release(wl_client*, wl_resource* touch) {$/;"	f	namespace:wayland::__anona9f16c970111	typeref:typename:void
touch_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::touch_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
touch_servers	host/frontend/webrtc/connection_observer.h	/^  std::map<std::string, SharedFD> touch_servers;$/;"	m	struct:cuttlefish::InputSockets	typeref:typename:std::map<std::string,SharedFD>
touch_servers_	host/commands/run_cvd/launch_streamer.cpp	/^  std::vector<SharedFD> touch_servers_;$/;"	m	class:cuttlefish::__anon6b0274e10111::StreamerSockets	typeref:typename:std::vector<SharedFD>	file:
touch_socket_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::touch_socket_path($/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
tpm_	host/commands/secure_env/device_tpm.h	/^  std::unique_ptr<TSS2_TCTI_CONTEXT, void(*)(TSS2_TCTI_CONTEXT*)> tpm_;$/;"	m	class:cuttlefish::DeviceTpm	typeref:typename:std::unique_ptr<TSS2_TCTI_CONTEXT,void (*)(TSS2_TCTI_CONTEXT *)>
tpm_	host/commands/secure_env/test_tpm.h	/^  InProcessTpm tpm_;$/;"	m	class:cuttlefish::TestTpm	typeref:typename:InProcessTpm
tpm_device	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::tpm_device() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
tpm_message_header	host/commands/secure_env/in_process_tpm.cpp	/^struct __attribute__((__packed__)) tpm_message_header {$/;"	s	namespace:cuttlefish	file:
track_source_impl_	host/frontend/webrtc/lib/audio_track_source_impl.h	/^  rtc::scoped_refptr<AudioTrackSourceImpl> track_source_impl_;$/;"	m	class:cuttlefish::webrtc_streaming::AudioTrackSourceImplSinkWrapper	typeref:typename:rtc::scoped_refptr<AudioTrackSourceImpl>
track_source_impl_	host/frontend/webrtc/lib/video_track_source_impl.h	/^  rtc::scoped_refptr<VideoTrackSourceImpl> track_source_impl_;$/;"	m	class:cuttlefish::webrtc_streaming::VideoTrackSourceImplSinkWrapper	typeref:typename:rtc::scoped_refptr<VideoTrackSourceImpl>
transferAtrReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::transferAtrReq(int32_t token) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
transferCardReaderStatusReq	guest/hals/ril/reference-libril/sap_service.cpp	/^Return<void> SapImpl::transferCardReaderStatusReq(int32_t token) {$/;"	f	class:SapImpl	typeref:typename:Return<void>
triggerEvLoop	guest/hals/ril/reference-libril/ril.cpp	/^static void triggerEvLoop() {$/;"	f	namespace:android	typeref:typename:void	file:
tryWriteFmqResult	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::tryWriteFmqResult(V3_2::CaptureResult& result) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
tx_mode_time_ms	guest/hals/ril/reference-libril/ril.h	/^  uint32_t tx_mode_time_ms[RIL_NUM_TX_POWER_LEVELS];$/;"	m	struct:__anon0bfbaecf9f08	typeref:typename:uint32_t[]
tx_shm_	host/libs/audio_connector/server.h	/^  const ScopedMMap tx_shm_;$/;"	m	class:cuttlefish::AudioClientConnection	typeref:typename:const ScopedMMap
tx_socket_	host/libs/audio_connector/server.h	/^  SharedFD tx_socket_;$/;"	m	class:cuttlefish::AudioClientConnection	typeref:typename:SharedFD
ty_	host/libs/allocd/resource.h	/^  ResourceType ty_ = ResourceType::Invalid;$/;"	m	class:cuttlefish::StaticResource	typeref:typename:ResourceType
type	common/libs/confui/protocol_types.h	/^  using type = std::string;$/;"	t	struct:cuttlefish::confui::UserResponse	typeref:typename:std::string
type	guest/commands/vsoc_input_service/vsoc_input_service.h	/^  uint16_t type;$/;"	m	struct:cuttlefish::input_events::InputEvent	typeref:typename:uint16_t
type	guest/hals/ril/reference-libril/ril.h	/^    RIL_KeepaliveType type;                  \/* Type of keepalive packet *\/$/;"	m	struct:__anon0bfbaecfc508	typeref:typename:RIL_KeepaliveType
type	guest/hals/ril/reference-libril/ril.h	/^    RIL_ScanType type;                                              \/\/ Type of the scan$/;"	m	struct:__anon0bfbaecfad08	typeref:typename:RIL_ScanType
type	guest/hals/ril/reference-libril/ril.h	/^    RIL_ScanType type;$/;"	m	struct:__anon0bfbaecfb008	typeref:typename:RIL_ScanType
type	guest/hals/ril/reference-libril/ril.h	/^    char *          type;       \/* One of the PDP_type values in TS 27.007 section 10.1.1.$/;"	m	struct:__anon0bfbaecf1208	typeref:typename:char *
type	guest/hals/ril/reference-libril/ril.h	/^    char *          type;       \/* One of the PDP_type values in TS 27.007 section 10.1.1.$/;"	m	struct:__anon0bfbaecf1308	typeref:typename:char *
type	guest/hals/ril/reference-libril/ril.h	/^    char *          type;       \/* One of the PDP_type values in TS 27.007 section 10.1.1.$/;"	m	struct:__anon0bfbaecf1408	typeref:typename:char *
type	guest/hals/ril/reference-libril/ril.h	/^    char *          type;       \/* One of the PDP_type values in TS 27.007 section 10.1.1.$/;"	m	struct:__anon0bfbaecf1508	typeref:typename:char *
type	guest/hals/ril/reference-libril/ril.h	/^    char *          type;       \/* One of the PDP_type values in TS 27.007 section 10.1.1.$/;"	m	struct:__anon0bfbaecf1608	typeref:typename:char *
type	guest/hals/ril/reference-libril/ril.h	/^    int     type;               \/* "type" from 27.007 7.17 (MT only). *\/$/;"	m	struct:__anon0bfbaecf3108	typeref:typename:int
type	guest/hals/ril/reference-libril/ril.h	/^    int type;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
type	guest/hals/ril/reference-libril/ril.h	/^    int type;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
type	guest/hals/ril/reference-libril/ril.h	/^  RIL_HardwareConfig_Type type;$/;"	m	struct:__anon0bfbaecf9308	typeref:typename:RIL_HardwareConfig_Type
type	guest/hals/ril/reference-libril/ril_ex.h	/^    RIL_SOCKET_TYPE type;$/;"	m	struct:SocketListenParam	typeref:typename:RIL_SOCKET_TYPE
type	guest/hals/ril/reference-ril/reference-ril.c	/^    int type;$/;"	m	struct:__anon70d7df6f0208	typeref:typename:int	file:
type	host/commands/modem_simulator/channel_monitor.h	/^  ClientType type = RIL;$/;"	m	class:cuttlefish::Client	typeref:typename:ClientType
type	host/commands/modem_simulator/sup_service.h	/^    ClirType type;$/;"	m	struct:cuttlefish::SupService::ClirStatusInfo	typeref:typename:ClirType
type	host/frontend/webrtc/connection_observer.cpp	/^  uint16_t type;$/;"	m	struct:cuttlefish::virtio_input_event	typeref:typename:uint16_t	file:
type	host/libs/audio_connector/commands.h	/^  AudioCommandType type() const { return type_; }$/;"	f	class:cuttlefish::AudioCommand	typeref:typename:AudioCommandType
type	host/libs/image_aggregator/image_aggregator.h	/^  ImagePartitionType type;$/;"	m	struct:cuttlefish::ImagePartition	typeref:typename:ImagePartitionType
type	host/libs/image_aggregator/image_aggregator.h	/^  ImagePartitionType type;$/;"	m	struct:cuttlefish::MultipleImagePartition	typeref:typename:ImagePartitionType
typeFromTag	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^inline keymaster_tag_type_t typeFromTag(const keymaster_tag_t tag) {$/;"	f	namespace:keymaster::V4_1::__anon49de69e60111	typeref:typename:keymaster_tag_type_t
type_	common/libs/confui/packet_types.h	/^  std::string type_;$/;"	m	struct:cuttlefish::confui::packet::ParsedPacket	typeref:typename:std::string
type_	host/libs/audio_connector/commands.h	/^  const AudioCommandType type_;$/;"	m	class:cuttlefish::AudioCommand	typeref:typename:const AudioCommandType
u16cpy	host/libs/image_aggregator/image_aggregator.cc	/^void u16cpy(std::uint16_t* dest, std::uint16_t* src, std::size_t size) {$/;"	f	namespace:cuttlefish::__anon02806fd80111	typeref:typename:void
u_	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  std::vector<std::uint8_t> u_;$/;"	m	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:std::vector<std::uint8_t>
uarfcn	guest/hals/ril/reference-libril/ril.h	/^    int uarfcn; \/* 16-bit UMTS Absolute RF Channel Number, INT_MAX if unknown *\/$/;"	m	struct:__anon0bfbaecf7908	typeref:typename:int
uarfcn	guest/hals/ril/reference-libril/ril.h	/^    int uarfcn; \/* 16-bit UMTS Absolute RF Channel Number; this value must be reported *\/$/;"	m	struct:__anon0bfbaecf5b08	typeref:typename:int
uarfcn	guest/hals/ril/reference-libril/ril.h	/^    int32_t uarfcn;  \/* 16-bit UMTS Absolute RF Channel Number defined in TS 25.102 5.4.4; this/;"	m	struct:__anon0bfbaecf7b08	typeref:typename:int32_t
uboot_env_image_path	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::uboot_env_image_path() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
ucred	host/libs/allocd/resource_manager.cpp	/^  struct ucred ucred {};$/;"	s	function:cuttlefish::GetUserIDFromSock	file:
udp	common/libs/utils/network.cpp	/^  udphdr udp;$/;"	m	struct:cuttlefish::CompleteReleaseFrame	typeref:typename:udphdr	file:
udp_port_range	host/frontend/webrtc/lib/streamer.h	/^  std::pair<uint16_t, uint16_t> udp_port_range = {15550, 15558};$/;"	m	struct:cuttlefish::webrtc_streaming::StreamerConfig	typeref:typename:std::pair<uint16_t,uint16_t>
udp_port_range_	host/frontend/webrtc/lib/port_range_socket_factory.h	/^  std::pair<uint16_t, uint16_t> udp_port_range_;$/;"	m	class:cuttlefish::webrtc_streaming::PortRangeSocketFactory	typeref:typename:std::pair<uint16_t,uint16_t>
ui_options_	guest/hals/confirmationui/guest_session.h	/^    std::vector<teeui::UIOption> ui_options_;$/;"	m	class:android::hardware::confirmationui::V1_0::implementation::GuestSession	typeref:typename:std::vector<teeui::UIOption>
ui_options_	host/libs/confui/session.h	/^  std::vector<teeui::UIOption> ui_options_;$/;"	m	class:cuttlefish::confui::Session	typeref:typename:std::vector<teeui::UIOption>
ui_opts_	common/libs/confui/protocol_types.h	/^  std::vector<teeui::UIOption> ui_opts_;$/;"	m	class:cuttlefish::confui::ConfUiStartMessage	typeref:typename:std::vector<teeui::UIOption>
uid_	host/libs/allocd/resource.h	/^  uid_t uid_{};$/;"	m	class:cuttlefish::StaticResource	typeref:typename:uid_t
uid_	host/libs/allocd/resource_manager.h	/^  uid_t uid_{};$/;"	m	class:cuttlefish::Session	typeref:typename:uid_t
uimFuncs	guest/hals/ril/reference-libril/RilSapSocket.h	/^    const RIL_RadioFunctions* uimFuncs;$/;"	m	class:RilSapSocket	typeref:typename:const RIL_RadioFunctions *
uimRilEnv	guest/hals/ril/reference-libril/RilSapSocket.cpp	/^struct RIL_Env RilSapSocket::uimRilEnv = {$/;"	m	class:RilSapSocket	typeref:struct:RIL_Env
uimRilEnv	guest/hals/ril/reference-libril/RilSapSocket.h	/^        static struct RIL_Env uimRilEnv;$/;"	m	class:RilSapSocket	typeref:struct:RIL_Env
underflow	common/libs/fs/shared_fd_stream.cpp	/^int SharedFDStreambuf::underflow() {$/;"	f	class:cuttlefish::SharedFDStreambuf	typeref:typename:int
unenv_	common/libs/utils/subprocess.h	/^  std::unordered_set<std::string> unenv_{};$/;"	m	class:cuttlefish::Command	typeref:typename:std::unordered_set<std::string>
unique_id_hbk_	host/commands/secure_env/tpm_attestation_record.h	/^ std::vector<uint8_t> unique_id_hbk_;$/;"	m	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:std::vector<uint8_t>
unique_partition_guid	host/libs/image_aggregator/image_aggregator.cc	/^  std::uint8_t unique_partition_guid[16];$/;"	m	struct:cuttlefish::__anon02806fd80111::GptPartitionEntry	typeref:typename:std::uint8_t[16]	file:
universal_pin_state	guest/hals/ril/reference-libril/ril.h	/^  RIL_PinState  universal_pin_state;             \/* applicable to USIM and CSIM: RIL_PINSTATE_x/;"	m	struct:__anon0bfbaecf3908	typeref:typename:RIL_PinState
universal_pin_state	guest/hals/ril/reference-libril/ril.h	/^  RIL_PinState  universal_pin_state;             \/* applicable to USIM and CSIM: RIL_PINSTATE_x/;"	m	struct:__anon0bfbaecf3a08	typeref:typename:RIL_PinState
unlink_cb_	guest/hals/bt/remote/remote_bluetooth.h	/^  std::function<void(sp<BluetoothDeathRecipient>&)> unlink_cb_;$/;"	m	class:android::hardware::bluetooth::V1_1::remote::BluetoothHci	typeref:typename:std::function<void (sp<BluetoothDeathRecipient> &)>
unsol_mode	host/commands/modem_simulator/network_service.h	/^    RegistrationUnsolMode unsol_mode;$/;"	m	struct:cuttlefish::NetworkService::NetworkRegistrationStatus	typeref:typename:RegistrationUnsolMode
upLink	guest/hals/ril/reference-libril/ril.h	/^  char upLink;$/;"	m	struct:__anon0bfbaecf8808	typeref:typename:char
update	guest/hals/camera/stream_buffer_cache.cpp	/^void StreamBufferCache::update(const StreamBuffer& buffer) {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::StreamBufferCache	typeref:typename:void
update	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::update(uint64_t operationHandle,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
update	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^ScopedAStatus RemoteKeyMintOperation::update($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation	typeref:typename:ScopedAStatus
update	host/frontend/webrtc_operator/assets/js/app.js	/^  update() {$/;"	m	class:DeviceDetailsUpdater
updateAad	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^ScopedAStatus RemoteKeyMintOperation::updateAad($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation	typeref:typename:ScopedAStatus
updateBufferCaches	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::updateBufferCaches($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
updateDeviceHardwareDetails	host/frontend/webrtc_operator/assets/js/app.js	/^  #updateDeviceHardwareDetails(hardware) {$/;"	m	class:DeviceControlApp
updateDeviceStateDetails	host/frontend/webrtc_operator/assets/js/app.js	/^  #updateDeviceStateDetails(lidSwitchOpen, hingeAngle) {$/;"	m	class:DeviceControlApp
updateDisplayVisibility	host/frontend/webrtc_operator/assets/js/app.js	/^  #updateDisplayVisibility(displayId, powerMode) {$/;"	m	class:DeviceControlApp
updatePhysicalChannelconfigs	host/commands/modem_simulator/data_service.cpp	/^void DataService::updatePhysicalChannelconfigs(int modem_tech, int freq,$/;"	f	class:cuttlefish::DataService	typeref:typename:void
updateSimPhonebookRecords	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::updateSimPhonebookRecords($/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
updateSimPhonebookRecordsResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::updateSimPhonebookRecordsResponse(int slotId, int responseType, int serial,$/;"	f	class:radio_1_6	typeref:typename:int
updateStreamInfo	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^void VsockCameraDeviceSession::updateStreamInfo($/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession	typeref:typename:void
upgradeKey	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::upgradeKey(const hidl_vec<uint8_t>& keyBlobToUpgrade,$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
upgradeKey	guest/hals/keymint/remote/remote_keymint_device.cpp	/^ScopedAStatus RemoteKeyMintDevice::upgradeKey($/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice	typeref:typename:ScopedAStatus
upload_artifacts	tools/upload_to_gce_and_run.py	/^def upload_artifacts(args):$/;"	f
upload_artifacts	tools/upload_via_ssh.py	/^def upload_artifacts(args):$/;"	f
url	host/frontend/webrtc_operator/assets/js/index.js	/^  #url;$/;"	M	class:DeviceListApp
urns	guest/hals/ril/reference-libril/ril.h	/^    char **                      urns;       \/* The list of emergency Uniform Resource Names (U/;"	m	struct:__anon0bfbaecfb708	typeref:typename:char **
urnsNumber	guest/hals/ril/reference-libril/ril.h	/^    uint32_t                     urnsNumber;$/;"	m	struct:__anon0bfbaecfb708	typeref:typename:uint32_t
usage	guest/hals/ril/reference-ril/reference-ril.c	/^static void usage(char *s __unused)$/;"	f	typeref:typename:void	file:
usage	guest/hals/rild/rild_cuttlefish.c	/^static void usage(const char *argv0) {$/;"	f	typeref:typename:void	file:
usage	host/commands/health/health.cpp	/^int usage() {$/;"	f	typeref:typename:int
usage	tools/flash-blk-dev.sh	/^usage() {$/;"	f
usageMessage	host/commands/wmediumd_control/main.cpp	/^const std::string usageMessage =$/;"	v	typeref:typename:const std::string
useCamera	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async useCamera(in_use) {$/;"	m	class:DeviceConnection
useDevice	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async #useDevice(in_use, senders_arr, device_opt) {$/;"	m	class:DeviceConnection
useMic	host/frontend/webrtc_operator/assets/js/cf_webrtc.js	/^  async useMic(in_use) {$/;"	m	class:DeviceConnection
use_allocd	host/libs/config/cuttlefish_config_instance.cpp	/^bool CuttlefishConfig::InstanceSpecific::use_allocd() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:bool
use_bootloader	host/libs/config/cuttlefish_config.h	/^  bool use_bootloader() const { return true; };$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
use_ebtables_legacy	host/libs/allocd/alloc_utils.h	/^  bool use_ebtables_legacy = false;$/;"	m	struct:cuttlefish::EthernetNetworkConfig	typeref:typename:bool
use_ebtables_legacy_	host/libs/allocd/resource.h	/^  bool use_ebtables_legacy_ = false;$/;"	m	class:cuttlefish::EthernetIface	typeref:typename:bool
use_ebtables_legacy_	host/libs/allocd/resource_manager.h	/^  bool use_ebtables_legacy_ = false;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:bool
use_ipv4_bridge_	host/libs/allocd/resource_manager.h	/^  bool use_ipv4_bridge_ = true;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:bool
use_ipv6_bridge_	host/libs/allocd/resource_manager.h	/^  bool use_ipv6_bridge_ = true;$/;"	m	struct:cuttlefish::ResourceManager	typeref:typename:bool
use_parent_env_	common/libs/utils/subprocess.h	/^  bool use_parent_env_ = true;$/;"	m	class:cuttlefish::Command	typeref:typename:bool
used_len	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.h	/^  int used_len;$/;"	m	struct:android_wifi_priv_cmd	typeref:typename:int
used_slots_	host/commands/secure_env/tpm_resource_manager.h	/^  std::atomic<std::uint32_t> used_slots_;$/;"	m	class:cuttlefish::TpmResourceManager	typeref:typename:std::atomic<std::uint32_t>
user	guest/hals/ril/reference-libril/ril.h	/^    char* user;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:char *
user	guest/hals/ril/reference-libril/ril.h	/^    char* user;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:char *
userParam	guest/hals/ril/reference-libril/ril.cpp	/^    void *userParam;$/;"	m	struct:android::UserCallbackInfo	typeref:typename:void *	file:
userTimerCallback	guest/hals/ril/reference-libril/ril.cpp	/^static void userTimerCallback (int fd, short flags, void *param) {$/;"	f	namespace:android	typeref:typename:void	file:
user_data_	host/commands/modem_simulator/pdu_parser.h	/^  std::string user_data_;$/;"	m	class:cuttlefish::PDUParser	typeref:typename:std::string
user_input_evt_q_id_	host/libs/confui/host_server.h	/^  int user_input_evt_q_id_;  \/\/ Q id in input_multiplexer_$/;"	m	class:cuttlefish::confui::HostServer	typeref:typename:int
userdata_format	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::userdata_format() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
username	guest/hals/ril/reference-libril/ril.h	/^    char *username;             \/* the username for APN, or NULL *\/$/;"	m	struct:__anon0bfbaecfc008	typeref:typename:char *
username	guest/hals/ril/reference-libril/ril.h	/^    char *username;             \/* the username for APN, or NULL *\/$/;"	m	struct:__anon0bfbaecfc108	typeref:typename:char *
username	tools/create_base_image.go	/^var username string$/;"	v	package:main	typeref:typename:string
utf8Decoder	host/frontend/webrtc_operator/assets/js/adb.js	/^let utf8Decoder = new TextDecoder();$/;"	v
utf8Encoder	host/frontend/webrtc_operator/assets/js/adb.js	/^let utf8Encoder = new TextEncoder();$/;"	v
utran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_UtranBands utran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfab08::__anon0bfbaecfac0a	typeref:typename:RIL_UtranBands[]
utran_bands	guest/hals/ril/reference-libril/ril.h	/^        RIL_UtranBands utran_bands[MAX_BANDS];$/;"	m	union:__anon0bfbaecfae08::__anon0bfbaecfaf0a	typeref:typename:RIL_UtranBands[]
uuid	guest/hals/ril/reference-libril/ril.h	/^  char uuid[MAX_UUID_LENGTH];$/;"	m	struct:__anon0bfbaecf9308	typeref:typename:char[]
uuid	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::uuid() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
uusData	guest/hals/ril/reference-libril/ril.h	/^  char *          uusData;    \/* UUS Data *\/$/;"	m	struct:__anon0bfbaecf0f08	typeref:typename:char *
uusDcs	guest/hals/ril/reference-libril/ril.h	/^  RIL_UUS_DCS     uusDcs;     \/* UUS Data Coding Scheme *\/$/;"	m	struct:__anon0bfbaecf0f08	typeref:typename:RIL_UUS_DCS
uusInfo	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_Info *  uusInfo;    \/* NULL or Pointer to User-User Signaling Information *\/$/;"	m	struct:__anon0bfbaecf1108	typeref:typename:RIL_UUS_Info *
uusInfo	guest/hals/ril/reference-libril/ril.h	/^    RIL_UUS_Info *  uusInfo;    \/* NULL or Pointer to User-User Signaling Information *\/$/;"	m	struct:__anon0bfbaecf1c08	typeref:typename:RIL_UUS_Info *
uusLength	guest/hals/ril/reference-libril/ril.h	/^  int             uusLength;  \/* Length of UUS Data *\/$/;"	m	struct:__anon0bfbaecf0f08	typeref:typename:int
uusType	guest/hals/ril/reference-libril/ril.h	/^  RIL_UUS_Type    uusType;    \/* UUS Type *\/$/;"	m	struct:__anon0bfbaecf0f08	typeref:typename:RIL_UUS_Type
v_	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  std::vector<std::uint8_t> v_;$/;"	m	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:std::vector<std::uint8_t>
valid	guest/hals/camera/cached_stream_buffer.h	/^  bool valid() const { return buffer_ != nullptr; }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer	typeref:typename:bool
validate_redirects	common/libs/utils/subprocess.cpp	/^bool validate_redirects($/;"	f	namespace:cuttlefish::__anon39e8abf00111	typeref:typename:bool
validationComponent	host/commands/run_cvd/validate.cpp	/^validationComponent() {$/;"	f	namespace:cuttlefish	typeref:typename:fruit::Component<fruit::Required<const CuttlefishConfig::InstanceSpecific>>
value	common/libs/utils/flag_parser.h	/^  std::string value;$/;"	m	struct:cuttlefish::FlagMatch	typeref:typename:std::string
value	guest/commands/vsoc_input_service/vsoc_input_service.h	/^  uint32_t value;$/;"	m	struct:cuttlefish::input_events::InputEvent	typeref:typename:uint32_t
value	guest/hals/ril/reference-libril/ril.h	/^  char *        value;$/;"	m	struct:__anon0bfbaecf8d08	typeref:typename:char *
value	host/frontend/webrtc/connection_observer.cpp	/^  int32_t value;$/;"	m	struct:cuttlefish::virtio_input_event	typeref:typename:int32_t	file:
value	host/libs/confui/sign_utils.h	/^    static constexpr bool value =$/;"	m	struct:cuttlefish::confui::support::ByteBufferProxy::has_data	typeref:typename:bool
value	host/libs/screen_connector/screen_connector_common.h	/^  static constexpr const bool value =$/;"	m	struct:cuttlefish::is_movable	typeref:typename:const bool
value_	common/libs/fs/shared_fd.h	/^  std::shared_ptr<FileInstance> value_;$/;"	m	class:cuttlefish::SharedFD	typeref:typename:std::shared_ptr<FileInstance>
value_	common/libs/fs/shared_fd.h	/^  std::weak_ptr<FileInstance> value_;$/;"	m	class:cuttlefish::WeakFD	typeref:typename:std::weak_ptr<FileInstance>
value_	common/libs/fs/shared_select.h	/^  std::set<SharedFD> value_;$/;"	m	class:cuttlefish::SharedFDSet	typeref:typename:std::set<SharedFD>
vb_params_	host/commands/secure_env/tpm_attestation_record.h	/^ VerifiedBootParams vb_params_;$/;"	m	class:cuttlefish::TpmAttestationRecordContext	typeref:typename:VerifiedBootParams
vehicle_hal_server_port	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::vehicle_hal_server_port() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
vendor_cause	guest/hals/ril/reference-libril/ril.h	/^  char *                vendor_cause;$/;"	m	struct:__anon0bfbaecf2e08	typeref:typename:char *
vendor_id_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  const uint16_t vendor_id_;$/;"	m	class:cuttlefish_input_service::VirtualDeviceBase	typeref:typename:const uint16_t
vendor_patchlevel_	host/commands/secure_env/tpm_key_blob_maker.h	/^  std::optional<uint32_t> vendor_patchlevel_;$/;"	m	class:cuttlefish::TpmKeyBlobMaker	typeref:typename:std::optional<uint32_t>
vendor_patchlevel_	host/commands/secure_env/tpm_keymaster_context.h	/^  std::optional<uint32_t> vendor_patchlevel_;$/;"	m	class:cuttlefish::TpmKeymasterContext	typeref:typename:std::optional<uint32_t>
verbose	tools/create_base_image.go	/^var verbose bool$/;"	v	package:main	typeref:typename:bool
verbose_	common/libs/utils/subprocess.h	/^  bool verbose_;$/;"	m	class:cuttlefish::SubprocessOptions	typeref:typename:bool
verify	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^Return<void> RemoteGateKeeperDevice::verify($/;"	f	class:gatekeeper::RemoteGateKeeperDevice	typeref:typename:Return<void>
verifyAuthorization	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^Return<void> RemoteKeymaster4Device::verifyAuthorization($/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device	typeref:typename:Return<void>
version	apex/com.google.aosp_cf_x86_64_phone.rros/apex_manifest.json	/^  "version": 1$/;"	n
version	apex/com.google.cf.bt/manifest.json	/^  "version": 1$/;"	n
version	apex/com.google.cf.input.config/apex_manifest.json	/^  "version": 1$/;"	n
version	apex/com.google.cf.rild/apex_manifest.json	/^  "version": 1$/;"	n
version	apex/com.google.cf.wifi/apex_manifest.json	/^  "version": 1$/;"	n
version	guest/hals/ril/reference-libril/ril.h	/^    int version;            \/\/ Version of structure, RIL_RADIO_CAPABILITY_VERSION$/;"	m	struct:__anon0bfbaecf0a08	typeref:typename:int
version	guest/hals/ril/reference-libril/ril.h	/^    int version;        \/* set to RIL_VERSION *\/$/;"	m	struct:__anon0bfbaecfbf08	typeref:typename:int
version	host/libs/allocd/request.h	/^  uint16_t version;  \/\/\/ used to differentiate between allocd feature sets$/;"	m	struct:cuttlefish::RequestHeader	typeref:typename:uint16_t
version	host/libs/audio_connector/shm_layout.h	/^  uint32_t version;$/;"	m	struct:cuttlefish::VioSConfig	typeref:typename:uint32_t
version	host/libs/image_aggregator/cdisk_spec.proto	/^  uint64 version = 1;$/;"	f	message:CompositeDisk	typeref:typename:uint64
version	host/libs/image_aggregator/image_aggregator.cc	/^  Be32 version;$/;"	m	struct:cuttlefish::__anon02806fd80111::QCowHeader	typeref:typename:Be32	file:
version	tests/hal/hal_implementation_test.cpp	/^  size_t version;$/;"	m	struct:VersionedAidlPackage	typeref:typename:size_t	file:
version	tools/create_base_image.go	/^var version string$/;"	v	package:main	typeref:typename:string
version_	guest/commands/vsoc_input_service/virtual_device_base.h	/^  const uint16_t version_;$/;"	m	class:cuttlefish_input_service::VirtualDeviceBase	typeref:typename:const uint16_t
vhost_net	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::vhost_net() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
vhost_user_mac80211_hwsim	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::vhost_user_mac80211_hwsim() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
video_encoder_	host/frontend/webrtc/lib/local_recorder.cpp	/^  std::unique_ptr<webrtc::VideoEncoder> video_encoder_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:std::unique_ptr<webrtc::VideoEncoder>	file:
video_track_	host/frontend/webrtc/lib/client_handler.cpp	/^  webrtc::VideoTrackInterface* video_track_;$/;"	m	class:cuttlefish::webrtc_streaming::ClientVideoTrackImpl	typeref:typename:webrtc::VideoTrackInterface *	file:
video_track_number_	host/frontend/webrtc/lib/local_recorder.cpp	/^  uint64_t video_track_number_;$/;"	m	class:cuttlefish::webrtc_streaming::LocalRecorder::Display	typeref:typename:uint64_t	file:
virtio_gpu_metadata_	host/libs/wayland/wayland_surface.h	/^    VirtioGpuMetadata virtio_gpu_metadata_;$/;"	m	struct:wayland::Surface::State	typeref:typename:VirtioGpuMetadata
virtio_gpu_metadata_get_surface_metadata	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^void virtio_gpu_metadata_get_surface_metadata($/;"	f	namespace:wayland::__anon027348120111	typeref:typename:void
virtio_gpu_metadata_implementation	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^    virtio_gpu_metadata_implementation = {$/;"	v	namespace:wayland::__anon027348120111	typeref:typename:const struct wp_virtio_gpu_metadata_v1_interface
virtio_gpu_surface_metadata_implementation	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^    virtio_gpu_surface_metadata_implementation = {$/;"	v	namespace:wayland::__anon027348120111	typeref:typename:const struct wp_virtio_gpu_surface_metadata_v1_interface
virtio_gpu_surface_metadata_set_scanout_id	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^void virtio_gpu_surface_metadata_set_scanout_id($/;"	f	namespace:wayland::__anon027348120111	typeref:typename:void
virtio_input_event	host/frontend/webrtc/connection_observer.cpp	/^struct virtio_input_event {$/;"	s	namespace:cuttlefish	file:
virtio_snd_chmap_info	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_chmap_info {$/;"	s	namespace:cuttlefish
virtio_snd_hdr	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_hdr {$/;"	s	namespace:cuttlefish
virtio_snd_info	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_info {$/;"	s	namespace:cuttlefish
virtio_snd_jack_info	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_jack_info {$/;"	s	namespace:cuttlefish
virtio_snd_pcm_hdr	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_pcm_hdr {$/;"	s	namespace:cuttlefish
virtio_snd_pcm_info	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_pcm_info {$/;"	s	namespace:cuttlefish
virtio_snd_pcm_set_params	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_pcm_set_params {$/;"	s	namespace:cuttlefish
virtio_snd_pcm_status	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_pcm_status {$/;"	s	namespace:cuttlefish
virtio_snd_pcm_xfer	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_pcm_xfer {$/;"	s	namespace:cuttlefish
virtio_snd_query_info	host/libs/audio_connector/shm_layout.h	/^struct virtio_snd_query_info {$/;"	s	namespace:cuttlefish
virtual_disk_paths	host/libs/config/cuttlefish_config_instance.cpp	/^std::vector<std::string> CuttlefishConfig::InstanceSpecific::virtual_disk_paths() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::vector<std::string>
virtual_keyboard_	guest/commands/vsoc_input_service/vsoc_input_service.h	/^  std::shared_ptr<VirtualKeyboard> virtual_keyboard_;$/;"	m	class:cuttlefish_input_service::VSoCInputService	typeref:typename:std::shared_ptr<VirtualKeyboard>
virtual_power_button_	guest/commands/vsoc_input_service/vsoc_input_service.h	/^  std::shared_ptr<VirtualPowerButton> virtual_power_button_;$/;"	m	class:cuttlefish_input_service::VSoCInputService	typeref:typename:std::shared_ptr<VirtualPowerButton>
virtual_touchscreen_	guest/commands/vsoc_input_service/vsoc_input_service.h	/^  std::shared_ptr<VirtualTouchScreen> virtual_touchscreen_;$/;"	m	class:cuttlefish_input_service::VSoCInputService	typeref:typename:std::shared_ptr<VirtualTouchScreen>
vm_manager	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::vm_manager() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
vm_manager	host/libs/vm_manager/crosvm_manager.cpp	/^namespace vm_manager {$/;"	n	namespace:cuttlefish	file:
vm_manager	host/libs/vm_manager/crosvm_manager.h	/^namespace vm_manager {$/;"	n	namespace:cuttlefish
vm_manager	host/libs/vm_manager/host_configuration.cpp	/^namespace vm_manager {$/;"	n	namespace:cuttlefish	file:
vm_manager	host/libs/vm_manager/host_configuration.h	/^namespace vm_manager {$/;"	n	namespace:cuttlefish
vm_manager	host/libs/vm_manager/qemu_manager.cpp	/^namespace vm_manager {$/;"	n	namespace:cuttlefish	file:
vm_manager	host/libs/vm_manager/qemu_manager.h	/^namespace vm_manager {$/;"	n	namespace:cuttlefish
vm_manager	host/libs/vm_manager/vm_manager.cpp	/^namespace vm_manager {$/;"	n	namespace:cuttlefish	file:
vm_manager	host/libs/vm_manager/vm_manager.h	/^namespace vm_manager {$/;"	n	namespace:cuttlefish
vmm_	host/commands/run_cvd/launch.cc	/^  VmManager& vmm_;$/;"	m	class:cuttlefish::VmmCommands	typeref:typename:VmManager &	file:
vmm_type	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional VmmType vmm_type = 8;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:VmmType
vmm_version	host/commands/metrics/proto/cf_metrics_event.proto	/^  optional string vmm_version = 9;$/;"	f	message:cuttlefish.MetricsEvent	typeref:typename:string
vnet	common/libs/utils/network.cpp	/^  std::uint8_t vnet[SIZE_OF_VIRTIO_NET_HDR_V1];$/;"	m	struct:cuttlefish::CompleteReleaseFrame	typeref:typename:std::uint8_t[]	file:
voiceRadioTechChangedInd	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::voiceRadioTechChangedInd(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
voice_registration_status_	host/commands/modem_simulator/network_service.h	/^  NetworkRegistrationStatus voice_registration_status_;$/;"	m	class:cuttlefish::NetworkService	typeref:typename:NetworkRegistrationStatus
vsock_guest_cid	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::vsock_guest_cid() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
w	host/libs/confui/host_renderer.h	/^    std::uint32_t x, y, w, h;  \/\/ (x, y) is the top left$/;"	m	struct:cuttlefish::confui::ConfUiRenderer::Boundary	typeref:typename:std::uint32_t
w	host/libs/wayland/wayland_surface.h	/^    int32_t w;$/;"	m	struct:wayland::Surface::Region	typeref:typename:int32_t
w_	host/libs/confui/host_renderer.h	/^  int w_;$/;"	m	class:cuttlefish::confui::TeeUiFrameWrapper	typeref:typename:int
waitForClose	guest/hals/ril/reference-ril/reference-ril.c	/^static void waitForClose()$/;"	f	typeref:typename:void	file:
waitForInstance	tools/create_base_image.go	/^func waitForInstance(PZ string) {$/;"	f	package:main
waitForSupplicantState	tests/wifi/src/com/android/cuttlefish/wifi/tests/WifiE2eTests.java	/^    private void waitForSupplicantState(SupplicantState... expectedStates) {$/;"	m	class:WifiE2eTests	file:
waitTime	guest/hals/ril/reference-libril/ril.h	/^    int waitTime;$/;"	m	struct:__anon0bfbaecf9d08	typeref:typename:int
waitTime	guest/hals/ril/reference-libril/ril.h	/^    int waitTime;$/;"	m	struct:__anon0bfbaecf9e08	typeref:typename:int
waitYUVFrame	guest/hals/camera/vsock_frame_provider.cpp	/^bool VsockFrameProvider::waitYUVFrame(unsigned int max_wait_ms) {$/;"	f	class:cuttlefish::VsockFrameProvider	typeref:typename:bool
wait_for_instance	tools/create_base_image_hostlib.sh	/^wait_for_instance() {$/;"	f
wakeTimeoutCallback	guest/hals/ril/reference-libril/ril.cpp	/^wakeTimeoutCallback (void *param) {$/;"	f	namespace:android	typeref:typename:void	file:
wakeType	guest/hals/ril/reference-libril/ril.cpp	/^    WakeType wakeType;$/;"	m	struct:android::__anonf9a2982a0108	typeref:typename:WakeType	file:
wants_	host/frontend/webrtc/lib/client_handler.cpp	/^  rtc::VideoSinkWants wants_ = {};$/;"	m	class:cuttlefish::webrtc_streaming::ClientVideoTrackImpl	typeref:typename:rtc::VideoSinkWants	file:
wasAckSent	guest/hals/ril/reference-libril/ril_internal.h	/^    int wasAckSent;    \/\/ Indicates whether an ack was sent earlier$/;"	m	struct:android::RequestInfo	typeref:typename:int
watch_table	guest/hals/ril/reference-libril/ril_event.cpp	/^static struct ril_event * watch_table[MAX_FD_EVENTS];$/;"	v	typeref:struct:ril_event * []	file:
wayland	host/libs/wayland/wayland_compositor.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_compositor.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_dmabuf.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_dmabuf.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_seat.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_seat.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_server.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_server.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_shell.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_shell.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_subcompositor.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_subcompositor.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_surface.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_surface.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_surfaces.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_surfaces.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_utils.h	/^namespace wayland {$/;"	n
wayland	host/libs/wayland/wayland_virtio_gpu_metadata.cpp	/^namespace wayland {$/;"	n	file:
wayland	host/libs/wayland/wayland_virtio_gpu_metadata.h	/^namespace wayland {$/;"	n
wbr	host/libs/allocd/request.h	/^  wbr,          \/\/ wireless bridge$/;"	e	enum:cuttlefish::IfaceType
wcdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoWcdma   wcdma;$/;"	m	union:__anon0bfbaecf6e08::__anon0bfbaecf6f0a	typeref:typename:RIL_CellInfoWcdma
wcdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoWcdma_v12   wcdma;$/;"	m	union:__anon0bfbaecf7008::__anon0bfbaecf710a	typeref:typename:RIL_CellInfoWcdma_v12
wcdma	guest/hals/ril/reference-libril/ril.h	/^    RIL_CellInfoWcdma_v12   wcdma;$/;"	m	union:__anon0bfbaecf7208::__anon0bfbaecf730a	typeref:typename:RIL_CellInfoWcdma_v12
wcdma_ber	host/commands/modem_simulator/network_service.h	/^    int wcdma_ber;   \/* Refer gsm_ber *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
wcdma_rssi	host/commands/modem_simulator/network_service.h	/^    int wcdma_rssi;  \/* Refer gsm_rssi *\/$/;"	m	struct:cuttlefish::NetworkService::SignalStrength	typeref:typename:int
weak_by_ptr_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::map<void*, std::weak_ptr<WsConnectionImpl>> weak_by_ptr_;$/;"	m	class:WsConnectionContextImpl	typeref:typename:std::map<void *,std::weak_ptr<WsConnectionImpl>>	file:
weak_display_handler_	host/frontend/webrtc/connection_observer.cpp	/^  std::weak_ptr<DisplayHandler> weak_display_handler_;$/;"	m	class:cuttlefish::ConnectionObserverImpl	typeref:typename:std::weak_ptr<DisplayHandler>	file:
weak_display_handler_	host/frontend/webrtc/connection_observer.h	/^  std::weak_ptr<DisplayHandler> weak_display_handler_;$/;"	m	class:cuttlefish::CfConnectionObserverFactory	typeref:typename:std::weak_ptr<DisplayHandler>
weak_this	host/frontend/webrtc/lib/ws_connection.cpp	/^    std::weak_ptr<WsConnectionImpl> weak_this;$/;"	m	struct:WsConnectionImpl::CreateConnectionSul	typeref:typename:std::weak_ptr<WsConnectionImpl>	file:
webrtc	host/frontend/webrtc/lib/local_recorder.h	/^namespace webrtc {$/;"	n
webrtc_assets_dir	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::webrtc_assets_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
webrtc_certs_dir	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::webrtc_certs_dir() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
webrtc_device_id	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::webrtc_device_id() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
webrtc_enable_adb_websocket	host/libs/config/cuttlefish_config.cpp	/^bool CuttlefishConfig::webrtc_enable_adb_websocket() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:bool
webrtc_signaling	host/frontend/webrtc_operator/constants/signaling_constants.h	/^namespace webrtc_signaling {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/adb_handler.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/adb_handler.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/bluetooth_handler.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/bluetooth_handler.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/audio_device.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/audio_device.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/audio_frame_buffer.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/audio_sink.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/audio_source.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/audio_track_source_impl.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/audio_track_source_impl.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/camera_streamer.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/camera_streamer.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/client_handler.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/client_handler.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/connection_observer.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/local_recorder.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/local_recorder.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/port_range_socket_factory.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/port_range_socket_factory.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/streamer.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/streamer.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/utils.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/utils.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/video_frame_buffer.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/video_sink.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/video_track_source_impl.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_streaming	host/frontend/webrtc/lib/vp8only_encoder_factory.cpp	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish	file:
webrtc_streaming	host/frontend/webrtc/lib/vp8only_encoder_factory.h	/^namespace webrtc_streaming {$/;"	n	namespace:cuttlefish
webrtc_tcp_port_range	host/libs/config/cuttlefish_config.cpp	/^std::pair<uint16_t, uint16_t> CuttlefishConfig::webrtc_tcp_port_range() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::pair<uint16_t,uint16_t>
webrtc_udp_port_range	host/libs/config/cuttlefish_config.cpp	/^std::pair<uint16_t, uint16_t> CuttlefishConfig::webrtc_udp_port_range() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::pair<uint16_t,uint16_t>
websocket	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  #websocket;$/;"	M	class:WebsocketConnector
websocketUrl	host/frontend/webrtc_operator/assets/js/server_connector.js	/^function websocketUrl(path) {$/;"	f
when	host/commands/modem_simulator/thread_looper.h	/^      std::chrono::steady_clock::time_point when;$/;"	m	struct:cuttlefish::ThreadLooper::Event	typeref:typename:std::chrono::steady_clock::time_point
width	common/libs/device_config/device_config.proto	/^    int32 width = 1;$/;"	f	message:cuttlefish.DeviceConfig.DisplayConfig	typeref:typename:int32
width	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^int CvdVideoFrameBuffer::width() const { return width_; }$/;"	f	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:int
width	host/frontend/webrtc/lib/streamer.cpp	/^  int width;$/;"	m	struct:cuttlefish::webrtc_streaming::__anonab9390d10111::DisplayDescriptor	typeref:typename:int	file:
width	host/frontend/webrtc/lib/video_track_source_impl.cpp	/^  int width() const override { return frame_buffer_->width(); }$/;"	f	class:cuttlefish::webrtc_streaming::__anone9f9f83a0111::VideoFrameWrapper	typeref:typename:int	file:
width	host/libs/config/cuttlefish_config.h	/^    int width;$/;"	m	struct:cuttlefish::CuttlefishConfig::DisplayConfig	typeref:typename:int
width_	guest/hals/camera/vsock_camera_metadata.h	/^  int32_t width_;$/;"	m	class:android::hardware::camera::device::V3_4::implementation::VsockCameraMetadata	typeref:typename:int32_t
width_	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  const int width_;$/;"	m	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:const int
width_	host/frontend/webrtc/lib/video_track_source_impl.h	/^  int width_;$/;"	m	class:cuttlefish::webrtc_streaming::VideoTrackSourceImpl	typeref:typename:int
wifi_mac_prefix	host/libs/config/cuttlefish_config_instance.cpp	/^int CuttlefishConfig::InstanceSpecific::wifi_mac_prefix() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:int
wifi_tap_name	host/libs/config/cuttlefish_config_instance.cpp	/^std::string CuttlefishConfig::InstanceSpecific::wifi_tap_name() const {$/;"	f	class:cuttlefish::CuttlefishConfig::InstanceSpecific	typeref:typename:std::string
wireless_tap	host/commands/assemble_cvd/alloc.h	/^  IfaceData wireless_tap;$/;"	m	struct:cuttlefish::IfaceConfig	typeref:typename:IfaceData
wmediumd_api_server_socket	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::wmediumd_api_server_socket() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
wmediumd_config	host/libs/config/cuttlefish_config.cpp	/^std::string CuttlefishConfig::wmediumd_config() const {$/;"	f	class:cuttlefish::CuttlefishConfig	typeref:typename:std::string
wmediumd_socket_	host/libs/wmediumd_controller/wmediumd_controller.h	/^  SharedFD wmediumd_socket_;$/;"	m	class:cuttlefish::WmediumdController	typeref:typename:SharedFD
worker_thread_	host/frontend/webrtc/lib/streamer.cpp	/^  std::unique_ptr<rtc::Thread> worker_thread_;$/;"	m	class:cuttlefish::webrtc_streaming::Streamer::Impl	typeref:typename:std::unique_ptr<rtc::Thread>	file:
wpa_driver_get_p2p_noa	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.c	/^int wpa_driver_get_p2p_noa(void* priv, u8* buf, size_t len) {$/;"	f	typeref:typename:int
wpa_driver_nl80211_driver_cmd	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.c	/^int wpa_driver_nl80211_driver_cmd(void* priv, char* cmd, char* buf,$/;"	f	typeref:typename:int
wpa_driver_set_ap_wps_p2p_ie	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.c	/^int wpa_driver_set_ap_wps_p2p_ie(void* priv, const struct wpabuf* beacon,$/;"	f	typeref:typename:int
wpa_driver_set_p2p_noa	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.c	/^int wpa_driver_set_p2p_noa(void* priv, u8 count, int start, int duration) {$/;"	f	typeref:typename:int
wpa_driver_set_p2p_ps	guest/libs/wpa_supplicant_8_lib/driver_cmd_nl80211.c	/^int wpa_driver_set_p2p_ps(void* priv, int legacy_ps, int opp_ps, int ctwindow) {$/;"	f	typeref:typename:int
wrapped_	host/commands/secure_env/encrypted_serializable.h	/^  keymaster::Serializable& wrapped_;$/;"	m	class:cuttlefish::EncryptedSerializable	typeref:typename:keymaster::Serializable &
wrapped_	host/commands/secure_env/hmac_serializable.h	/^  Serializable* wrapped_;$/;"	m	class:cuttlefish::HmacSerializable	typeref:typename:Serializable *
wrapped_	host/commands/secure_env/proxy_keymaster_context.h	/^  KeymasterContext& wrapped_;$/;"	m	class:cuttlefish::ProxyKeymasterContext	typeref:typename:KeymasterContext &
writeCtrlZ	guest/hals/ril/reference-ril/atchannel.c	/^static int writeCtrlZ (const char *s)$/;"	f	typeref:typename:int	file:
writeJsonEventMessage	guest/hals/camera/vsock_frame_provider.cpp	/^bool writeJsonEventMessage($/;"	f	namespace:cuttlefish::__anon2426deb60111	typeref:typename:bool
writeSmsToRuim	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::writeSmsToRuim(int32_t serial, const CdmaSmsWriteArgs& cdmaSms) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
writeSmsToRuimResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::writeSmsToRuimResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
writeSmsToSim	guest/hals/ril/reference-libril/ril_service.cpp	/^Return<void> RadioImpl_1_6::writeSmsToSim(int32_t serial, const SmsWriteArgs& smsWriteArgs) {$/;"	f	class:RadioImpl_1_6	typeref:typename:Return<void>
writeSmsToSimResponse	guest/hals/ril/reference-libril/ril_service.cpp	/^int radio_1_6::writeSmsToSimResponse(int slotId,$/;"	f	class:radio_1_6	typeref:typename:int
write_mutex	host/commands/modem_simulator/channel_monitor.h	/^  std::mutex write_mutex;$/;"	m	class:cuttlefish::Client	typeref:typename:std::mutex
write_mutex_	common/libs/utils/vsock_connection.h	/^  std::recursive_mutex write_mutex_;$/;"	m	class:cuttlefish::VsockConnection	typeref:typename:std::recursive_mutex
write_pipe_	host/commands/modem_simulator/channel_monitor.h	/^  cuttlefish::SharedFD write_pipe_;$/;"	m	class:cuttlefish::ChannelMonitor	typeref:typename:cuttlefish::SharedFD
write_queue_	host/commands/console_forwarder/main.cpp	/^      write_queue_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:std::deque<std::pair<SharedFD,std::shared_ptr<std::vector<char>>>>	file:
write_queue_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::deque<WsBuffer> write_queue_;$/;"	m	class:WsConnectionImpl	typeref:typename:std::deque<WsBuffer>	file:
write_queue_mutex_	host/commands/console_forwarder/main.cpp	/^  std::mutex write_queue_mutex_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:std::mutex	file:
write_queue_mutex_	host/frontend/webrtc/lib/ws_connection.cpp	/^  std::mutex write_queue_mutex_;$/;"	m	class:WsConnectionImpl	typeref:typename:std::mutex	file:
writeline	guest/hals/ril/reference-ril/atchannel.c	/^static int writeline (const char *s)$/;"	f	typeref:typename:int	file:
writer_thread_	host/commands/console_forwarder/main.cpp	/^  std::thread writer_thread_;$/;"	m	class:cuttlefish::ConsoleForwarder	typeref:typename:std::thread	file:
wsSendJson	host/frontend/webrtc_operator/assets/js/server_connector.js	/^  async #wsSendJson(obj) {$/;"	m	class:WebsocketConnector
wsi_	host/frontend/webrtc/lib/ws_connection.cpp	/^  struct lws* wsi_;$/;"	m	class:WsConnectionImpl	typeref:struct:lws *	file:
wsi_	host/libs/websocket/websocket_handler.h	/^  struct lws* wsi_;$/;"	m	class:cuttlefish::DynHandler	typeref:struct:lws *
wsi_	host/libs/websocket/websocket_handler.h	/^  struct lws* wsi_;$/;"	m	class:cuttlefish::WebSocketHandler	typeref:struct:lws *
wtap	host/libs/allocd/request.h	/^  wtap,         \/\/ wireless tap$/;"	e	enum:cuttlefish::IfaceType
x	host/frontend/webrtc/connection_observer.cpp	/^  int32_t x;$/;"	m	struct:cuttlefish::multitouch_slot	typeref:typename:int32_t	file:
x	host/libs/confui/host_renderer.h	/^    std::uint32_t x, y, w, h;  \/\/ (x, y) is the top left$/;"	m	struct:cuttlefish::confui::ConfUiRenderer::Boundary	typeref:typename:std::uint32_t
x	host/libs/wayland/wayland_surface.h	/^    int32_t x;$/;"	m	struct:wayland::Surface::Region	typeref:typename:int32_t
x_	common/libs/confui/protocol_types.h	/^  int x_;$/;"	m	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:int
x_res	shared/config/config_foldable.json	/^	"x_res" : 1768,$/;"	n
x_res	shared/config/config_phone.json	/^	"x_res" : 720,$/;"	n
x_res	shared/config/config_tablet.json	/^	"x_res" : 2560,$/;"	n
x_res	shared/config/config_tv.json	/^	"x_res" : 1920,$/;"	n
xdg_popup_destroy	host/libs/wayland/wayland_shell.cpp	/^void xdg_popup_destroy(wl_client*, wl_resource* popup) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_popup_grab	host/libs/wayland/wayland_shell.cpp	/^void xdg_popup_grab(wl_client*, wl_resource* popup, wl_resource* seat,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_popup_implementation	host/libs/wayland/wayland_shell.cpp	/^const struct xdg_popup_interface xdg_popup_implementation = {$/;"	v	namespace:wayland::__anond268d4620111	typeref:typename:const struct xdg_popup_interface
xdg_positioner_destroy	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_destroy(wl_client*, wl_resource* positioner) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_positioner_implementation	host/libs/wayland/wayland_shell.cpp	/^const struct xdg_positioner_interface xdg_positioner_implementation = {$/;"	v	namespace:wayland::__anond268d4620111	typeref:typename:const struct xdg_positioner_interface
xdg_positioner_set_anchor	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_set_anchor(wl_client*, wl_resource* positioner,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_positioner_set_anchor_rect	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_set_anchor_rect(wl_client*, wl_resource* positioner,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_positioner_set_constraint_adjustment	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_set_constraint_adjustment(wl_client*,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_positioner_set_gravity	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_set_gravity(wl_client*, wl_resource* positioner,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_positioner_set_offset	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_set_offset(wl_client*, wl_resource* positioner, int32_t x,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_positioner_set_size	host/libs/wayland/wayland_shell.cpp	/^void xdg_positioner_set_size(wl_client*, wl_resource* positioner, int32_t w,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_shell_create_positioner	host/libs/wayland/wayland_shell.cpp	/^void xdg_shell_create_positioner(wl_client* client, wl_resource* shell,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_shell_destroy	host/libs/wayland/wayland_shell.cpp	/^void xdg_shell_destroy(wl_client*, wl_resource* shell) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_shell_get_xdg_surface	host/libs/wayland/wayland_shell.cpp	/^void xdg_shell_get_xdg_surface(wl_client* client, wl_resource* shell,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_shell_implementation	host/libs/wayland/wayland_shell.cpp	/^const struct xdg_wm_base_interface xdg_shell_implementation = {$/;"	v	namespace:wayland::__anond268d4620111	typeref:typename:const struct xdg_wm_base_interface
xdg_shell_pong	host/libs/wayland/wayland_shell.cpp	/^void xdg_shell_pong(wl_client*, wl_resource* shell, uint32_t serial) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_surface_ack_configure	host/libs/wayland/wayland_shell.cpp	/^void xdg_surface_ack_configure(wl_client*, wl_resource* surface,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_surface_destroy	host/libs/wayland/wayland_shell.cpp	/^void xdg_surface_destroy(wl_client*, wl_resource* surface) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_surface_get_popup	host/libs/wayland/wayland_shell.cpp	/^void xdg_surface_get_popup(wl_client* client, wl_resource* surface, uint32_t id,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_surface_get_toplevel	host/libs/wayland/wayland_shell.cpp	/^void xdg_surface_get_toplevel(wl_client* client, wl_resource* surface,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_surface_implementation	host/libs/wayland/wayland_shell.cpp	/^const struct xdg_surface_interface xdg_surface_implementation = {$/;"	v	namespace:wayland::__anond268d4620111	typeref:typename:const struct xdg_surface_interface
xdg_surface_set_window_geometry	host/libs/wayland/wayland_shell.cpp	/^void xdg_surface_set_window_geometry(wl_client*, wl_resource* surface,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_destroy	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_destroy(wl_client*, wl_resource* toplevel) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_implementation	host/libs/wayland/wayland_shell.cpp	/^const struct xdg_toplevel_interface xdg_toplevel_implementation = {$/;"	v	namespace:wayland::__anond268d4620111	typeref:typename:const struct xdg_toplevel_interface
xdg_toplevel_move	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_move(wl_client*, wl_resource* toplevel, wl_resource* seat,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_resize	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_resize(wl_client*, wl_resource* toplevel, wl_resource* seat,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_app_id	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_app_id(wl_client*, wl_resource* toplevel,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_fullscreen	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_fullscreen(wl_client*, wl_resource* toplevel,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_max_size	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_max_size(wl_client*, wl_resource* toplevel, int32_t w,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_maximized	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_maximized(wl_client*, wl_resource* toplevel) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_min_size	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_min_size(wl_client*, wl_resource* toplevel, int32_t w,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_minimized	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_minimized(wl_client*, wl_resource* toplevel) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_parent	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_parent(wl_client*, wl_resource* toplevel,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_set_title	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_set_title(wl_client*, wl_resource* toplevel,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_show_window_menu	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_show_window_menu(wl_client*, wl_resource* toplevel,$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_unset_fullscreen	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_unset_fullscreen(wl_client*, wl_resource* toplevel) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xdg_toplevel_unset_maximized	host/libs/wayland/wayland_shell.cpp	/^void xdg_toplevel_unset_maximized(wl_client*, wl_resource* toplevel) {$/;"	f	namespace:wayland::__anond268d4620111	typeref:typename:void
xi	shared/auto/audio_policy_configuration.xml	/^<audioPolicyConfiguration version="1.0" xmlns:xi="http:\/\/www.w3.org\/2001\/XInclude">$/;"	n	uri:http://www.w3.org/2001/XInclude
xid	common/libs/utils/network.cpp	/^  __be32 xid;$/;"	m	struct:cuttlefish::Dhcp4ReleaseMessage	typeref:typename:__be32	file:
xliff	host/commands/modem_simulator/files/numeric_operator.xml	/^<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">$/;"	n	uri:urn:oasis:names:tc:xliff:document:1.2
xliff	shared/auto/overlay/frameworks/base/core/res/res/values/config.xml	/^<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">$/;"	n	uri:urn:oasis:names:tc:xliff:document:1.2
xliff	shared/foldable/overlay/frameworks/base/core/res/res/values/config.xml	/^<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">$/;"	n	uri:urn:oasis:names:tc:xliff:document:1.2
xliff	shared/pc/overlay/frameworks/base/core/res/res/values/config.xml	/^<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">$/;"	n	uri:urn:oasis:names:tc:xliff:document:1.2
xliff	shared/phone/overlays/core/res/values/config.xml	/^<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">$/;"	n	uri:urn:oasis:names:tc:xliff:document:1.2
xmlChildWithName	host/commands/start/flag_forwarder.cc	/^xmlNodePtr xmlChildWithName(xmlNodePtr node, const std::string& name) {$/;"	f	namespace:__anon4552bec90111	typeref:typename:xmlNodePtr
xmlContent	host/commands/start/flag_forwarder.cc	/^std::string xmlContent(xmlNodePtr node) {$/;"	f	namespace:__anon4552bec90111	typeref:typename:std::string
xsgetn	common/libs/fs/shared_fd_stream.cpp	/^std::streamsize SharedFDStreambuf::xsgetn(char* dst, std::streamsize count) {$/;"	f	class:cuttlefish::SharedFDStreambuf	typeref:typename:std::streamsize
xsputn	common/libs/fs/shared_fd_stream.cpp	/^std::streamsize SharedFDStreambuf::xsputn(const char* src,$/;"	f	class:cuttlefish::SharedFDStreambuf	typeref:typename:std::streamsize
y	host/frontend/webrtc/connection_observer.cpp	/^  int32_t y;$/;"	m	struct:cuttlefish::multitouch_slot	typeref:typename:int32_t	file:
y	host/libs/confui/host_renderer.h	/^    std::uint32_t x, y, w, h;  \/\/ (x, y) is the top left$/;"	m	struct:cuttlefish::confui::ConfUiRenderer::Boundary	typeref:typename:std::uint32_t
y	host/libs/wayland/wayland_surface.h	/^    int32_t y;$/;"	m	struct:wayland::Surface::Region	typeref:typename:int32_t
y_	common/libs/confui/protocol_types.h	/^  int y_;$/;"	m	class:cuttlefish::confui::ConfUiUserTouchMessage	typeref:typename:int
y_	host/frontend/webrtc/cvd_video_frame_buffer.h	/^  std::vector<std::uint8_t> y_;$/;"	m	class:cuttlefish::CvdVideoFrameBuffer	typeref:typename:std::vector<std::uint8_t>
y_res	shared/config/config_foldable.json	/^	"y_res" : 2208,$/;"	n
y_res	shared/config/config_phone.json	/^	"y_res" : 1280,$/;"	n
y_res	shared/config/config_tablet.json	/^	"y_res" : 1800,$/;"	n
y_res	shared/config/config_tv.json	/^	"y_res" : 1080,$/;"	n
yuv_frame_updated_	guest/hals/camera/vsock_frame_provider.h	/^  std::condition_variable yuv_frame_updated_;$/;"	m	class:cuttlefish::VsockFrameProvider	typeref:typename:std::condition_variable
zwp_linux_buffer_params_implementation	host/libs/wayland/wayland_dmabuf.cpp	/^    zwp_linux_buffer_params_implementation = {$/;"	v	namespace:wayland::__anon8f5be4990111	typeref:typename:const struct zwp_linux_buffer_params_v1_interface
zwp_linux_dmabuf_v1_implementation	host/libs/wayland/wayland_dmabuf.cpp	/^    zwp_linux_dmabuf_v1_implementation = {$/;"	v	namespace:wayland::__anon8f5be4990111	typeref:typename:const struct zwp_linux_dmabuf_v1_interface
~AdbChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^AdbChannelHandler::~AdbChannelHandler() { adb_channel_->UnregisterObserver(); }$/;"	f	class:cuttlefish::webrtc_streaming::AdbChannelHandler
~AdbHandler	host/frontend/webrtc/adb_handler.cpp	/^AdbHandler::~AdbHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::AdbHandler
~Archive	common/libs/utils/archive.cpp	/^Archive::~Archive() {$/;"	f	class:cuttlefish::Archive
~AudioCommand	host/libs/audio_connector/commands.cpp	/^AudioCommand::~AudioCommand() {$/;"	f	class:cuttlefish::AudioCommand
~BluetoothChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^BluetoothChannelHandler::~BluetoothChannelHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::BluetoothChannelHandler
~BluetoothHandler	host/frontend/webrtc/bluetooth_handler.cpp	/^BluetoothHandler::~BluetoothHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::BluetoothHandler
~CachedStreamBuffer	guest/hals/camera/cached_stream_buffer.cpp	/^CachedStreamBuffer::~CachedStreamBuffer() {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::CachedStreamBuffer
~CameraChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^CameraChannelHandler::~CameraChannelHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::CameraChannelHandler
~CameraStreamer	host/frontend/webrtc/lib/camera_streamer.cpp	/^CameraStreamer::~CameraStreamer() { Disconnect(); }$/;"	f	class:cuttlefish::webrtc_streaming::CameraStreamer
~ChannelMonitor	host/commands/modem_simulator/channel_monitor.cpp	/^ChannelMonitor::~ChannelMonitor() {$/;"	f	class:cuttlefish::ChannelMonitor
~ClientHandler	host/frontend/webrtc/lib/client_handler.cpp	/^ClientHandler::~ClientHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::ClientHandler
~Closer	host/libs/graphics_detector/graphics_detector.cpp	/^  ~Closer() { on_close_(); }$/;"	f	class:cuttlefish::__anon29a199ff0111::Closer	file:
~Command	common/libs/utils/subprocess.cpp	/^Command::~Command() {$/;"	f	class:cuttlefish::Command
~ConnectionObserverImpl	host/frontend/webrtc/connection_observer.cpp	/^  virtual ~ConnectionObserverImpl() {$/;"	f	class:cuttlefish::ConnectionObserverImpl	file:
~ControlChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^ControlChannelHandler::~ControlChannelHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::ControlChannelHandler
~ControlMessage	common/libs/utils/unix_sockets.cpp	/^ControlMessage::~ControlMessage() {$/;"	f	class:cuttlefish::ControlMessage
~CurlWrapperImpl	host/commands/fetcher/curl_wrapper.cc	/^  ~CurlWrapperImpl() { curl_easy_cleanup(curl_); }$/;"	f	class:cuttlefish::__anondfffca8d0111::CurlWrapperImpl	file:
~CvdBootStateMachine	host/commands/run_cvd/boot_state_machine.cc	/^  ~CvdBootStateMachine() { boot_event_handler_.join(); }$/;"	f	class:cuttlefish::__anone7ed366f0111::CvdBootStateMachine	file:
~CvdVideoFrameBuffer	host/frontend/webrtc/cvd_video_frame_buffer.cpp	/^CvdVideoFrameBuffer::~CvdVideoFrameBuffer() {$/;"	f	class:cuttlefish::CvdVideoFrameBuffer
~Feature	host/libs/config/feature.cpp	/^Feature::~Feature() {}$/;"	f	class:cuttlefish::Feature
~FetcherConfig	host/libs/config/fetcher_config.cpp	/^FetcherConfig::~FetcherConfig() {$/;"	f	class:cuttlefish::FetcherConfig
~FileInstance	common/libs/fs/shared_fd.h	/^  virtual ~FileInstance() { Close(); }$/;"	f	class:cuttlefish::FileInstance
~GnssGrpcProxyServiceImpl	host/commands/gnss_grpc_proxy/gnss_grpc_proxy.cpp	/^    ~GnssGrpcProxyServiceImpl() {$/;"	f	class:GnssGrpcProxyServiceImpl	file:
~GuestSession	guest/hals/confirmationui/guest_session.h	/^    ~GuestSession() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::GuestSession
~HostServer	host/libs/confui/host_server.h	/^  virtual ~HostServer() {}$/;"	f	class:cuttlefish::confui::HostServer
~Impl	host/commands/secure_env/in_process_tpm.cpp	/^  ~Impl() {$/;"	f	class:cuttlefish::InProcessTpm::Impl	file:
~InputChannelHandler	host/frontend/webrtc/lib/client_handler.cpp	/^InputChannelHandler::~InputChannelHandler() {$/;"	f	class:cuttlefish::webrtc_streaming::InputChannelHandler
~KernelLogEventsHandler	host/frontend/webrtc/kernel_log_events_handler.cpp	/^KernelLogEventsHandler::~KernelLogEventsHandler() {$/;"	f	class:cuttlefish::KernelLogEventsHandler
~KmParamSet	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^    ~KmParamSet() { delete[] params; }$/;"	f	class:keymaster::V4_1::__anon49de69e60111::KmParamSet	file:
~ModemSimulator	host/commands/modem_simulator/modem_simulator.cpp	/^ModemSimulator::~ModemSimulator() {$/;"	f	class:cuttlefish::ModemSimulator
~NetlinkClient	common/libs/net/netlink_client.h	/^  virtual ~NetlinkClient() {}$/;"	f	class:cuttlefish::NetlinkClient
~ObjectSlot	host/commands/secure_env/tpm_resource_manager.cpp	/^TpmResourceManager::ObjectSlot::~ObjectSlot() {$/;"	f	class:cuttlefish::TpmResourceManager::ObjectSlot
~ReleaseFence	guest/hals/camera/cached_stream_buffer.cpp	/^ReleaseFence::~ReleaseFence() {$/;"	f	class:android::hardware::camera::device::V3_4::implementation::ReleaseFence
~RemoteGateKeeperDevice	guest/hals/gatekeeper/remote/remote_gatekeeper.cpp	/^RemoteGateKeeperDevice::~RemoteGateKeeperDevice() {$/;"	f	class:gatekeeper::RemoteGateKeeperDevice
~RemoteKeyMintDevice	guest/hals/keymint/remote/remote_keymint_device.cpp	/^RemoteKeyMintDevice::~RemoteKeyMintDevice() {}$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintDevice
~RemoteKeyMintOperation	guest/hals/keymint/remote/remote_keymint_operation.cpp	/^RemoteKeyMintOperation::~RemoteKeyMintOperation() {$/;"	f	class:aidl::android::hardware::security::keymint::RemoteKeyMintOperation
~RemoteKeymaster	guest/hals/keymaster/remote/remote_keymaster.cpp	/^RemoteKeymaster::~RemoteKeymaster() {$/;"	f	class:keymaster::RemoteKeymaster
~RemoteKeymaster	guest/hals/keymint/remote/remote_keymaster.cpp	/^RemoteKeymaster::~RemoteKeymaster() {}$/;"	f	class:keymaster::RemoteKeymaster
~RemoteKeymaster4Device	guest/hals/keymaster/remote/remote_keymaster4_device.cpp	/^RemoteKeymaster4Device::~RemoteKeymaster4Device() {}$/;"	f	class:keymaster::V4_1::RemoteKeymaster4Device
~RemoteSecureClock	guest/hals/keymint/remote/remote_secure_clock.cpp	/^RemoteSecureClock::~RemoteSecureClock() {}$/;"	f	class:aidl::android::hardware::security::secureclock::RemoteSecureClock
~RemoteSharedSecret	guest/hals/keymint/remote/remote_shared_secret.cpp	/^RemoteSharedSecret::~RemoteSharedSecret() {}$/;"	f	class:aidl::android::hardware::security::sharedsecret::RemoteSharedSecret
~ResourceManager	host/libs/allocd/resource_manager.cpp	/^ResourceManager::~ResourceManager() {$/;"	f	class:cuttlefish::ResourceManager
~RilSocket	guest/hals/ril/reference-libril/RilSocket.h	/^        virtual ~RilSocket(){}$/;"	f	class:RilSocket
~ScopedMMap	common/libs/fs/shared_fd.cpp	/^ScopedMMap::~ScopedMMap() {$/;"	f	class:cuttlefish::ScopedMMap
~Session	host/libs/allocd/resource_manager.h	/^  ~Session() { ReleaseAllResources(); }$/;"	f	class:cuttlefish::Session
~ShmBuffer	host/libs/audio_connector/buffers.cpp	/^ShmBuffer::~ShmBuffer() {$/;"	f	class:cuttlefish::ShmBuffer
~SocketSender	common/frontend/socket_vsock_proxy/main.cpp	/^  ~SocketSender() {$/;"	f	class:__anon913036200111::SocketSender	file:
~SoftGateKeeper	host/commands/secure_env/soft_gatekeeper.h	/^    virtual ~SoftGateKeeper() {}$/;"	f	class:gatekeeper::SoftGateKeeper
~SysVMessageQueue	host/libs/msg_queue/msg_queue.cc	/^SysVMessageQueue::~SysVMessageQueue(void) {$/;"	f	class:cuttlefish::SysVMessageQueue
~TestTpm	host/commands/secure_env/test_tpm.cpp	/^TestTpm::~TestTpm() { Esys_Finalize(&esys_); }$/;"	f	class:cuttlefish::TestTpm
~ThreadJoiner	common/libs/utils/subprocess.cpp	/^  ~ThreadJoiner() {$/;"	f	class:cuttlefish::ThreadJoiner	file:
~ThreadLooper	host/commands/modem_simulator/thread_looper.cpp	/^ThreadLooper::~ThreadLooper() { Stop(); }$/;"	f	class:cuttlefish::ThreadLooper
~TpmKeymasterEnforcement	host/commands/secure_env/tpm_keymaster_enforcement.cpp	/^TpmKeymasterEnforcement::~TpmKeymasterEnforcement() {$/;"	f	class:cuttlefish::TpmKeymasterEnforcement
~TpmResourceManager	host/commands/secure_env/tpm_resource_manager.cpp	/^TpmResourceManager::~TpmResourceManager() {$/;"	f	class:cuttlefish::TpmResourceManager
~TrustyConfirmationUI	guest/hals/confirmationui/TrustyConfirmationUI.cpp	/^TrustyConfirmationUI::~TrustyConfirmationUI() {$/;"	f	class:android::hardware::confirmationui::V1_0::implementation::TrustyConfirmationUI
~VirtualDeviceBase	guest/commands/vsoc_input_service/virtual_device_base.cpp	/^VirtualDeviceBase::~VirtualDeviceBase() {$/;"	f	class:VirtualDeviceBase
~VsockCameraDevice	guest/hals/camera/vsock_camera_device_3_4.cpp	/^VsockCameraDevice::~VsockCameraDevice() { ALOGI("%s", __FUNCTION__); }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDevice
~VsockCameraDeviceSession	guest/hals/camera/vsock_camera_device_session_3_4.cpp	/^VsockCameraDeviceSession::~VsockCameraDeviceSession() { close(); }$/;"	f	class:android::hardware::camera::device::V3_4::implementation::VsockCameraDeviceSession
~VsockCameraProvider	guest/hals/camera/vsock_camera_provider_2_7.cpp	/^VsockCameraProvider::~VsockCameraProvider() {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraProvider
~VsockCameraServer	guest/hals/camera/vsock_camera_server.cpp	/^VsockCameraServer::~VsockCameraServer() {$/;"	f	class:android::hardware::camera::provider::V2_7::implementation::VsockCameraServer
~VsockConnection	common/libs/utils/vsock_connection.cpp	/^VsockConnection::~VsockConnection() { Disconnect(); }$/;"	f	class:cuttlefish::VsockConnection
~VsockFrameProvider	guest/hals/camera/vsock_frame_provider.cpp	/^VsockFrameProvider::~VsockFrameProvider() { stop(); }$/;"	f	class:cuttlefish::VsockFrameProvider
~VsockServerConnection	common/libs/utils/vsock_connection.cpp	/^VsockServerConnection::~VsockServerConnection() { ServerShutdown(); }$/;"	f	class:cuttlefish::VsockServerConnection
~WaylandServer	host/libs/wayland/wayland_server.cpp	/^WaylandServer::~WaylandServer() {$/;"	f	class:wayland::WaylandServer
~WmediumdController	host/libs/wmediumd_controller/wmediumd_controller.h	/^  virtual ~WmediumdController() {}$/;"	f	class:cuttlefish::WmediumdController
~WmediumdMessage	host/libs/wmediumd_controller/wmediumd_api_protocol.h	/^  virtual ~WmediumdMessage() {}$/;"	f	class:cuttlefish::WmediumdMessage
~WsConnectionContextImpl	host/frontend/webrtc/lib/ws_connection.cpp	/^WsConnectionContextImpl::~WsConnectionContextImpl() {$/;"	f	class:WsConnectionContextImpl
~WsConnectionImpl	host/frontend/webrtc/lib/ws_connection.cpp	/^WsConnectionImpl::~WsConnectionImpl() {$/;"	f	class:WsConnectionImpl
